

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Oct 23 11:12:54 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    68                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           ; Version 2.10
    71                           ; Generated 31/07/2019 GMT
    72                           ; 
    73                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC18F8722 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     
   105                           	psect	idataBANK0
   106  002E9E                     __pidataBANK0:
   107                           	opt callstack 0
   108                           
   109                           ;initializer for _rear
   110  002E9E  FFFF               	dw	65535
   111                           
   112                           ;initializer for _front
   113  002EA0  FFFF               	dw	65535
   114                           
   115                           ;initializer for _secondReadRB0
   116  002EA2  01                 	db	1
   117                           
   118                           ;initializer for _firstReadRB0
   119  002EA3  01                 	db	1
   120                           
   121                           ;initializer for _secondReadRA5
   122  002EA4  01                 	db	1
   123                           
   124                           ;initializer for _firstReadRA5
   125  002EA5  01                 	db	1
   126  0000                     _LATCbits	set	3979
   127  0000                     _LATAbits	set	3977
   128  0000                     _TRISCbits	set	3988
   129  0000                     _TRISAbits	set	3986
   130  0000                     _LATFbits	set	3982
   131  0000                     _TRISFbits	set	3991
   132  0000                     _PORTBbits	set	3969
   133  0000                     _PORTAbits	set	3968
   134  0000                     _TMR1L	set	4046
   135  0000                     _TMR1H	set	4047
   136  0000                     _T1CON	set	4045
   137  0000                     _PIR1bits	set	3998
   138  0000                     _PIE1bits	set	3997
   139  0000                     _TMR0L	set	4054
   140  0000                     _T0CON	set	4053
   141  0000                     _INTCONbits	set	4082
   142  0000                     _TRISB	set	3987
   143  0000                     _LATB	set	3978
   144  0000                     _TRISA	set	3986
   145  0000                     _LATA	set	3977
   146  0000                     _TRISD	set	3989
   147  0000                     _LATD	set	3980
   148  0000                     _ADCON1	set	4033
   149  0000                     _TRISC	set	3988
   150  0000                     _LATC	set	3979
   151  0000                     _OSCCON	set	4051
   152  0000                     _LATDbits	set	3980
   153                           
   154                           	psect	smallconst
   155  001000                     __psmallconst:
   156                           	opt callstack 0
   157  001000  00                 	db	0
   158  001001                     STR_1:
   159  001001  4C                 	db	76	;'L'
   160  001002  61                 	db	97	;'a'
   161  001003  62                 	db	98	;'b'
   162  001004  20                 	db	32
   163  001005  34                 	db	52	;'4'
   164  001006  20                 	db	32
   165  001007  20                 	db	32
   166  001008  20                 	db	32
   167  001009  20                 	db	32
   168  00100A  31                 	db	49	;'1'
   169  00100B  37                 	db	55	;'7'
   170  00100C  31                 	db	49	;'1'
   171  00100D  30                 	db	48	;'0'
   172  00100E  33                 	db	51	;'3'
   173  00100F  36                 	db	54	;'6'
   174  001010  34                 	db	52	;'4'
   175  001011  00                 	db	0
   176  001012                     STR_2:
   177  001012  54                 	db	84	;'T'
   178  001013  69                 	db	105	;'i'
   179  001014  6D                 	db	109	;'m'
   180  001015  65                 	db	101	;'e'
   181  001016  00                 	db	0
   182  001017                     STR_3:
   183  001017  6D                 	db	109	;'m'
   184  001018  73                 	db	115	;'s'
   185  001019  00                 	db	0
   186                           
   187                           ; #config settings
   188  00101A  00                 	db	0	; dummy byte at the end
   189  0000                     
   190                           	psect	cinit
   191  0029EA                     __pcinit:
   192                           	opt callstack 0
   193  0029EA                     start_initialization:
   194                           	opt callstack 0
   195  0029EA                     __initialization:
   196                           	opt callstack 0
   197                           
   198                           ; Initialize objects allocated to BANK0 (8 bytes)
   199                           ; load TBLPTR registers with __pidataBANK0
   200  0029EA  0E9E               	movlw	low __pidataBANK0
   201  0029EC  6EF6               	movwf	tblptrl,c
   202  0029EE  0E2E               	movlw	high __pidataBANK0
   203  0029F0  6EF7               	movwf	tblptrh,c
   204  0029F2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   205  0029F4  6EF8               	movwf	tblptru,c
   206  0029F6  EE00  F0C3         	lfsr	0,__pdataBANK0
   207  0029FA  EE10 F008          	lfsr	1,8
   208  0029FE                     copy_data0:
   209  0029FE  0009               	tblrd		*+
   210  002A00  CFF5 FFEE          	movff	tablat,postinc0
   211  002A04  50E5               	movf	postdec1,w,c
   212  002A06  50E1               	movf	fsr1l,w,c
   213  002A08  E1FA               	bnz	copy_data0
   214                           
   215                           ; Clear objects allocated to BIGRAM (300 bytes)
   216  002A0A  EE01  F064         	lfsr	0,__pbssBIGRAM
   217  002A0E  EE11 F02C          	lfsr	1,300
   218  002A12                     clear_0:
   219  002A12  6AEE               	clrf	postinc0,c
   220  002A14  50E5               	movf	postdec1,w,c
   221  002A16  50E1               	movf	fsr1l,w,c
   222  002A18  E1FC               	bnz	clear_0
   223  002A1A  50E2               	movf	fsr1h,w,c
   224  002A1C  E1FA               	bnz	clear_0
   225                           
   226                           ; Clear objects allocated to BANK1 (100 bytes)
   227  002A1E  EE01  F000         	lfsr	0,__pbssBANK1
   228  002A22  0E64               	movlw	100
   229  002A24                     clear_1:
   230  002A24  6AEE               	clrf	postinc0,c
   231  002A26  06E8               	decf	wreg,f,c
   232  002A28  E1FD               	bnz	clear_1
   233                           
   234                           ; Clear objects allocated to BANK0 (48 bytes)
   235  002A2A  EE00  F093         	lfsr	0,__pbssBANK0
   236  002A2E  0E30               	movlw	48
   237  002A30                     clear_2:
   238  002A30  6AEE               	clrf	postinc0,c
   239  002A32  06E8               	decf	wreg,f,c
   240  002A34  E1FD               	bnz	clear_2
   241                           
   242                           ; Clear objects allocated to COMRAM (23 bytes)
   243  002A36  EE00  F034         	lfsr	0,__pbssCOMRAM
   244  002A3A  0E17               	movlw	23
   245  002A3C                     clear_3:
   246  002A3C  6AEE               	clrf	postinc0,c
   247  002A3E  06E8               	decf	wreg,f,c
   248  002A40  E1FD               	bnz	clear_3
   249  002A42                     end_of_initialization:
   250                           	opt callstack 0
   251  002A42                     __end_of__initialization:
   252                           	opt callstack 0
   253  002A42  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   254  002A44  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   255  002A46  0100               	movlb	0
   256  002A48  EF37  F00C         	goto	_main	;jump to C main() function
   257                           
   258                           	psect	bssCOMRAM
   259  000034                     __pbssCOMRAM:
   260                           	opt callstack 0
   261  000034                     _countRB0_1:
   262                           	opt callstack 0
   263  000034                     	ds	4
   264  000038                     _countRB0:
   265                           	opt callstack 0
   266  000038                     	ds	4
   267  00003C                     _countRA5_1:
   268                           	opt callstack 0
   269  00003C                     	ds	4
   270  000040                     _countRA5:
   271                           	opt callstack 0
   272  000040                     	ds	4
   273  000044                     _prev_time_ms:
   274                           	opt callstack 0
   275  000044                     	ds	4
   276  000048                     _count:
   277                           	opt callstack 0
   278  000048                     	ds	2
   279  00004A                     _value:
   280                           	opt callstack 0
   281  00004A                     	ds	1
   282                           
   283                           	psect	bssBANK0
   284  000093                     __pbssBANK0:
   285                           	opt callstack 0
   286  000093                     _task_id:
   287                           	opt callstack 0
   288  000093                     	ds	20
   289  0000A7                     _LED_state:
   290                           	opt callstack 0
   291  0000A7                     	ds	16
   292  0000B7                     _time_ms:
   293                           	opt callstack 0
   294  0000B7                     	ds	4
   295  0000BB                     _remove_task_counter:
   296                           	opt callstack 0
   297  0000BB                     	ds	2
   298  0000BD                     _stateRB0:
   299                           	opt callstack 0
   300  0000BD                     	ds	1
   301  0000BE                     _stateRA5:
   302                           	opt callstack 0
   303  0000BE                     	ds	1
   304  0000BF                     _head:
   305                           	opt callstack 0
   306  0000BF                     	ds	1
   307  0000C0                     _num_task:
   308                           	opt callstack 0
   309  0000C0                     	ds	1
   310  0000C1                     _RB0_pressed:
   311                           	opt callstack 0
   312  0000C1                     	ds	1
   313  0000C2                     _RA5_pressed:
   314                           	opt callstack 0
   315  0000C2                     	ds	1
   316                           
   317                           	psect	dataBANK0
   318  0000C3                     __pdataBANK0:
   319                           	opt callstack 0
   320  0000C3                     _rear:
   321                           	opt callstack 0
   322  0000C3                     	ds	2
   323  0000C5                     _front:
   324                           	opt callstack 0
   325  0000C5                     	ds	2
   326  0000C7                     _secondReadRB0:
   327                           	opt callstack 0
   328  0000C7                     	ds	1
   329  0000C8                     _firstReadRB0:
   330                           	opt callstack 0
   331  0000C8                     	ds	1
   332  0000C9                     _secondReadRA5:
   333                           	opt callstack 0
   334  0000C9                     	ds	1
   335  0000CA                     _firstReadRA5:
   336                           	opt callstack 0
   337  0000CA                     	ds	1
   338                           
   339                           	psect	bssBANK1
   340  000100                     __pbssBANK1:
   341                           	opt callstack 0
   342  000100                     _ready_queue:
   343                           	opt callstack 0
   344  000100                     	ds	100
   345                           
   346                           	psect	bssBIGRAM
   347  000164                     __pbssBIGRAM:
   348                           	opt callstack 0
   349  000164                     _task_list:
   350                           	opt callstack 0
   351  000164                     	ds	300
   352                           
   353                           	psect	cstackBANK0
   354  000060                     __pcstackBANK0:
   355                           	opt callstack 0
   356  000060                     ??_removeTask:
   357  000060                     ?_readButtonRA5:
   358                           	opt callstack 0
   359  000060                     ?_readButtonRB0:
   360                           	opt callstack 0
   361  000060                     ?___wmul:
   362                           	opt callstack 0
   363  000060                     ?___awmod:
   364                           	opt callstack 0
   365  000060                     ?_get_time:
   366                           	opt callstack 0
   367  000060                     ?___lldiv:
   368                           	opt callstack 0
   369  000060                     ?___llmod:
   370                           	opt callstack 0
   371  000060                     SendByteBBSPI@output:
   372                           	opt callstack 0
   373  000060                     ___wmul@multiplier:
   374                           	opt callstack 0
   375  000060                     ___awmod@dividend:
   376                           	opt callstack 0
   377  000060                     ___lldiv@dividend:
   378                           	opt callstack 0
   379  000060                     ___llmod@dividend:
   380                           	opt callstack 0
   381                           
   382                           ; 4 bytes @ 0x0
   383  000060                     	ds	1
   384  000061                     SendByteBBSPI@bitcount:
   385                           	opt callstack 0
   386                           
   387                           ; 1 bytes @ 0x1
   388  000061                     	ds	1
   389  000062                     SendByteBBSPI@input:
   390                           	opt callstack 0
   391  000062                     ___wmul@multiplicand:
   392                           	opt callstack 0
   393  000062                     ___awmod@divisor:
   394                           	opt callstack 0
   395                           
   396                           ; 2 bytes @ 0x2
   397  000062                     	ds	1
   398  000063                     Port_BBSPIInit@port_dir:
   399                           	opt callstack 0
   400  000063                     WritePort_BBSPI@a:
   401                           	opt callstack 0
   402                           
   403                           ; 1 bytes @ 0x3
   404  000063                     	ds	1
   405  000064                     removeTask@pos:
   406                           	opt callstack 0
   407  000064                     WritePort_BBSPI@port_add:
   408                           	opt callstack 0
   409  000064                     ___awmod@counter:
   410                           	opt callstack 0
   411  000064                     ___wmul@product:
   412                           	opt callstack 0
   413  000064                     ___lldiv@divisor:
   414                           	opt callstack 0
   415  000064                     ___llmod@divisor:
   416                           	opt callstack 0
   417                           
   418                           ; 4 bytes @ 0x4
   419  000064                     	ds	1
   420  000065                     removeTask@idx:
   421                           	opt callstack 0
   422  000065                     LCDPutChar@ch:
   423                           	opt callstack 0
   424  000065                     LCDPutInst@ch:
   425                           	opt callstack 0
   426  000065                     ___awmod@sign:
   427                           	opt callstack 0
   428                           
   429                           ; 1 bytes @ 0x5
   430  000065                     	ds	1
   431  000066                     ??_LCDInit:
   432  000066                     ??_getSizeQueue:
   433  000066                     remove_timer@id:
   434                           	opt callstack 0
   435  000066                     LCDMoveCursor@pos:
   436                           	opt callstack 0
   437  000066                     queueInitialize@i:
   438                           	opt callstack 0
   439  000066                     LCDPutStr@ptr:
   440                           	opt callstack 0
   441  000066                     addTask@period:
   442                           	opt callstack 0
   443                           
   444                           ; 4 bytes @ 0x6
   445  000066                     	ds	1
   446  000067                     LCDMoveCursor@line:
   447                           	opt callstack 0
   448                           
   449                           ; 1 bytes @ 0x7
   450  000067                     	ds	1
   451  000068                     ?_dequeue:
   452                           	opt callstack 0
   453  000068                     ___llmod@counter:
   454                           	opt callstack 0
   455  000068                     initializeTaskList@i:
   456                           	opt callstack 0
   457  000068                     _LCDMoveCursor$1108:
   458                           	opt callstack 0
   459  000068                     ___lldiv@quotient:
   460                           	opt callstack 0
   461                           
   462                           ; 4 bytes @ 0x8
   463  000068                     	ds	2
   464  00006A                     ??_start_timer:
   465  00006A                     LCDMoveCursor@position:
   466                           	opt callstack 0
   467  00006A                     addTask@delay:
   468                           	opt callstack 0
   469                           
   470                           ; 4 bytes @ 0xA
   471  00006A                     	ds	1
   472  00006B                     LCDPrint@pos:
   473                           	opt callstack 0
   474  00006B                     LCDPrintChar@pos:
   475                           	opt callstack 0
   476                           
   477                           ; 1 bytes @ 0xB
   478  00006B                     	ds	1
   479  00006C                     start_timer@timer_vaddr:
   480                           	opt callstack 0
   481  00006C                     LCDPrintChar@ch:
   482                           	opt callstack 0
   483  00006C                     ___lldiv@counter:
   484                           	opt callstack 0
   485  00006C                     LCDPrint@ptr:
   486                           	opt callstack 0
   487                           
   488                           ; 2 bytes @ 0xC
   489  00006C                     	ds	1
   490  00006D                     LCDPrintChar@line:
   491                           	opt callstack 0
   492  00006D                     dequeue@idx:
   493                           	opt callstack 0
   494                           
   495                           ; 2 bytes @ 0xD
   496  00006D                     	ds	1
   497  00006E                     LCDPrint@line:
   498                           	opt callstack 0
   499  00006E                     blinking_LED@idx_ptr:
   500                           	opt callstack 0
   501  00006E                     printTime_ms@data_ptr:
   502                           	opt callstack 0
   503  00006E                     handleButton@data_ptr:
   504                           	opt callstack 0
   505  00006E                     addTask@ptr:
   506                           	opt callstack 0
   507                           
   508                           ; 3 bytes @ 0xE
   509  00006E                     	ds	1
   510  00006F                     dequeue@temp:
   511                           	opt callstack 0
   512                           
   513                           ; 5 bytes @ 0xF
   514  00006F                     	ds	1
   515  000070                     ??_handleButton:
   516  000070                     ??_blinking_LED:
   517  000070                     printTime_ms@temp:
   518                           	opt callstack 0
   519                           
   520                           ; 1 bytes @ 0x10
   521  000070                     	ds	1
   522  000071                     printTime_ms@i:
   523                           	opt callstack 0
   524  000071                     addTask@data:
   525                           	opt callstack 0
   526                           
   527                           ; 2 bytes @ 0x11
   528  000071                     	ds	1
   529  000072                     handleButton@checkRA5:
   530                           	opt callstack 0
   531  000072                     printTime_ms@current_time:
   532                           	opt callstack 0
   533                           
   534                           ; 4 bytes @ 0x12
   535  000072                     	ds	1
   536  000073                     ??_addTask:
   537                           
   538                           ; 1 bytes @ 0x13
   539  000073                     	ds	1
   540  000074                     blinking_LED@idx:
   541                           	opt callstack 0
   542  000074                     handleButton@checkRB0:
   543                           	opt callstack 0
   544                           
   545                           ; 2 bytes @ 0x14
   546  000074                     	ds	2
   547  000076                     selectReadyTask@node:
   548                           	opt callstack 0
   549                           
   550                           ; 5 bytes @ 0x16
   551  000076                     	ds	5
   552  00007B                     
   553                           ; 1 bytes @ 0x1B
   554  00007B                     	ds	4
   555  00007F                     addTask@prev:
   556                           	opt callstack 0
   557                           
   558                           ; 2 bytes @ 0x1F
   559  00007F                     	ds	2
   560  000081                     addTask@sum:
   561                           	opt callstack 0
   562                           
   563                           ; 2 bytes @ 0x21
   564  000081                     	ds	2
   565  000083                     addTask@cur:
   566                           	opt callstack 0
   567                           
   568                           ; 2 bytes @ 0x23
   569  000083                     	ds	2
   570  000085                     addTask@idx:
   571                           	opt callstack 0
   572                           
   573                           ; 1 bytes @ 0x25
   574  000085                     	ds	1
   575  000086                     register_timer@period:
   576                           	opt callstack 0
   577                           
   578                           ; 4 bytes @ 0x26
   579  000086                     	ds	4
   580  00008A                     register_timer@delay:
   581                           	opt callstack 0
   582                           
   583                           ; 4 bytes @ 0x2A
   584  00008A                     	ds	4
   585  00008E                     register_timer@callback:
   586                           	opt callstack 0
   587                           
   588                           ; 3 bytes @ 0x2E
   589  00008E                     	ds	3
   590  000091                     register_timer@data:
   591                           	opt callstack 0
   592                           
   593                           ; 2 bytes @ 0x31
   594  000091                     	ds	2
   595  000093                     
   596                           ; 1 bytes @ 0x33
   597                           
   598                           	psect	cstackCOMRAM
   599  000001                     __pcstackCOMRAM:
   600                           	opt callstack 0
   601  000001                     ??i2_removeTask:
   602  000001                     ?i2___wmul:
   603                           	opt callstack 0
   604  000001                     ?i2___awmod:
   605                           	opt callstack 0
   606  000001                     i2___wmul@multiplier:
   607                           	opt callstack 0
   608  000001                     i2___awmod@dividend:
   609                           	opt callstack 0
   610                           
   611                           ; 2 bytes @ 0x0
   612  000001                     	ds	2
   613  000003                     i2___wmul@multiplicand:
   614                           	opt callstack 0
   615  000003                     i2___awmod@divisor:
   616                           	opt callstack 0
   617                           
   618                           ; 2 bytes @ 0x2
   619  000003                     	ds	2
   620  000005                     i2removeTask@pos:
   621                           	opt callstack 0
   622  000005                     i2___awmod@counter:
   623                           	opt callstack 0
   624  000005                     i2___wmul@product:
   625                           	opt callstack 0
   626                           
   627                           ; 2 bytes @ 0x4
   628  000005                     	ds	1
   629  000006                     i2removeTask@idx:
   630                           	opt callstack 0
   631  000006                     i2___awmod@sign:
   632                           	opt callstack 0
   633                           
   634                           ; 1 bytes @ 0x5
   635  000006                     	ds	1
   636  000007                     ??i2_getSizeQueue:
   637                           
   638                           ; 1 bytes @ 0x6
   639  000007                     	ds	2
   640  000009                     ??_isFullQueue:
   641                           
   642                           ; 1 bytes @ 0x8
   643  000009                     	ds	1
   644  00000A                     enqueue@ptr:
   645                           	opt callstack 0
   646                           
   647                           ; 3 bytes @ 0x9
   648  00000A                     	ds	3
   649  00000D                     enqueue@data:
   650                           	opt callstack 0
   651                           
   652                           ; 2 bytes @ 0xC
   653  00000D                     	ds	2
   654  00000F                     ??_handleListHead:
   655                           
   656                           ; 1 bytes @ 0xE
   657  00000F                     	ds	16
   658  00001F                     _handleListHead$1816:
   659                           	opt callstack 0
   660                           
   661                           ; 3 bytes @ 0x1E
   662  00001F                     	ds	3
   663  000022                     _handleListHead$1821:
   664                           	opt callstack 0
   665                           
   666                           ; 2 bytes @ 0x21
   667  000022                     	ds	2
   668  000024                     _handleListHead$1822:
   669                           	opt callstack 0
   670                           
   671                           ; 2 bytes @ 0x23
   672  000024                     	ds	2
   673  000026                     handleListHead@prev:
   674                           	opt callstack 0
   675                           
   676                           ; 2 bytes @ 0x25
   677  000026                     	ds	2
   678  000028                     handleListHead@sum:
   679                           	opt callstack 0
   680                           
   681                           ; 2 bytes @ 0x27
   682  000028                     	ds	2
   683  00002A                     handleListHead@cur:
   684                           	opt callstack 0
   685                           
   686                           ; 2 bytes @ 0x29
   687  00002A                     	ds	2
   688  00002C                     handleListHead@pos:
   689                           	opt callstack 0
   690                           
   691                           ; 2 bytes @ 0x2B
   692  00002C                     	ds	2
   693  00002E                     ??_timer_interrupt:
   694                           
   695                           ; 1 bytes @ 0x2D
   696  00002E                     	ds	6
   697                           
   698 ;;
   699 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   700 ;;
   701 ;; *************** function _main *****************
   702 ;; Defined at:
   703 ;;		line 63 in file "main.c"
   704 ;; Parameters:    Size  Location     Type
   705 ;;		None
   706 ;; Auto vars:     Size  Location     Type
   707 ;;		None
   708 ;; Return value:  Size  Location     Type
   709 ;;                  1    wreg      void 
   710 ;; Registers used:
   711 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
   712 ;; Tracked objects:
   713 ;;		On entry : 0/0
   714 ;;		On exit  : 0/0
   715 ;;		Unchanged: 0/0
   716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   721 ;;Total ram usage:        0 bytes
   722 ;; Hardware stack levels required when called:   14
   723 ;; This function calls:
   724 ;;		_LCDPrint
   725 ;;		___awmod
   726 ;;		_dispatch
   727 ;;		_printTime_ms
   728 ;;		_register_timer
   729 ;;		_remove_timer
   730 ;;		_system_initialize
   731 ;; This function is called by:
   732 ;;		Startup code after reset
   733 ;; This function uses a non-reentrant model
   734 ;;
   735                           
   736                           	psect	text0
   737  00186E                     __ptext0:
   738                           	opt callstack 0
   739  00186E                     _main:
   740                           	opt callstack 17
   741  00186E                     
   742                           ;main.c: 64:     system_initialize();
   743  00186E  ECE5  F016         	call	_system_initialize	;wreg free
   744                           
   745                           ;main.c: 66:     task_id[0] = register_timer(500, 0, blinking_LED, 0);
   746  001872  0EF4               	movlw	244
   747  001874  0100               	movlb	0	; () banked
   748  001876  6F86               	movwf	register_timer@period& (0+255),b
   749  001878  0E01               	movlw	1
   750  00187A  6F87               	movwf	(register_timer@period+1)& (0+255),b
   751  00187C  0E00               	movlw	0
   752  00187E  6F88               	movwf	(register_timer@period+2)& (0+255),b
   753  001880  0E00               	movlw	0
   754  001882  6F89               	movwf	(register_timer@period+3)& (0+255),b
   755  001884  0E00               	movlw	0
   756  001886  6F8A               	movwf	register_timer@delay& (0+255),b
   757  001888  0E00               	movlw	0
   758  00188A  6F8B               	movwf	(register_timer@delay+1)& (0+255),b
   759  00188C  0E00               	movlw	0
   760  00188E  6F8C               	movwf	(register_timer@delay+2)& (0+255),b
   761  001890  0E00               	movlw	0
   762  001892  6F8D               	movwf	(register_timer@delay+3)& (0+255),b
   763  001894  0E72               	movlw	low _blinking_LED
   764  001896  6F8E               	movwf	register_timer@callback& (0+255),b
   765  001898  0E1B               	movlw	high _blinking_LED
   766  00189A  6F8F               	movwf	(register_timer@callback+1)& (0+255),b
   767  00189C  0E00               	movlw	low (_blinking_LED shr (0+16))
   768  00189E  6F90               	movwf	(register_timer@callback+2)& (0+255),b
   769  0018A0  0E00               	movlw	0
   770  0018A2  6F91               	movwf	register_timer@data& (0+255),b
   771  0018A4  0E00               	movlw	0
   772  0018A6  6F92               	movwf	(register_timer@data+1)& (0+255),b
   773  0018A8  EC39  F016         	call	_register_timer	;wreg free
   774  0018AC  0100               	movlb	0	; () banked
   775  0018AE  6F93               	movwf	_task_id& (0+255),b
   776                           
   777                           ;main.c: 67:     task_id[1] = register_timer(1000, 200, blinking_LED, 1);
   778  0018B0  0EE8               	movlw	232
   779  0018B2  6F86               	movwf	register_timer@period& (0+255),b
   780  0018B4  0E03               	movlw	3
   781  0018B6  6F87               	movwf	(register_timer@period+1)& (0+255),b
   782  0018B8  0E00               	movlw	0
   783  0018BA  6F88               	movwf	(register_timer@period+2)& (0+255),b
   784  0018BC  0E00               	movlw	0
   785  0018BE  6F89               	movwf	(register_timer@period+3)& (0+255),b
   786  0018C0  0EC8               	movlw	200
   787  0018C2  6F8A               	movwf	register_timer@delay& (0+255),b
   788  0018C4  0E00               	movlw	0
   789  0018C6  6F8B               	movwf	(register_timer@delay+1)& (0+255),b
   790  0018C8  0E00               	movlw	0
   791  0018CA  6F8C               	movwf	(register_timer@delay+2)& (0+255),b
   792  0018CC  0E00               	movlw	0
   793  0018CE  6F8D               	movwf	(register_timer@delay+3)& (0+255),b
   794  0018D0  0E72               	movlw	low _blinking_LED
   795  0018D2  6F8E               	movwf	register_timer@callback& (0+255),b
   796  0018D4  0E1B               	movlw	high _blinking_LED
   797  0018D6  6F8F               	movwf	(register_timer@callback+1)& (0+255),b
   798  0018D8  0E00               	movlw	low (_blinking_LED shr (0+16))
   799  0018DA  6F90               	movwf	(register_timer@callback+2)& (0+255),b
   800  0018DC  0E01               	movlw	1
   801  0018DE  6F91               	movwf	register_timer@data& (0+255),b
   802  0018E0  0E00               	movlw	0
   803  0018E2  6F92               	movwf	(register_timer@data+1)& (0+255),b
   804  0018E4  EC39  F016         	call	_register_timer	;wreg free
   805  0018E8  0100               	movlb	0	; () banked
   806  0018EA  6F94               	movwf	(_task_id+1)& (0+255),b
   807                           
   808                           ;main.c: 68:     task_id[2] = register_timer(3000, 4000, blinking_LED, 2);
   809  0018EC  0EB8               	movlw	184
   810  0018EE  6F86               	movwf	register_timer@period& (0+255),b
   811  0018F0  0E0B               	movlw	11
   812  0018F2  6F87               	movwf	(register_timer@period+1)& (0+255),b
   813  0018F4  0E00               	movlw	0
   814  0018F6  6F88               	movwf	(register_timer@period+2)& (0+255),b
   815  0018F8  0E00               	movlw	0
   816  0018FA  6F89               	movwf	(register_timer@period+3)& (0+255),b
   817  0018FC  0EA0               	movlw	160
   818  0018FE  6F8A               	movwf	register_timer@delay& (0+255),b
   819  001900  0E0F               	movlw	15
   820  001902  6F8B               	movwf	(register_timer@delay+1)& (0+255),b
   821  001904  0E00               	movlw	0
   822  001906  6F8C               	movwf	(register_timer@delay+2)& (0+255),b
   823  001908  0E00               	movlw	0
   824  00190A  6F8D               	movwf	(register_timer@delay+3)& (0+255),b
   825  00190C  0E72               	movlw	low _blinking_LED
   826  00190E  6F8E               	movwf	register_timer@callback& (0+255),b
   827  001910  0E1B               	movlw	high _blinking_LED
   828  001912  6F8F               	movwf	(register_timer@callback+1)& (0+255),b
   829  001914  0E00               	movlw	low (_blinking_LED shr (0+16))
   830  001916  6F90               	movwf	(register_timer@callback+2)& (0+255),b
   831  001918  0E02               	movlw	2
   832  00191A  6F91               	movwf	register_timer@data& (0+255),b
   833  00191C  0E00               	movlw	0
   834  00191E  6F92               	movwf	(register_timer@data+1)& (0+255),b
   835  001920  EC39  F016         	call	_register_timer	;wreg free
   836  001924  0100               	movlb	0	; () banked
   837  001926  6F95               	movwf	(_task_id+2)& (0+255),b
   838                           
   839                           ;main.c: 69:     task_id[3] = register_timer(9000, 60, blinking_LED, 3);
   840  001928  0E28               	movlw	40
   841  00192A  6F86               	movwf	register_timer@period& (0+255),b
   842  00192C  0E23               	movlw	35
   843  00192E  6F87               	movwf	(register_timer@period+1)& (0+255),b
   844  001930  0E00               	movlw	0
   845  001932  6F88               	movwf	(register_timer@period+2)& (0+255),b
   846  001934  0E00               	movlw	0
   847  001936  6F89               	movwf	(register_timer@period+3)& (0+255),b
   848  001938  0E3C               	movlw	60
   849  00193A  6F8A               	movwf	register_timer@delay& (0+255),b
   850  00193C  0E00               	movlw	0
   851  00193E  6F8B               	movwf	(register_timer@delay+1)& (0+255),b
   852  001940  0E00               	movlw	0
   853  001942  6F8C               	movwf	(register_timer@delay+2)& (0+255),b
   854  001944  0E00               	movlw	0
   855  001946  6F8D               	movwf	(register_timer@delay+3)& (0+255),b
   856  001948  0E72               	movlw	low _blinking_LED
   857  00194A  6F8E               	movwf	register_timer@callback& (0+255),b
   858  00194C  0E1B               	movlw	high _blinking_LED
   859  00194E  6F8F               	movwf	(register_timer@callback+1)& (0+255),b
   860  001950  0E00               	movlw	low (_blinking_LED shr (0+16))
   861  001952  6F90               	movwf	(register_timer@callback+2)& (0+255),b
   862  001954  0E03               	movlw	3
   863  001956  6F91               	movwf	register_timer@data& (0+255),b
   864  001958  0E00               	movlw	0
   865  00195A  6F92               	movwf	(register_timer@data+1)& (0+255),b
   866  00195C  EC39  F016         	call	_register_timer	;wreg free
   867  001960  0100               	movlb	0	; () banked
   868  001962  6F96               	movwf	(_task_id+3)& (0+255),b
   869                           
   870                           ;main.c: 70:     task_id[4] = register_timer(5500, 100, blinking_LED, 4);
   871  001964  0E7C               	movlw	124
   872  001966  6F86               	movwf	register_timer@period& (0+255),b
   873  001968  0E15               	movlw	21
   874  00196A  6F87               	movwf	(register_timer@period+1)& (0+255),b
   875  00196C  0E00               	movlw	0
   876  00196E  6F88               	movwf	(register_timer@period+2)& (0+255),b
   877  001970  0E00               	movlw	0
   878  001972  6F89               	movwf	(register_timer@period+3)& (0+255),b
   879  001974  0E64               	movlw	100
   880  001976  6F8A               	movwf	register_timer@delay& (0+255),b
   881  001978  0E00               	movlw	0
   882  00197A  6F8B               	movwf	(register_timer@delay+1)& (0+255),b
   883  00197C  0E00               	movlw	0
   884  00197E  6F8C               	movwf	(register_timer@delay+2)& (0+255),b
   885  001980  0E00               	movlw	0
   886  001982  6F8D               	movwf	(register_timer@delay+3)& (0+255),b
   887  001984  0E72               	movlw	low _blinking_LED
   888  001986  6F8E               	movwf	register_timer@callback& (0+255),b
   889  001988  0E1B               	movlw	high _blinking_LED
   890  00198A  6F8F               	movwf	(register_timer@callback+1)& (0+255),b
   891  00198C  0E00               	movlw	low (_blinking_LED shr (0+16))
   892  00198E  6F90               	movwf	(register_timer@callback+2)& (0+255),b
   893  001990  0E04               	movlw	4
   894  001992  6F91               	movwf	register_timer@data& (0+255),b
   895  001994  0E00               	movlw	0
   896  001996  6F92               	movwf	(register_timer@data+1)& (0+255),b
   897  001998  EC39  F016         	call	_register_timer	;wreg free
   898  00199C  0100               	movlb	0	; () banked
   899  00199E  6F97               	movwf	(_task_id+4)& (0+255),b
   900                           
   901                           ;main.c: 71:     task_id[5] = register_timer(3000, 8000, blinking_LED, 5);
   902  0019A0  0EB8               	movlw	184
   903  0019A2  6F86               	movwf	register_timer@period& (0+255),b
   904  0019A4  0E0B               	movlw	11
   905  0019A6  6F87               	movwf	(register_timer@period+1)& (0+255),b
   906  0019A8  0E00               	movlw	0
   907  0019AA  6F88               	movwf	(register_timer@period+2)& (0+255),b
   908  0019AC  0E00               	movlw	0
   909  0019AE  6F89               	movwf	(register_timer@period+3)& (0+255),b
   910  0019B0  0E40               	movlw	64
   911  0019B2  6F8A               	movwf	register_timer@delay& (0+255),b
   912  0019B4  0E1F               	movlw	31
   913  0019B6  6F8B               	movwf	(register_timer@delay+1)& (0+255),b
   914  0019B8  0E00               	movlw	0
   915  0019BA  6F8C               	movwf	(register_timer@delay+2)& (0+255),b
   916  0019BC  0E00               	movlw	0
   917  0019BE  6F8D               	movwf	(register_timer@delay+3)& (0+255),b
   918  0019C0  0E72               	movlw	low _blinking_LED
   919  0019C2  6F8E               	movwf	register_timer@callback& (0+255),b
   920  0019C4  0E1B               	movlw	high _blinking_LED
   921  0019C6  6F8F               	movwf	(register_timer@callback+1)& (0+255),b
   922  0019C8  0E00               	movlw	low (_blinking_LED shr (0+16))
   923  0019CA  6F90               	movwf	(register_timer@callback+2)& (0+255),b
   924  0019CC  0E05               	movlw	5
   925  0019CE  6F91               	movwf	register_timer@data& (0+255),b
   926  0019D0  0E00               	movlw	0
   927  0019D2  6F92               	movwf	(register_timer@data+1)& (0+255),b
   928  0019D4  EC39  F016         	call	_register_timer	;wreg free
   929  0019D8  0100               	movlb	0	; () banked
   930  0019DA  6F98               	movwf	(_task_id+5)& (0+255),b
   931                           
   932                           ;main.c: 72:     task_id[6] = register_timer(100, 400, blinking_LED, 6);
   933  0019DC  0E64               	movlw	100
   934  0019DE  6F86               	movwf	register_timer@period& (0+255),b
   935  0019E0  0E00               	movlw	0
   936  0019E2  6F87               	movwf	(register_timer@period+1)& (0+255),b
   937  0019E4  0E00               	movlw	0
   938  0019E6  6F88               	movwf	(register_timer@period+2)& (0+255),b
   939  0019E8  0E00               	movlw	0
   940  0019EA  6F89               	movwf	(register_timer@period+3)& (0+255),b
   941  0019EC  0E90               	movlw	144
   942  0019EE  6F8A               	movwf	register_timer@delay& (0+255),b
   943  0019F0  0E01               	movlw	1
   944  0019F2  6F8B               	movwf	(register_timer@delay+1)& (0+255),b
   945  0019F4  0E00               	movlw	0
   946  0019F6  6F8C               	movwf	(register_timer@delay+2)& (0+255),b
   947  0019F8  0E00               	movlw	0
   948  0019FA  6F8D               	movwf	(register_timer@delay+3)& (0+255),b
   949  0019FC  0E72               	movlw	low _blinking_LED
   950  0019FE  6F8E               	movwf	register_timer@callback& (0+255),b
   951  001A00  0E1B               	movlw	high _blinking_LED
   952  001A02  6F8F               	movwf	(register_timer@callback+1)& (0+255),b
   953  001A04  0E00               	movlw	low (_blinking_LED shr (0+16))
   954  001A06  6F90               	movwf	(register_timer@callback+2)& (0+255),b
   955  001A08  0E06               	movlw	6
   956  001A0A  6F91               	movwf	register_timer@data& (0+255),b
   957  001A0C  0E00               	movlw	0
   958  001A0E  6F92               	movwf	(register_timer@data+1)& (0+255),b
   959  001A10  EC39  F016         	call	_register_timer	;wreg free
   960  001A14  0100               	movlb	0	; () banked
   961  001A16  6F99               	movwf	(_task_id+6)& (0+255),b
   962                           
   963                           ;main.c: 73:     task_id[7] = register_timer(100, 400, blinking_LED, 7);
   964  001A18  0E64               	movlw	100
   965  001A1A  6F86               	movwf	register_timer@period& (0+255),b
   966  001A1C  0E00               	movlw	0
   967  001A1E  6F87               	movwf	(register_timer@period+1)& (0+255),b
   968  001A20  0E00               	movlw	0
   969  001A22  6F88               	movwf	(register_timer@period+2)& (0+255),b
   970  001A24  0E00               	movlw	0
   971  001A26  6F89               	movwf	(register_timer@period+3)& (0+255),b
   972  001A28  0E90               	movlw	144
   973  001A2A  6F8A               	movwf	register_timer@delay& (0+255),b
   974  001A2C  0E01               	movlw	1
   975  001A2E  6F8B               	movwf	(register_timer@delay+1)& (0+255),b
   976  001A30  0E00               	movlw	0
   977  001A32  6F8C               	movwf	(register_timer@delay+2)& (0+255),b
   978  001A34  0E00               	movlw	0
   979  001A36  6F8D               	movwf	(register_timer@delay+3)& (0+255),b
   980  001A38  0E72               	movlw	low _blinking_LED
   981  001A3A  6F8E               	movwf	register_timer@callback& (0+255),b
   982  001A3C  0E1B               	movlw	high _blinking_LED
   983  001A3E  6F8F               	movwf	(register_timer@callback+1)& (0+255),b
   984  001A40  0E00               	movlw	low (_blinking_LED shr (0+16))
   985  001A42  6F90               	movwf	(register_timer@callback+2)& (0+255),b
   986  001A44  0E07               	movlw	7
   987  001A46  6F91               	movwf	register_timer@data& (0+255),b
   988  001A48  0E00               	movlw	0
   989  001A4A  6F92               	movwf	(register_timer@data+1)& (0+255),b
   990  001A4C  EC39  F016         	call	_register_timer	;wreg free
   991  001A50  0100               	movlb	0	; () banked
   992  001A52  6F9A               	movwf	(_task_id+7)& (0+255),b
   993                           
   994                           ;main.c: 75:     task_id[8] = register_timer(50, 0, printTime_ms, ((void*)0));
   995  001A54  0E32               	movlw	50
   996  001A56  6F86               	movwf	register_timer@period& (0+255),b
   997  001A58  0E00               	movlw	0
   998  001A5A  6F87               	movwf	(register_timer@period+1)& (0+255),b
   999  001A5C  0E00               	movlw	0
  1000  001A5E  6F88               	movwf	(register_timer@period+2)& (0+255),b
  1001  001A60  0E00               	movlw	0
  1002  001A62  6F89               	movwf	(register_timer@period+3)& (0+255),b
  1003  001A64  0E00               	movlw	0
  1004  001A66  6F8A               	movwf	register_timer@delay& (0+255),b
  1005  001A68  0E00               	movlw	0
  1006  001A6A  6F8B               	movwf	(register_timer@delay+1)& (0+255),b
  1007  001A6C  0E00               	movlw	0
  1008  001A6E  6F8C               	movwf	(register_timer@delay+2)& (0+255),b
  1009  001A70  0E00               	movlw	0
  1010  001A72  6F8D               	movwf	(register_timer@delay+3)& (0+255),b
  1011  001A74  0E72               	movlw	low _printTime_ms
  1012  001A76  6F8E               	movwf	register_timer@callback& (0+255),b
  1013  001A78  0E22               	movlw	high _printTime_ms
  1014  001A7A  6F8F               	movwf	(register_timer@callback+1)& (0+255),b
  1015  001A7C  0E00               	movlw	low (_printTime_ms shr (0+16))
  1016  001A7E  6F90               	movwf	(register_timer@callback+2)& (0+255),b
  1017  001A80  0E00               	movlw	0
  1018  001A82  6F91               	movwf	register_timer@data& (0+255),b
  1019  001A84  0E00               	movlw	0
  1020  001A86  6F92               	movwf	(register_timer@data+1)& (0+255),b
  1021  001A88  EC39  F016         	call	_register_timer	;wreg free
  1022  001A8C  0100               	movlb	0	; () banked
  1023  001A8E  6F9B               	movwf	(_task_id+8)& (0+255),b
  1024                           
  1025                           ;main.c: 76:     task_id[9] = register_timer(10, 70, handleButton, ((void*)0));
  1026  001A90  0E0A               	movlw	10
  1027  001A92  6F86               	movwf	register_timer@period& (0+255),b
  1028  001A94  0E00               	movlw	0
  1029  001A96  6F87               	movwf	(register_timer@period+1)& (0+255),b
  1030  001A98  0E00               	movlw	0
  1031  001A9A  6F88               	movwf	(register_timer@period+2)& (0+255),b
  1032  001A9C  0E00               	movlw	0
  1033  001A9E  6F89               	movwf	(register_timer@period+3)& (0+255),b
  1034  001AA0  0E46               	movlw	70
  1035  001AA2  6F8A               	movwf	register_timer@delay& (0+255),b
  1036  001AA4  0E00               	movlw	0
  1037  001AA6  6F8B               	movwf	(register_timer@delay+1)& (0+255),b
  1038  001AA8  0E00               	movlw	0
  1039  001AAA  6F8C               	movwf	(register_timer@delay+2)& (0+255),b
  1040  001AAC  0E00               	movlw	0
  1041  001AAE  6F8D               	movwf	(register_timer@delay+3)& (0+255),b
  1042  001AB0  0E8A               	movlw	low _handleButton
  1043  001AB2  6F8E               	movwf	register_timer@callback& (0+255),b
  1044  001AB4  0E21               	movlw	high _handleButton
  1045  001AB6  6F8F               	movwf	(register_timer@callback+1)& (0+255),b
  1046  001AB8  0E00               	movlw	low (_handleButton shr (0+16))
  1047  001ABA  6F90               	movwf	(register_timer@callback+2)& (0+255),b
  1048  001ABC  0E00               	movlw	0
  1049  001ABE  6F91               	movwf	register_timer@data& (0+255),b
  1050  001AC0  0E00               	movlw	0
  1051  001AC2  6F92               	movwf	(register_timer@data+1)& (0+255),b
  1052  001AC4  EC39  F016         	call	_register_timer	;wreg free
  1053  001AC8  0100               	movlb	0	; () banked
  1054  001ACA  6F9C               	movwf	(_task_id+9)& (0+255),b
  1055  001ACC                     
  1056                           ; BSR set to: 0
  1057                           ;main.c: 78:     LCDPrint(0, 0, "Lab 4    1710364");
  1058  001ACC  0E00               	movlw	0
  1059  001ACE  6F6B               	movwf	LCDPrint@pos& (0+255),b
  1060  001AD0  0E01               	movlw	low STR_1
  1061  001AD2  6F6C               	movwf	LCDPrint@ptr& (0+255),b
  1062  001AD4  0E10               	movlw	high STR_1
  1063  001AD6  6F6D               	movwf	(LCDPrint@ptr+1)& (0+255),b
  1064  001AD8  0E00               	movlw	0
  1065  001ADA  EC78  F015         	call	_LCDPrint
  1066  001ADE                     
  1067                           ;main.c: 79:     LCDPrint(1, 0, "Time");
  1068  001ADE  0E00               	movlw	0
  1069  001AE0  0100               	movlb	0	; () banked
  1070  001AE2  6F6B               	movwf	LCDPrint@pos& (0+255),b
  1071  001AE4  0E12               	movlw	low STR_2
  1072  001AE6  6F6C               	movwf	LCDPrint@ptr& (0+255),b
  1073  001AE8  0E10               	movlw	high STR_2
  1074  001AEA  6F6D               	movwf	(LCDPrint@ptr+1)& (0+255),b
  1075  001AEC  0E01               	movlw	1
  1076  001AEE  EC78  F015         	call	_LCDPrint
  1077  001AF2                     
  1078                           ;main.c: 80:     LCDPrint(1, 14, "ms");
  1079  001AF2  0E0E               	movlw	14
  1080  001AF4  0100               	movlb	0	; () banked
  1081  001AF6  6F6B               	movwf	LCDPrint@pos& (0+255),b
  1082  001AF8  0E17               	movlw	low STR_3
  1083  001AFA  6F6C               	movwf	LCDPrint@ptr& (0+255),b
  1084  001AFC  0E10               	movlw	high STR_3
  1085  001AFE  6F6D               	movwf	(LCDPrint@ptr+1)& (0+255),b
  1086  001B00  0E01               	movlw	1
  1087  001B02  EC78  F015         	call	_LCDPrint
  1088  001B06                     l2641:
  1089                           
  1090                           ;main.c: 82:         dispatch();
  1091  001B06  EC59  F017         	call	_dispatch	;wreg free
  1092  001B0A                     
  1093                           ;main.c: 83:         if(RA5_pressed == 1) {
  1094  001B0A  0100               	movlb	0	; () banked
  1095  001B0C  05C2               	decf	_RA5_pressed& (0+255),w,b
  1096  001B0E  A4D8               	btfss	status,2,c
  1097  001B10  EF8C  F00D         	goto	u1891
  1098  001B14  EF8E  F00D         	goto	u1890
  1099  001B18                     u1891:
  1100  001B18  EF96  F00D         	goto	l2649
  1101  001B1C                     u1890:
  1102  001B1C                     
  1103                           ; BSR set to: 0
  1104                           ;main.c: 84:             RA5_pressed = 0;
  1105  001B1C  0E00               	movlw	0
  1106  001B1E  6FC2               	movwf	_RA5_pressed& (0+255),b
  1107  001B20                     
  1108                           ; BSR set to: 0
  1109                           ;main.c: 85:             printTime_ms(((void*)0));
  1110  001B20  0E00               	movlw	0
  1111  001B22  6F6E               	movwf	printTime_ms@data_ptr& (0+255),b
  1112  001B24  0E00               	movlw	0
  1113  001B26  6F6F               	movwf	(printTime_ms@data_ptr+1)& (0+255),b
  1114  001B28  EC39  F011         	call	_printTime_ms	;wreg free
  1115  001B2C                     l2649:
  1116                           
  1117                           ;main.c: 87:         if(RB0_pressed == 1) {
  1118  001B2C  0100               	movlb	0	; () banked
  1119  001B2E  05C1               	decf	_RB0_pressed& (0+255),w,b
  1120  001B30  A4D8               	btfss	status,2,c
  1121  001B32  EF9D  F00D         	goto	u1901
  1122  001B36  EF9F  F00D         	goto	u1900
  1123  001B3A                     u1901:
  1124  001B3A  EF83  F00D         	goto	l2641
  1125  001B3E                     u1900:
  1126  001B3E                     
  1127                           ; BSR set to: 0
  1128                           ;main.c: 88:             RB0_pressed = 0;
  1129  001B3E  0E00               	movlw	0
  1130  001B40  6FC1               	movwf	_RB0_pressed& (0+255),b
  1131  001B42                     
  1132                           ; BSR set to: 0
  1133                           ;main.c: 89:             remove_timer(remove_task_counter);
  1134  001B42  51BB               	movf	_remove_task_counter& (0+255),w,b
  1135  001B44  EC48  F017         	call	_remove_timer
  1136  001B48                     
  1137                           ;main.c: 90:             remove_task_counter = (remove_task_counter + 1) % 20;
  1138  001B48  0E01               	movlw	1
  1139  001B4A  0100               	movlb	0	; () banked
  1140  001B4C  25BB               	addwf	_remove_task_counter& (0+255),w,b
  1141  001B4E  6F60               	movwf	___awmod@dividend& (0+255),b
  1142  001B50  0E00               	movlw	0
  1143  001B52  21BC               	addwfc	(_remove_task_counter+1)& (0+255),w,b
  1144  001B54  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  1145  001B56  0E00               	movlw	0
  1146  001B58  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  1147  001B5A  0E14               	movlw	20
  1148  001B5C  6F62               	movwf	___awmod@divisor& (0+255),b
  1149  001B5E  EC97  F011         	call	___awmod	;wreg free
  1150  001B62  C060  F0BB         	movff	?___awmod,_remove_task_counter
  1151  001B66  C061  F0BC         	movff	?___awmod+1,_remove_task_counter+1
  1152  001B6A  EF83  F00D         	goto	l2641
  1153  001B6E  EF07  F000         	goto	start
  1154  001B72                     __end_of_main:
  1155                           	opt callstack 0
  1156                           
  1157 ;; *************** function _system_initialize *****************
  1158 ;; Defined at:
  1159 ;;		line 30 in file "mcc.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;		None
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;		None
  1164 ;; Return value:  Size  Location     Type
  1165 ;;                  1    wreg      void 
  1166 ;; Registers used:
  1167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1168 ;; Tracked objects:
  1169 ;;		On entry : 0/0
  1170 ;;		On exit  : 0/0
  1171 ;;		Unchanged: 0/0
  1172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1176 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1177 ;;Total ram usage:        0 bytes
  1178 ;; Hardware stack levels used:    1
  1179 ;; Hardware stack levels required when called:   10
  1180 ;; This function calls:
  1181 ;;		_LCDInit
  1182 ;;		_interrupt_initialize
  1183 ;;		_osc_initialize
  1184 ;;		_pin_initialize
  1185 ;;		_start_timer
  1186 ;; This function is called by:
  1187 ;;		_main
  1188 ;; This function uses a non-reentrant model
  1189 ;;
  1190                           
  1191                           	psect	text1
  1192  002DCA                     __ptext1:
  1193                           	opt callstack 0
  1194  002DCA                     _system_initialize:
  1195                           	opt callstack 20
  1196  002DCA                     
  1197                           ;mcc.c: 31:     osc_initialize();
  1198  002DCA  EC53  F017         	call	_osc_initialize	;wreg free
  1199                           
  1200                           ;mcc.c: 32:     pin_initialize();
  1201  002DCE  ECC3  F016         	call	_pin_initialize	;wreg free
  1202  002DD2                     
  1203                           ;mcc.c: 33:     interrupt_initialize();
  1204  002DD2  EC56  F017         	call	_interrupt_initialize	;wreg free
  1205  002DD6                     
  1206                           ;mcc.c: 34:     LCDInit();
  1207  002DD6  EC91  F014         	call	_LCDInit	;wreg free
  1208  002DDA                     
  1209                           ;mcc.c: 35:     start_timer(0);
  1210  002DDA  0E00               	movlw	0
  1211  002DDC  EC42  F013         	call	_start_timer
  1212  002DE0                     
  1213                           ;mcc.c: 36:     start_timer(1);
  1214  002DE0  0E01               	movlw	1
  1215  002DE2  EC42  F013         	call	_start_timer
  1216  002DE6  0012               	return		;funcret
  1217  002DE8                     __end_of_system_initialize:
  1218                           	opt callstack 0
  1219                           
  1220 ;; *************** function _start_timer *****************
  1221 ;; Defined at:
  1222 ;;		line 5 in file "clock.c"
  1223 ;; Parameters:    Size  Location     Type
  1224 ;;  timer_vaddr     1    wreg     unsigned char 
  1225 ;; Auto vars:     Size  Location     Type
  1226 ;;  timer_vaddr     1   12[BANK0 ] unsigned char 
  1227 ;; Return value:  Size  Location     Type
  1228 ;;                  2  103[None  ] int 
  1229 ;; Registers used:
  1230 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1231 ;; Tracked objects:
  1232 ;;		On entry : 0/0
  1233 ;;		On exit  : 0/0
  1234 ;;		Unchanged: 0/0
  1235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1237 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1238 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1239 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1240 ;;Total ram usage:        3 bytes
  1241 ;; Hardware stack levels used:    1
  1242 ;; Hardware stack levels required when called:    9
  1243 ;; This function calls:
  1244 ;;		_initializeTaskList
  1245 ;; This function is called by:
  1246 ;;		_system_initialize
  1247 ;; This function uses a non-reentrant model
  1248 ;;
  1249                           
  1250                           	psect	text2
  1251  002684                     __ptext2:
  1252                           	opt callstack 0
  1253  002684                     _start_timer:
  1254                           	opt callstack 20
  1255                           
  1256                           ;incstack = 0
  1257                           ;start_timer@timer_vaddr stored from wreg
  1258  002684  0100               	movlb	0	; () banked
  1259  002686  6F6C               	movwf	start_timer@timer_vaddr& (0+255),b
  1260  002688                     
  1261                           ;clock.c: 6:     if(timer_vaddr > 4)
  1262  002688  0E04               	movlw	4
  1263  00268A  0100               	movlb	0	; () banked
  1264  00268C  656C               	cpfsgt	start_timer@timer_vaddr& (0+255),b
  1265  00268E  EF4B  F013         	goto	u1501
  1266  002692  EF4D  F013         	goto	u1500
  1267  002696                     u1501:
  1268  002696  EF6B  F013         	goto	l2403
  1269  00269A                     u1500:
  1270  00269A  EF8C  F013         	goto	l329
  1271  00269E                     l331:
  1272                           
  1273                           ; BSR set to: 0
  1274                           ;clock.c: 10:             INTCONbits.TMR0IE = 1;
  1275  00269E  8AF2               	bsf	242,5,c	;volatile
  1276                           
  1277                           ;clock.c: 11:             INTCONbits.TMR0IF = 0;
  1278  0026A0  94F2               	bcf	242,2,c	;volatile
  1279  0026A2                     
  1280                           ; BSR set to: 0
  1281                           ;clock.c: 12:             T0CON = 0xC3;
  1282  0026A2  0EC3               	movlw	195
  1283  0026A4  6ED5               	movwf	213,c	;volatile
  1284                           
  1285                           ;clock.c: 13:             TMR0L = 131;
  1286  0026A6  0E83               	movlw	131
  1287  0026A8  6ED6               	movwf	214,c	;volatile
  1288                           
  1289                           ;clock.c: 14:             time_ms = 0;
  1290  0026AA  0E00               	movlw	0
  1291  0026AC  6FB7               	movwf	_time_ms& (0+255),b
  1292  0026AE  0E00               	movlw	0
  1293  0026B0  6FB8               	movwf	(_time_ms+1)& (0+255),b
  1294  0026B2  0E00               	movlw	0
  1295  0026B4  6FB9               	movwf	(_time_ms+2)& (0+255),b
  1296  0026B6  0E00               	movlw	0
  1297  0026B8  6FBA               	movwf	(_time_ms+3)& (0+255),b
  1298                           
  1299                           ;clock.c: 15:             break;
  1300  0026BA  EF8C  F013         	goto	l329
  1301  0026BE                     l2389:
  1302                           
  1303                           ; BSR set to: 0
  1304                           ;clock.c: 17:             initializeTaskList();
  1305  0026BE  EC3E  F010         	call	_initializeTaskList	;wreg free
  1306  0026C2                     
  1307                           ;clock.c: 18:             PIE1bits.TMR1IE = 1;
  1308  0026C2  809D               	bsf	157,0,c	;volatile
  1309  0026C4                     
  1310                           ;clock.c: 19:             PIR1bits.TMR1IF = 0;
  1311  0026C4  909E               	bcf	158,0,c	;volatile
  1312  0026C6                     
  1313                           ;clock.c: 20:             T1CON = 0b10000001;
  1314  0026C6  0E81               	movlw	129
  1315  0026C8  6ECD               	movwf	205,c	;volatile
  1316  0026CA                     
  1317                           ;clock.c: 21:             TMR1H = 0xB1;
  1318  0026CA  0EB1               	movlw	177
  1319  0026CC  6ECF               	movwf	207,c	;volatile
  1320  0026CE                     
  1321                           ;clock.c: 22:             TMR1L = 0xE0;
  1322  0026CE  0EE0               	movlw	224
  1323  0026D0  6ECE               	movwf	206,c	;volatile
  1324                           
  1325                           ;clock.c: 23:             break;
  1326  0026D2  EF8C  F013         	goto	l329
  1327  0026D6                     l2403:
  1328                           
  1329                           ; BSR set to: 0
  1330  0026D6  516C               	movf	start_timer@timer_vaddr& (0+255),w,b
  1331  0026D8  6F6A               	movwf	??_start_timer& (0+255),b
  1332  0026DA  6B6B               	clrf	(??_start_timer+1)& (0+255),b
  1333                           
  1334                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1335                           ; Switch size 1, requested type "simple"
  1336                           ; Number of cases is 1, Range of values is 0 to 0
  1337                           ; switch strategies available:
  1338                           ; Name         Instructions Cycles
  1339                           ; simple_byte            4     3 (average)
  1340                           ;	Chosen strategy is simple_byte
  1341  0026DC  516B               	movf	(??_start_timer+1)& (0+255),w,b
  1342  0026DE  0A00               	xorlw	0	; case 0
  1343  0026E0  B4D8               	btfsc	status,2,c
  1344  0026E2  EF75  F013         	goto	l2773
  1345  0026E6  EF8C  F013         	goto	l329
  1346  0026EA                     l2773:
  1347                           
  1348                           ; BSR set to: 0
  1349                           ; Switch size 1, requested type "simple"
  1350                           ; Number of cases is 5, Range of values is 0 to 4
  1351                           ; switch strategies available:
  1352                           ; Name         Instructions Cycles
  1353                           ; simple_byte           16     9 (average)
  1354                           ;	Chosen strategy is simple_byte
  1355  0026EA  516A               	movf	??_start_timer& (0+255),w,b
  1356  0026EC  0A00               	xorlw	0	; case 0
  1357  0026EE  B4D8               	btfsc	status,2,c
  1358  0026F0  EF4F  F013         	goto	l331
  1359  0026F4  0A01               	xorlw	1	; case 1
  1360  0026F6  B4D8               	btfsc	status,2,c
  1361  0026F8  EF5F  F013         	goto	l2389
  1362  0026FC  0A03               	xorlw	3	; case 2
  1363  0026FE  B4D8               	btfsc	status,2,c
  1364  002700  EF8C  F013         	goto	l329
  1365  002704  0A01               	xorlw	1	; case 3
  1366  002706  B4D8               	btfsc	status,2,c
  1367  002708  EF8C  F013         	goto	l329
  1368  00270C  0A07               	xorlw	7	; case 4
  1369  00270E  B4D8               	btfsc	status,2,c
  1370  002710  EF8C  F013         	goto	l329
  1371  002714  EF8C  F013         	goto	l329
  1372  002718                     l329:
  1373  002718  0012               	return		;funcret
  1374  00271A                     __end_of_start_timer:
  1375                           	opt callstack 0
  1376                           
  1377 ;; *************** function _initializeTaskList *****************
  1378 ;; Defined at:
  1379 ;;		line 11 in file "task.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;		None
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;  i               2    8[BANK0 ] int 
  1384 ;; Return value:  Size  Location     Type
  1385 ;;                  1    wreg      void 
  1386 ;; Registers used:
  1387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1394 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1396 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1397 ;;Total ram usage:        2 bytes
  1398 ;; Hardware stack levels used:    1
  1399 ;; Hardware stack levels required when called:    8
  1400 ;; This function calls:
  1401 ;;		___wmul
  1402 ;;		_queueInitialize
  1403 ;; This function is called by:
  1404 ;;		_start_timer
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           	psect	text3
  1409  00207C                     __ptext3:
  1410                           	opt callstack 0
  1411  00207C                     _initializeTaskList:
  1412                           	opt callstack 20
  1413  00207C                     
  1414                           ;task.c: 12:     queueInitialize();
  1415  00207C  EC1A  F014         	call	_queueInitialize	;wreg free
  1416  002080                     
  1417                           ;task.c: 13:     for(int i = 0; i < 20; i++) {
  1418  002080  0E00               	movlw	0
  1419  002082  0100               	movlb	0	; () banked
  1420  002084  6F69               	movwf	(initializeTaskList@i+1)& (0+255),b
  1421  002086  0E00               	movlw	0
  1422  002088  6F68               	movwf	initializeTaskList@i& (0+255),b
  1423  00208A                     l2287:
  1424                           
  1425                           ; BSR set to: 0
  1426                           ;task.c: 14:         task_list[i].delay_t = 0;
  1427  00208A  C068  F060         	movff	initializeTaskList@i,___wmul@multiplier
  1428  00208E  C069  F061         	movff	initializeTaskList@i+1,___wmul@multiplier+1
  1429  002092  0E00               	movlw	0
  1430  002094  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1431  002096  0E0F               	movlw	15
  1432  002098  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1433  00209A  EC9C  F016         	call	___wmul	;wreg free
  1434  00209E  0E64               	movlw	low _task_list
  1435  0020A0  0100               	movlb	0	; () banked
  1436  0020A2  2560               	addwf	?___wmul& (0+255),w,b
  1437  0020A4  6ED9               	movwf	fsr2l,c
  1438  0020A6  0E01               	movlw	high _task_list
  1439  0020A8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1440  0020AA  6EDA               	movwf	fsr2h,c
  1441  0020AC  6ADE               	clrf	postinc2,c
  1442  0020AE  6ADE               	clrf	postinc2,c
  1443  0020B0  6ADE               	clrf	postinc2,c
  1444  0020B2  6ADD               	clrf	postdec2,c
  1445                           
  1446                           ;task.c: 15:         task_list[i].period_t = 0;
  1447  0020B4  C068  F060         	movff	initializeTaskList@i,___wmul@multiplier
  1448  0020B8  C069  F061         	movff	initializeTaskList@i+1,___wmul@multiplier+1
  1449  0020BC  0E00               	movlw	0
  1450  0020BE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1451  0020C0  0E0F               	movlw	15
  1452  0020C2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1453  0020C4  EC9C  F016         	call	___wmul	;wreg free
  1454  0020C8  0E68               	movlw	low (_task_list+4)
  1455  0020CA  0100               	movlb	0	; () banked
  1456  0020CC  2560               	addwf	?___wmul& (0+255),w,b
  1457  0020CE  6ED9               	movwf	fsr2l,c
  1458  0020D0  0E01               	movlw	high (_task_list+4)
  1459  0020D2  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1460  0020D4  6EDA               	movwf	fsr2h,c
  1461  0020D6  6ADE               	clrf	postinc2,c
  1462  0020D8  6ADE               	clrf	postinc2,c
  1463  0020DA  6ADE               	clrf	postinc2,c
  1464  0020DC  6ADD               	clrf	postdec2,c
  1465                           
  1466                           ;task.c: 16:         task_list[i].func_ptr = ((void*)0);
  1467  0020DE  C068  F060         	movff	initializeTaskList@i,___wmul@multiplier
  1468  0020E2  C069  F061         	movff	initializeTaskList@i+1,___wmul@multiplier+1
  1469  0020E6  0E00               	movlw	0
  1470  0020E8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1471  0020EA  0E0F               	movlw	15
  1472  0020EC  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1473  0020EE  EC9C  F016         	call	___wmul	;wreg free
  1474  0020F2  0E6C               	movlw	low (_task_list+8)
  1475  0020F4  0100               	movlb	0	; () banked
  1476  0020F6  2560               	addwf	?___wmul& (0+255),w,b
  1477  0020F8  6ED9               	movwf	fsr2l,c
  1478  0020FA  0E01               	movlw	high (_task_list+8)
  1479  0020FC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1480  0020FE  6EDA               	movwf	fsr2h,c
  1481  002100  0E00               	movlw	0
  1482  002102  6EDE               	movwf	postinc2,c
  1483  002104  0E00               	movlw	0
  1484  002106  6EDE               	movwf	postinc2,c
  1485  002108  0E00               	movlw	0
  1486  00210A  6EDE               	movwf	postinc2,c
  1487                           
  1488                           ;task.c: 17:         task_list[i].data_p = ((void*)0);
  1489  00210C  C068  F060         	movff	initializeTaskList@i,___wmul@multiplier
  1490  002110  C069  F061         	movff	initializeTaskList@i+1,___wmul@multiplier+1
  1491  002114  0E00               	movlw	0
  1492  002116  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1493  002118  0E0F               	movlw	15
  1494  00211A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1495  00211C  EC9C  F016         	call	___wmul	;wreg free
  1496  002120  0E71               	movlw	low (_task_list+13)
  1497  002122  0100               	movlb	0	; () banked
  1498  002124  2560               	addwf	?___wmul& (0+255),w,b
  1499  002126  6ED9               	movwf	fsr2l,c
  1500  002128  0E01               	movlw	high (_task_list+13)
  1501  00212A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1502  00212C  6EDA               	movwf	fsr2h,c
  1503  00212E  0E00               	movlw	0
  1504  002130  6EDE               	movwf	postinc2,c
  1505  002132  0E00               	movlw	0
  1506  002134  6EDD               	movwf	postdec2,c
  1507                           
  1508                           ;task.c: 18:         task_list[i].next = 105;
  1509  002136  C068  F060         	movff	initializeTaskList@i,___wmul@multiplier
  1510  00213A  C069  F061         	movff	initializeTaskList@i+1,___wmul@multiplier+1
  1511  00213E  0E00               	movlw	0
  1512  002140  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1513  002142  0E0F               	movlw	15
  1514  002144  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1515  002146  EC9C  F016         	call	___wmul	;wreg free
  1516  00214A  0E6F               	movlw	low (_task_list+11)
  1517  00214C  0100               	movlb	0	; () banked
  1518  00214E  2560               	addwf	?___wmul& (0+255),w,b
  1519  002150  6ED9               	movwf	fsr2l,c
  1520  002152  0E01               	movlw	high (_task_list+11)
  1521  002154  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1522  002156  6EDA               	movwf	fsr2h,c
  1523  002158  0E69               	movlw	105
  1524  00215A  6EDE               	movwf	postinc2,c
  1525  00215C  0E00               	movlw	0
  1526  00215E  6EDD               	movwf	postdec2,c
  1527  002160                     
  1528                           ; BSR set to: 0
  1529                           ;task.c: 19:     }
  1530  002160  4B68               	infsnz	initializeTaskList@i& (0+255),f,b
  1531  002162  2B69               	incf	(initializeTaskList@i+1)& (0+255),f,b
  1532  002164                     
  1533                           ; BSR set to: 0
  1534  002164  BF69               	btfsc	(initializeTaskList@i+1)& (0+255),7,b
  1535  002166  EFBE  F010         	goto	u1431
  1536  00216A  5169               	movf	(initializeTaskList@i+1)& (0+255),w,b
  1537  00216C  E109               	bnz	u1430
  1538  00216E  0E14               	movlw	20
  1539  002170  5D68               	subwf	initializeTaskList@i& (0+255),w,b
  1540  002172  A0D8               	btfss	status,0,c
  1541  002174  EFBE  F010         	goto	u1431
  1542  002178  EFC0  F010         	goto	u1430
  1543  00217C                     u1431:
  1544  00217C  EF45  F010         	goto	l2287
  1545  002180                     u1430:
  1546  002180                     
  1547                           ; BSR set to: 0
  1548                           ;task.c: 20:     num_task = 0;
  1549  002180  0E00               	movlw	0
  1550  002182  6FC0               	movwf	_num_task& (0+255),b
  1551                           
  1552                           ;task.c: 21:     head = 105;
  1553  002184  0E69               	movlw	105
  1554  002186  6FBF               	movwf	_head& (0+255),b
  1555  002188                     
  1556                           ; BSR set to: 0
  1557  002188  0012               	return		;funcret
  1558  00218A                     __end_of_initializeTaskList:
  1559                           	opt callstack 0
  1560                           
  1561 ;; *************** function _queueInitialize *****************
  1562 ;; Defined at:
  1563 ;;		line 3 in file "ready_queue.c"
  1564 ;; Parameters:    Size  Location     Type
  1565 ;;		None
  1566 ;; Auto vars:     Size  Location     Type
  1567 ;;  i               2    6[BANK0 ] int 
  1568 ;; Return value:  Size  Location     Type
  1569 ;;                  1    wreg      void 
  1570 ;; Registers used:
  1571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1572 ;; Tracked objects:
  1573 ;;		On entry : 0/0
  1574 ;;		On exit  : 0/0
  1575 ;;		Unchanged: 0/0
  1576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1578 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1580 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1581 ;;Total ram usage:        2 bytes
  1582 ;; Hardware stack levels used:    1
  1583 ;; Hardware stack levels required when called:    7
  1584 ;; This function calls:
  1585 ;;		___wmul
  1586 ;; This function is called by:
  1587 ;;		_initializeTaskList
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           	psect	text4
  1592  002834                     __ptext4:
  1593                           	opt callstack 0
  1594  002834                     _queueInitialize:
  1595                           	opt callstack 20
  1596  002834                     
  1597                           ;ready_queue.c: 4:     for(int i = 0; i< 20; i++) {
  1598  002834  0E00               	movlw	0
  1599  002836  0100               	movlb	0	; () banked
  1600  002838  6F67               	movwf	(queueInitialize@i+1)& (0+255),b
  1601  00283A  0E00               	movlw	0
  1602  00283C  6F66               	movwf	queueInitialize@i& (0+255),b
  1603  00283E                     l2117:
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;ready_queue.c: 5:         ready_queue[i].data_p = ((void*)0);
  1607  00283E  C066  F060         	movff	queueInitialize@i,___wmul@multiplier
  1608  002842  C067  F061         	movff	queueInitialize@i+1,___wmul@multiplier+1
  1609  002846  0E00               	movlw	0
  1610  002848  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1611  00284A  0E05               	movlw	5
  1612  00284C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1613  00284E  EC9C  F016         	call	___wmul	;wreg free
  1614  002852  0E03               	movlw	low (_ready_queue+3)
  1615  002854  0100               	movlb	0	; () banked
  1616  002856  2560               	addwf	?___wmul& (0+255),w,b
  1617  002858  6ED9               	movwf	fsr2l,c
  1618  00285A  0E01               	movlw	high (_ready_queue+3)
  1619  00285C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1620  00285E  6EDA               	movwf	fsr2h,c
  1621  002860  0E00               	movlw	0
  1622  002862  6EDE               	movwf	postinc2,c
  1623  002864  0E00               	movlw	0
  1624  002866  6EDD               	movwf	postdec2,c
  1625                           
  1626                           ;ready_queue.c: 6:         ready_queue[i].func_ptr = ((void*)0);
  1627  002868  C066  F060         	movff	queueInitialize@i,___wmul@multiplier
  1628  00286C  C067  F061         	movff	queueInitialize@i+1,___wmul@multiplier+1
  1629  002870  0E00               	movlw	0
  1630  002872  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1631  002874  0E05               	movlw	5
  1632  002876  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1633  002878  EC9C  F016         	call	___wmul	;wreg free
  1634  00287C  0E00               	movlw	low _ready_queue
  1635  00287E  0100               	movlb	0	; () banked
  1636  002880  2560               	addwf	?___wmul& (0+255),w,b
  1637  002882  6ED9               	movwf	fsr2l,c
  1638  002884  0E01               	movlw	high _ready_queue
  1639  002886  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1640  002888  6EDA               	movwf	fsr2h,c
  1641  00288A  0E00               	movlw	0
  1642  00288C  6EDE               	movwf	postinc2,c
  1643  00288E  0E00               	movlw	0
  1644  002890  6EDE               	movwf	postinc2,c
  1645  002892  0E00               	movlw	0
  1646  002894  6EDE               	movwf	postinc2,c
  1647  002896                     
  1648                           ; BSR set to: 0
  1649                           ;ready_queue.c: 7:     }
  1650  002896  4B66               	infsnz	queueInitialize@i& (0+255),f,b
  1651  002898  2B67               	incf	(queueInitialize@i+1)& (0+255),f,b
  1652  00289A                     
  1653                           ; BSR set to: 0
  1654  00289A  BF67               	btfsc	(queueInitialize@i+1)& (0+255),7,b
  1655  00289C  EF59  F014         	goto	u1161
  1656  0028A0  5167               	movf	(queueInitialize@i+1)& (0+255),w,b
  1657  0028A2  E109               	bnz	u1160
  1658  0028A4  0E14               	movlw	20
  1659  0028A6  5D66               	subwf	queueInitialize@i& (0+255),w,b
  1660  0028A8  A0D8               	btfss	status,0,c
  1661  0028AA  EF59  F014         	goto	u1161
  1662  0028AE  EF5B  F014         	goto	u1160
  1663  0028B2                     u1161:
  1664  0028B2  EF1F  F014         	goto	l2117
  1665  0028B6                     u1160:
  1666  0028B6                     
  1667                           ; BSR set to: 0
  1668  0028B6  0012               	return		;funcret
  1669  0028B8                     __end_of_queueInitialize:
  1670                           	opt callstack 0
  1671                           
  1672 ;; *************** function _pin_initialize *****************
  1673 ;; Defined at:
  1674 ;;		line 7 in file "mcc.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;		None
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;		None
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  1    wreg      void 
  1681 ;; Registers used:
  1682 ;;		wreg, status,2
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1692 ;;Total ram usage:        0 bytes
  1693 ;; Hardware stack levels used:    1
  1694 ;; Hardware stack levels required when called:    6
  1695 ;; This function calls:
  1696 ;;		Nothing
  1697 ;; This function is called by:
  1698 ;;		_system_initialize
  1699 ;; This function uses a non-reentrant model
  1700 ;;
  1701                           
  1702                           	psect	text5
  1703  002D86                     __ptext5:
  1704                           	opt callstack 0
  1705  002D86                     _pin_initialize:
  1706                           	opt callstack 23
  1707  002D86                     
  1708                           ;mcc.c: 8:     LATC = 0x00;
  1709  002D86  0E00               	movlw	0
  1710  002D88  6E8B               	movwf	139,c	;volatile
  1711                           
  1712                           ;mcc.c: 9:     TRISC = 0xD7;
  1713  002D8A  0ED7               	movlw	215
  1714  002D8C  6E94               	movwf	148,c	;volatile
  1715                           
  1716                           ;mcc.c: 10:     ADCON1 = 0b00001111;
  1717  002D8E  0E0F               	movlw	15
  1718  002D90  6EC1               	movwf	193,c	;volatile
  1719                           
  1720                           ;mcc.c: 13:     LATD = 0x00;
  1721  002D92  0E00               	movlw	0
  1722  002D94  6E8C               	movwf	140,c	;volatile
  1723                           
  1724                           ;mcc.c: 14:     TRISD = 0x00;
  1725  002D96  0E00               	movlw	0
  1726  002D98  6E95               	movwf	149,c	;volatile
  1727                           
  1728                           ;mcc.c: 16:     LATA = 0x00;
  1729  002D9A  0E00               	movlw	0
  1730  002D9C  6E89               	movwf	137,c	;volatile
  1731                           
  1732                           ;mcc.c: 17:     TRISA = 0xF3;
  1733  002D9E  0EF3               	movlw	243
  1734  002DA0  6E92               	movwf	146,c	;volatile
  1735                           
  1736                           ;mcc.c: 20:     LATB = 0x00;
  1737  002DA2  0E00               	movlw	0
  1738  002DA4  6E8A               	movwf	138,c	;volatile
  1739  002DA6                     
  1740                           ;mcc.c: 21:     TRISB = 0xFF;
  1741  002DA6  6893               	setf	147,c	;volatile
  1742  002DA8  0012               	return		;funcret
  1743  002DAA                     __end_of_pin_initialize:
  1744                           	opt callstack 0
  1745                           
  1746 ;; *************** function _osc_initialize *****************
  1747 ;; Defined at:
  1748 ;;		line 3 in file "mcc.c"
  1749 ;; Parameters:    Size  Location     Type
  1750 ;;		None
  1751 ;; Auto vars:     Size  Location     Type
  1752 ;;		None
  1753 ;; Return value:  Size  Location     Type
  1754 ;;                  1    wreg      void 
  1755 ;; Registers used:
  1756 ;;		wreg, status,2
  1757 ;; Tracked objects:
  1758 ;;		On entry : 0/0
  1759 ;;		On exit  : 0/0
  1760 ;;		Unchanged: 0/0
  1761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1766 ;;Total ram usage:        0 bytes
  1767 ;; Hardware stack levels used:    1
  1768 ;; Hardware stack levels required when called:    6
  1769 ;; This function calls:
  1770 ;;		Nothing
  1771 ;; This function is called by:
  1772 ;;		_system_initialize
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776                           	psect	text6
  1777  002EA6                     __ptext6:
  1778                           	opt callstack 0
  1779  002EA6                     _osc_initialize:
  1780                           	opt callstack 23
  1781  002EA6                     
  1782                           ;mcc.c: 4:     OSCCON = 0x70;
  1783  002EA6  0E70               	movlw	112
  1784  002EA8  6ED3               	movwf	211,c	;volatile
  1785  002EAA  0012               	return		;funcret
  1786  002EAC                     __end_of_osc_initialize:
  1787                           	opt callstack 0
  1788                           
  1789 ;; *************** function _interrupt_initialize *****************
  1790 ;; Defined at:
  1791 ;;		line 25 in file "mcc.c"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;		None
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;		None
  1796 ;; Return value:  Size  Location     Type
  1797 ;;                  1    wreg      void 
  1798 ;; Registers used:
  1799 ;;		None
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1809 ;;Total ram usage:        0 bytes
  1810 ;; Hardware stack levels used:    1
  1811 ;; Hardware stack levels required when called:    6
  1812 ;; This function calls:
  1813 ;;		Nothing
  1814 ;; This function is called by:
  1815 ;;		_system_initialize
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819                           	psect	text7
  1820  002EAC                     __ptext7:
  1821                           	opt callstack 0
  1822  002EAC                     _interrupt_initialize:
  1823                           	opt callstack 23
  1824  002EAC                     
  1825                           ;mcc.c: 26:     INTCONbits.GIE = 1;
  1826  002EAC  8EF2               	bsf	242,7,c	;volatile
  1827                           
  1828                           ;mcc.c: 27:     INTCONbits.PEIE = 1;
  1829  002EAE  8CF2               	bsf	242,6,c	;volatile
  1830  002EB0  0012               	return		;funcret
  1831  002EB2                     __end_of_interrupt_initialize:
  1832                           	opt callstack 0
  1833                           
  1834 ;; *************** function _LCDInit *****************
  1835 ;; Defined at:
  1836 ;;		line 45 in file "lcd.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;		None
  1839 ;; Auto vars:     Size  Location     Type
  1840 ;;		None
  1841 ;; Return value:  Size  Location     Type
  1842 ;;                  1    wreg      void 
  1843 ;; Registers used:
  1844 ;;		wreg, status,2, status,0, cstack
  1845 ;; Tracked objects:
  1846 ;;		On entry : 0/0
  1847 ;;		On exit  : 0/0
  1848 ;;		Unchanged: 0/0
  1849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1852 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1853 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1854 ;;Total ram usage:        1 bytes
  1855 ;; Hardware stack levels used:    1
  1856 ;; Hardware stack levels required when called:    9
  1857 ;; This function calls:
  1858 ;;		_InitBBSPI
  1859 ;;		_LCDPutInst
  1860 ;;		_Port_BBSPIInit
  1861 ;;		_WritePort_BBSPI
  1862 ;; This function is called by:
  1863 ;;		_system_initialize
  1864 ;; This function uses a non-reentrant model
  1865 ;;
  1866                           
  1867                           	psect	text8
  1868  002922                     __ptext8:
  1869                           	opt callstack 0
  1870  002922                     _LCDInit:
  1871                           	opt callstack 20
  1872  002922                     
  1873                           ;lcd.c: 47:     InitBBSPI();
  1874  002922  EC36  F017         	call	_InitBBSPI	;wreg free
  1875  002926                     
  1876                           ;lcd.c: 48:     TRISFbits.TRISF6 = 0;
  1877  002926  9C97               	bcf	151,6,c	;volatile
  1878  002928                     
  1879                           ;lcd.c: 49:     LATFbits.LATF6 = 0;
  1880  002928  9C8E               	bcf	142,6,c	;volatile
  1881  00292A                     
  1882                           ;lcd.c: 50:     _delay((unsigned long)((5)*(8000000/4000.0)));
  1883  00292A  0E0D               	movlw	13
  1884  00292C  0100               	movlb	0	; () banked
  1885  00292E  6F66               	movwf	??_LCDInit& (0+255),b
  1886  002930  0EFB               	movlw	251
  1887  002932                     u1957:
  1888  002932  2EE8               	decfsz	wreg,f,c
  1889  002934  D7FE               	bra	u1957
  1890  002936  2F66               	decfsz	??_LCDInit& (0+255),f,b
  1891  002938  D7FC               	bra	u1957
  1892  00293A  D000               	nop2	
  1893  00293C                     
  1894                           ;lcd.c: 51:     LATFbits.LATF6 = 1;
  1895  00293C  8C8E               	bsf	142,6,c	;volatile
  1896  00293E                     
  1897                           ;lcd.c: 52:     Port_BBSPIInit (0x00);
  1898  00293E  0E00               	movlw	0
  1899  002940  ECF4  F016         	call	_Port_BBSPIInit
  1900  002944                     
  1901                           ;lcd.c: 53:     Port_BBSPIInit (0x01);
  1902  002944  0E01               	movlw	1
  1903  002946  ECF4  F016         	call	_Port_BBSPIInit
  1904  00294A                     
  1905                           ;lcd.c: 54:     WritePort_BBSPI (0x12, 0);
  1906  00294A  0E00               	movlw	0
  1907  00294C  0100               	movlb	0	; () banked
  1908  00294E  6F63               	movwf	WritePort_BBSPI@a& (0+255),b
  1909  002950  0E12               	movlw	18
  1910  002952  ECD5  F016         	call	_WritePort_BBSPI
  1911  002956                     
  1912                           ;lcd.c: 55:     _delay((unsigned long)((15)*(8000000/4000.0)));
  1913  002956  0E27               	movlw	39
  1914  002958  0100               	movlb	0	; () banked
  1915  00295A  6F66               	movwf	??_LCDInit& (0+255),b
  1916  00295C  0EF5               	movlw	245
  1917  00295E                     u1967:
  1918  00295E  2EE8               	decfsz	wreg,f,c
  1919  002960  D7FE               	bra	u1967
  1920  002962  2F66               	decfsz	??_LCDInit& (0+255),f,b
  1921  002964  D7FC               	bra	u1967
  1922  002966                     
  1923                           ;lcd.c: 56:     LCDPutInst(0x32);
  1924  002966  0E32               	movlw	50
  1925  002968  ECBA  F015         	call	_LCDPutInst
  1926  00296C                     
  1927                           ;lcd.c: 57:     LCDPutInst(0x3C);
  1928  00296C  0E3C               	movlw	60
  1929  00296E  ECBA  F015         	call	_LCDPutInst
  1930  002972                     
  1931                           ;lcd.c: 58:     LCDPutInst(0x0C);
  1932  002972  0E0C               	movlw	12
  1933  002974  ECBA  F015         	call	_LCDPutInst
  1934  002978                     
  1935                           ;lcd.c: 59:     LCDPutInst(0x01);
  1936  002978  0E01               	movlw	1
  1937  00297A  ECBA  F015         	call	_LCDPutInst
  1938  00297E                     
  1939                           ;lcd.c: 60:     LCDPutInst(0x06);
  1940  00297E  0E06               	movlw	6
  1941  002980  ECBA  F015         	call	_LCDPutInst
  1942  002984  0012               	return		;funcret
  1943  002986                     __end_of_LCDInit:
  1944                           	opt callstack 0
  1945                           
  1946 ;; *************** function _Port_BBSPIInit *****************
  1947 ;; Defined at:
  1948 ;;		line 123 in file "lcd.c"
  1949 ;; Parameters:    Size  Location     Type
  1950 ;;  port_dir        1    wreg     unsigned char 
  1951 ;; Auto vars:     Size  Location     Type
  1952 ;;  port_dir        1    3[BANK0 ] unsigned char 
  1953 ;; Return value:  Size  Location     Type
  1954 ;;                  1    wreg      void 
  1955 ;; Registers used:
  1956 ;;		wreg, status,2, status,0, cstack
  1957 ;; Tracked objects:
  1958 ;;		On entry : 0/0
  1959 ;;		On exit  : 0/0
  1960 ;;		Unchanged: 0/0
  1961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1963 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1965 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1966 ;;Total ram usage:        1 bytes
  1967 ;; Hardware stack levels used:    1
  1968 ;; Hardware stack levels required when called:    7
  1969 ;; This function calls:
  1970 ;;		_SendByteBBSPI
  1971 ;; This function is called by:
  1972 ;;		_LCDInit
  1973 ;; This function uses a non-reentrant model
  1974 ;;
  1975                           
  1976                           	psect	text9
  1977  002DE8                     __ptext9:
  1978                           	opt callstack 0
  1979  002DE8                     _Port_BBSPIInit:
  1980                           	opt callstack 21
  1981                           
  1982                           ;incstack = 0
  1983                           ;Port_BBSPIInit@port_dir stored from wreg
  1984  002DE8  0100               	movlb	0	; () banked
  1985  002DEA  6F63               	movwf	Port_BBSPIInit@port_dir& (0+255),b
  1986  002DEC                     
  1987                           ;lcd.c: 123: void Port_BBSPIInit (unsigned char port_dir);lcd.c: 124: {;lcd.c: 128:     
      +                          LATAbits.LATA2 = 0;
  1988  002DEC  9489               	bcf	137,2,c	;volatile
  1989  002DEE                     
  1990                           ;lcd.c: 129:     SendByteBBSPI(0x40);
  1991  002DEE  0E40               	movlw	64
  1992  002DF0  EC5C  F014         	call	_SendByteBBSPI
  1993                           
  1994                           ;lcd.c: 130:     SendByteBBSPI(port_dir);
  1995  002DF4  0100               	movlb	0	; () banked
  1996  002DF6  5163               	movf	Port_BBSPIInit@port_dir& (0+255),w,b
  1997  002DF8  EC5C  F014         	call	_SendByteBBSPI
  1998                           
  1999                           ;lcd.c: 131:     SendByteBBSPI(0x00);
  2000  002DFC  0E00               	movlw	0
  2001  002DFE  EC5C  F014         	call	_SendByteBBSPI
  2002  002E02                     
  2003                           ;lcd.c: 132:     LATAbits.LATA2 = 1;
  2004  002E02  8489               	bsf	137,2,c	;volatile
  2005  002E04  0012               	return		;funcret
  2006  002E06                     __end_of_Port_BBSPIInit:
  2007                           	opt callstack 0
  2008                           
  2009 ;; *************** function _InitBBSPI *****************
  2010 ;; Defined at:
  2011 ;;		line 70 in file "lcd.c"
  2012 ;; Parameters:    Size  Location     Type
  2013 ;;		None
  2014 ;; Auto vars:     Size  Location     Type
  2015 ;;		None
  2016 ;; Return value:  Size  Location     Type
  2017 ;;                  1    wreg      void 
  2018 ;; Registers used:
  2019 ;;		None
  2020 ;; Tracked objects:
  2021 ;;		On entry : 0/0
  2022 ;;		On exit  : 0/0
  2023 ;;		Unchanged: 0/0
  2024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2029 ;;Total ram usage:        0 bytes
  2030 ;; Hardware stack levels used:    1
  2031 ;; Hardware stack levels required when called:    6
  2032 ;; This function calls:
  2033 ;;		Nothing
  2034 ;; This function is called by:
  2035 ;;		_LCDInit
  2036 ;; This function uses a non-reentrant model
  2037 ;;
  2038                           
  2039                           	psect	text10
  2040  002E6C                     __ptext10:
  2041                           	opt callstack 0
  2042  002E6C                     _InitBBSPI:
  2043                           	opt callstack 22
  2044  002E6C                     
  2045                           ;lcd.c: 72:     TRISAbits.TRISA2 = 0;
  2046  002E6C  9492               	bcf	146,2,c	;volatile
  2047                           
  2048                           ;lcd.c: 73:     TRISCbits.TRISC4 = 1;
  2049  002E6E  8894               	bsf	148,4,c	;volatile
  2050                           
  2051                           ;lcd.c: 74:     TRISCbits.TRISC5 = 0;
  2052  002E70  9A94               	bcf	148,5,c	;volatile
  2053                           
  2054                           ;lcd.c: 75:     TRISCbits.TRISC3 = 0;
  2055  002E72  9694               	bcf	148,3,c	;volatile
  2056                           
  2057                           ;lcd.c: 77:     LATAbits.LATA2 = 1;
  2058  002E74  8489               	bsf	137,2,c	;volatile
  2059                           
  2060                           ;lcd.c: 78:     LATCbits.LATC4 = 1;
  2061  002E76  888B               	bsf	139,4,c	;volatile
  2062                           
  2063                           ;lcd.c: 79:     LATCbits.LATC5 = 0;
  2064  002E78  9A8B               	bcf	139,5,c	;volatile
  2065                           
  2066                           ;lcd.c: 80:     LATCbits.LATC3 = 0;
  2067  002E7A  968B               	bcf	139,3,c	;volatile
  2068  002E7C  0012               	return		;funcret
  2069  002E7E                     __end_of_InitBBSPI:
  2070                           	opt callstack 0
  2071                           
  2072 ;; *************** function _remove_timer *****************
  2073 ;; Defined at:
  2074 ;;		line 42 in file "clock.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;  id              1    wreg     unsigned char 
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;  id              1    6[BANK0 ] unsigned char 
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  2   18[None  ] int 
  2081 ;; Registers used:
  2082 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2089 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2092 ;;Total ram usage:        1 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:    8
  2095 ;; This function calls:
  2096 ;;		_removeTask
  2097 ;; This function is called by:
  2098 ;;		_main
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           	psect	text11
  2103  002E90                     __ptext11:
  2104                           	opt callstack 0
  2105  002E90                     _remove_timer:
  2106                           	opt callstack 22
  2107                           
  2108                           ;incstack = 0
  2109                           ;remove_timer@id stored from wreg
  2110  002E90  0100               	movlb	0	; () banked
  2111  002E92  6F66               	movwf	remove_timer@id& (0+255),b
  2112  002E94                     
  2113                           ;clock.c: 43:     return removeTask(id);;	Return value of _remove_timer is never used
  2114  002E94  0100               	movlb	0	; () banked
  2115  002E96  5166               	movf	remove_timer@id& (0+255),w,b
  2116  002E98  ECA3  F00E         	call	_removeTask
  2117  002E9C  0012               	return		;funcret
  2118  002E9E                     __end_of_remove_timer:
  2119                           	opt callstack 0
  2120                           
  2121 ;; *************** function _removeTask *****************
  2122 ;; Defined at:
  2123 ;;		line 63 in file "task.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;  idx             1    wreg     unsigned char 
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;  idx             1    5[BANK0 ] unsigned char 
  2128 ;;  pos             1    4[BANK0 ] unsigned char 
  2129 ;; Return value:  Size  Location     Type
  2130 ;;                  1    wreg      unsigned char 
  2131 ;; Registers used:
  2132 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2133 ;; Tracked objects:
  2134 ;;		On entry : 0/0
  2135 ;;		On exit  : 0/0
  2136 ;;		Unchanged: 0/0
  2137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2139 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2140 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2141 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2142 ;;Total ram usage:        6 bytes
  2143 ;; Hardware stack levels used:    1
  2144 ;; Hardware stack levels required when called:    7
  2145 ;; This function calls:
  2146 ;;		_isEmptyList
  2147 ;; This function is called by:
  2148 ;;		_remove_timer
  2149 ;; This function uses a non-reentrant model
  2150 ;;
  2151                           
  2152                           	psect	text12
  2153  001D46                     __ptext12:
  2154                           	opt callstack 0
  2155  001D46                     _removeTask:
  2156                           	opt callstack 22
  2157                           
  2158                           ;incstack = 0
  2159                           ;removeTask@idx stored from wreg
  2160  001D46  0100               	movlb	0	; () banked
  2161  001D48  6F65               	movwf	removeTask@idx& (0+255),b
  2162  001D4A                     
  2163                           ;task.c: 64:     if(isEmptyList() || task_list[idx].func_ptr == ((void*)0))
  2164  001D4A  EC1E  F017         	call	_isEmptyList	;wreg free
  2165  001D4E  0900               	iorlw	0
  2166  001D50  A4D8               	btfss	status,2,c
  2167  001D52  EFAD  F00E         	goto	u1631
  2168  001D56  EFAF  F00E         	goto	u1630
  2169  001D5A                     u1631:
  2170  001D5A  EFC2  F00E         	goto	l2499
  2171  001D5E                     u1630:
  2172  001D5E  0100               	movlb	0	; () banked
  2173  001D60  5165               	movf	removeTask@idx& (0+255),w,b
  2174  001D62  0D0F               	mullw	15
  2175  001D64  0E6C               	movlw	low (_task_list+8)
  2176  001D66  24F3               	addwf	243,w,c
  2177  001D68  6ED9               	movwf	fsr2l,c
  2178  001D6A  0E01               	movlw	high (_task_list+8)
  2179  001D6C  20F4               	addwfc	prodh,w,c
  2180  001D6E  6EDA               	movwf	fsr2h,c
  2181  001D70  50DE               	movf	postinc2,w,c
  2182  001D72  10DE               	iorwf	postinc2,w,c
  2183  001D74  10DE               	iorwf	postinc2,w,c
  2184  001D76  A4D8               	btfss	status,2,c
  2185  001D78  EFC0  F00E         	goto	u1641
  2186  001D7C  EFC2  F00E         	goto	u1640
  2187  001D80                     u1641:
  2188  001D80  EFC5  F00E         	goto	l2503
  2189  001D84                     u1640:
  2190  001D84                     l2499:
  2191                           
  2192                           ;task.c: 65:         return 0;
  2193  001D84  0E00               	movlw	0
  2194  001D86  EF71  F00F         	goto	l240
  2195  001D8A                     l2503:
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;task.c: 66:     task_list[idx].delay_t = 0;
  2199  001D8A  5165               	movf	removeTask@idx& (0+255),w,b
  2200  001D8C  0D0F               	mullw	15
  2201  001D8E  0E64               	movlw	low _task_list
  2202  001D90  24F3               	addwf	243,w,c
  2203  001D92  6ED9               	movwf	fsr2l,c
  2204  001D94  0E01               	movlw	high _task_list
  2205  001D96  20F4               	addwfc	prodh,w,c
  2206  001D98  6EDA               	movwf	fsr2h,c
  2207  001D9A  6ADE               	clrf	postinc2,c
  2208  001D9C  6ADE               	clrf	postinc2,c
  2209  001D9E  6ADE               	clrf	postinc2,c
  2210  001DA0  6ADD               	clrf	postdec2,c
  2211                           
  2212                           ;task.c: 67:     task_list[idx].period_t = 0;
  2213  001DA2  5165               	movf	removeTask@idx& (0+255),w,b
  2214  001DA4  0D0F               	mullw	15
  2215  001DA6  0E68               	movlw	low (_task_list+4)
  2216  001DA8  24F3               	addwf	243,w,c
  2217  001DAA  6ED9               	movwf	fsr2l,c
  2218  001DAC  0E01               	movlw	high (_task_list+4)
  2219  001DAE  20F4               	addwfc	prodh,w,c
  2220  001DB0  6EDA               	movwf	fsr2h,c
  2221  001DB2  6ADE               	clrf	postinc2,c
  2222  001DB4  6ADE               	clrf	postinc2,c
  2223  001DB6  6ADE               	clrf	postinc2,c
  2224  001DB8  6ADD               	clrf	postdec2,c
  2225                           
  2226                           ;task.c: 68:     task_list[idx].func_ptr = ((void*)0);
  2227  001DBA  5165               	movf	removeTask@idx& (0+255),w,b
  2228  001DBC  0D0F               	mullw	15
  2229  001DBE  0E6C               	movlw	low (_task_list+8)
  2230  001DC0  24F3               	addwf	243,w,c
  2231  001DC2  6ED9               	movwf	fsr2l,c
  2232  001DC4  0E01               	movlw	high (_task_list+8)
  2233  001DC6  20F4               	addwfc	prodh,w,c
  2234  001DC8  6EDA               	movwf	fsr2h,c
  2235  001DCA  0E00               	movlw	0
  2236  001DCC  6EDE               	movwf	postinc2,c
  2237  001DCE  0E00               	movlw	0
  2238  001DD0  6EDE               	movwf	postinc2,c
  2239  001DD2  0E00               	movlw	0
  2240  001DD4  6EDE               	movwf	postinc2,c
  2241                           
  2242                           ;task.c: 69:     task_list[idx].data_p = ((void*)0);
  2243  001DD6  5165               	movf	removeTask@idx& (0+255),w,b
  2244  001DD8  0D0F               	mullw	15
  2245  001DDA  0E71               	movlw	low (_task_list+13)
  2246  001DDC  24F3               	addwf	243,w,c
  2247  001DDE  6ED9               	movwf	fsr2l,c
  2248  001DE0  0E01               	movlw	high (_task_list+13)
  2249  001DE2  20F4               	addwfc	prodh,w,c
  2250  001DE4  6EDA               	movwf	fsr2h,c
  2251  001DE6  0E00               	movlw	0
  2252  001DE8  6EDE               	movwf	postinc2,c
  2253  001DEA  0E00               	movlw	0
  2254  001DEC  6EDD               	movwf	postdec2,c
  2255  001DEE                     
  2256                           ; BSR set to: 0
  2257                           ;task.c: 70:     num_task--;
  2258  001DEE  07C0               	decf	_num_task& (0+255),f,b
  2259  001DF0                     
  2260                           ; BSR set to: 0
  2261                           ;task.c: 71:     if(idx == head) {
  2262  001DF0  51BF               	movf	_head& (0+255),w,b
  2263  001DF2  1965               	xorwf	removeTask@idx& (0+255),w,b
  2264  001DF4  A4D8               	btfss	status,2,c
  2265  001DF6  EFFF  F00E         	goto	u1651
  2266  001DFA  EF01  F00F         	goto	u1650
  2267  001DFE                     u1651:
  2268  001DFE  EF19  F00F         	goto	l241
  2269  001E02                     u1650:
  2270  001E02                     
  2271                           ; BSR set to: 0
  2272                           ;task.c: 72:         head = task_list[idx].next;
  2273  001E02  5165               	movf	removeTask@idx& (0+255),w,b
  2274  001E04  0D0F               	mullw	15
  2275  001E06  0E6F               	movlw	low (_task_list+11)
  2276  001E08  24F3               	addwf	243,w,c
  2277  001E0A  6ED9               	movwf	fsr2l,c
  2278  001E0C  0E01               	movlw	high (_task_list+11)
  2279  001E0E  20F4               	addwfc	prodh,w,c
  2280  001E10  6EDA               	movwf	fsr2h,c
  2281  001E12  50DF               	movf	indf2,w,c
  2282  001E14  6FBF               	movwf	_head& (0+255),b
  2283                           
  2284                           ;task.c: 73:         task_list[idx].next = 105;
  2285  001E16  5165               	movf	removeTask@idx& (0+255),w,b
  2286  001E18  0D0F               	mullw	15
  2287  001E1A  0E6F               	movlw	low (_task_list+11)
  2288  001E1C  24F3               	addwf	243,w,c
  2289  001E1E  6ED9               	movwf	fsr2l,c
  2290  001E20  0E01               	movlw	high (_task_list+11)
  2291  001E22  20F4               	addwfc	prodh,w,c
  2292  001E24  6EDA               	movwf	fsr2h,c
  2293  001E26  0E69               	movlw	105
  2294  001E28  6EDE               	movwf	postinc2,c
  2295  001E2A  0E00               	movlw	0
  2296  001E2C  6EDD               	movwf	postdec2,c
  2297                           
  2298                           ;task.c: 74:     }
  2299  001E2E  EF70  F00F         	goto	l2519
  2300  001E32                     l241:
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;task.c: 76:         char pos = head;
  2304  001E32  C0BF  F064         	movff	_head,removeTask@pos
  2305                           
  2306                           ;task.c: 77:         while(task_list[pos].next != 105 && task_list[pos].next != idx) {
  2307  001E36  EF27  F00F         	goto	l243
  2308  001E3A                     l2511:
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;task.c: 78:             pos = task_list[pos].next;
  2312  001E3A  5164               	movf	removeTask@pos& (0+255),w,b
  2313  001E3C  0D0F               	mullw	15
  2314  001E3E  0E6F               	movlw	low (_task_list+11)
  2315  001E40  24F3               	addwf	243,w,c
  2316  001E42  6ED9               	movwf	fsr2l,c
  2317  001E44  0E01               	movlw	high (_task_list+11)
  2318  001E46  20F4               	addwfc	prodh,w,c
  2319  001E48  6EDA               	movwf	fsr2h,c
  2320  001E4A  50DF               	movf	indf2,w,c
  2321  001E4C  6F64               	movwf	removeTask@pos& (0+255),b
  2322  001E4E                     l243:
  2323                           
  2324                           ; BSR set to: 0
  2325                           ;task.c: 77:         while(task_list[pos].next != 105 && task_list[pos].next != idx) {
  2326  001E4E  5164               	movf	removeTask@pos& (0+255),w,b
  2327  001E50  0D0F               	mullw	15
  2328  001E52  0E6F               	movlw	low (_task_list+11)
  2329  001E54  24F3               	addwf	243,w,c
  2330  001E56  6ED9               	movwf	fsr2l,c
  2331  001E58  0E01               	movlw	high (_task_list+11)
  2332  001E5A  20F4               	addwfc	prodh,w,c
  2333  001E5C  6EDA               	movwf	fsr2h,c
  2334  001E5E  0E69               	movlw	105
  2335  001E60  18DE               	xorwf	postinc2,w,c
  2336  001E62  10DE               	iorwf	postinc2,w,c
  2337  001E64  B4D8               	btfsc	status,2,c
  2338  001E66  EF37  F00F         	goto	u1661
  2339  001E6A  EF39  F00F         	goto	u1660
  2340  001E6E                     u1661:
  2341  001E6E  EF50  F00F         	goto	l2515
  2342  001E72                     u1660:
  2343  001E72                     
  2344                           ; BSR set to: 0
  2345  001E72  5164               	movf	removeTask@pos& (0+255),w,b
  2346  001E74  0D0F               	mullw	15
  2347  001E76  0E6F               	movlw	low (_task_list+11)
  2348  001E78  24F3               	addwf	243,w,c
  2349  001E7A  6ED9               	movwf	fsr2l,c
  2350  001E7C  0E01               	movlw	high (_task_list+11)
  2351  001E7E  20F4               	addwfc	prodh,w,c
  2352  001E80  6EDA               	movwf	fsr2h,c
  2353  001E82  5165               	movf	removeTask@idx& (0+255),w,b
  2354  001E84  6F62               	movwf	(??_removeTask+2)& (0+255),b
  2355  001E86  6B63               	clrf	(??_removeTask+3)& (0+255),b
  2356  001E88  50DE               	movf	postinc2,w,c
  2357  001E8A  1962               	xorwf	(??_removeTask+2)& (0+255),w,b
  2358  001E8C  E107               	bnz	u1671
  2359  001E8E  50DE               	movf	postinc2,w,c
  2360  001E90  1963               	xorwf	(??_removeTask+3)& (0+255),w,b
  2361  001E92  A4D8               	btfss	status,2,c
  2362  001E94  EF4E  F00F         	goto	u1671
  2363  001E98  EF50  F00F         	goto	u1670
  2364  001E9C                     u1671:
  2365  001E9C  EF1D  F00F         	goto	l2511
  2366  001EA0                     u1670:
  2367  001EA0                     l2515:
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;task.c: 80:         task_list[pos].next = task_list[idx].next;
  2371  001EA0  5165               	movf	removeTask@idx& (0+255),w,b
  2372  001EA2  0D0F               	mullw	15
  2373  001EA4  0E6F               	movlw	low (_task_list+11)
  2374  001EA6  24F3               	addwf	243,w,c
  2375  001EA8  6ED9               	movwf	fsr2l,c
  2376  001EAA  0E01               	movlw	high (_task_list+11)
  2377  001EAC  20F4               	addwfc	prodh,w,c
  2378  001EAE  6EDA               	movwf	fsr2h,c
  2379  001EB0  5164               	movf	removeTask@pos& (0+255),w,b
  2380  001EB2  0D0F               	mullw	15
  2381  001EB4  0E6F               	movlw	low (_task_list+11)
  2382  001EB6  24F3               	addwf	243,w,c
  2383  001EB8  6EE1               	movwf	fsr1l,c
  2384  001EBA  0E01               	movlw	high (_task_list+11)
  2385  001EBC  20F4               	addwfc	prodh,w,c
  2386  001EBE  6EE2               	movwf	fsr1h,c
  2387  001EC0  CFDE FFE6          	movff	postinc2,postinc1
  2388  001EC4  CFDD FFE5          	movff	postdec2,postdec1
  2389  001EC8                     
  2390                           ; BSR set to: 0
  2391                           ;task.c: 81:         task_list[idx].next = 105;
  2392  001EC8  5165               	movf	removeTask@idx& (0+255),w,b
  2393  001ECA  0D0F               	mullw	15
  2394  001ECC  0E6F               	movlw	low (_task_list+11)
  2395  001ECE  24F3               	addwf	243,w,c
  2396  001ED0  6ED9               	movwf	fsr2l,c
  2397  001ED2  0E01               	movlw	high (_task_list+11)
  2398  001ED4  20F4               	addwfc	prodh,w,c
  2399  001ED6  6EDA               	movwf	fsr2h,c
  2400  001ED8  0E69               	movlw	105
  2401  001EDA  6EDE               	movwf	postinc2,c
  2402  001EDC  0E00               	movlw	0
  2403  001EDE  6EDD               	movwf	postdec2,c
  2404  001EE0                     l2519:
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;task.c: 83:     return 1;
  2408  001EE0  0E01               	movlw	1
  2409  001EE2                     l240:
  2410  001EE2  0012               	return		;funcret
  2411  001EE4                     __end_of_removeTask:
  2412                           	opt callstack 0
  2413                           
  2414 ;; *************** function _isEmptyList *****************
  2415 ;; Defined at:
  2416 ;;		line 3 in file "task.c"
  2417 ;; Parameters:    Size  Location     Type
  2418 ;;		None
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;		None
  2421 ;; Return value:  Size  Location     Type
  2422 ;;                  1    wreg      unsigned char 
  2423 ;; Registers used:
  2424 ;;		wreg, status,2
  2425 ;; Tracked objects:
  2426 ;;		On entry : 0/0
  2427 ;;		On exit  : 0/0
  2428 ;;		Unchanged: 0/0
  2429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2434 ;;Total ram usage:        0 bytes
  2435 ;; Hardware stack levels used:    1
  2436 ;; Hardware stack levels required when called:    6
  2437 ;; This function calls:
  2438 ;;		Nothing
  2439 ;; This function is called by:
  2440 ;;		_removeTask
  2441 ;; This function uses a non-reentrant model
  2442 ;;
  2443                           
  2444                           	psect	text13
  2445  002E3C                     __ptext13:
  2446                           	opt callstack 0
  2447  002E3C                     _isEmptyList:
  2448                           	opt callstack 22
  2449  002E3C                     
  2450                           ;task.c: 4:     return num_task == 0 ? 1 : 0;
  2451  002E3C  0100               	movlb	0	; () banked
  2452  002E3E  51C0               	movf	_num_task& (0+255),w,b
  2453  002E40  B4D8               	btfsc	status,2,c
  2454  002E42  EF25  F017         	goto	u1391
  2455  002E46  EF28  F017         	goto	u1390
  2456  002E4A                     u1391:
  2457  002E4A  0E01               	movlw	1
  2458  002E4C  EF29  F017         	goto	u1400
  2459  002E50                     u1390:
  2460  002E50  0E00               	movlw	0
  2461  002E52                     u1400:
  2462  002E52                     
  2463                           ; BSR set to: 0
  2464  002E52  0012               	return		;funcret
  2465  002E54                     __end_of_isEmptyList:
  2466                           	opt callstack 0
  2467                           
  2468 ;; *************** function _register_timer *****************
  2469 ;; Defined at:
  2470 ;;		line 38 in file "clock.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;  period          4   38[BANK0 ] unsigned long 
  2473 ;;  delay           4   42[BANK0 ] unsigned long 
  2474 ;;  callback        3   46[BANK0 ] PTR FTN(PTR void ,)void 
  2475 ;;		 -> handleButton(1), printTime_ms(1), blinking_LED(1), 
  2476 ;;  data            2   49[BANK0 ] PTR void 
  2477 ;;		 -> RAM(3935), NULL(0), 
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;		None
  2480 ;; Return value:  Size  Location     Type
  2481 ;;                  1    wreg      unsigned char 
  2482 ;; Registers used:
  2483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2484 ;; Tracked objects:
  2485 ;;		On entry : 0/0
  2486 ;;		On exit  : 0/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2489 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2492 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;Total ram usage:       13 bytes
  2494 ;; Hardware stack levels used:    1
  2495 ;; Hardware stack levels required when called:    8
  2496 ;; This function calls:
  2497 ;;		_addTask
  2498 ;; This function is called by:
  2499 ;;		_main
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           	psect	text14
  2504  002C72                     __ptext14:
  2505                           	opt callstack 0
  2506  002C72                     _register_timer:
  2507                           	opt callstack 22
  2508  002C72                     
  2509                           ;clock.c: 39:     return addTask(period, delay, callback, data);
  2510  002C72  C086  F066         	movff	register_timer@period,addTask@period
  2511  002C76  C087  F067         	movff	register_timer@period+1,addTask@period+1
  2512  002C7A  C088  F068         	movff	register_timer@period+2,addTask@period+2
  2513  002C7E  C089  F069         	movff	register_timer@period+3,addTask@period+3
  2514  002C82  C08A  F06A         	movff	register_timer@delay,addTask@delay
  2515  002C86  C08B  F06B         	movff	register_timer@delay+1,addTask@delay+1
  2516  002C8A  C08C  F06C         	movff	register_timer@delay+2,addTask@delay+2
  2517  002C8E  C08D  F06D         	movff	register_timer@delay+3,addTask@delay+3
  2518  002C92  C08E  F06E         	movff	register_timer@callback,addTask@ptr
  2519  002C96  C08F  F06F         	movff	register_timer@callback+1,addTask@ptr+1
  2520  002C9A  C090  F070         	movff	register_timer@callback+2,addTask@ptr+2
  2521  002C9E  C091  F071         	movff	register_timer@data,addTask@data
  2522  002CA2  C092  F072         	movff	register_timer@data+1,addTask@data+1
  2523  002CA6  EC67  F00A         	call	_addTask	;wreg free
  2524  002CAA  0012               	return		;funcret
  2525  002CAC                     __end_of_register_timer:
  2526                           	opt callstack 0
  2527                           
  2528 ;; *************** function _addTask *****************
  2529 ;; Defined at:
  2530 ;;		line 24 in file "task.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;  period          4    6[BANK0 ] unsigned long 
  2533 ;;  delay           4   10[BANK0 ] unsigned long 
  2534 ;;  ptr             3   14[BANK0 ] PTR FTN(PTR void ,)void 
  2535 ;;		 -> handleButton(1), printTime_ms(1), blinking_LED(1), 
  2536 ;;  data            2   17[BANK0 ] PTR void 
  2537 ;;		 -> RAM(3935), NULL(0), 
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;  cur             2   35[BANK0 ] int 
  2540 ;;  prev            2   31[BANK0 ] int 
  2541 ;;  sum             2   33[BANK0 ] int 
  2542 ;;  idx             1   37[BANK0 ] unsigned char 
  2543 ;; Return value:  Size  Location     Type
  2544 ;;                  1    wreg      unsigned char 
  2545 ;; Registers used:
  2546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2547 ;; Tracked objects:
  2548 ;;		On entry : 0/0
  2549 ;;		On exit  : 0/0
  2550 ;;		Unchanged: 0/0
  2551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2552 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2553 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2554 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2555 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2556 ;;Total ram usage:       32 bytes
  2557 ;; Hardware stack levels used:    1
  2558 ;; Hardware stack levels required when called:    7
  2559 ;; This function calls:
  2560 ;;		___wmul
  2561 ;;		_isFullList
  2562 ;; This function is called by:
  2563 ;;		_register_timer
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           	psect	text15
  2568  0014CE                     __ptext15:
  2569                           	opt callstack 0
  2570  0014CE                     _addTask:
  2571                           	opt callstack 22
  2572  0014CE                     
  2573                           ;task.c: 25:     if(isFullList())
  2574  0014CE  EC11  F017         	call	_isFullList	;wreg free
  2575  0014D2  0900               	iorlw	0
  2576  0014D4  B4D8               	btfsc	status,2,c
  2577  0014D6  EF6F  F00A         	goto	u1531
  2578  0014DA  EF71  F00A         	goto	u1530
  2579  0014DE                     u1531:
  2580  0014DE  EF74  F00A         	goto	l2433
  2581  0014E2                     u1530:
  2582  0014E2                     l2429:
  2583                           
  2584                           ;task.c: 26:         return 109;
  2585  0014E2  0E6D               	movlw	109
  2586  0014E4  EF36  F00C         	goto	l220
  2587  0014E8                     l2433:
  2588                           
  2589                           ;task.c: 27:     char idx;;task.c: 28:     for(idx = 0; idx < 20; idx++) {
  2590  0014E8  0E00               	movlw	0
  2591  0014EA  0100               	movlb	0	; () banked
  2592  0014EC  6F85               	movwf	addTask@idx& (0+255),b
  2593  0014EE                     l2439:
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;task.c: 29:         if(task_list[idx].func_ptr == ((void*)0))
  2597  0014EE  5185               	movf	addTask@idx& (0+255),w,b
  2598  0014F0  0D0F               	mullw	15
  2599  0014F2  0E6C               	movlw	low (_task_list+8)
  2600  0014F4  24F3               	addwf	243,w,c
  2601  0014F6  6ED9               	movwf	fsr2l,c
  2602  0014F8  0E01               	movlw	high (_task_list+8)
  2603  0014FA  20F4               	addwfc	prodh,w,c
  2604  0014FC  6EDA               	movwf	fsr2h,c
  2605  0014FE  50DE               	movf	postinc2,w,c
  2606  001500  10DE               	iorwf	postinc2,w,c
  2607  001502  10DE               	iorwf	postinc2,w,c
  2608  001504  A4D8               	btfss	status,2,c
  2609  001506  EF87  F00A         	goto	u1541
  2610  00150A  EF89  F00A         	goto	u1540
  2611  00150E                     u1541:
  2612  00150E  EF8B  F00A         	goto	l2443
  2613  001512                     u1540:
  2614  001512  EF94  F00A         	goto	l2447
  2615  001516                     l2443:
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;task.c: 31:     }
  2619  001516  2B85               	incf	addTask@idx& (0+255),f,b
  2620  001518                     
  2621                           ; BSR set to: 0
  2622  001518  0E13               	movlw	19
  2623  00151A  6585               	cpfsgt	addTask@idx& (0+255),b
  2624  00151C  EF92  F00A         	goto	u1551
  2625  001520  EF94  F00A         	goto	u1550
  2626  001524                     u1551:
  2627  001524  EF77  F00A         	goto	l2439
  2628  001528                     u1550:
  2629  001528                     l2447:
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;task.c: 32:     if(idx == 20)
  2633  001528  0E14               	movlw	20
  2634  00152A  1985               	xorwf	addTask@idx& (0+255),w,b
  2635  00152C  A4D8               	btfss	status,2,c
  2636  00152E  EF9B  F00A         	goto	u1561
  2637  001532  EF9D  F00A         	goto	u1560
  2638  001536                     u1561:
  2639  001536  EF9F  F00A         	goto	l2453
  2640  00153A                     u1560:
  2641  00153A  EF71  F00A         	goto	l2429
  2642  00153E                     l2453:
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;task.c: 34:     task_list[idx].delay_t = delay;
  2646  00153E  5185               	movf	addTask@idx& (0+255),w,b
  2647  001540  0D0F               	mullw	15
  2648  001542  0E64               	movlw	low _task_list
  2649  001544  24F3               	addwf	243,w,c
  2650  001546  6ED9               	movwf	fsr2l,c
  2651  001548  0E01               	movlw	high _task_list
  2652  00154A  20F4               	addwfc	prodh,w,c
  2653  00154C  6EDA               	movwf	fsr2h,c
  2654  00154E  C06A  FFDE         	movff	addTask@delay,postinc2
  2655  001552  C06B  FFDE         	movff	addTask@delay+1,postinc2
  2656  001556  C06C  FFDE         	movff	addTask@delay+2,postinc2
  2657  00155A  C06D  FFDE         	movff	addTask@delay+3,postinc2
  2658                           
  2659                           ;task.c: 35:     task_list[idx].period_t = period;
  2660  00155E  5185               	movf	addTask@idx& (0+255),w,b
  2661  001560  0D0F               	mullw	15
  2662  001562  0E68               	movlw	low (_task_list+4)
  2663  001564  24F3               	addwf	243,w,c
  2664  001566  6ED9               	movwf	fsr2l,c
  2665  001568  0E01               	movlw	high (_task_list+4)
  2666  00156A  20F4               	addwfc	prodh,w,c
  2667  00156C  6EDA               	movwf	fsr2h,c
  2668  00156E  C066  FFDE         	movff	addTask@period,postinc2
  2669  001572  C067  FFDE         	movff	addTask@period+1,postinc2
  2670  001576  C068  FFDE         	movff	addTask@period+2,postinc2
  2671  00157A  C069  FFDE         	movff	addTask@period+3,postinc2
  2672                           
  2673                           ;task.c: 36:     task_list[idx].func_ptr = ptr;
  2674  00157E  5185               	movf	addTask@idx& (0+255),w,b
  2675  001580  0D0F               	mullw	15
  2676  001582  0E6C               	movlw	low (_task_list+8)
  2677  001584  24F3               	addwf	243,w,c
  2678  001586  6ED9               	movwf	fsr2l,c
  2679  001588  0E01               	movlw	high (_task_list+8)
  2680  00158A  20F4               	addwfc	prodh,w,c
  2681  00158C  6EDA               	movwf	fsr2h,c
  2682  00158E  C06E  FFDE         	movff	addTask@ptr,postinc2
  2683  001592  C06F  FFDE         	movff	addTask@ptr+1,postinc2
  2684  001596  C070  FFDE         	movff	addTask@ptr+2,postinc2
  2685                           
  2686                           ;task.c: 37:     task_list[idx].data_p = data;
  2687  00159A  5185               	movf	addTask@idx& (0+255),w,b
  2688  00159C  0D0F               	mullw	15
  2689  00159E  0E71               	movlw	low (_task_list+13)
  2690  0015A0  24F3               	addwf	243,w,c
  2691  0015A2  6ED9               	movwf	fsr2l,c
  2692  0015A4  0E01               	movlw	high (_task_list+13)
  2693  0015A6  20F4               	addwfc	prodh,w,c
  2694  0015A8  6EDA               	movwf	fsr2h,c
  2695  0015AA  C071  FFDE         	movff	addTask@data,postinc2
  2696  0015AE  C072  FFDD         	movff	addTask@data+1,postdec2
  2697  0015B2                     
  2698                           ; BSR set to: 0
  2699                           ;task.c: 38:     num_task++;
  2700  0015B2  2BC0               	incf	_num_task& (0+255),f,b
  2701  0015B4                     
  2702                           ; BSR set to: 0
  2703                           ;task.c: 39:     int sum = task_list[head].delay_t;
  2704  0015B4  51BF               	movf	_head& (0+255),w,b
  2705  0015B6  0D0F               	mullw	15
  2706  0015B8  0E64               	movlw	low _task_list
  2707  0015BA  24F3               	addwf	243,w,c
  2708  0015BC  6ED9               	movwf	fsr2l,c
  2709  0015BE  0E01               	movlw	high _task_list
  2710  0015C0  20F4               	addwfc	prodh,w,c
  2711  0015C2  6EDA               	movwf	fsr2h,c
  2712  0015C4  CFDE F081          	movff	postinc2,addTask@sum
  2713  0015C8  CFDD F082          	movff	postdec2,addTask@sum+1
  2714  0015CC                     
  2715                           ; BSR set to: 0
  2716                           ;task.c: 40:     if(head == 105 || (head != 105 && sum > delay)) {
  2717  0015CC  0E69               	movlw	105
  2718  0015CE  19BF               	xorwf	_head& (0+255),w,b
  2719  0015D0  B4D8               	btfsc	status,2,c
  2720  0015D2  EFED  F00A         	goto	u1571
  2721  0015D6  EFEF  F00A         	goto	u1570
  2722  0015DA                     u1571:
  2723  0015DA  EF10  F00B         	goto	l2465
  2724  0015DE                     u1570:
  2725  0015DE                     
  2726                           ; BSR set to: 0
  2727  0015DE  0E69               	movlw	105
  2728  0015E0  19BF               	xorwf	_head& (0+255),w,b
  2729  0015E2  B4D8               	btfsc	status,2,c
  2730  0015E4  EFF6  F00A         	goto	u1581
  2731  0015E8  EFF8  F00A         	goto	u1580
  2732  0015EC                     u1581:
  2733  0015EC  EF23  F00B         	goto	l2469
  2734  0015F0                     u1580:
  2735  0015F0                     
  2736                           ; BSR set to: 0
  2737  0015F0  C081  F073         	movff	addTask@sum,??_addTask
  2738  0015F4  C082  F074         	movff	addTask@sum+1,??_addTask+1
  2739  0015F8  0E00               	movlw	0
  2740  0015FA  BF74               	btfsc	(??_addTask+1)& (0+255),7,b
  2741  0015FC  0EFF               	movlw	255
  2742  0015FE  6F75               	movwf	(??_addTask+2)& (0+255),b
  2743  001600  6F76               	movwf	(??_addTask+3)& (0+255),b
  2744  001602  5173               	movf	??_addTask& (0+255),w,b
  2745  001604  5D6A               	subwf	addTask@delay& (0+255),w,b
  2746  001606  5174               	movf	(??_addTask+1)& (0+255),w,b
  2747  001608  596B               	subwfb	(addTask@delay+1)& (0+255),w,b
  2748  00160A  5175               	movf	(??_addTask+2)& (0+255),w,b
  2749  00160C  596C               	subwfb	(addTask@delay+2)& (0+255),w,b
  2750  00160E  5176               	movf	(??_addTask+3)& (0+255),w,b
  2751  001610  596D               	subwfb	(addTask@delay+3)& (0+255),w,b
  2752  001612  B0D8               	btfsc	status,0,c
  2753  001614  EF0E  F00B         	goto	u1591
  2754  001618  EF10  F00B         	goto	u1590
  2755  00161C                     u1591:
  2756  00161C  EF23  F00B         	goto	l2469
  2757  001620                     u1590:
  2758  001620                     l2465:
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;task.c: 41:         task_list[idx].next = head;
  2762  001620  51BF               	movf	_head& (0+255),w,b
  2763  001622  6F73               	movwf	??_addTask& (0+255),b
  2764  001624  6B74               	clrf	(??_addTask+1)& (0+255),b
  2765  001626  5185               	movf	addTask@idx& (0+255),w,b
  2766  001628  0D0F               	mullw	15
  2767  00162A  0E6F               	movlw	low (_task_list+11)
  2768  00162C  24F3               	addwf	243,w,c
  2769  00162E  6ED9               	movwf	fsr2l,c
  2770  001630  0E01               	movlw	high (_task_list+11)
  2771  001632  20F4               	addwfc	prodh,w,c
  2772  001634  6EDA               	movwf	fsr2h,c
  2773  001636  C073  FFDE         	movff	??_addTask,postinc2
  2774  00163A  C074  FFDD         	movff	??_addTask+1,postdec2
  2775  00163E                     
  2776                           ; BSR set to: 0
  2777                           ;task.c: 42:         head = idx;
  2778  00163E  C085  F0BF         	movff	addTask@idx,_head
  2779                           
  2780                           ;task.c: 43:     }
  2781  001642  EFF2  F00B         	goto	l2487
  2782  001646                     l2469:
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;task.c: 46:         int cur = task_list[head].next;
  2786  001646  51BF               	movf	_head& (0+255),w,b
  2787  001648  0D0F               	mullw	15
  2788  00164A  0E6F               	movlw	low (_task_list+11)
  2789  00164C  24F3               	addwf	243,w,c
  2790  00164E  6ED9               	movwf	fsr2l,c
  2791  001650  0E01               	movlw	high (_task_list+11)
  2792  001652  20F4               	addwfc	prodh,w,c
  2793  001654  6EDA               	movwf	fsr2h,c
  2794  001656  CFDE F083          	movff	postinc2,addTask@cur
  2795  00165A  CFDD F084          	movff	postdec2,addTask@cur+1
  2796  00165E                     
  2797                           ; BSR set to: 0
  2798                           ;task.c: 47:         int prev = head;
  2799  00165E  C0BF  F07F         	movff	_head,addTask@prev
  2800  001662  6B80               	clrf	(addTask@prev+1)& (0+255),b
  2801                           
  2802                           ;task.c: 48:         while(cur != 105 && sum + task_list[cur].delay_t <= delay) {
  2803  001664  EF62  F00B         	goto	l2477
  2804  001668                     l2473:
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;task.c: 50:             sum+= task_list[cur].delay_t;
  2808  001668  C083  F060         	movff	addTask@cur,___wmul@multiplier
  2809  00166C  C084  F061         	movff	addTask@cur+1,___wmul@multiplier+1
  2810  001670  0E00               	movlw	0
  2811  001672  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2812  001674  0E0F               	movlw	15
  2813  001676  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2814  001678  EC9C  F016         	call	___wmul	;wreg free
  2815  00167C  0E64               	movlw	low _task_list
  2816  00167E  0100               	movlb	0	; () banked
  2817  001680  2560               	addwf	?___wmul& (0+255),w,b
  2818  001682  6ED9               	movwf	fsr2l,c
  2819  001684  0E01               	movlw	high _task_list
  2820  001686  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  2821  001688  6EDA               	movwf	fsr2h,c
  2822  00168A  50DE               	movf	postinc2,w,c
  2823  00168C  2781               	addwf	addTask@sum& (0+255),f,b
  2824  00168E  50DD               	movf	postdec2,w,c
  2825  001690  2382               	addwfc	(addTask@sum+1)& (0+255),f,b
  2826  001692                     
  2827                           ; BSR set to: 0
  2828                           ;task.c: 51:             prev = cur;
  2829  001692  C083  F07F         	movff	addTask@cur,addTask@prev
  2830  001696  C084  F080         	movff	addTask@cur+1,addTask@prev+1
  2831                           
  2832                           ;task.c: 52:             cur = task_list[cur].next;
  2833  00169A  C083  F060         	movff	addTask@cur,___wmul@multiplier
  2834  00169E  C084  F061         	movff	addTask@cur+1,___wmul@multiplier+1
  2835  0016A2  0E00               	movlw	0
  2836  0016A4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2837  0016A6  0E0F               	movlw	15
  2838  0016A8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2839  0016AA  EC9C  F016         	call	___wmul	;wreg free
  2840  0016AE  0E6F               	movlw	low (_task_list+11)
  2841  0016B0  0100               	movlb	0	; () banked
  2842  0016B2  2560               	addwf	?___wmul& (0+255),w,b
  2843  0016B4  6ED9               	movwf	fsr2l,c
  2844  0016B6  0E01               	movlw	high (_task_list+11)
  2845  0016B8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  2846  0016BA  6EDA               	movwf	fsr2h,c
  2847  0016BC  CFDE F083          	movff	postinc2,addTask@cur
  2848  0016C0  CFDD F084          	movff	postdec2,addTask@cur+1
  2849  0016C4                     l2477:
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;task.c: 48:         while(cur != 105 && sum + task_list[cur].delay_t <= delay) {
  2853  0016C4  0E69               	movlw	105
  2854  0016C6  1983               	xorwf	addTask@cur& (0+255),w,b
  2855  0016C8  1184               	iorwf	(addTask@cur+1)& (0+255),w,b
  2856  0016CA  B4D8               	btfsc	status,2,c
  2857  0016CC  EF6A  F00B         	goto	u1601
  2858  0016D0  EF6C  F00B         	goto	u1600
  2859  0016D4                     u1601:
  2860  0016D4  EFA9  F00B         	goto	l2481
  2861  0016D8                     u1600:
  2862  0016D8                     
  2863                           ; BSR set to: 0
  2864  0016D8  C083  F060         	movff	addTask@cur,___wmul@multiplier
  2865  0016DC  C084  F061         	movff	addTask@cur+1,___wmul@multiplier+1
  2866  0016E0  0E00               	movlw	0
  2867  0016E2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2868  0016E4  0E0F               	movlw	15
  2869  0016E6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2870  0016E8  EC9C  F016         	call	___wmul	;wreg free
  2871  0016EC  0E64               	movlw	low _task_list
  2872  0016EE  0100               	movlb	0	; () banked
  2873  0016F0  2560               	addwf	?___wmul& (0+255),w,b
  2874  0016F2  6ED9               	movwf	fsr2l,c
  2875  0016F4  0E01               	movlw	high _task_list
  2876  0016F6  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  2877  0016F8  6EDA               	movwf	fsr2h,c
  2878  0016FA  CFDE F073          	movff	postinc2,??_addTask
  2879  0016FE  CFDE F074          	movff	postinc2,??_addTask+1
  2880  001702  CFDE F075          	movff	postinc2,??_addTask+2
  2881  001706  CFDE F076          	movff	postinc2,??_addTask+3
  2882  00170A  C081  F077         	movff	addTask@sum,??_addTask+4
  2883  00170E  C082  F078         	movff	addTask@sum+1,??_addTask+5
  2884  001712  0E00               	movlw	0
  2885  001714  BF78               	btfsc	(??_addTask+5)& (0+255),7,b
  2886  001716  0EFF               	movlw	255
  2887  001718  6F79               	movwf	(??_addTask+6)& (0+255),b
  2888  00171A  6F7A               	movwf	(??_addTask+7)& (0+255),b
  2889  00171C  5173               	movf	??_addTask& (0+255),w,b
  2890  00171E  2577               	addwf	(??_addTask+4)& (0+255),w,b
  2891  001720  6F7B               	movwf	(??_addTask+8)& (0+255),b
  2892  001722  5174               	movf	(??_addTask+1)& (0+255),w,b
  2893  001724  2178               	addwfc	(??_addTask+5)& (0+255),w,b
  2894  001726  6F7C               	movwf	(??_addTask+9)& (0+255),b
  2895  001728  5175               	movf	(??_addTask+2)& (0+255),w,b
  2896  00172A  2179               	addwfc	(??_addTask+6)& (0+255),w,b
  2897  00172C  6F7D               	movwf	(??_addTask+10)& (0+255),b
  2898  00172E  5176               	movf	(??_addTask+3)& (0+255),w,b
  2899  001730  217A               	addwfc	(??_addTask+7)& (0+255),w,b
  2900  001732  6F7E               	movwf	(??_addTask+11)& (0+255),b
  2901  001734  517B               	movf	(??_addTask+8)& (0+255),w,b
  2902  001736  5D6A               	subwf	addTask@delay& (0+255),w,b
  2903  001738  517C               	movf	(??_addTask+9)& (0+255),w,b
  2904  00173A  596B               	subwfb	(addTask@delay+1)& (0+255),w,b
  2905  00173C  517D               	movf	(??_addTask+10)& (0+255),w,b
  2906  00173E  596C               	subwfb	(addTask@delay+2)& (0+255),w,b
  2907  001740  517E               	movf	(??_addTask+11)& (0+255),w,b
  2908  001742  596D               	subwfb	(addTask@delay+3)& (0+255),w,b
  2909  001744  B0D8               	btfsc	status,0,c
  2910  001746  EFA7  F00B         	goto	u1611
  2911  00174A  EFA9  F00B         	goto	u1610
  2912  00174E                     u1611:
  2913  00174E  EF34  F00B         	goto	l2473
  2914  001752                     u1610:
  2915  001752                     l2481:
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;task.c: 54:         task_list[prev].next = idx;
  2919  001752  5185               	movf	addTask@idx& (0+255),w,b
  2920  001754  6F73               	movwf	??_addTask& (0+255),b
  2921  001756  6B74               	clrf	(??_addTask+1)& (0+255),b
  2922  001758  C07F  F060         	movff	addTask@prev,___wmul@multiplier
  2923  00175C  C080  F061         	movff	addTask@prev+1,___wmul@multiplier+1
  2924  001760  0E00               	movlw	0
  2925  001762  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2926  001764  0E0F               	movlw	15
  2927  001766  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2928  001768  EC9C  F016         	call	___wmul	;wreg free
  2929  00176C  0E6F               	movlw	low (_task_list+11)
  2930  00176E  0100               	movlb	0	; () banked
  2931  001770  2560               	addwf	?___wmul& (0+255),w,b
  2932  001772  6ED9               	movwf	fsr2l,c
  2933  001774  0E01               	movlw	high (_task_list+11)
  2934  001776  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  2935  001778  6EDA               	movwf	fsr2h,c
  2936  00177A  C073  FFDE         	movff	??_addTask,postinc2
  2937  00177E  C074  FFDD         	movff	??_addTask+1,postdec2
  2938  001782                     
  2939                           ; BSR set to: 0
  2940                           ;task.c: 55:         task_list[idx].next = cur;
  2941  001782  5185               	movf	addTask@idx& (0+255),w,b
  2942  001784  0D0F               	mullw	15
  2943  001786  0E6F               	movlw	low (_task_list+11)
  2944  001788  24F3               	addwf	243,w,c
  2945  00178A  6ED9               	movwf	fsr2l,c
  2946  00178C  0E01               	movlw	high (_task_list+11)
  2947  00178E  20F4               	addwfc	prodh,w,c
  2948  001790  6EDA               	movwf	fsr2h,c
  2949  001792  C083  FFDE         	movff	addTask@cur,postinc2
  2950  001796  C084  FFDD         	movff	addTask@cur+1,postdec2
  2951  00179A                     
  2952                           ; BSR set to: 0
  2953                           ;task.c: 56:         task_list[idx].delay_t = delay - sum;
  2954  00179A  C081  F073         	movff	addTask@sum,??_addTask
  2955  00179E  C082  F074         	movff	addTask@sum+1,??_addTask+1
  2956  0017A2  0E00               	movlw	0
  2957  0017A4  BF74               	btfsc	(??_addTask+1)& (0+255),7,b
  2958  0017A6  0EFF               	movlw	255
  2959  0017A8  6F75               	movwf	(??_addTask+2)& (0+255),b
  2960  0017AA  6F76               	movwf	(??_addTask+3)& (0+255),b
  2961  0017AC  5173               	movf	??_addTask& (0+255),w,b
  2962  0017AE  5D6A               	subwf	addTask@delay& (0+255),w,b
  2963  0017B0  6F77               	movwf	(??_addTask+4)& (0+255),b
  2964  0017B2  5174               	movf	(??_addTask+1)& (0+255),w,b
  2965  0017B4  596B               	subwfb	(addTask@delay+1)& (0+255),w,b
  2966  0017B6  6F78               	movwf	(??_addTask+5)& (0+255),b
  2967  0017B8  5175               	movf	(??_addTask+2)& (0+255),w,b
  2968  0017BA  596C               	subwfb	(addTask@delay+2)& (0+255),w,b
  2969  0017BC  6F79               	movwf	(??_addTask+6)& (0+255),b
  2970  0017BE  5176               	movf	(??_addTask+3)& (0+255),w,b
  2971  0017C0  596D               	subwfb	(addTask@delay+3)& (0+255),w,b
  2972  0017C2  6F7A               	movwf	(??_addTask+7)& (0+255),b
  2973  0017C4  5185               	movf	addTask@idx& (0+255),w,b
  2974  0017C6  0D0F               	mullw	15
  2975  0017C8  0E64               	movlw	low _task_list
  2976  0017CA  24F3               	addwf	243,w,c
  2977  0017CC  6ED9               	movwf	fsr2l,c
  2978  0017CE  0E01               	movlw	high _task_list
  2979  0017D0  20F4               	addwfc	prodh,w,c
  2980  0017D2  6EDA               	movwf	fsr2h,c
  2981  0017D4  C077  FFDE         	movff	??_addTask+4,postinc2
  2982  0017D8  C078  FFDE         	movff	??_addTask+5,postinc2
  2983  0017DC  C079  FFDE         	movff	??_addTask+6,postinc2
  2984  0017E0  C07A  FFDE         	movff	??_addTask+7,postinc2
  2985  0017E4                     l2487:
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;task.c: 58:     if(task_list[idx].next != 105)
  2989  0017E4  5185               	movf	addTask@idx& (0+255),w,b
  2990  0017E6  0D0F               	mullw	15
  2991  0017E8  0E6F               	movlw	low (_task_list+11)
  2992  0017EA  24F3               	addwf	243,w,c
  2993  0017EC  6ED9               	movwf	fsr2l,c
  2994  0017EE  0E01               	movlw	high (_task_list+11)
  2995  0017F0  20F4               	addwfc	prodh,w,c
  2996  0017F2  6EDA               	movwf	fsr2h,c
  2997  0017F4  0E69               	movlw	105
  2998  0017F6  18DE               	xorwf	postinc2,w,c
  2999  0017F8  10DE               	iorwf	postinc2,w,c
  3000  0017FA  B4D8               	btfsc	status,2,c
  3001  0017FC  EF02  F00C         	goto	u1621
  3002  001800  EF04  F00C         	goto	u1620
  3003  001804                     u1621:
  3004  001804  EF35  F00C         	goto	l2491
  3005  001808                     u1620:
  3006  001808                     
  3007                           ; BSR set to: 0
  3008                           ;task.c: 59:         task_list[task_list[idx].next].delay_t-= task_list[idx].delay_t;
  3009  001808  5185               	movf	addTask@idx& (0+255),w,b
  3010  00180A  0D0F               	mullw	15
  3011  00180C  0E64               	movlw	low _task_list
  3012  00180E  24F3               	addwf	243,w,c
  3013  001810  6ED9               	movwf	fsr2l,c
  3014  001812  0E01               	movlw	high _task_list
  3015  001814  20F4               	addwfc	prodh,w,c
  3016  001816  6EDA               	movwf	fsr2h,c
  3017  001818  CFDE F073          	movff	postinc2,??_addTask
  3018  00181C  CFDE F074          	movff	postinc2,??_addTask+1
  3019  001820  CFDE F075          	movff	postinc2,??_addTask+2
  3020  001824  CFDE F076          	movff	postinc2,??_addTask+3
  3021  001828  5185               	movf	addTask@idx& (0+255),w,b
  3022  00182A  0D0F               	mullw	15
  3023  00182C  0E6F               	movlw	low (_task_list+11)
  3024  00182E  24F3               	addwf	243,w,c
  3025  001830  6ED9               	movwf	fsr2l,c
  3026  001832  0E01               	movlw	high (_task_list+11)
  3027  001834  20F4               	addwfc	prodh,w,c
  3028  001836  6EDA               	movwf	fsr2h,c
  3029  001838  CFDE F060          	movff	postinc2,___wmul@multiplier
  3030  00183C  CFDD F061          	movff	postdec2,___wmul@multiplier+1
  3031  001840  0E00               	movlw	0
  3032  001842  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3033  001844  0E0F               	movlw	15
  3034  001846  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3035  001848  EC9C  F016         	call	___wmul	;wreg free
  3036  00184C  0E64               	movlw	low _task_list
  3037  00184E  0100               	movlb	0	; () banked
  3038  001850  2560               	addwf	?___wmul& (0+255),w,b
  3039  001852  6ED9               	movwf	fsr2l,c
  3040  001854  0E01               	movlw	high _task_list
  3041  001856  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  3042  001858  6EDA               	movwf	fsr2h,c
  3043  00185A  5173               	movf	??_addTask& (0+255),w,b
  3044  00185C  5EDE               	subwf	postinc2,f,c
  3045  00185E  5174               	movf	(??_addTask+1)& (0+255),w,b
  3046  001860  5ADE               	subwfb	postinc2,f,c
  3047  001862  5175               	movf	(??_addTask+2)& (0+255),w,b
  3048  001864  5ADE               	subwfb	postinc2,f,c
  3049  001866  5176               	movf	(??_addTask+3)& (0+255),w,b
  3050  001868  5ADE               	subwfb	postinc2,f,c
  3051  00186A                     l2491:
  3052                           
  3053                           ; BSR set to: 0
  3054                           ;task.c: 60:     return idx;
  3055  00186A  5185               	movf	addTask@idx& (0+255),w,b
  3056  00186C                     l220:
  3057  00186C  0012               	return		;funcret
  3058  00186E                     __end_of_addTask:
  3059                           	opt callstack 0
  3060                           
  3061 ;; *************** function _isFullList *****************
  3062 ;; Defined at:
  3063 ;;		line 7 in file "task.c"
  3064 ;; Parameters:    Size  Location     Type
  3065 ;;		None
  3066 ;; Auto vars:     Size  Location     Type
  3067 ;;		None
  3068 ;; Return value:  Size  Location     Type
  3069 ;;                  1    wreg      unsigned char 
  3070 ;; Registers used:
  3071 ;;		wreg, status,2, status,0
  3072 ;; Tracked objects:
  3073 ;;		On entry : 0/0
  3074 ;;		On exit  : 0/0
  3075 ;;		Unchanged: 0/0
  3076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;Total ram usage:        0 bytes
  3082 ;; Hardware stack levels used:    1
  3083 ;; Hardware stack levels required when called:    6
  3084 ;; This function calls:
  3085 ;;		Nothing
  3086 ;; This function is called by:
  3087 ;;		_addTask
  3088 ;; This function uses a non-reentrant model
  3089 ;;
  3090                           
  3091                           	psect	text16
  3092  002E22                     __ptext16:
  3093                           	opt callstack 0
  3094  002E22                     _isFullList:
  3095                           	opt callstack 22
  3096  002E22                     
  3097                           ;task.c: 8:     return num_task == 20 ? 1 : 0;
  3098  002E22  0E14               	movlw	20
  3099  002E24  0100               	movlb	0	; () banked
  3100  002E26  19C0               	xorwf	_num_task& (0+255),w,b
  3101  002E28  B4D8               	btfsc	status,2,c
  3102  002E2A  EF19  F017         	goto	u1411
  3103  002E2E  EF1C  F017         	goto	u1410
  3104  002E32                     u1411:
  3105  002E32  0E01               	movlw	1
  3106  002E34  EF1D  F017         	goto	u1420
  3107  002E38                     u1410:
  3108  002E38  0E00               	movlw	0
  3109  002E3A                     u1420:
  3110  002E3A                     
  3111                           ; BSR set to: 0
  3112  002E3A  0012               	return		;funcret
  3113  002E3C                     __end_of_isFullList:
  3114                           	opt callstack 0
  3115                           
  3116 ;; *************** function _dispatch *****************
  3117 ;; Defined at:
  3118 ;;		line 69 in file "clock.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;		None
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;		None
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  1    wreg      void 
  3125 ;; Registers used:
  3126 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3136 ;;Total ram usage:        0 bytes
  3137 ;; Hardware stack levels used:    1
  3138 ;; Hardware stack levels required when called:   13
  3139 ;; This function calls:
  3140 ;;		_selectReadyTask
  3141 ;; This function is called by:
  3142 ;;		_main
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           	psect	text17
  3147  002EB2                     __ptext17:
  3148                           	opt callstack 0
  3149  002EB2                     _dispatch:
  3150                           	opt callstack 17
  3151  002EB2                     
  3152                           ;clock.c: 70:     selectReadyTask();
  3153  002EB2  ECC3  F014         	call	_selectReadyTask	;wreg free
  3154  002EB6  0012               	return		;funcret
  3155  002EB8                     __end_of_dispatch:
  3156                           	opt callstack 0
  3157                           
  3158 ;; *************** function _selectReadyTask *****************
  3159 ;; Defined at:
  3160 ;;		line 123 in file "task.c"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;		None
  3163 ;; Auto vars:     Size  Location     Type
  3164 ;;  node            5   22[BANK0 ] struct .
  3165 ;; Return value:  Size  Location     Type
  3166 ;;                  1    wreg      void 
  3167 ;; Registers used:
  3168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  3169 ;; Tracked objects:
  3170 ;;		On entry : 0/0
  3171 ;;		On exit  : 0/0
  3172 ;;		Unchanged: 0/0
  3173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3175 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3177 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3178 ;;Total ram usage:        5 bytes
  3179 ;; Hardware stack levels used:    1
  3180 ;; Hardware stack levels required when called:   12
  3181 ;; This function calls:
  3182 ;;		_blinking_LED
  3183 ;;		_dequeue
  3184 ;;		_handleButton
  3185 ;;		_isEmptyQueue
  3186 ;;		_printTime_ms
  3187 ;; This function is called by:
  3188 ;;		_dispatch
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           	psect	text18
  3193  002986                     __ptext18:
  3194                           	opt callstack 0
  3195  002986                     _selectReadyTask:
  3196                           	opt callstack 17
  3197  002986                     
  3198                           ;task.c: 124:     while(!isEmptyQueue()) {
  3199  002986  EFEA  F014         	goto	l2531
  3200  00298A                     l2525:
  3201                           
  3202                           ;task.c: 125:         queue_node node = dequeue();
  3203  00298A  ECF1  F012         	call	_dequeue	;wreg free
  3204  00298E  EE20  F076         	lfsr	2,selectReadyTask@node
  3205  002992  0E04               	movlw	4
  3206  002994                     u1681:
  3207  002994  CFEB FFDB          	movff	plusw0,plusw2
  3208  002998  06E8               	decf	wreg,f,c
  3209  00299A  E2FC               	bc	u1681
  3210  00299C                     
  3211                           ;task.c: 126:         if(node.func_ptr != ((void*)0))
  3212  00299C  0100               	movlb	0	; () banked
  3213  00299E  5176               	movf	selectReadyTask@node& (0+255),w,b
  3214  0029A0  1177               	iorwf	(selectReadyTask@node+1)& (0+255),w,b
  3215  0029A2  1178               	iorwf	(selectReadyTask@node+2)& (0+255),w,b
  3216  0029A4  B4D8               	btfsc	status,2,c
  3217  0029A6  EFD7  F014         	goto	u1691
  3218  0029AA  EFD9  F014         	goto	u1690
  3219  0029AE                     u1691:
  3220  0029AE  EFEA  F014         	goto	l2531
  3221  0029B2                     u1690:
  3222  0029B2                     
  3223                           ; BSR set to: 0
  3224                           ;task.c: 127:             (node.func_ptr)(node.data_p);
  3225  0029B2  C079  F06E         	movff	selectReadyTask@node+3,handleButton@data_ptr
  3226  0029B6  C07A  F06F         	movff	selectReadyTask@node+4,handleButton@data_ptr+1
  3227  0029BA  D802               	call	u1708
  3228  0029BC  EFEA  F014         	goto	u1709
  3229  0029C0                     u1708:
  3230  0029C0  0005               	push	
  3231  0029C2  6EFA               	movwf	pclath,c
  3232  0029C4  5176               	movf	selectReadyTask@node& (0+255),w,b
  3233  0029C6  6EFD               	movwf	tosl,c
  3234  0029C8  5177               	movf	(selectReadyTask@node+1)& (0+255),w,b
  3235  0029CA  6EFE               	movwf	tosh,c
  3236  0029CC  5178               	movf	(selectReadyTask@node+2)& (0+255),w,b
  3237  0029CE  6EFF               	movwf	tosu,c
  3238  0029D0  50FA               	movf	pclath,w,c
  3239  0029D2  0012               	return		;indir
  3240  0029D4                     u1709:
  3241  0029D4                     l2531:
  3242                           
  3243                           ;task.c: 124:     while(!isEmptyQueue()) {
  3244  0029D4  EC56  F016         	call	_isEmptyQueue	;wreg free
  3245  0029D8  0900               	iorlw	0
  3246  0029DA  B4D8               	btfsc	status,2,c
  3247  0029DC  EFF2  F014         	goto	u1711
  3248  0029E0  EFF4  F014         	goto	u1710
  3249  0029E4                     u1711:
  3250  0029E4  EFC5  F014         	goto	l2525
  3251  0029E8                     u1710:
  3252  0029E8  0012               	return		;funcret
  3253  0029EA                     __end_of_selectReadyTask:
  3254                           	opt callstack 0
  3255                           
  3256 ;; *************** function _blinking_LED *****************
  3257 ;; Defined at:
  3258 ;;		line 29 in file "main.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;  idx_ptr         2   14[BANK0 ] PTR void 
  3261 ;;		 -> RAM(3935), NULL(0), 
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;  idx             1   20[BANK0 ] unsigned char 
  3264 ;; Return value:  Size  Location     Type
  3265 ;;                  1    wreg      void 
  3266 ;; Registers used:
  3267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3268 ;; Tracked objects:
  3269 ;;		On entry : 0/0
  3270 ;;		On exit  : 0/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3273 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3274 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3275 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3276 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3277 ;;Total ram usage:        7 bytes
  3278 ;; Hardware stack levels used:    1
  3279 ;; Hardware stack levels required when called:    6
  3280 ;; This function calls:
  3281 ;;		Nothing
  3282 ;; This function is called by:
  3283 ;;		_main
  3284 ;;		_selectReadyTask
  3285 ;; This function uses a non-reentrant model
  3286 ;;
  3287                           
  3288                           	psect	text19
  3289  001B72                     __ptext19:
  3290                           	opt callstack 0
  3291  001B72                     _blinking_LED:
  3292                           	opt callstack 22
  3293  001B72                     
  3294                           ;main.c: 30:     char idx = (char)idx_ptr;
  3295  001B72  C06E  F074         	movff	blinking_LED@idx_ptr,blinking_LED@idx
  3296  001B76                     
  3297                           ;main.c: 31:     LED_state[idx] = !LED_state[idx];
  3298  001B76  0100               	movlb	0	; () banked
  3299  001B78  5174               	movf	blinking_LED@idx& (0+255),w,b
  3300  001B7A  0D02               	mullw	2
  3301  001B7C  0EA7               	movlw	low _LED_state
  3302  001B7E  24F3               	addwf	243,w,c
  3303  001B80  6ED9               	movwf	fsr2l,c
  3304  001B82  0E00               	movlw	high _LED_state
  3305  001B84  20F4               	addwfc	prodh,w,c
  3306  001B86  6EDA               	movwf	fsr2h,c
  3307  001B88  50DE               	movf	postinc2,w,c
  3308  001B8A  10DE               	iorwf	postinc2,w,c
  3309  001B8C  B4D8               	btfsc	status,2,c
  3310  001B8E  EFCB  F00D         	goto	u1301
  3311  001B92  EFCE  F00D         	goto	u1300
  3312  001B96                     u1301:
  3313  001B96  0E01               	movlw	1
  3314  001B98  EFCF  F00D         	goto	u1310
  3315  001B9C                     u1300:
  3316  001B9C  0E00               	movlw	0
  3317  001B9E                     u1310:
  3318  001B9E  6F72               	movwf	(??_blinking_LED+2)& (0+255),b
  3319  001BA0  6B73               	clrf	(??_blinking_LED+3)& (0+255),b
  3320  001BA2  5174               	movf	blinking_LED@idx& (0+255),w,b
  3321  001BA4  0D02               	mullw	2
  3322  001BA6  0EA7               	movlw	low _LED_state
  3323  001BA8  24F3               	addwf	243,w,c
  3324  001BAA  6ED9               	movwf	fsr2l,c
  3325  001BAC  0E00               	movlw	high _LED_state
  3326  001BAE  20F4               	addwfc	prodh,w,c
  3327  001BB0  6EDA               	movwf	fsr2h,c
  3328  001BB2  C072  FFDE         	movff	??_blinking_LED+2,postinc2
  3329  001BB6  C073  FFDD         	movff	??_blinking_LED+3,postdec2
  3330                           
  3331                           ;main.c: 32:     switch(idx) {
  3332  001BBA  EF75  F00E         	goto	l2233
  3333  001BBE                     l2215:
  3334                           
  3335                           ; BSR set to: 0
  3336  001BBE  5174               	movf	blinking_LED@idx& (0+255),w,b
  3337  001BC0  0D02               	mullw	2
  3338  001BC2  0EA7               	movlw	low _LED_state
  3339  001BC4  24F3               	addwf	243,w,c
  3340  001BC6  6ED9               	movwf	fsr2l,c
  3341  001BC8  0E00               	movlw	high _LED_state
  3342  001BCA  20F4               	addwfc	prodh,w,c
  3343  001BCC  6EDA               	movwf	fsr2h,c
  3344  001BCE  50DF               	movf	indf2,w,c
  3345  001BD0  6F70               	movwf	??_blinking_LED& (0+255),b
  3346  001BD2  508C               	movf	140,w,c	;volatile
  3347  001BD4  1970               	xorwf	??_blinking_LED& (0+255),w,b
  3348  001BD6  0BFE               	andlw	-2
  3349  001BD8  1970               	xorwf	??_blinking_LED& (0+255),w,b
  3350  001BDA  6E8C               	movwf	140,c	;volatile
  3351                           
  3352                           ;main.c: 34:             break;
  3353  001BDC  EFA2  F00E         	goto	l59
  3354  001BE0                     l2217:
  3355                           
  3356                           ; BSR set to: 0
  3357  001BE0  5174               	movf	blinking_LED@idx& (0+255),w,b
  3358  001BE2  0D02               	mullw	2
  3359  001BE4  0EA7               	movlw	low _LED_state
  3360  001BE6  24F3               	addwf	243,w,c
  3361  001BE8  6ED9               	movwf	fsr2l,c
  3362  001BEA  0E00               	movlw	high _LED_state
  3363  001BEC  20F4               	addwfc	prodh,w,c
  3364  001BEE  6EDA               	movwf	fsr2h,c
  3365  001BF0  50DF               	movf	indf2,w,c
  3366  001BF2  6F70               	movwf	??_blinking_LED& (0+255),b
  3367  001BF4  4770               	rlncf	??_blinking_LED& (0+255),f,b
  3368  001BF6  508C               	movf	140,w,c	;volatile
  3369  001BF8  1970               	xorwf	??_blinking_LED& (0+255),w,b
  3370  001BFA  0BFD               	andlw	-3
  3371  001BFC  1970               	xorwf	??_blinking_LED& (0+255),w,b
  3372  001BFE  6E8C               	movwf	140,c	;volatile
  3373                           
  3374                           ;main.c: 36:             break;
  3375  001C00  EFA2  F00E         	goto	l59
  3376  001C04                     l2219:
  3377                           
  3378                           ; BSR set to: 0
  3379  001C04  5174               	movf	blinking_LED@idx& (0+255),w,b
  3380  001C06  0D02               	mullw	2
  3381  001C08  0EA7               	movlw	low _LED_state
  3382  001C0A  24F3               	addwf	243,w,c
  3383  001C0C  6ED9               	movwf	fsr2l,c
  3384  001C0E  0E00               	movlw	high _LED_state
  3385  001C10  20F4               	addwfc	prodh,w,c
  3386  001C12  6EDA               	movwf	fsr2h,c
  3387  001C14  50DF               	movf	indf2,w,c
  3388  001C16  6F70               	movwf	??_blinking_LED& (0+255),b
  3389  001C18  4770               	rlncf	??_blinking_LED& (0+255),f,b
  3390  001C1A  4770               	rlncf	??_blinking_LED& (0+255),f,b
  3391  001C1C  508C               	movf	140,w,c	;volatile
  3392  001C1E  1970               	xorwf	??_blinking_LED& (0+255),w,b
  3393  001C20  0BFB               	andlw	-5
  3394  001C22  1970               	xorwf	??_blinking_LED& (0+255),w,b
  3395  001C24  6E8C               	movwf	140,c	;volatile
  3396                           
  3397                           ;main.c: 38:             break;
  3398  001C26  EFA2  F00E         	goto	l59
  3399  001C2A                     l2221:
  3400                           
  3401                           ; BSR set to: 0
  3402  001C2A  5174               	movf	blinking_LED@idx& (0+255),w,b
  3403  001C2C  0D02               	mullw	2
  3404  001C2E  0EA7               	movlw	low _LED_state
  3405  001C30  24F3               	addwf	243,w,c
  3406  001C32  6ED9               	movwf	fsr2l,c
  3407  001C34  0E00               	movlw	high _LED_state
  3408  001C36  20F4               	addwfc	prodh,w,c
  3409  001C38  6EDA               	movwf	fsr2h,c
  3410  001C3A  50DF               	movf	indf2,w,c
  3411  001C3C  6F70               	movwf	??_blinking_LED& (0+255),b
  3412  001C3E  4770               	rlncf	??_blinking_LED& (0+255),f,b
  3413  001C40  4770               	rlncf	??_blinking_LED& (0+255),f,b
  3414  001C42  4770               	rlncf	??_blinking_LED& (0+255),f,b
  3415  001C44  508C               	movf	140,w,c	;volatile
  3416  001C46  1970               	xorwf	??_blinking_LED& (0+255),w,b
  3417  001C48  0BF7               	andlw	-9
  3418  001C4A  1970               	xorwf	??_blinking_LED& (0+255),w,b
  3419  001C4C  6E8C               	movwf	140,c	;volatile
  3420                           
  3421                           ;main.c: 40:             break;
  3422  001C4E  EFA2  F00E         	goto	l59
  3423  001C52                     l2223:
  3424                           
  3425                           ; BSR set to: 0
  3426  001C52  5174               	movf	blinking_LED@idx& (0+255),w,b
  3427  001C54  0D02               	mullw	2
  3428  001C56  0EA7               	movlw	low _LED_state
  3429  001C58  24F3               	addwf	243,w,c
  3430  001C5A  6ED9               	movwf	fsr2l,c
  3431  001C5C  0E00               	movlw	high _LED_state
  3432  001C5E  20F4               	addwfc	prodh,w,c
  3433  001C60  6EDA               	movwf	fsr2h,c
  3434  001C62  50DF               	movf	indf2,w,c
  3435  001C64  6F70               	movwf	??_blinking_LED& (0+255),b
  3436  001C66  3B70               	swapf	??_blinking_LED& (0+255),f,b
  3437  001C68  508C               	movf	140,w,c	;volatile
  3438  001C6A  1970               	xorwf	??_blinking_LED& (0+255),w,b
  3439  001C6C  0BEF               	andlw	-17
  3440  001C6E  1970               	xorwf	??_blinking_LED& (0+255),w,b
  3441  001C70  6E8C               	movwf	140,c	;volatile
  3442                           
  3443                           ;main.c: 42:             break;
  3444  001C72  EFA2  F00E         	goto	l59
  3445  001C76                     l2225:
  3446                           
  3447                           ; BSR set to: 0
  3448  001C76  5174               	movf	blinking_LED@idx& (0+255),w,b
  3449  001C78  0D02               	mullw	2
  3450  001C7A  0EA7               	movlw	low _LED_state
  3451  001C7C  24F3               	addwf	243,w,c
  3452  001C7E  6ED9               	movwf	fsr2l,c
  3453  001C80  0E00               	movlw	high _LED_state
  3454  001C82  20F4               	addwfc	prodh,w,c
  3455  001C84  6EDA               	movwf	fsr2h,c
  3456  001C86  50DF               	movf	indf2,w,c
  3457  001C88  6F70               	movwf	??_blinking_LED& (0+255),b
  3458  001C8A  3B70               	swapf	??_blinking_LED& (0+255),f,b
  3459  001C8C  4770               	rlncf	??_blinking_LED& (0+255),f,b
  3460  001C8E  508C               	movf	140,w,c	;volatile
  3461  001C90  1970               	xorwf	??_blinking_LED& (0+255),w,b
  3462  001C92  0BDF               	andlw	-33
  3463  001C94  1970               	xorwf	??_blinking_LED& (0+255),w,b
  3464  001C96  6E8C               	movwf	140,c	;volatile
  3465                           
  3466                           ;main.c: 44:             break;
  3467  001C98  EFA2  F00E         	goto	l59
  3468  001C9C                     l2227:
  3469                           
  3470                           ; BSR set to: 0
  3471  001C9C  5174               	movf	blinking_LED@idx& (0+255),w,b
  3472  001C9E  0D02               	mullw	2
  3473  001CA0  0EA7               	movlw	low _LED_state
  3474  001CA2  24F3               	addwf	243,w,c
  3475  001CA4  6ED9               	movwf	fsr2l,c
  3476  001CA6  0E00               	movlw	high _LED_state
  3477  001CA8  20F4               	addwfc	prodh,w,c
  3478  001CAA  6EDA               	movwf	fsr2h,c
  3479  001CAC  50DF               	movf	indf2,w,c
  3480  001CAE  6F70               	movwf	??_blinking_LED& (0+255),b
  3481  001CB0  3B70               	swapf	??_blinking_LED& (0+255),f,b
  3482  001CB2  4770               	rlncf	??_blinking_LED& (0+255),f,b
  3483  001CB4  4770               	rlncf	??_blinking_LED& (0+255),f,b
  3484  001CB6  508C               	movf	140,w,c	;volatile
  3485  001CB8  1970               	xorwf	??_blinking_LED& (0+255),w,b
  3486  001CBA  0BBF               	andlw	-65
  3487  001CBC  1970               	xorwf	??_blinking_LED& (0+255),w,b
  3488  001CBE  6E8C               	movwf	140,c	;volatile
  3489                           
  3490                           ;main.c: 46:             break;
  3491  001CC0  EFA2  F00E         	goto	l59
  3492  001CC4                     l2229:
  3493                           
  3494                           ; BSR set to: 0
  3495  001CC4  5174               	movf	blinking_LED@idx& (0+255),w,b
  3496  001CC6  0D02               	mullw	2
  3497  001CC8  0EA7               	movlw	low _LED_state
  3498  001CCA  24F3               	addwf	243,w,c
  3499  001CCC  6ED9               	movwf	fsr2l,c
  3500  001CCE  0E00               	movlw	high _LED_state
  3501  001CD0  20F4               	addwfc	prodh,w,c
  3502  001CD2  6EDA               	movwf	fsr2h,c
  3503  001CD4  50DF               	movf	indf2,w,c
  3504  001CD6  6F70               	movwf	??_blinking_LED& (0+255),b
  3505  001CD8  3370               	rrcf	??_blinking_LED& (0+255),f,b
  3506  001CDA  3370               	rrcf	??_blinking_LED& (0+255),f,b
  3507  001CDC  508C               	movf	140,w,c	;volatile
  3508  001CDE  1970               	xorwf	??_blinking_LED& (0+255),w,b
  3509  001CE0  0B7F               	andlw	-129
  3510  001CE2  1970               	xorwf	??_blinking_LED& (0+255),w,b
  3511  001CE4  6E8C               	movwf	140,c	;volatile
  3512                           
  3513                           ;main.c: 48:             break;
  3514  001CE6  EFA2  F00E         	goto	l59
  3515  001CEA                     l2233:
  3516                           
  3517                           ; BSR set to: 0
  3518  001CEA  5174               	movf	blinking_LED@idx& (0+255),w,b
  3519  001CEC  6F70               	movwf	??_blinking_LED& (0+255),b
  3520  001CEE  6B71               	clrf	(??_blinking_LED+1)& (0+255),b
  3521                           
  3522                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3523                           ; Switch size 1, requested type "simple"
  3524                           ; Number of cases is 1, Range of values is 0 to 0
  3525                           ; switch strategies available:
  3526                           ; Name         Instructions Cycles
  3527                           ; simple_byte            4     3 (average)
  3528                           ;	Chosen strategy is simple_byte
  3529  001CF0  5171               	movf	(??_blinking_LED+1)& (0+255),w,b
  3530  001CF2  0A00               	xorlw	0	; case 0
  3531  001CF4  B4D8               	btfsc	status,2,c
  3532  001CF6  EF7F  F00E         	goto	l2775
  3533  001CFA  EFA2  F00E         	goto	l59
  3534  001CFE                     l2775:
  3535                           
  3536                           ; BSR set to: 0
  3537                           ; Switch size 1, requested type "simple"
  3538                           ; Number of cases is 8, Range of values is 0 to 7
  3539                           ; switch strategies available:
  3540                           ; Name         Instructions Cycles
  3541                           ; simple_byte           25    13 (average)
  3542                           ;	Chosen strategy is simple_byte
  3543  001CFE  5170               	movf	??_blinking_LED& (0+255),w,b
  3544  001D00  0A00               	xorlw	0	; case 0
  3545  001D02  B4D8               	btfsc	status,2,c
  3546  001D04  EFDF  F00D         	goto	l2215
  3547  001D08  0A01               	xorlw	1	; case 1
  3548  001D0A  B4D8               	btfsc	status,2,c
  3549  001D0C  EFF0  F00D         	goto	l2217
  3550  001D10  0A03               	xorlw	3	; case 2
  3551  001D12  B4D8               	btfsc	status,2,c
  3552  001D14  EF02  F00E         	goto	l2219
  3553  001D18  0A01               	xorlw	1	; case 3
  3554  001D1A  B4D8               	btfsc	status,2,c
  3555  001D1C  EF15  F00E         	goto	l2221
  3556  001D20  0A07               	xorlw	7	; case 4
  3557  001D22  B4D8               	btfsc	status,2,c
  3558  001D24  EF29  F00E         	goto	l2223
  3559  001D28  0A01               	xorlw	1	; case 5
  3560  001D2A  B4D8               	btfsc	status,2,c
  3561  001D2C  EF3B  F00E         	goto	l2225
  3562  001D30  0A03               	xorlw	3	; case 6
  3563  001D32  B4D8               	btfsc	status,2,c
  3564  001D34  EF4E  F00E         	goto	l2227
  3565  001D38  0A01               	xorlw	1	; case 7
  3566  001D3A  B4D8               	btfsc	status,2,c
  3567  001D3C  EF62  F00E         	goto	l2229
  3568  001D40  EFA2  F00E         	goto	l59
  3569  001D44                     l59:
  3570                           
  3571                           ; BSR set to: 0
  3572  001D44  0012               	return		;funcret
  3573  001D46                     __end_of_blinking_LED:
  3574                           	opt callstack 0
  3575                           
  3576 ;; *************** function _handleButton *****************
  3577 ;; Defined at:
  3578 ;;		line 38 in file "buttons.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;  data_ptr        2   14[BANK0 ] PTR void 
  3581 ;;		 -> RAM(3935), NULL(0), 
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;  checkRB0        2   20[BANK0 ] int 
  3584 ;;  checkRA5        2   18[BANK0 ] int 
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  1    wreg      void 
  3587 ;; Registers used:
  3588 ;;		wreg, status,2, status,0, cstack
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3594 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3595 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3596 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3597 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3598 ;;Total ram usage:        8 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    7
  3601 ;; This function calls:
  3602 ;;		_readButtonRA5
  3603 ;;		_readButtonRB0
  3604 ;; This function is called by:
  3605 ;;		_main
  3606 ;;		_selectReadyTask
  3607 ;; This function uses a non-reentrant model
  3608 ;;
  3609                           
  3610                           	psect	text20
  3611  00218A                     __ptext20:
  3612                           	opt callstack 0
  3613  00218A                     _handleButton:
  3614                           	opt callstack 21
  3615  00218A                     
  3616                           ;buttons.c: 39:     int checkRA5 = readButtonRA5();
  3617  00218A  EC4F  F015         	call	_readButtonRA5	;wreg free
  3618  00218E  C060  F072         	movff	?_readButtonRA5,handleButton@checkRA5
  3619  002192  C061  F073         	movff	?_readButtonRA5+1,handleButton@checkRA5+1
  3620                           
  3621                           ;buttons.c: 40:     int checkRB0 = readButtonRB0();
  3622  002196  EC26  F015         	call	_readButtonRB0	;wreg free
  3623  00219A  C060  F074         	movff	?_readButtonRB0,handleButton@checkRB0
  3624  00219E  C061  F075         	movff	?_readButtonRB0+1,handleButton@checkRB0+1
  3625                           
  3626                           ;buttons.c: 41:     switch(stateRA5) {
  3627  0021A2  EFF0  F010         	goto	l2307
  3628  0021A6                     l2297:
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;buttons.c: 43:             if(checkRA5 == 2) {
  3632  0021A6  0E02               	movlw	2
  3633  0021A8  1972               	xorwf	handleButton@checkRA5& (0+255),w,b
  3634  0021AA  1173               	iorwf	(handleButton@checkRA5+1)& (0+255),w,b
  3635  0021AC  A4D8               	btfss	status,2,c
  3636  0021AE  EFDB  F010         	goto	u1441
  3637  0021B2  EFDD  F010         	goto	u1440
  3638  0021B6                     u1441:
  3639  0021B6  EF23  F011         	goto	l2319
  3640  0021BA                     u1440:
  3641  0021BA                     
  3642                           ; BSR set to: 0
  3643                           ;buttons.c: 44:                 stateRA5 = 1;
  3644  0021BA  0E01               	movlw	1
  3645  0021BC  6FBE               	movwf	_stateRA5& (0+255),b
  3646                           
  3647                           ;buttons.c: 45:                 RA5_pressed = 1;
  3648  0021BE  0E01               	movlw	1
  3649  0021C0  6FC2               	movwf	_RA5_pressed& (0+255),b
  3650  0021C2  EF23  F011         	goto	l2319
  3651  0021C6                     l2301:
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;buttons.c: 49:             if(checkRA5 == 1)
  3655  0021C6  0572               	decf	handleButton@checkRA5& (0+255),w,b
  3656  0021C8  1173               	iorwf	(handleButton@checkRA5+1)& (0+255),w,b
  3657  0021CA  A4D8               	btfss	status,2,c
  3658  0021CC  EFEA  F010         	goto	u1451
  3659  0021D0  EFEC  F010         	goto	u1450
  3660  0021D4                     u1451:
  3661  0021D4  EF23  F011         	goto	l2319
  3662  0021D8                     u1450:
  3663  0021D8                     
  3664                           ; BSR set to: 0
  3665                           ;buttons.c: 50:                 stateRA5 = 0;
  3666  0021D8  0E00               	movlw	0
  3667  0021DA  6FBE               	movwf	_stateRA5& (0+255),b
  3668  0021DC  EF23  F011         	goto	l2319
  3669  0021E0                     l2307:
  3670  0021E0  0100               	movlb	0	; () banked
  3671  0021E2  51BE               	movf	_stateRA5& (0+255),w,b
  3672  0021E4  6F70               	movwf	??_handleButton& (0+255),b
  3673  0021E6  6B71               	clrf	(??_handleButton+1)& (0+255),b
  3674                           
  3675                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3676                           ; Switch size 1, requested type "simple"
  3677                           ; Number of cases is 1, Range of values is 0 to 0
  3678                           ; switch strategies available:
  3679                           ; Name         Instructions Cycles
  3680                           ; simple_byte            4     3 (average)
  3681                           ;	Chosen strategy is simple_byte
  3682  0021E8  5171               	movf	(??_handleButton+1)& (0+255),w,b
  3683  0021EA  0A00               	xorlw	0	; case 0
  3684  0021EC  B4D8               	btfsc	status,2,c
  3685  0021EE  EFFB  F010         	goto	l2777
  3686  0021F2  EF23  F011         	goto	l2319
  3687  0021F6                     l2777:
  3688                           
  3689                           ; BSR set to: 0
  3690                           ; Switch size 1, requested type "simple"
  3691                           ; Number of cases is 2, Range of values is 0 to 1
  3692                           ; switch strategies available:
  3693                           ; Name         Instructions Cycles
  3694                           ; simple_byte            7     4 (average)
  3695                           ;	Chosen strategy is simple_byte
  3696  0021F6  5170               	movf	??_handleButton& (0+255),w,b
  3697  0021F8  0A00               	xorlw	0	; case 0
  3698  0021FA  B4D8               	btfsc	status,2,c
  3699  0021FC  EFD3  F010         	goto	l2297
  3700  002200  0A01               	xorlw	1	; case 1
  3701  002202  B4D8               	btfsc	status,2,c
  3702  002204  EFE3  F010         	goto	l2301
  3703  002208  EF23  F011         	goto	l2319
  3704  00220C                     l2309:
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;buttons.c: 55:             if(checkRB0 == 2) {
  3708  00220C  0E02               	movlw	2
  3709  00220E  1974               	xorwf	handleButton@checkRB0& (0+255),w,b
  3710  002210  1175               	iorwf	(handleButton@checkRB0+1)& (0+255),w,b
  3711  002212  A4D8               	btfss	status,2,c
  3712  002214  EF0E  F011         	goto	u1461
  3713  002218  EF10  F011         	goto	u1460
  3714  00221C                     u1461:
  3715  00221C  EF38  F011         	goto	l421
  3716  002220                     u1460:
  3717  002220                     
  3718                           ; BSR set to: 0
  3719                           ;buttons.c: 56:                 stateRB0 = 1;
  3720  002220  0E01               	movlw	1
  3721  002222  6FBD               	movwf	_stateRB0& (0+255),b
  3722                           
  3723                           ;buttons.c: 57:                 RB0_pressed = 1;
  3724  002224  0E01               	movlw	1
  3725  002226  6FC1               	movwf	_RB0_pressed& (0+255),b
  3726  002228  EF38  F011         	goto	l421
  3727  00222C                     l2313:
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;buttons.c: 61:             if(checkRB0 == 1)
  3731  00222C  0574               	decf	handleButton@checkRB0& (0+255),w,b
  3732  00222E  1175               	iorwf	(handleButton@checkRB0+1)& (0+255),w,b
  3733  002230  A4D8               	btfss	status,2,c
  3734  002232  EF1D  F011         	goto	u1471
  3735  002236  EF1F  F011         	goto	u1470
  3736  00223A                     u1471:
  3737  00223A  EF38  F011         	goto	l421
  3738  00223E                     u1470:
  3739  00223E                     
  3740                           ; BSR set to: 0
  3741                           ;buttons.c: 62:                 stateRB0 = 0;
  3742  00223E  0E00               	movlw	0
  3743  002240  6FBD               	movwf	_stateRB0& (0+255),b
  3744  002242  EF38  F011         	goto	l421
  3745  002246                     l2319:
  3746                           
  3747                           ; BSR set to: 0
  3748  002246  51BD               	movf	_stateRB0& (0+255),w,b
  3749  002248  6F70               	movwf	??_handleButton& (0+255),b
  3750  00224A  6B71               	clrf	(??_handleButton+1)& (0+255),b
  3751                           
  3752                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3753                           ; Switch size 1, requested type "simple"
  3754                           ; Number of cases is 1, Range of values is 0 to 0
  3755                           ; switch strategies available:
  3756                           ; Name         Instructions Cycles
  3757                           ; simple_byte            4     3 (average)
  3758                           ;	Chosen strategy is simple_byte
  3759  00224C  5171               	movf	(??_handleButton+1)& (0+255),w,b
  3760  00224E  0A00               	xorlw	0	; case 0
  3761  002250  B4D8               	btfsc	status,2,c
  3762  002252  EF2D  F011         	goto	l2779
  3763  002256  EF38  F011         	goto	l421
  3764  00225A                     l2779:
  3765                           
  3766                           ; BSR set to: 0
  3767                           ; Switch size 1, requested type "simple"
  3768                           ; Number of cases is 2, Range of values is 0 to 1
  3769                           ; switch strategies available:
  3770                           ; Name         Instructions Cycles
  3771                           ; simple_byte            7     4 (average)
  3772                           ;	Chosen strategy is simple_byte
  3773  00225A  5170               	movf	??_handleButton& (0+255),w,b
  3774  00225C  0A00               	xorlw	0	; case 0
  3775  00225E  B4D8               	btfsc	status,2,c
  3776  002260  EF06  F011         	goto	l2309
  3777  002264  0A01               	xorlw	1	; case 1
  3778  002266  B4D8               	btfsc	status,2,c
  3779  002268  EF16  F011         	goto	l2313
  3780  00226C  EF38  F011         	goto	l421
  3781  002270                     l421:
  3782                           
  3783                           ; BSR set to: 0
  3784  002270  0012               	return		;funcret
  3785  002272                     __end_of_handleButton:
  3786                           	opt callstack 0
  3787                           
  3788 ;; *************** function _printTime_ms *****************
  3789 ;; Defined at:
  3790 ;;		line 52 in file "main.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;  data_ptr        2   14[BANK0 ] PTR void 
  3793 ;;		 -> RAM(3935), NULL(0), 
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;  temp            1   16[BANK0 ] unsigned char 
  3796 ;;  current_time    4   18[BANK0 ] unsigned long 
  3797 ;;  i               1   17[BANK0 ] unsigned char 
  3798 ;; Return value:  Size  Location     Type
  3799 ;;                  1    wreg      void 
  3800 ;; Registers used:
  3801 ;;		wreg, status,2, status,0, cstack
  3802 ;; Tracked objects:
  3803 ;;		On entry : 0/0
  3804 ;;		On exit  : 0/0
  3805 ;;		Unchanged: 0/0
  3806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3807 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;Total ram usage:        8 bytes
  3812 ;; Hardware stack levels used:    1
  3813 ;; Hardware stack levels required when called:   11
  3814 ;; This function calls:
  3815 ;;		_LCDPrintChar
  3816 ;;		___lldiv
  3817 ;;		___llmod
  3818 ;;		_get_time
  3819 ;; This function is called by:
  3820 ;;		_main
  3821 ;;		_selectReadyTask
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           	psect	text21
  3826  002272                     __ptext21:
  3827                           	opt callstack 0
  3828  002272                     _printTime_ms:
  3829                           	opt callstack 19
  3830  002272                     
  3831                           ;main.c: 53:     tWORD current_time = get_time();
  3832  002272  EC3F  F017         	call	_get_time	;wreg free
  3833  002276  C060  F072         	movff	?_get_time,printTime_ms@current_time
  3834  00227A  C061  F073         	movff	?_get_time+1,printTime_ms@current_time+1
  3835  00227E  C062  F074         	movff	?_get_time+2,printTime_ms@current_time+2
  3836  002282  C063  F075         	movff	?_get_time+3,printTime_ms@current_time+3
  3837  002286                     
  3838                           ;main.c: 54:     char i = 2;
  3839  002286  0E02               	movlw	2
  3840  002288  0100               	movlb	0	; () banked
  3841  00228A  6F71               	movwf	printTime_ms@i& (0+255),b
  3842                           
  3843                           ;main.c: 55:     while(current_time > 0 && i < 10) {
  3844  00228C  EF83  F011         	goto	l2247
  3845  002290                     l2243:
  3846                           
  3847                           ; BSR set to: 0
  3848                           ;main.c: 56:         char temp = current_time % 10 + '0';
  3849  002290  C072  F060         	movff	printTime_ms@current_time,___llmod@dividend
  3850  002294  C073  F061         	movff	printTime_ms@current_time+1,___llmod@dividend+1
  3851  002298  C074  F062         	movff	printTime_ms@current_time+2,___llmod@dividend+2
  3852  00229C  C075  F063         	movff	printTime_ms@current_time+3,___llmod@dividend+3
  3853  0022A0  0E0A               	movlw	10
  3854  0022A2  6F64               	movwf	___llmod@divisor& (0+255),b
  3855  0022A4  0E00               	movlw	0
  3856  0022A6  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  3857  0022A8  0E00               	movlw	0
  3858  0022AA  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  3859  0022AC  0E00               	movlw	0
  3860  0022AE  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  3861  0022B0  ECD5  F013         	call	___llmod	;wreg free
  3862  0022B4  0100               	movlb	0	; () banked
  3863  0022B6  5160               	movf	?___llmod& (0+255),w,b
  3864  0022B8  0F30               	addlw	48
  3865  0022BA  6F70               	movwf	printTime_ms@temp& (0+255),b
  3866                           
  3867                           ;main.c: 57:         LCDPrintChar(1, 15 - i, temp);
  3868  0022BC  5171               	movf	printTime_ms@i& (0+255),w,b
  3869  0022BE  080F               	sublw	15
  3870  0022C0  6F6B               	movwf	LCDPrintChar@pos& (0+255),b
  3871  0022C2  C070  F06C         	movff	printTime_ms@temp,LCDPrintChar@ch
  3872  0022C6  0E01               	movlw	1
  3873  0022C8  ECFB  F015         	call	_LCDPrintChar
  3874                           
  3875                           ;main.c: 58:         current_time/= 10;
  3876  0022CC  C072  F060         	movff	printTime_ms@current_time,___lldiv@dividend
  3877  0022D0  C073  F061         	movff	printTime_ms@current_time+1,___lldiv@dividend+1
  3878  0022D4  C074  F062         	movff	printTime_ms@current_time+2,___lldiv@dividend+2
  3879  0022D8  C075  F063         	movff	printTime_ms@current_time+3,___lldiv@dividend+3
  3880  0022DC  0E0A               	movlw	10
  3881  0022DE  0100               	movlb	0	; () banked
  3882  0022E0  6F64               	movwf	___lldiv@divisor& (0+255),b
  3883  0022E2  0E00               	movlw	0
  3884  0022E4  6F65               	movwf	(___lldiv@divisor+1)& (0+255),b
  3885  0022E6  0E00               	movlw	0
  3886  0022E8  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
  3887  0022EA  0E00               	movlw	0
  3888  0022EC  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
  3889  0022EE  EC9E  F012         	call	___lldiv	;wreg free
  3890  0022F2  C060  F072         	movff	?___lldiv,printTime_ms@current_time
  3891  0022F6  C061  F073         	movff	?___lldiv+1,printTime_ms@current_time+1
  3892  0022FA  C062  F074         	movff	?___lldiv+2,printTime_ms@current_time+2
  3893  0022FE  C063  F075         	movff	?___lldiv+3,printTime_ms@current_time+3
  3894  002302                     
  3895                           ;main.c: 59:         i++;
  3896  002302  0100               	movlb	0	; () banked
  3897  002304  2B71               	incf	printTime_ms@i& (0+255),f,b
  3898  002306                     l2247:
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;main.c: 55:     while(current_time > 0 && i < 10) {
  3902  002306  5172               	movf	printTime_ms@current_time& (0+255),w,b
  3903  002308  1173               	iorwf	(printTime_ms@current_time+1)& (0+255),w,b
  3904  00230A  1174               	iorwf	(printTime_ms@current_time+2)& (0+255),w,b
  3905  00230C  1175               	iorwf	(printTime_ms@current_time+3)& (0+255),w,b
  3906  00230E  B4D8               	btfsc	status,2,c
  3907  002310  EF8C  F011         	goto	u1321
  3908  002314  EF8E  F011         	goto	u1320
  3909  002318                     u1321:
  3910  002318  EF96  F011         	goto	l67
  3911  00231C                     u1320:
  3912  00231C                     
  3913                           ; BSR set to: 0
  3914  00231C  0E09               	movlw	9
  3915  00231E  6571               	cpfsgt	printTime_ms@i& (0+255),b
  3916  002320  EF94  F011         	goto	u1331
  3917  002324  EF96  F011         	goto	u1330
  3918  002328                     u1331:
  3919  002328  EF48  F011         	goto	l2243
  3920  00232C                     u1330:
  3921  00232C                     l67:
  3922                           
  3923                           ; BSR set to: 0
  3924  00232C  0012               	return		;funcret
  3925  00232E                     __end_of_printTime_ms:
  3926                           	opt callstack 0
  3927                           
  3928 ;; *************** function _get_time *****************
  3929 ;; Defined at:
  3930 ;;		line 34 in file "clock.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;		None
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;		None
  3935 ;; Return value:  Size  Location     Type
  3936 ;;                  4    0[BANK0 ] unsigned long 
  3937 ;; Registers used:
  3938 ;;		None
  3939 ;; Tracked objects:
  3940 ;;		On entry : 0/0
  3941 ;;		On exit  : 0/0
  3942 ;;		Unchanged: 0/0
  3943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3944 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3947 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3948 ;;Total ram usage:        4 bytes
  3949 ;; Hardware stack levels used:    1
  3950 ;; Hardware stack levels required when called:    6
  3951 ;; This function calls:
  3952 ;;		Nothing
  3953 ;; This function is called by:
  3954 ;;		_printTime_ms
  3955 ;; This function uses a non-reentrant model
  3956 ;;
  3957                           
  3958                           	psect	text22
  3959  002E7E                     __ptext22:
  3960                           	opt callstack 0
  3961  002E7E                     _get_time:
  3962                           	opt callstack 23
  3963  002E7E                     
  3964                           ;clock.c: 35:     return time_ms;
  3965  002E7E  C0B7  F060         	movff	_time_ms,?_get_time
  3966  002E82  C0B8  F061         	movff	_time_ms+1,?_get_time+1
  3967  002E86  C0B9  F062         	movff	_time_ms+2,?_get_time+2
  3968  002E8A  C0BA  F063         	movff	_time_ms+3,?_get_time+3
  3969  002E8E  0012               	return		;funcret
  3970  002E90                     __end_of_get_time:
  3971                           	opt callstack 0
  3972                           
  3973 ;; *************** function ___llmod *****************
  3974 ;; Defined at:
  3975 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\llmod.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;  dividend        4    0[BANK0 ] unsigned long 
  3978 ;;  divisor         4    4[BANK0 ] unsigned long 
  3979 ;; Auto vars:     Size  Location     Type
  3980 ;;  counter         1    8[BANK0 ] unsigned char 
  3981 ;; Return value:  Size  Location     Type
  3982 ;;                  4    0[BANK0 ] unsigned long 
  3983 ;; Registers used:
  3984 ;;		wreg, status,2, status,0
  3985 ;; Tracked objects:
  3986 ;;		On entry : 0/0
  3987 ;;		On exit  : 0/0
  3988 ;;		Unchanged: 0/0
  3989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3990 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;Total ram usage:        9 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; Hardware stack levels required when called:    6
  3997 ;; This function calls:
  3998 ;;		Nothing
  3999 ;; This function is called by:
  4000 ;;		_printTime_ms
  4001 ;; This function uses a non-reentrant model
  4002 ;;
  4003                           
  4004                           	psect	text23
  4005  0027AA                     __ptext23:
  4006                           	opt callstack 0
  4007  0027AA                     ___llmod:
  4008                           	opt callstack 23
  4009  0027AA  0100               	movlb	0	; () banked
  4010  0027AC  5164               	movf	___llmod@divisor& (0+255),w,b
  4011  0027AE  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  4012  0027B0  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  4013  0027B2  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  4014  0027B4  B4D8               	btfsc	status,2,c
  4015  0027B6  EFDF  F013         	goto	u1271
  4016  0027BA  EFE1  F013         	goto	u1270
  4017  0027BE                     u1271:
  4018  0027BE  EF11  F014         	goto	l928
  4019  0027C2                     u1270:
  4020  0027C2                     
  4021                           ; BSR set to: 0
  4022  0027C2  0E01               	movlw	1
  4023  0027C4  6F68               	movwf	___llmod@counter& (0+255),b
  4024  0027C6  EFEB  F013         	goto	l2197
  4025  0027CA                     l2195:
  4026                           
  4027                           ; BSR set to: 0
  4028  0027CA  90D8               	bcf	status,0,c
  4029  0027CC  3764               	rlcf	___llmod@divisor& (0+255),f,b
  4030  0027CE  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  4031  0027D0  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  4032  0027D2  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  4033  0027D4  2B68               	incf	___llmod@counter& (0+255),f,b
  4034  0027D6                     l2197:
  4035                           
  4036                           ; BSR set to: 0
  4037  0027D6  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  4038  0027D8  EFF0  F013         	goto	u1281
  4039  0027DC  EFF2  F013         	goto	u1280
  4040  0027E0                     u1281:
  4041  0027E0  EFE5  F013         	goto	l2195
  4042  0027E4                     u1280:
  4043  0027E4                     l2199:
  4044                           
  4045                           ; BSR set to: 0
  4046  0027E4  5164               	movf	___llmod@divisor& (0+255),w,b
  4047  0027E6  5D60               	subwf	___llmod@dividend& (0+255),w,b
  4048  0027E8  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  4049  0027EA  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  4050  0027EC  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  4051  0027EE  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  4052  0027F0  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  4053  0027F2  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  4054  0027F4  A0D8               	btfss	status,0,c
  4055  0027F6  EFFF  F013         	goto	u1291
  4056  0027FA  EF01  F014         	goto	u1290
  4057  0027FE                     u1291:
  4058  0027FE  EF09  F014         	goto	l2203
  4059  002802                     u1290:
  4060  002802                     
  4061                           ; BSR set to: 0
  4062  002802  5164               	movf	___llmod@divisor& (0+255),w,b
  4063  002804  5F60               	subwf	___llmod@dividend& (0+255),f,b
  4064  002806  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  4065  002808  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  4066  00280A  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  4067  00280C  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  4068  00280E  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  4069  002810  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  4070  002812                     l2203:
  4071                           
  4072                           ; BSR set to: 0
  4073  002812  90D8               	bcf	status,0,c
  4074  002814  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  4075  002816  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  4076  002818  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  4077  00281A  3364               	rrcf	___llmod@divisor& (0+255),f,b
  4078  00281C                     
  4079                           ; BSR set to: 0
  4080  00281C  2F68               	decfsz	___llmod@counter& (0+255),f,b
  4081  00281E  EFF2  F013         	goto	l2199
  4082  002822                     l928:
  4083                           
  4084                           ; BSR set to: 0
  4085  002822  C060  F060         	movff	___llmod@dividend,?___llmod
  4086  002826  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  4087  00282A  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  4088  00282E  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  4089  002832                     
  4090                           ; BSR set to: 0
  4091  002832  0012               	return		;funcret
  4092  002834                     __end_of___llmod:
  4093                           	opt callstack 0
  4094                           
  4095 ;; *************** function ___lldiv *****************
  4096 ;; Defined at:
  4097 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\__lldiv.c"
  4098 ;; Parameters:    Size  Location     Type
  4099 ;;  dividend        4    0[BANK0 ] unsigned long 
  4100 ;;  divisor         4    4[BANK0 ] unsigned long 
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;  quotient        4    8[BANK0 ] unsigned long 
  4103 ;;  counter         1   12[BANK0 ] unsigned char 
  4104 ;; Return value:  Size  Location     Type
  4105 ;;                  4    0[BANK0 ] unsigned long 
  4106 ;; Registers used:
  4107 ;;		wreg, status,2, status,0
  4108 ;; Tracked objects:
  4109 ;;		On entry : 0/0
  4110 ;;		On exit  : 0/0
  4111 ;;		Unchanged: 0/0
  4112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4113 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4114 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4116 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4117 ;;Total ram usage:       13 bytes
  4118 ;; Hardware stack levels used:    1
  4119 ;; Hardware stack levels required when called:    6
  4120 ;; This function calls:
  4121 ;;		Nothing
  4122 ;; This function is called by:
  4123 ;;		_printTime_ms
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           	psect	text24
  4128  00253C                     __ptext24:
  4129                           	opt callstack 0
  4130  00253C                     ___lldiv:
  4131                           	opt callstack 23
  4132  00253C  0E00               	movlw	0
  4133  00253E  0100               	movlb	0	; () banked
  4134  002540  6F68               	movwf	___lldiv@quotient& (0+255),b
  4135  002542  0E00               	movlw	0
  4136  002544  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
  4137  002546  0E00               	movlw	0
  4138  002548  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
  4139  00254A  0E00               	movlw	0
  4140  00254C  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
  4141  00254E                     
  4142                           ; BSR set to: 0
  4143  00254E  5164               	movf	___lldiv@divisor& (0+255),w,b
  4144  002550  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4145  002552  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4146  002554  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4147  002556  B4D8               	btfsc	status,2,c
  4148  002558  EFB0  F012         	goto	u1241
  4149  00255C  EFB2  F012         	goto	u1240
  4150  002560                     u1241:
  4151  002560  EFE8  F012         	goto	l535
  4152  002564                     u1240:
  4153  002564                     
  4154                           ; BSR set to: 0
  4155  002564  0E01               	movlw	1
  4156  002566  6F6C               	movwf	___lldiv@counter& (0+255),b
  4157  002568  EFBC  F012         	goto	l2177
  4158  00256C                     l2175:
  4159                           
  4160                           ; BSR set to: 0
  4161  00256C  90D8               	bcf	status,0,c
  4162  00256E  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  4163  002570  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4164  002572  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4165  002574  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4166  002576  2B6C               	incf	___lldiv@counter& (0+255),f,b
  4167  002578                     l2177:
  4168                           
  4169                           ; BSR set to: 0
  4170  002578  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4171  00257A  EFC1  F012         	goto	u1251
  4172  00257E  EFC3  F012         	goto	u1250
  4173  002582                     u1251:
  4174  002582  EFB6  F012         	goto	l2175
  4175  002586                     u1250:
  4176  002586                     l2179:
  4177                           
  4178                           ; BSR set to: 0
  4179  002586  90D8               	bcf	status,0,c
  4180  002588  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  4181  00258A  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4182  00258C  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4183  00258E  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4184  002590                     
  4185                           ; BSR set to: 0
  4186  002590  5164               	movf	___lldiv@divisor& (0+255),w,b
  4187  002592  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  4188  002594  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4189  002596  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4190  002598  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4191  00259A  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4192  00259C  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4193  00259E  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4194  0025A0  A0D8               	btfss	status,0,c
  4195  0025A2  EFD5  F012         	goto	u1261
  4196  0025A6  EFD7  F012         	goto	u1260
  4197  0025AA                     u1261:
  4198  0025AA  EFE0  F012         	goto	l2187
  4199  0025AE                     u1260:
  4200  0025AE                     
  4201                           ; BSR set to: 0
  4202  0025AE  5164               	movf	___lldiv@divisor& (0+255),w,b
  4203  0025B0  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  4204  0025B2  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4205  0025B4  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4206  0025B6  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4207  0025B8  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4208  0025BA  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4209  0025BC  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4210  0025BE                     
  4211                           ; BSR set to: 0
  4212  0025BE  8168               	bsf	___lldiv@quotient& (0+255),0,b
  4213  0025C0                     l2187:
  4214                           
  4215                           ; BSR set to: 0
  4216  0025C0  90D8               	bcf	status,0,c
  4217  0025C2  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4218  0025C4  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4219  0025C6  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4220  0025C8  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  4221  0025CA                     
  4222                           ; BSR set to: 0
  4223  0025CA  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  4224  0025CC  EFC3  F012         	goto	l2179
  4225  0025D0                     l535:
  4226                           
  4227                           ; BSR set to: 0
  4228  0025D0  C068  F060         	movff	___lldiv@quotient,?___lldiv
  4229  0025D4  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  4230  0025D8  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  4231  0025DC  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  4232  0025E0                     
  4233                           ; BSR set to: 0
  4234  0025E0  0012               	return		;funcret
  4235  0025E2                     __end_of___lldiv:
  4236                           	opt callstack 0
  4237                           
  4238 ;; *************** function _LCDPrintChar *****************
  4239 ;; Defined at:
  4240 ;;		line 239 in file "lcd.c"
  4241 ;; Parameters:    Size  Location     Type
  4242 ;;  line            1    wreg     unsigned char 
  4243 ;;  pos             1   11[BANK0 ] unsigned char 
  4244 ;;  ch              1   12[BANK0 ] unsigned char 
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;  line            1   13[BANK0 ] unsigned char 
  4247 ;; Return value:  Size  Location     Type
  4248 ;;                  1    wreg      void 
  4249 ;; Registers used:
  4250 ;;		wreg, status,2, status,0, cstack
  4251 ;; Tracked objects:
  4252 ;;		On entry : 0/0
  4253 ;;		On exit  : 0/0
  4254 ;;		Unchanged: 0/0
  4255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4256 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4259 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;Total ram usage:        3 bytes
  4261 ;; Hardware stack levels used:    1
  4262 ;; Hardware stack levels required when called:   10
  4263 ;; This function calls:
  4264 ;;		_LCDMoveCursor
  4265 ;;		_LCDPutChar
  4266 ;; This function is called by:
  4267 ;;		_printTime_ms
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           	psect	text25
  4272  002BF6                     __ptext25:
  4273                           	opt callstack 0
  4274  002BF6                     _LCDPrintChar:
  4275                           	opt callstack 19
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;incstack = 0
  4279                           ;LCDPrintChar@line stored from wreg
  4280  002BF6  0100               	movlb	0	; () banked
  4281  002BF8  6F6D               	movwf	LCDPrintChar@line& (0+255),b
  4282  002BFA                     
  4283                           ;lcd.c: 240:     if(line <0 || line > 2 || pos < 0 || pos > 15)
  4284  002BFA  0E03               	movlw	3
  4285  002BFC  0100               	movlb	0	; () banked
  4286  002BFE  616D               	cpfslt	LCDPrintChar@line& (0+255),b
  4287  002C00  EF04  F016         	goto	u1141
  4288  002C04  EF06  F016         	goto	u1140
  4289  002C08                     u1141:
  4290  002C08  EF19  F016         	goto	l505
  4291  002C0C                     u1140:
  4292  002C0C                     
  4293                           ; BSR set to: 0
  4294  002C0C  0E0F               	movlw	15
  4295  002C0E  656B               	cpfsgt	LCDPrintChar@pos& (0+255),b
  4296  002C10  EF0C  F016         	goto	u1151
  4297  002C14  EF0E  F016         	goto	u1150
  4298  002C18                     u1151:
  4299  002C18  EF10  F016         	goto	l2109
  4300  002C1C                     u1150:
  4301  002C1C  EF19  F016         	goto	l505
  4302  002C20                     l2109:
  4303                           
  4304                           ; BSR set to: 0
  4305                           ;lcd.c: 242:     LCDMoveCursor(line, pos);
  4306  002C20  C06B  F066         	movff	LCDPrintChar@pos,LCDMoveCursor@pos
  4307  002C24  516D               	movf	LCDPrintChar@line& (0+255),w,b
  4308  002C26  EC1A  F016         	call	_LCDMoveCursor
  4309                           
  4310                           ;lcd.c: 243:     LCDPutChar(ch);
  4311  002C2A  0100               	movlb	0	; () banked
  4312  002C2C  516C               	movf	LCDPrintChar@ch& (0+255),w,b
  4313  002C2E  EC99  F015         	call	_LCDPutChar
  4314  002C32                     l505:
  4315  002C32  0012               	return		;funcret
  4316  002C34                     __end_of_LCDPrintChar:
  4317                           	opt callstack 0
  4318                           
  4319 ;; *************** function _readButtonRB0 *****************
  4320 ;; Defined at:
  4321 ;;		line 29 in file "buttons.c"
  4322 ;; Parameters:    Size  Location     Type
  4323 ;;		None
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;		None
  4326 ;; Return value:  Size  Location     Type
  4327 ;;                  2    0[BANK0 ] int 
  4328 ;; Registers used:
  4329 ;;		wreg, status,2, status,0
  4330 ;; Tracked objects:
  4331 ;;		On entry : 0/0
  4332 ;;		On exit  : 0/0
  4333 ;;		Unchanged: 0/0
  4334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4335 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;Total ram usage:        2 bytes
  4340 ;; Hardware stack levels used:    1
  4341 ;; Hardware stack levels required when called:    6
  4342 ;; This function calls:
  4343 ;;		Nothing
  4344 ;; This function is called by:
  4345 ;;		_handleButton
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           	psect	text26
  4350  002A4C                     __ptext26:
  4351                           	opt callstack 0
  4352  002A4C                     _readButtonRB0:
  4353                           	opt callstack 21
  4354  002A4C                     
  4355                           ;buttons.c: 30:     firstReadRB0 = secondReadRB0;
  4356  002A4C  C0C7  F0C8         	movff	_secondReadRB0,_firstReadRB0
  4357  002A50                     
  4358                           ;buttons.c: 31:     secondReadRB0 = PORTBbits.RB0;
  4359  002A50  0E00               	movlw	0
  4360  002A52  B081               	btfsc	129,0,c	;volatile
  4361  002A54  0E01               	movlw	1
  4362  002A56  0100               	movlb	0	; () banked
  4363  002A58  6FC7               	movwf	_secondReadRB0& (0+255),b
  4364  002A5A                     
  4365                           ; BSR set to: 0
  4366                           ;buttons.c: 32:     if(secondReadRB0 == firstReadRB0) {
  4367  002A5A  51C8               	movf	_firstReadRB0& (0+255),w,b
  4368  002A5C  19C7               	xorwf	_secondReadRB0& (0+255),w,b
  4369  002A5E  A4D8               	btfss	status,2,c
  4370  002A60  EF34  F015         	goto	u1221
  4371  002A64  EF36  F015         	goto	u1220
  4372  002A68                     u1221:
  4373  002A68  EF4A  F015         	goto	l2165
  4374  002A6C                     u1220:
  4375  002A6C                     
  4376                           ; BSR set to: 0
  4377                           ;buttons.c: 33:         return (secondReadRB0 == 0) ? 2 : 1;
  4378  002A6C  51C7               	movf	_secondReadRB0& (0+255),w,b
  4379  002A6E  B4D8               	btfsc	status,2,c
  4380  002A70  EF3C  F015         	goto	u1231
  4381  002A74  EF3E  F015         	goto	u1230
  4382  002A78                     u1231:
  4383  002A78  EF44  F015         	goto	l2161
  4384  002A7C                     u1230:
  4385  002A7C                     
  4386                           ; BSR set to: 0
  4387  002A7C  0E00               	movlw	0
  4388  002A7E  6F61               	movwf	(?_readButtonRB0+1)& (0+255),b
  4389  002A80  0E01               	movlw	1
  4390  002A82  6F60               	movwf	?_readButtonRB0& (0+255),b
  4391  002A84  EF4E  F015         	goto	l406
  4392  002A88                     l2161:
  4393                           
  4394                           ; BSR set to: 0
  4395  002A88  0E00               	movlw	0
  4396  002A8A  6F61               	movwf	(?_readButtonRB0+1)& (0+255),b
  4397  002A8C  0E02               	movlw	2
  4398  002A8E  6F60               	movwf	?_readButtonRB0& (0+255),b
  4399  002A90  EF4E  F015         	goto	l406
  4400  002A94                     l2165:
  4401                           
  4402                           ; BSR set to: 0
  4403                           ;buttons.c: 35:     return 0;
  4404  002A94  0E00               	movlw	0
  4405  002A96  6F61               	movwf	(?_readButtonRB0+1)& (0+255),b
  4406  002A98  0E00               	movlw	0
  4407  002A9A  6F60               	movwf	?_readButtonRB0& (0+255),b
  4408  002A9C                     l406:
  4409                           
  4410                           ; BSR set to: 0
  4411  002A9C  0012               	return		;funcret
  4412  002A9E                     __end_of_readButtonRB0:
  4413                           	opt callstack 0
  4414                           
  4415 ;; *************** function _readButtonRA5 *****************
  4416 ;; Defined at:
  4417 ;;		line 20 in file "buttons.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;		None
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;		None
  4422 ;; Return value:  Size  Location     Type
  4423 ;;                  2    0[BANK0 ] int 
  4424 ;; Registers used:
  4425 ;;		wreg, status,2, status,0
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4431 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4434 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4435 ;;Total ram usage:        2 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; Hardware stack levels required when called:    6
  4438 ;; This function calls:
  4439 ;;		Nothing
  4440 ;; This function is called by:
  4441 ;;		_handleButton
  4442 ;; This function uses a non-reentrant model
  4443 ;;
  4444                           
  4445                           	psect	text27
  4446  002A9E                     __ptext27:
  4447                           	opt callstack 0
  4448  002A9E                     _readButtonRA5:
  4449                           	opt callstack 21
  4450  002A9E                     
  4451                           ;buttons.c: 21:     firstReadRA5 = secondReadRA5;
  4452  002A9E  C0C9  F0CA         	movff	_secondReadRA5,_firstReadRA5
  4453  002AA2                     
  4454                           ;buttons.c: 22:     secondReadRA5 = PORTAbits.RA5;
  4455  002AA2  0E00               	movlw	0
  4456  002AA4  BA80               	btfsc	128,5,c	;volatile
  4457  002AA6  0E01               	movlw	1
  4458  002AA8  0100               	movlb	0	; () banked
  4459  002AAA  6FC9               	movwf	_secondReadRA5& (0+255),b
  4460  002AAC                     
  4461                           ; BSR set to: 0
  4462                           ;buttons.c: 23:     if(secondReadRA5 == firstReadRA5) {
  4463  002AAC  51CA               	movf	_firstReadRA5& (0+255),w,b
  4464  002AAE  19C9               	xorwf	_secondReadRA5& (0+255),w,b
  4465  002AB0  A4D8               	btfss	status,2,c
  4466  002AB2  EF5D  F015         	goto	u1201
  4467  002AB6  EF5F  F015         	goto	u1200
  4468  002ABA                     u1201:
  4469  002ABA  EF73  F015         	goto	l2147
  4470  002ABE                     u1200:
  4471  002ABE                     
  4472                           ; BSR set to: 0
  4473                           ;buttons.c: 24:         return (secondReadRA5 == 0) ? 2 : 1;
  4474  002ABE  51C9               	movf	_secondReadRA5& (0+255),w,b
  4475  002AC0  B4D8               	btfsc	status,2,c
  4476  002AC2  EF65  F015         	goto	u1211
  4477  002AC6  EF67  F015         	goto	u1210
  4478  002ACA                     u1211:
  4479  002ACA  EF6D  F015         	goto	l2143
  4480  002ACE                     u1210:
  4481  002ACE                     
  4482                           ; BSR set to: 0
  4483  002ACE  0E00               	movlw	0
  4484  002AD0  6F61               	movwf	(?_readButtonRA5+1)& (0+255),b
  4485  002AD2  0E01               	movlw	1
  4486  002AD4  6F60               	movwf	?_readButtonRA5& (0+255),b
  4487  002AD6  EF77  F015         	goto	l398
  4488  002ADA                     l2143:
  4489                           
  4490                           ; BSR set to: 0
  4491  002ADA  0E00               	movlw	0
  4492  002ADC  6F61               	movwf	(?_readButtonRA5+1)& (0+255),b
  4493  002ADE  0E02               	movlw	2
  4494  002AE0  6F60               	movwf	?_readButtonRA5& (0+255),b
  4495  002AE2  EF77  F015         	goto	l398
  4496  002AE6                     l2147:
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;buttons.c: 26:     return 0;
  4500  002AE6  0E00               	movlw	0
  4501  002AE8  6F61               	movwf	(?_readButtonRA5+1)& (0+255),b
  4502  002AEA  0E00               	movlw	0
  4503  002AEC  6F60               	movwf	?_readButtonRA5& (0+255),b
  4504  002AEE                     l398:
  4505                           
  4506                           ; BSR set to: 0
  4507  002AEE  0012               	return		;funcret
  4508  002AF0                     __end_of_readButtonRA5:
  4509                           	opt callstack 0
  4510                           
  4511 ;; *************** function _dequeue *****************
  4512 ;; Defined at:
  4513 ;;		line 35 in file "ready_queue.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;		None
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;  temp            5   15[BANK0 ] struct .
  4518 ;;  idx             2   13[BANK0 ] int 
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  5    8[BANK0 ] struct .
  4521 ;; Registers used:
  4522 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4528 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4529 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;Total ram usage:       12 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; Hardware stack levels required when called:    9
  4535 ;; This function calls:
  4536 ;;		___awmod
  4537 ;;		___wmul
  4538 ;;		_isEmptyQueue
  4539 ;; This function is called by:
  4540 ;;		_selectReadyTask
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544                           	psect	text28
  4545  0025E2                     __ptext28:
  4546                           	opt callstack 0
  4547  0025E2                     _dequeue:
  4548                           	opt callstack 19
  4549  0025E2                     
  4550                           ;ready_queue.c: 36:     queue_node temp;;ready_queue.c: 37:     temp.func_ptr = ((void*)
      +                          0);
  4551  0025E2  0E00               	movlw	0
  4552  0025E4  0100               	movlb	0	; () banked
  4553  0025E6  6F6F               	movwf	dequeue@temp& (0+255),b
  4554  0025E8  0E00               	movlw	0
  4555  0025EA  6F70               	movwf	(dequeue@temp+1)& (0+255),b
  4556  0025EC  0E00               	movlw	0
  4557  0025EE  6F71               	movwf	(dequeue@temp+2)& (0+255),b
  4558                           
  4559                           ;ready_queue.c: 38:     temp.data_p = ((void*)0);
  4560  0025F0  0E00               	movlw	0
  4561  0025F2  6F72               	movwf	(dequeue@temp+3)& (0+255),b
  4562  0025F4  0E00               	movlw	0
  4563  0025F6  6F73               	movwf	(dequeue@temp+4)& (0+255),b
  4564  0025F8                     
  4565                           ; BSR set to: 0
  4566                           ;ready_queue.c: 39:     if(isEmptyQueue())
  4567  0025F8  EC56  F016         	call	_isEmptyQueue	;wreg free
  4568  0025FC  0900               	iorlw	0
  4569  0025FE  B4D8               	btfsc	status,2,c
  4570  002600  EF04  F013         	goto	u1361
  4571  002604  EF06  F013         	goto	u1360
  4572  002608                     u1361:
  4573  002608  EF11  F013         	goto	l176
  4574  00260C                     u1360:
  4575  00260C                     l2259:
  4576                           
  4577                           ;ready_queue.c: 40:         return temp;
  4578  00260C  EE20  F06F         	lfsr	2,dequeue@temp
  4579  002610  EE00  F068         	lfsr	0,?_dequeue
  4580  002614  0E04               	movlw	4
  4581  002616                     u1371:
  4582  002616  CFDB FFEB          	movff	plusw2,plusw0
  4583  00261A  06E8               	decf	wreg,f,c
  4584  00261C  E2FC               	bc	u1371
  4585  00261E  EF41  F013         	goto	l177
  4586  002622                     l176:
  4587                           
  4588                           ;ready_queue.c: 41:     int idx = front;
  4589  002622  C0C5  F06D         	movff	_front,dequeue@idx
  4590  002626  C0C6  F06E         	movff	_front+1,dequeue@idx+1
  4591  00262A                     
  4592                           ;ready_queue.c: 42:     front = (front + 1) % 20;
  4593  00262A  0E01               	movlw	1
  4594  00262C  0100               	movlb	0	; () banked
  4595  00262E  25C5               	addwf	_front& (0+255),w,b
  4596  002630  6F60               	movwf	___awmod@dividend& (0+255),b
  4597  002632  0E00               	movlw	0
  4598  002634  21C6               	addwfc	(_front+1)& (0+255),w,b
  4599  002636  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4600  002638  0E00               	movlw	0
  4601  00263A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4602  00263C  0E14               	movlw	20
  4603  00263E  6F62               	movwf	___awmod@divisor& (0+255),b
  4604  002640  EC97  F011         	call	___awmod	;wreg free
  4605  002644  C060  F0C5         	movff	?___awmod,_front
  4606  002648  C061  F0C6         	movff	?___awmod+1,_front+1
  4607  00264C                     
  4608                           ;ready_queue.c: 43:     temp = ready_queue[idx];
  4609  00264C  C06D  F060         	movff	dequeue@idx,___wmul@multiplier
  4610  002650  C06E  F061         	movff	dequeue@idx+1,___wmul@multiplier+1
  4611  002654  0E00               	movlw	0
  4612  002656  0100               	movlb	0	; () banked
  4613  002658  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4614  00265A  0E05               	movlw	5
  4615  00265C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4616  00265E  EC9C  F016         	call	___wmul	;wreg free
  4617  002662  0E00               	movlw	low _ready_queue
  4618  002664  0100               	movlb	0	; () banked
  4619  002666  2560               	addwf	?___wmul& (0+255),w,b
  4620  002668  6ED9               	movwf	fsr2l,c
  4621  00266A  0E01               	movlw	high _ready_queue
  4622  00266C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4623  00266E  6EDA               	movwf	fsr2h,c
  4624  002670  EE10  F06F         	lfsr	1,dequeue@temp
  4625  002674  0E04               	movlw	4
  4626  002676                     u1381:
  4627  002676  CFDB FFE3          	movff	plusw2,plusw1
  4628  00267A  06E8               	decf	wreg,f,c
  4629  00267C  E2FC               	bc	u1381
  4630  00267E  EF06  F013         	goto	l2259
  4631  002682                     l177:
  4632  002682  0012               	return		;funcret
  4633  002684                     __end_of_dequeue:
  4634                           	opt callstack 0
  4635                           
  4636 ;; *************** function _isEmptyQueue *****************
  4637 ;; Defined at:
  4638 ;;		line 18 in file "ready_queue.c"
  4639 ;; Parameters:    Size  Location     Type
  4640 ;;		None
  4641 ;; Auto vars:     Size  Location     Type
  4642 ;;		None
  4643 ;; Return value:  Size  Location     Type
  4644 ;;                  1    wreg      unsigned char 
  4645 ;; Registers used:
  4646 ;;		wreg, status,2, status,0, cstack
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4656 ;;Total ram usage:        0 bytes
  4657 ;; Hardware stack levels used:    1
  4658 ;; Hardware stack levels required when called:    8
  4659 ;; This function calls:
  4660 ;;		_getSizeQueue
  4661 ;; This function is called by:
  4662 ;;		_dequeue
  4663 ;;		_selectReadyTask
  4664 ;; This function uses a non-reentrant model
  4665 ;;
  4666                           
  4667                           	psect	text29
  4668  002CAC                     __ptext29:
  4669                           	opt callstack 0
  4670  002CAC                     _isEmptyQueue:
  4671                           	opt callstack 20
  4672  002CAC                     
  4673                           ;ready_queue.c: 19:     if(front == -1)
  4674  002CAC  0100               	movlb	0	; () banked
  4675  002CAE  29C5               	incf	_front& (0+255),w,b
  4676  002CB0  E106               	bnz	u1171
  4677  002CB2  29C6               	incf	(_front+1)& (0+255),w,b
  4678  002CB4  A4D8               	btfss	status,2,c
  4679  002CB6  EF5F  F016         	goto	u1171
  4680  002CBA  EF61  F016         	goto	u1170
  4681  002CBE                     u1171:
  4682  002CBE  EF64  F016         	goto	l2129
  4683  002CC2                     u1170:
  4684  002CC2                     
  4685                           ; BSR set to: 0
  4686                           ;ready_queue.c: 20:         return 0;
  4687  002CC2  0E00               	movlw	0
  4688  002CC4  EF70  F016         	goto	l168
  4689  002CC8                     l2129:
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;ready_queue.c: 21:     return getSizeQueue() == 0 ? 1 : 0;
  4693  002CC8  EC71  F016         	call	_getSizeQueue	;wreg free
  4694  002CCC  0900               	iorlw	0
  4695  002CCE  B4D8               	btfsc	status,2,c
  4696  002CD0  EF6C  F016         	goto	u1181
  4697  002CD4  EF6F  F016         	goto	u1180
  4698  002CD8                     u1181:
  4699  002CD8  0E01               	movlw	1
  4700  002CDA  EF70  F016         	goto	u1190
  4701  002CDE                     u1180:
  4702  002CDE  0E00               	movlw	0
  4703  002CE0                     u1190:
  4704  002CE0                     l168:
  4705  002CE0  0012               	return		;funcret
  4706  002CE2                     __end_of_isEmptyQueue:
  4707                           	opt callstack 0
  4708                           
  4709 ;; *************** function _getSizeQueue *****************
  4710 ;; Defined at:
  4711 ;;		line 10 in file "ready_queue.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;		None
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;		None
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  1    wreg      unsigned char 
  4718 ;; Registers used:
  4719 ;;		wreg, status,2, status,0, cstack
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4727 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4728 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4729 ;;Total ram usage:        2 bytes
  4730 ;; Hardware stack levels used:    1
  4731 ;; Hardware stack levels required when called:    7
  4732 ;; This function calls:
  4733 ;;		___awmod
  4734 ;; This function is called by:
  4735 ;;		_isEmptyQueue
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           	psect	text30
  4740  002CE2                     __ptext30:
  4741                           	opt callstack 0
  4742  002CE2                     _getSizeQueue:
  4743                           	opt callstack 20
  4744  002CE2                     
  4745                           ;ready_queue.c: 11:     return (rear - front + 1 + 20) % 20;
  4746  002CE2  0100               	movlb	0	; () banked
  4747  002CE4  51C5               	movf	_front& (0+255),w,b
  4748  002CE6  5DC3               	subwf	_rear& (0+255),w,b
  4749  002CE8  6F66               	movwf	??_getSizeQueue& (0+255),b
  4750  002CEA  51C6               	movf	(_front+1)& (0+255),w,b
  4751  002CEC  59C4               	subwfb	(_rear+1)& (0+255),w,b
  4752  002CEE  6F67               	movwf	(??_getSizeQueue+1)& (0+255),b
  4753  002CF0  0E15               	movlw	21
  4754  002CF2  2566               	addwf	??_getSizeQueue& (0+255),w,b
  4755  002CF4  6F60               	movwf	___awmod@dividend& (0+255),b
  4756  002CF6  0E00               	movlw	0
  4757  002CF8  2167               	addwfc	(??_getSizeQueue+1)& (0+255),w,b
  4758  002CFA  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  4759  002CFC  0E00               	movlw	0
  4760  002CFE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  4761  002D00  0E14               	movlw	20
  4762  002D02  6F62               	movwf	___awmod@divisor& (0+255),b
  4763  002D04  EC97  F011         	call	___awmod	;wreg free
  4764  002D08  0100               	movlb	0	; () banked
  4765  002D0A  5160               	movf	?___awmod& (0+255),w,b
  4766  002D0C                     
  4767                           ; BSR set to: 0
  4768  002D0C  0012               	return		;funcret
  4769  002D0E                     __end_of_getSizeQueue:
  4770                           	opt callstack 0
  4771                           
  4772 ;; *************** function ___awmod *****************
  4773 ;; Defined at:
  4774 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;  dividend        2    0[BANK0 ] int 
  4777 ;;  divisor         2    2[BANK0 ] int 
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;  sign            1    5[BANK0 ] unsigned char 
  4780 ;;  counter         1    4[BANK0 ] unsigned char 
  4781 ;; Return value:  Size  Location     Type
  4782 ;;                  2    0[BANK0 ] int 
  4783 ;; Registers used:
  4784 ;;		wreg, status,2, status,0
  4785 ;; Tracked objects:
  4786 ;;		On entry : 0/0
  4787 ;;		On exit  : 0/0
  4788 ;;		Unchanged: 0/0
  4789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4790 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4791 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4793 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4794 ;;Total ram usage:        6 bytes
  4795 ;; Hardware stack levels used:    1
  4796 ;; Hardware stack levels required when called:    6
  4797 ;; This function calls:
  4798 ;;		Nothing
  4799 ;; This function is called by:
  4800 ;;		_main
  4801 ;;		_getSizeQueue
  4802 ;;		_dequeue
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806                           	psect	text31
  4807  00232E                     __ptext31:
  4808                           	opt callstack 0
  4809  00232E                     ___awmod:
  4810                           	opt callstack 20
  4811  00232E  0E00               	movlw	0
  4812  002330  0100               	movlb	0	; () banked
  4813  002332  6F65               	movwf	___awmod@sign& (0+255),b
  4814  002334                     
  4815                           ; BSR set to: 0
  4816  002334  BF61               	btfsc	(___awmod@dividend+1)& (0+255),7,b
  4817  002336  EFA1  F011         	goto	u1010
  4818  00233A  EF9F  F011         	goto	u1011
  4819  00233E                     u1011:
  4820  00233E  EFA7  F011         	goto	l2003
  4821  002342                     u1010:
  4822  002342                     
  4823                           ; BSR set to: 0
  4824  002342  6D60               	negf	___awmod@dividend& (0+255),b
  4825  002344  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  4826  002346  B0D8               	btfsc	status,0,c
  4827  002348  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  4828  00234A                     
  4829                           ; BSR set to: 0
  4830  00234A  0E01               	movlw	1
  4831  00234C  6F65               	movwf	___awmod@sign& (0+255),b
  4832  00234E                     l2003:
  4833                           
  4834                           ; BSR set to: 0
  4835  00234E  BF63               	btfsc	(___awmod@divisor+1)& (0+255),7,b
  4836  002350  EFAE  F011         	goto	u1020
  4837  002354  EFAC  F011         	goto	u1021
  4838  002358                     u1021:
  4839  002358  EFB2  F011         	goto	l2007
  4840  00235C                     u1020:
  4841  00235C                     
  4842                           ; BSR set to: 0
  4843  00235C  6D62               	negf	___awmod@divisor& (0+255),b
  4844  00235E  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  4845  002360  B0D8               	btfsc	status,0,c
  4846  002362  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  4847  002364                     l2007:
  4848                           
  4849                           ; BSR set to: 0
  4850  002364  5162               	movf	___awmod@divisor& (0+255),w,b
  4851  002366  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  4852  002368  B4D8               	btfsc	status,2,c
  4853  00236A  EFB9  F011         	goto	u1031
  4854  00236E  EFBB  F011         	goto	u1030
  4855  002372                     u1031:
  4856  002372  EFDF  F011         	goto	l2023
  4857  002376                     u1030:
  4858  002376                     
  4859                           ; BSR set to: 0
  4860  002376  0E01               	movlw	1
  4861  002378  6F64               	movwf	___awmod@counter& (0+255),b
  4862  00237A  EFC3  F011         	goto	l2013
  4863  00237E                     l2011:
  4864                           
  4865                           ; BSR set to: 0
  4866  00237E  90D8               	bcf	status,0,c
  4867  002380  3762               	rlcf	___awmod@divisor& (0+255),f,b
  4868  002382  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  4869  002384  2B64               	incf	___awmod@counter& (0+255),f,b
  4870  002386                     l2013:
  4871                           
  4872                           ; BSR set to: 0
  4873  002386  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4874  002388  EFC8  F011         	goto	u1041
  4875  00238C  EFCA  F011         	goto	u1040
  4876  002390                     u1041:
  4877  002390  EFBF  F011         	goto	l2011
  4878  002394                     u1040:
  4879  002394                     l2015:
  4880                           
  4881                           ; BSR set to: 0
  4882  002394  5162               	movf	___awmod@divisor& (0+255),w,b
  4883  002396  5D60               	subwf	___awmod@dividend& (0+255),w,b
  4884  002398  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  4885  00239A  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  4886  00239C  A0D8               	btfss	status,0,c
  4887  00239E  EFD3  F011         	goto	u1051
  4888  0023A2  EFD5  F011         	goto	u1050
  4889  0023A6                     u1051:
  4890  0023A6  EFD9  F011         	goto	l2019
  4891  0023AA                     u1050:
  4892  0023AA                     
  4893                           ; BSR set to: 0
  4894  0023AA  5162               	movf	___awmod@divisor& (0+255),w,b
  4895  0023AC  5F60               	subwf	___awmod@dividend& (0+255),f,b
  4896  0023AE  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  4897  0023B0  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  4898  0023B2                     l2019:
  4899                           
  4900                           ; BSR set to: 0
  4901  0023B2  90D8               	bcf	status,0,c
  4902  0023B4  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  4903  0023B6  3362               	rrcf	___awmod@divisor& (0+255),f,b
  4904  0023B8                     
  4905                           ; BSR set to: 0
  4906  0023B8  2F64               	decfsz	___awmod@counter& (0+255),f,b
  4907  0023BA  EFCA  F011         	goto	l2015
  4908  0023BE                     l2023:
  4909                           
  4910                           ; BSR set to: 0
  4911  0023BE  5165               	movf	___awmod@sign& (0+255),w,b
  4912  0023C0  B4D8               	btfsc	status,2,c
  4913  0023C2  EFE5  F011         	goto	u1061
  4914  0023C6  EFE7  F011         	goto	u1060
  4915  0023CA                     u1061:
  4916  0023CA  EFEB  F011         	goto	l2027
  4917  0023CE                     u1060:
  4918  0023CE                     
  4919                           ; BSR set to: 0
  4920  0023CE  6D60               	negf	___awmod@dividend& (0+255),b
  4921  0023D0  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  4922  0023D2  B0D8               	btfsc	status,0,c
  4923  0023D4  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  4924  0023D6                     l2027:
  4925                           
  4926                           ; BSR set to: 0
  4927  0023D6  C060  F060         	movff	___awmod@dividend,?___awmod
  4928  0023DA  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  4929  0023DE                     
  4930                           ; BSR set to: 0
  4931  0023DE  0012               	return		;funcret
  4932  0023E0                     __end_of___awmod:
  4933                           	opt callstack 0
  4934                           
  4935 ;; *************** function ___wmul *****************
  4936 ;; Defined at:
  4937 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4940 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4941 ;; Auto vars:     Size  Location     Type
  4942 ;;  product         2    4[BANK0 ] unsigned int 
  4943 ;; Return value:  Size  Location     Type
  4944 ;;                  2    0[BANK0 ] unsigned int 
  4945 ;; Registers used:
  4946 ;;		wreg, status,2, status,0, prodl, prodh
  4947 ;; Tracked objects:
  4948 ;;		On entry : 0/0
  4949 ;;		On exit  : 0/0
  4950 ;;		Unchanged: 0/0
  4951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4952 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4953 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4956 ;;Total ram usage:        6 bytes
  4957 ;; Hardware stack levels used:    1
  4958 ;; Hardware stack levels required when called:    6
  4959 ;; This function calls:
  4960 ;;		Nothing
  4961 ;; This function is called by:
  4962 ;;		_queueInitialize
  4963 ;;		_dequeue
  4964 ;;		_initializeTaskList
  4965 ;;		_addTask
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           	psect	text32
  4970  002D38                     __ptext32:
  4971                           	opt callstack 0
  4972  002D38                     ___wmul:
  4973                           	opt callstack 20
  4974  002D38  0100               	movlb	0	; () banked
  4975  002D3A  5160               	movf	___wmul@multiplier& (0+255),w,b
  4976  002D3C  0362               	mulwf	___wmul@multiplicand& (0+255),b
  4977  002D3E  CFF3 F064          	movff	prodl,___wmul@product
  4978  002D42  CFF4 F065          	movff	prodh,___wmul@product+1
  4979  002D46  5160               	movf	___wmul@multiplier& (0+255),w,b
  4980  002D48  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4981  002D4A  50F3               	movf	243,w,c
  4982  002D4C  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  4983  002D4E  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4984  002D50  0362               	mulwf	___wmul@multiplicand& (0+255),b
  4985  002D52  50F3               	movf	243,w,c
  4986  002D54  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  4987  002D56                     
  4988                           ; BSR set to: 0
  4989  002D56  C064  F060         	movff	___wmul@product,?___wmul
  4990  002D5A  C065  F061         	movff	___wmul@product+1,?___wmul+1
  4991  002D5E                     
  4992                           ; BSR set to: 0
  4993  002D5E  0012               	return		;funcret
  4994  002D60                     __end_of___wmul:
  4995                           	opt callstack 0
  4996                           
  4997 ;; *************** function _LCDPrint *****************
  4998 ;; Defined at:
  4999 ;;		line 232 in file "lcd.c"
  5000 ;; Parameters:    Size  Location     Type
  5001 ;;  line            1    wreg     unsigned char 
  5002 ;;  pos             1   11[BANK0 ] unsigned char 
  5003 ;;  ptr             2   12[BANK0 ] PTR const unsigned char 
  5004 ;;		 -> STR_3(3), STR_2(5), STR_1(17), 
  5005 ;; Auto vars:     Size  Location     Type
  5006 ;;  line            1   14[BANK0 ] unsigned char 
  5007 ;; Return value:  Size  Location     Type
  5008 ;;                  1    wreg      void 
  5009 ;; Registers used:
  5010 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5011 ;; Tracked objects:
  5012 ;;		On entry : 0/0
  5013 ;;		On exit  : 0/0
  5014 ;;		Unchanged: 0/0
  5015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5016 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5019 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5020 ;;Total ram usage:        4 bytes
  5021 ;; Hardware stack levels used:    1
  5022 ;; Hardware stack levels required when called:   10
  5023 ;; This function calls:
  5024 ;;		_LCDMoveCursor
  5025 ;;		_LCDPutStr
  5026 ;; This function is called by:
  5027 ;;		_main
  5028 ;; This function uses a non-reentrant model
  5029 ;;
  5030                           
  5031                           	psect	text33
  5032  002AF0                     __ptext33:
  5033                           	opt callstack 0
  5034  002AF0                     _LCDPrint:
  5035                           	opt callstack 20
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;incstack = 0
  5039                           ;LCDPrint@line stored from wreg
  5040  002AF0  0100               	movlb	0	; () banked
  5041  002AF2  6F6E               	movwf	LCDPrint@line& (0+255),b
  5042  002AF4                     
  5043                           ;lcd.c: 233:     if(line <0 || line > 2 || pos < 0 || pos > 15)
  5044  002AF4  0E03               	movlw	3
  5045  002AF6  0100               	movlb	0	; () banked
  5046  002AF8  616E               	cpfslt	LCDPrint@line& (0+255),b
  5047  002AFA  EF81  F015         	goto	u1781
  5048  002AFE  EF83  F015         	goto	u1780
  5049  002B02                     u1781:
  5050  002B02  EF98  F015         	goto	l499
  5051  002B06                     u1780:
  5052  002B06                     
  5053                           ; BSR set to: 0
  5054  002B06  0E0F               	movlw	15
  5055  002B08  656B               	cpfsgt	LCDPrint@pos& (0+255),b
  5056  002B0A  EF89  F015         	goto	u1791
  5057  002B0E  EF8B  F015         	goto	u1790
  5058  002B12                     u1791:
  5059  002B12  EF8D  F015         	goto	l2581
  5060  002B16                     u1790:
  5061  002B16  EF98  F015         	goto	l499
  5062  002B1A                     l2581:
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;lcd.c: 235:     LCDMoveCursor(line, pos);
  5066  002B1A  C06B  F066         	movff	LCDPrint@pos,LCDMoveCursor@pos
  5067  002B1E  516E               	movf	LCDPrint@line& (0+255),w,b
  5068  002B20  EC1A  F016         	call	_LCDMoveCursor
  5069  002B24                     
  5070                           ;lcd.c: 236:     LCDPutStr(ptr);
  5071  002B24  C06C  F066         	movff	LCDPrint@ptr,LCDPutStr@ptr
  5072  002B28  C06D  F067         	movff	LCDPrint@ptr+1,LCDPutStr@ptr+1
  5073  002B2C  ECDB  F015         	call	_LCDPutStr	;wreg free
  5074  002B30                     l499:
  5075  002B30  0012               	return		;funcret
  5076  002B32                     __end_of_LCDPrint:
  5077                           	opt callstack 0
  5078                           
  5079 ;; *************** function _LCDPutStr *****************
  5080 ;; Defined at:
  5081 ;;		line 222 in file "lcd.c"
  5082 ;; Parameters:    Size  Location     Type
  5083 ;;  ptr             2    6[BANK0 ] PTR const unsigned char 
  5084 ;;		 -> STR_3(3), STR_2(5), STR_1(17), 
  5085 ;; Auto vars:     Size  Location     Type
  5086 ;;		None
  5087 ;; Return value:  Size  Location     Type
  5088 ;;                  1    wreg      void 
  5089 ;; Registers used:
  5090 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5091 ;; Tracked objects:
  5092 ;;		On entry : 0/0
  5093 ;;		On exit  : 0/0
  5094 ;;		Unchanged: 0/0
  5095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5096 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5099 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5100 ;;Total ram usage:        2 bytes
  5101 ;; Hardware stack levels used:    1
  5102 ;; Hardware stack levels required when called:    9
  5103 ;; This function calls:
  5104 ;;		_LCDPutChar
  5105 ;; This function is called by:
  5106 ;;		_LCDPrint
  5107 ;; This function uses a non-reentrant model
  5108 ;;
  5109                           
  5110                           	psect	text34
  5111  002BB6                     __ptext34:
  5112                           	opt callstack 0
  5113  002BB6                     _LCDPutStr:
  5114                           	opt callstack 20
  5115  002BB6                     
  5116                           ;lcd.c: 222: void LCDPutStr (const char *ptr);lcd.c: 223: {;lcd.c: 224:     while(*ptr) 
      +                          LCDPutChar(*(ptr++));
  5117  002BB6  EFEA  F015         	goto	l2539
  5118  002BBA                     l2535:
  5119  002BBA  C066  FFF6         	movff	LCDPutStr@ptr,tblptrl
  5120  002BBE  C067  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  5121  002BC2                     	if	0	;tblptru may be non-zero
  5122  002BC2                     	endif
  5123  002BC2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5124  002BC2  0E00               	movlw	low (__mediumconst shr (0+16))
  5125  002BC4  6EF8               	movwf	tblptru,c
  5126  002BC6                     	endif
  5127  002BC6  0008               	tblrd		*
  5128  002BC8  50F5               	movf	tablat,w,c
  5129  002BCA  EC99  F015         	call	_LCDPutChar
  5130  002BCE  0100               	movlb	0	; () banked
  5131  002BD0  4B66               	infsnz	LCDPutStr@ptr& (0+255),f,b
  5132  002BD2  2B67               	incf	(LCDPutStr@ptr+1)& (0+255),f,b
  5133  002BD4                     l2539:
  5134  002BD4  C066  FFF6         	movff	LCDPutStr@ptr,tblptrl
  5135  002BD8  C067  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  5136  002BDC                     	if	0	;tblptru may be non-zero
  5137  002BDC                     	endif
  5138  002BDC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5139  002BDC  0E00               	movlw	low (__mediumconst shr (0+16))
  5140  002BDE  6EF8               	movwf	tblptru,c
  5141  002BE0                     	endif
  5142  002BE0  0008               	tblrd		*
  5143  002BE2  50F5               	movf	tablat,w,c
  5144  002BE4  0900               	iorlw	0
  5145  002BE6  A4D8               	btfss	status,2,c
  5146  002BE8  EFF8  F015         	goto	u1721
  5147  002BEC  EFFA  F015         	goto	u1720
  5148  002BF0                     u1721:
  5149  002BF0  EFDD  F015         	goto	l2535
  5150  002BF4                     u1720:
  5151  002BF4  0012               	return		;funcret
  5152  002BF6                     __end_of_LCDPutStr:
  5153                           	opt callstack 0
  5154                           
  5155 ;; *************** function _LCDPutChar *****************
  5156 ;; Defined at:
  5157 ;;		line 172 in file "lcd.c"
  5158 ;; Parameters:    Size  Location     Type
  5159 ;;  ch              1    wreg     unsigned char 
  5160 ;; Auto vars:     Size  Location     Type
  5161 ;;  ch              1    5[BANK0 ] unsigned char 
  5162 ;; Return value:  Size  Location     Type
  5163 ;;                  1    wreg      void 
  5164 ;; Registers used:
  5165 ;;		wreg, status,2, status,0, cstack
  5166 ;; Tracked objects:
  5167 ;;		On entry : 0/0
  5168 ;;		On exit  : 0/0
  5169 ;;		Unchanged: 0/0
  5170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5174 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5175 ;;Total ram usage:        1 bytes
  5176 ;; Hardware stack levels used:    1
  5177 ;; Hardware stack levels required when called:    8
  5178 ;; This function calls:
  5179 ;;		_WritePort_BBSPI
  5180 ;; This function is called by:
  5181 ;;		_LCDPutStr
  5182 ;;		_LCDPrintChar
  5183 ;; This function uses a non-reentrant model
  5184 ;;
  5185                           
  5186                           	psect	text35
  5187  002B32                     __ptext35:
  5188                           	opt callstack 0
  5189  002B32                     _LCDPutChar:
  5190                           	opt callstack 20
  5191                           
  5192                           ;incstack = 0
  5193                           ;LCDPutChar@ch stored from wreg
  5194  002B32  0100               	movlb	0	; () banked
  5195  002B34  6F65               	movwf	LCDPutChar@ch& (0+255),b
  5196  002B36                     
  5197                           ;lcd.c: 172: void LCDPutChar (unsigned char ch);lcd.c: 173: {;lcd.c: 174:     _delay((un
      +                          signed long)((10)*(8000000/4000000.0)));
  5198  002B36  0E06               	movlw	6
  5199  002B38                     u1977:
  5200  002B38  2EE8               	decfsz	wreg,f,c
  5201  002B3A  D7FE               	bra	u1977
  5202  002B3C  D000               	nop2	
  5203  002B3E                     
  5204                           ;lcd.c: 175:     WritePort_BBSPI (0x12, 0x80);
  5205  002B3E  0E80               	movlw	128
  5206  002B40  0100               	movlb	0	; () banked
  5207  002B42  6F63               	movwf	WritePort_BBSPI@a& (0+255),b
  5208  002B44  0E12               	movlw	18
  5209  002B46  ECD5  F016         	call	_WritePort_BBSPI
  5210  002B4A                     
  5211                           ;lcd.c: 176:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  5212  002B4A  D000               	nop2		;2 cycle nop
  5213  002B4C                     
  5214                           ;lcd.c: 177:     WritePort_BBSPI (0x13, ch);
  5215  002B4C  C065  F063         	movff	LCDPutChar@ch,WritePort_BBSPI@a
  5216  002B50  0E13               	movlw	19
  5217  002B52  ECD5  F016         	call	_WritePort_BBSPI
  5218  002B56                     
  5219                           ;lcd.c: 178:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  5220  002B56  D000               	nop2		;2 cycle nop
  5221  002B58                     
  5222                           ;lcd.c: 179:     WritePort_BBSPI (0x12, 0xC0);
  5223  002B58  0EC0               	movlw	192
  5224  002B5A  0100               	movlb	0	; () banked
  5225  002B5C  6F63               	movwf	WritePort_BBSPI@a& (0+255),b
  5226  002B5E  0E12               	movlw	18
  5227  002B60  ECD5  F016         	call	_WritePort_BBSPI
  5228  002B64                     
  5229                           ;lcd.c: 180:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  5230  002B64  D000               	nop2		;2 cycle nop
  5231  002B66                     
  5232                           ;lcd.c: 181:     WritePort_BBSPI (0x12, 0x00);
  5233  002B66  0E00               	movlw	0
  5234  002B68  0100               	movlb	0	; () banked
  5235  002B6A  6F63               	movwf	WritePort_BBSPI@a& (0+255),b
  5236  002B6C  0E12               	movlw	18
  5237  002B6E  ECD5  F016         	call	_WritePort_BBSPI
  5238  002B72  0012               	return		;funcret
  5239  002B74                     __end_of_LCDPutChar:
  5240                           	opt callstack 0
  5241                           
  5242 ;; *************** function _LCDMoveCursor *****************
  5243 ;; Defined at:
  5244 ;;		line 227 in file "lcd.c"
  5245 ;; Parameters:    Size  Location     Type
  5246 ;;  line            1    wreg     unsigned char 
  5247 ;;  pos             1    6[BANK0 ] unsigned char 
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;  line            1    7[BANK0 ] unsigned char 
  5250 ;;  position        1   10[BANK0 ] unsigned char 
  5251 ;; Return value:  Size  Location     Type
  5252 ;;                  1    wreg      void 
  5253 ;; Registers used:
  5254 ;;		wreg, status,2, status,0, cstack
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5260 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5263 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5264 ;;Total ram usage:        5 bytes
  5265 ;; Hardware stack levels used:    1
  5266 ;; Hardware stack levels required when called:    9
  5267 ;; This function calls:
  5268 ;;		_LCDPutInst
  5269 ;; This function is called by:
  5270 ;;		_LCDPrint
  5271 ;;		_LCDPrintChar
  5272 ;; This function uses a non-reentrant model
  5273 ;;
  5274                           
  5275                           	psect	text36
  5276  002C34                     __ptext36:
  5277                           	opt callstack 0
  5278  002C34                     _LCDMoveCursor:
  5279                           	opt callstack 19
  5280                           
  5281                           ;incstack = 0
  5282                           ;LCDMoveCursor@line stored from wreg
  5283  002C34  0100               	movlb	0	; () banked
  5284  002C36  6F67               	movwf	LCDMoveCursor@line& (0+255),b
  5285  002C38                     
  5286                           ;lcd.c: 228:     unsigned char position = (line == 0) ? (128 + pos) : (192 + pos);
  5287  002C38  0100               	movlb	0	; () banked
  5288  002C3A  5167               	movf	LCDMoveCursor@line& (0+255),w,b
  5289  002C3C  B4D8               	btfsc	status,2,c
  5290  002C3E  EF23  F016         	goto	u1071
  5291  002C42  EF25  F016         	goto	u1070
  5292  002C46                     u1071:
  5293  002C46  EF2D  F016         	goto	l2055
  5294  002C4A                     u1070:
  5295  002C4A                     
  5296                           ; BSR set to: 0
  5297  002C4A  0EC0               	movlw	192
  5298  002C4C  2566               	addwf	LCDMoveCursor@pos& (0+255),w,b
  5299  002C4E  6F68               	movwf	_LCDMoveCursor$1108& (0+255),b
  5300  002C50  6B69               	clrf	(_LCDMoveCursor$1108+1)& (0+255),b
  5301  002C52  0E00               	movlw	0
  5302  002C54  2369               	addwfc	(_LCDMoveCursor$1108+1)& (0+255),f,b
  5303  002C56  EF33  F016         	goto	l2057
  5304  002C5A                     l2055:
  5305                           
  5306                           ; BSR set to: 0
  5307  002C5A  0E80               	movlw	128
  5308  002C5C  2566               	addwf	LCDMoveCursor@pos& (0+255),w,b
  5309  002C5E  6F68               	movwf	_LCDMoveCursor$1108& (0+255),b
  5310  002C60  6B69               	clrf	(_LCDMoveCursor$1108+1)& (0+255),b
  5311  002C62  0E00               	movlw	0
  5312  002C64  2369               	addwfc	(_LCDMoveCursor$1108+1)& (0+255),f,b
  5313  002C66                     l2057:
  5314                           
  5315                           ; BSR set to: 0
  5316  002C66  C068  F06A         	movff	_LCDMoveCursor$1108,LCDMoveCursor@position
  5317  002C6A                     
  5318                           ; BSR set to: 0
  5319                           ;lcd.c: 229:     LCDPutInst(position);
  5320  002C6A  516A               	movf	LCDMoveCursor@position& (0+255),w,b
  5321  002C6C  ECBA  F015         	call	_LCDPutInst
  5322  002C70  0012               	return		;funcret
  5323  002C72                     __end_of_LCDMoveCursor:
  5324                           	opt callstack 0
  5325                           
  5326 ;; *************** function _LCDPutInst *****************
  5327 ;; Defined at:
  5328 ;;		line 203 in file "lcd.c"
  5329 ;; Parameters:    Size  Location     Type
  5330 ;;  ch              1    wreg     unsigned char 
  5331 ;; Auto vars:     Size  Location     Type
  5332 ;;  ch              1    5[BANK0 ] unsigned char 
  5333 ;; Return value:  Size  Location     Type
  5334 ;;                  1    wreg      void 
  5335 ;; Registers used:
  5336 ;;		wreg, status,2, status,0, cstack
  5337 ;; Tracked objects:
  5338 ;;		On entry : 0/0
  5339 ;;		On exit  : 0/0
  5340 ;;		Unchanged: 0/0
  5341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5343 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5345 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5346 ;;Total ram usage:        1 bytes
  5347 ;; Hardware stack levels used:    1
  5348 ;; Hardware stack levels required when called:    8
  5349 ;; This function calls:
  5350 ;;		_WritePort_BBSPI
  5351 ;; This function is called by:
  5352 ;;		_LCDInit
  5353 ;;		_LCDMoveCursor
  5354 ;; This function uses a non-reentrant model
  5355 ;;
  5356                           
  5357                           	psect	text37
  5358  002B74                     __ptext37:
  5359                           	opt callstack 0
  5360  002B74                     _LCDPutInst:
  5361                           	opt callstack 20
  5362                           
  5363                           ;incstack = 0
  5364                           ;LCDPutInst@ch stored from wreg
  5365  002B74  0100               	movlb	0	; () banked
  5366  002B76  6F65               	movwf	LCDPutInst@ch& (0+255),b
  5367  002B78                     
  5368                           ;lcd.c: 203: void LCDPutInst (unsigned char ch);lcd.c: 204: {;lcd.c: 205:     _delay((un
      +                          signed long)((10)*(8000000/4000000.0)));
  5369  002B78  0E06               	movlw	6
  5370  002B7A                     u1987:
  5371  002B7A  2EE8               	decfsz	wreg,f,c
  5372  002B7C  D7FE               	bra	u1987
  5373  002B7E  D000               	nop2	
  5374  002B80                     
  5375                           ;lcd.c: 206:     WritePort_BBSPI (0x12, 0x00);
  5376  002B80  0E00               	movlw	0
  5377  002B82  0100               	movlb	0	; () banked
  5378  002B84  6F63               	movwf	WritePort_BBSPI@a& (0+255),b
  5379  002B86  0E12               	movlw	18
  5380  002B88  ECD5  F016         	call	_WritePort_BBSPI
  5381  002B8C                     
  5382                           ;lcd.c: 207:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  5383  002B8C  D000               	nop2		;2 cycle nop
  5384  002B8E                     
  5385                           ;lcd.c: 208:     WritePort_BBSPI (0x13, ch);
  5386  002B8E  C065  F063         	movff	LCDPutInst@ch,WritePort_BBSPI@a
  5387  002B92  0E13               	movlw	19
  5388  002B94  ECD5  F016         	call	_WritePort_BBSPI
  5389  002B98                     
  5390                           ;lcd.c: 209:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  5391  002B98  D000               	nop2		;2 cycle nop
  5392  002B9A                     
  5393                           ;lcd.c: 210:     WritePort_BBSPI (0x12,0x40);
  5394  002B9A  0E40               	movlw	64
  5395  002B9C  0100               	movlb	0	; () banked
  5396  002B9E  6F63               	movwf	WritePort_BBSPI@a& (0+255),b
  5397  002BA0  0E12               	movlw	18
  5398  002BA2  ECD5  F016         	call	_WritePort_BBSPI
  5399  002BA6                     
  5400                           ;lcd.c: 211:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  5401  002BA6  D000               	nop2		;2 cycle nop
  5402  002BA8                     
  5403                           ;lcd.c: 212:     WritePort_BBSPI (0x12, 0x00);
  5404  002BA8  0E00               	movlw	0
  5405  002BAA  0100               	movlb	0	; () banked
  5406  002BAC  6F63               	movwf	WritePort_BBSPI@a& (0+255),b
  5407  002BAE  0E12               	movlw	18
  5408  002BB0  ECD5  F016         	call	_WritePort_BBSPI
  5409  002BB4  0012               	return		;funcret
  5410  002BB6                     __end_of_LCDPutInst:
  5411                           	opt callstack 0
  5412                           
  5413 ;; *************** function _WritePort_BBSPI *****************
  5414 ;; Defined at:
  5415 ;;		line 144 in file "lcd.c"
  5416 ;; Parameters:    Size  Location     Type
  5417 ;;  port_add        1    wreg     unsigned char 
  5418 ;;  a               1    3[BANK0 ] unsigned char 
  5419 ;; Auto vars:     Size  Location     Type
  5420 ;;  port_add        1    4[BANK0 ] unsigned char 
  5421 ;; Return value:  Size  Location     Type
  5422 ;;                  1    wreg      void 
  5423 ;; Registers used:
  5424 ;;		wreg, status,2, status,0, cstack
  5425 ;; Tracked objects:
  5426 ;;		On entry : 0/0
  5427 ;;		On exit  : 0/0
  5428 ;;		Unchanged: 0/0
  5429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5430 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5431 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5433 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5434 ;;Total ram usage:        2 bytes
  5435 ;; Hardware stack levels used:    1
  5436 ;; Hardware stack levels required when called:    7
  5437 ;; This function calls:
  5438 ;;		_SendByteBBSPI
  5439 ;; This function is called by:
  5440 ;;		_LCDInit
  5441 ;;		_LCDPutChar
  5442 ;;		_LCDPutInst
  5443 ;; This function uses a non-reentrant model
  5444 ;;
  5445                           
  5446                           	psect	text38
  5447  002DAA                     __ptext38:
  5448                           	opt callstack 0
  5449  002DAA                     _WritePort_BBSPI:
  5450                           	opt callstack 21
  5451                           
  5452                           ;incstack = 0
  5453                           ;WritePort_BBSPI@port_add stored from wreg
  5454  002DAA  0100               	movlb	0	; () banked
  5455  002DAC  6F64               	movwf	WritePort_BBSPI@port_add& (0+255),b
  5456  002DAE                     
  5457                           ;lcd.c: 144: void WritePort_BBSPI (unsigned char port_add, unsigned char a);lcd.c: 145: 
      +                          {;lcd.c: 146:     LATAbits.LATA2 = 0;
  5458  002DAE  9489               	bcf	137,2,c	;volatile
  5459  002DB0                     
  5460                           ;lcd.c: 147:     SendByteBBSPI(0x40);
  5461  002DB0  0E40               	movlw	64
  5462  002DB2  EC5C  F014         	call	_SendByteBBSPI
  5463                           
  5464                           ;lcd.c: 148:     SendByteBBSPI(port_add);
  5465  002DB6  0100               	movlb	0	; () banked
  5466  002DB8  5164               	movf	WritePort_BBSPI@port_add& (0+255),w,b
  5467  002DBA  EC5C  F014         	call	_SendByteBBSPI
  5468                           
  5469                           ;lcd.c: 149:     SendByteBBSPI(a);
  5470  002DBE  0100               	movlb	0	; () banked
  5471  002DC0  5163               	movf	WritePort_BBSPI@a& (0+255),w,b
  5472  002DC2  EC5C  F014         	call	_SendByteBBSPI
  5473  002DC6                     
  5474                           ;lcd.c: 150:     LATAbits.LATA2 = 1;
  5475  002DC6  8489               	bsf	137,2,c	;volatile
  5476  002DC8  0012               	return		;funcret
  5477  002DCA                     __end_of_WritePort_BBSPI:
  5478                           	opt callstack 0
  5479                           
  5480 ;; *************** function _SendByteBBSPI *****************
  5481 ;; Defined at:
  5482 ;;		line 91 in file "lcd.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;  output          1    wreg     unsigned char 
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;  output          1    0[BANK0 ] unsigned char 
  5487 ;;  input           1    2[BANK0 ] unsigned char 
  5488 ;;  bitcount        1    1[BANK0 ] unsigned char 
  5489 ;; Return value:  Size  Location     Type
  5490 ;;                  1    wreg      void 
  5491 ;; Registers used:
  5492 ;;		wreg, status,2, status,0
  5493 ;; Tracked objects:
  5494 ;;		On entry : 0/0
  5495 ;;		On exit  : 0/0
  5496 ;;		Unchanged: 0/0
  5497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5499 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5501 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5502 ;;Total ram usage:        3 bytes
  5503 ;; Hardware stack levels used:    1
  5504 ;; Hardware stack levels required when called:    6
  5505 ;; This function calls:
  5506 ;;		Nothing
  5507 ;; This function is called by:
  5508 ;;		_Port_BBSPIInit
  5509 ;;		_WritePort_BBSPI
  5510 ;; This function uses a non-reentrant model
  5511 ;;
  5512                           
  5513                           	psect	text39
  5514  0028B8                     __ptext39:
  5515                           	opt callstack 0
  5516  0028B8                     _SendByteBBSPI:
  5517                           	opt callstack 21
  5518                           
  5519                           ;incstack = 0
  5520                           ;SendByteBBSPI@output stored from wreg
  5521  0028B8  0100               	movlb	0	; () banked
  5522  0028BA  6F60               	movwf	SendByteBBSPI@output& (0+255),b
  5523  0028BC                     
  5524                           ;lcd.c: 91: void SendByteBBSPI (unsigned char output);lcd.c: 92: {;lcd.c: 93:     unsign
      +                          ed char bitcount;;lcd.c: 94:     unsigned char input = output;
  5525  0028BC  C060  F062         	movff	SendByteBBSPI@output,SendByteBBSPI@input
  5526  0028C0                     
  5527                           ;lcd.c: 96:     for(bitcount=0;bitcount<8;bitcount++)
  5528  0028C0  0E00               	movlw	0
  5529  0028C2  0100               	movlb	0	; () banked
  5530  0028C4  6F61               	movwf	SendByteBBSPI@bitcount& (0+255),b
  5531  0028C6                     l462:
  5532                           
  5533                           ; BSR set to: 0
  5534                           ;lcd.c: 97:     {;lcd.c: 99:         if(output & 0x80)
  5535  0028C6  AF60               	btfss	SendByteBBSPI@output& (0+255),7,b
  5536  0028C8  EF68  F014         	goto	u981
  5537  0028CC  EF6A  F014         	goto	u980
  5538  0028D0                     u981:
  5539  0028D0  EF6D  F014         	goto	l464
  5540  0028D4                     u980:
  5541  0028D4                     
  5542                           ; BSR set to: 0
  5543                           ;lcd.c: 100:             LATCbits.LATC5 = 1;
  5544  0028D4  8A8B               	bsf	139,5,c	;volatile
  5545  0028D6  EF6E  F014         	goto	l465
  5546  0028DA                     l464:
  5547                           
  5548                           ; BSR set to: 0
  5549                           ;lcd.c: 102:             LATCbits.LATC5 = 0;
  5550  0028DA  9A8B               	bcf	139,5,c	;volatile
  5551  0028DC                     l465:
  5552                           
  5553                           ; BSR set to: 0
  5554                           ;lcd.c: 104:         if (LATCbits.LATC4)
  5555  0028DC  A88B               	btfss	139,4,c	;volatile
  5556  0028DE  EF73  F014         	goto	u991
  5557  0028E2  EF75  F014         	goto	u990
  5558  0028E6                     u991:
  5559  0028E6  EF79  F014         	goto	l1951
  5560  0028EA                     u990:
  5561  0028EA                     
  5562                           ; BSR set to: 0
  5563                           ;lcd.c: 105:             input = (input << 1) | 0x1;
  5564  0028EA  80D8               	bsf	status,0,c
  5565  0028EC  3762               	rlcf	SendByteBBSPI@input& (0+255),f,b
  5566  0028EE  EF7C  F014         	goto	l1953
  5567  0028F2                     l1951:
  5568                           
  5569                           ; BSR set to: 0
  5570                           ;lcd.c: 107:             input = input << 1;
  5571  0028F2  5162               	movf	SendByteBBSPI@input& (0+255),w,b
  5572  0028F4  2562               	addwf	SendByteBBSPI@input& (0+255),w,b
  5573  0028F6  6F62               	movwf	SendByteBBSPI@input& (0+255),b
  5574  0028F8                     l1953:
  5575                           
  5576                           ; BSR set to: 0
  5577                           ;lcd.c: 108:         LATCbits.LATC3 = 1;
  5578  0028F8  868B               	bsf	139,3,c	;volatile
  5579  0028FA                     
  5580                           ; BSR set to: 0
  5581                           ;lcd.c: 109:         __nop();__nop();__nop();__nop();__nop();__nop();
  5582  0028FA  F000               	nop	
  5583  0028FC  F000               	nop	
  5584  0028FE  F000               	nop	
  5585  002900  F000               	nop	
  5586  002902  F000               	nop	
  5587  002904  F000               	nop	
  5588  002906                     
  5589                           ;lcd.c: 111:         LATCbits.LATC3 = 0;
  5590  002906  968B               	bcf	139,3,c	;volatile
  5591                           
  5592                           ;lcd.c: 112:         output <<= 1;
  5593  002908  0100               	movlb	0	; () banked
  5594  00290A  90D8               	bcf	status,0,c
  5595  00290C  3760               	rlcf	SendByteBBSPI@output& (0+255),f,b
  5596  00290E                     
  5597                           ; BSR set to: 0
  5598                           ;lcd.c: 113:     }
  5599  00290E  2B61               	incf	SendByteBBSPI@bitcount& (0+255),f,b
  5600  002910                     
  5601                           ; BSR set to: 0
  5602  002910  0E07               	movlw	7
  5603  002912  6561               	cpfsgt	SendByteBBSPI@bitcount& (0+255),b
  5604  002914  EF8E  F014         	goto	u1001
  5605  002918  EF90  F014         	goto	u1000
  5606  00291C                     u1001:
  5607  00291C  EF63  F014         	goto	l462
  5608  002920                     u1000:
  5609  002920                     
  5610                           ; BSR set to: 0
  5611  002920  0012               	return		;funcret
  5612  002922                     __end_of_SendByteBBSPI:
  5613                           	opt callstack 0
  5614                           
  5615 ;; *************** function _timer_interrupt *****************
  5616 ;; Defined at:
  5617 ;;		line 55 in file "clock.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;		None
  5620 ;; Auto vars:     Size  Location     Type
  5621 ;;		None
  5622 ;; Return value:  Size  Location     Type
  5623 ;;                  1    wreg      void 
  5624 ;; Registers used:
  5625 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 0/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5633 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5634 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5635 ;;Total ram usage:        6 bytes
  5636 ;; Hardware stack levels used:    1
  5637 ;; Hardware stack levels required when called:    5
  5638 ;; This function calls:
  5639 ;;		_handleListHead
  5640 ;; This function is called by:
  5641 ;;		Interrupt level 2
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645                           	psect	intcode
  5646  000008                     __pintcode:
  5647                           	opt callstack 0
  5648  000008                     _timer_interrupt:
  5649                           	opt callstack 17
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;incstack = 0
  5653  000008  824B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5654  00000A  ED8D  F013         	call	int_func,f	;refresh shadow registers
  5655                           
  5656                           	psect	intcode_body
  5657  00271A                     __pintcode_body:
  5658                           	opt callstack 17
  5659  00271A                     int_func:
  5660                           	opt callstack 17
  5661  00271A  0006               	pop		; remove dummy address from shadow register refresh
  5662  00271C  CFE1 F02E          	movff	fsr1l,??_timer_interrupt
  5663  002720  CFE2 F02F          	movff	fsr1h,??_timer_interrupt+1
  5664  002724  CFD9 F030          	movff	fsr2l,??_timer_interrupt+2
  5665  002728  CFDA F031          	movff	fsr2h,??_timer_interrupt+3
  5666  00272C  CFF3 F032          	movff	prodl,??_timer_interrupt+4
  5667  002730  CFF4 F033          	movff	prodh,??_timer_interrupt+5
  5668  002734                     
  5669                           ;clock.c: 56:     if(INTCONbits.TMR0IE && INTCONbits.TMR0IF) {
  5670  002734  AAF2               	btfss	242,5,c	;volatile
  5671  002736  EF9F  F013         	goto	i2u191_41
  5672  00273A  EFA1  F013         	goto	i2u191_40
  5673  00273E                     i2u191_41:
  5674  00273E  EFB2  F013         	goto	i2l2673
  5675  002742                     i2u191_40:
  5676  002742  A4F2               	btfss	242,2,c	;volatile
  5677  002744  EFA6  F013         	goto	i2u192_41
  5678  002748  EFA8  F013         	goto	i2u192_40
  5679  00274C                     i2u192_41:
  5680  00274C  EFB2  F013         	goto	i2l2673
  5681  002750                     i2u192_40:
  5682  002750                     
  5683                           ;clock.c: 57:         INTCONbits.TMR0IF = 0;
  5684  002750  94F2               	bcf	242,2,c	;volatile
  5685  002752                     
  5686                           ;clock.c: 58:         TMR0L = 131;
  5687  002752  0E83               	movlw	131
  5688  002754  6ED6               	movwf	214,c	;volatile
  5689  002756                     
  5690                           ;clock.c: 59:         time_ms++;
  5691  002756  0E01               	movlw	1
  5692  002758  0100               	movlb	0	; () banked
  5693  00275A  27B7               	addwf	_time_ms& (0+255),f,b
  5694  00275C  0E00               	movlw	0
  5695  00275E  23B8               	addwfc	(_time_ms+1)& (0+255),f,b
  5696  002760  23B9               	addwfc	(_time_ms+2)& (0+255),f,b
  5697  002762  23BA               	addwfc	(_time_ms+3)& (0+255),f,b
  5698  002764                     i2l2673:
  5699                           
  5700                           ;clock.c: 61:     if(PIE1bits.TMR1IE && PIR1bits.TMR1IF) {
  5701  002764  A09D               	btfss	157,0,c	;volatile
  5702  002766  EFB7  F013         	goto	i2u193_41
  5703  00276A  EFB9  F013         	goto	i2u193_40
  5704  00276E                     i2u193_41:
  5705  00276E  EFC7  F013         	goto	i2l355
  5706  002772                     i2u193_40:
  5707  002772  A09E               	btfss	158,0,c	;volatile
  5708  002774  EFBE  F013         	goto	i2u194_41
  5709  002778  EFC0  F013         	goto	i2u194_40
  5710  00277C                     i2u194_41:
  5711  00277C  EFC7  F013         	goto	i2l355
  5712  002780                     i2u194_40:
  5713  002780                     
  5714                           ;clock.c: 62:         PIR1bits.TMR1IF = 0;
  5715  002780  909E               	bcf	158,0,c	;volatile
  5716  002782                     
  5717                           ;clock.c: 63:         TMR1H = 0xB1;
  5718  002782  0EB1               	movlw	177
  5719  002784  6ECF               	movwf	207,c	;volatile
  5720                           
  5721                           ;clock.c: 64:         TMR1L = 0xE0;
  5722  002786  0EE0               	movlw	224
  5723  002788  6ECE               	movwf	206,c	;volatile
  5724  00278A                     
  5725                           ;clock.c: 65:         handleListHead();
  5726  00278A  EC0E  F008         	call	_handleListHead	;wreg free
  5727  00278E                     i2l355:
  5728  00278E  C033  FFF4         	movff	??_timer_interrupt+5,prodh
  5729  002792  C032  FFF3         	movff	??_timer_interrupt+4,prodl
  5730  002796  C031  FFDA         	movff	??_timer_interrupt+3,fsr2h
  5731  00279A  C030  FFD9         	movff	??_timer_interrupt+2,fsr2l
  5732  00279E  C02F  FFE2         	movff	??_timer_interrupt+1,fsr1h
  5733  0027A2  C02E  FFE1         	movff	??_timer_interrupt,fsr1l
  5734  0027A6  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5735  0027A8  0011               	retfie		f
  5736  0027AA                     __end_of_timer_interrupt:
  5737                           	opt callstack 0
  5738                           
  5739 ;; *************** function _handleListHead *****************
  5740 ;; Defined at:
  5741 ;;		line 86 in file "task.c"
  5742 ;; Parameters:    Size  Location     Type
  5743 ;;		None
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;  cur             2   41[COMRAM] int 
  5746 ;;  prev            2   37[COMRAM] int 
  5747 ;;  sum             2   39[COMRAM] int 
  5748 ;;  pos             2   43[COMRAM] int 
  5749 ;; Return value:  Size  Location     Type
  5750 ;;                  1    wreg      void 
  5751 ;; Registers used:
  5752 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5753 ;; Tracked objects:
  5754 ;;		On entry : 0/0
  5755 ;;		On exit  : 0/0
  5756 ;;		Unchanged: 0/0
  5757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5759 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5760 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5761 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5762 ;;Total ram usage:       31 bytes
  5763 ;; Hardware stack levels used:    1
  5764 ;; Hardware stack levels required when called:    4
  5765 ;; This function calls:
  5766 ;;		_enqueue
  5767 ;;		i2___wmul
  5768 ;;		i2_removeTask
  5769 ;; This function is called by:
  5770 ;;		_timer_interrupt
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           	psect	text41
  5775  00101C                     __ptext41:
  5776                           	opt callstack 0
  5777  00101C                     _handleListHead:
  5778                           	opt callstack 17
  5779  00101C                     
  5780                           ;task.c: 87:     if(head == 105)
  5781  00101C  0E69               	movlw	105
  5782  00101E  0100               	movlb	0	; () banked
  5783  001020  19BF               	xorwf	_head& (0+255),w,b
  5784  001022  A4D8               	btfss	status,2,c
  5785  001024  EF16  F008         	goto	i2u180_41
  5786  001028  EF18  F008         	goto	i2u180_40
  5787  00102C                     i2u180_41:
  5788  00102C  EF44  F00A         	goto	i2l2629
  5789  001030                     i2u180_40:
  5790  001030  EF66  F00A         	goto	i2l251
  5791  001034                     i2l253:
  5792                           
  5793                           ; BSR set to: 0
  5794                           ;task.c: 90:         int pos = head;
  5795  001034  C0BF  F02C         	movff	_head,handleListHead@pos
  5796  001038  6A2D               	clrf	(handleListHead@pos+1)^0,c
  5797  00103A                     
  5798                           ; BSR set to: 0
  5799                           ;task.c: 91:         enqueue(task_list[pos].func_ptr, task_list[pos].data_p);
  5800  00103A  C02C  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  5801  00103E  C02D  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  5802  001042  0E00               	movlw	0
  5803  001044  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  5804  001046  0E0F               	movlw	15
  5805  001048  6E03               	movwf	i2___wmul@multiplicand^0,c
  5806  00104A  ECB0  F016         	call	i2___wmul	;wreg free
  5807  00104E  0E6C               	movlw	low (_task_list+8)
  5808  001050  2401               	addwf	?i2___wmul^0,w,c
  5809  001052  6ED9               	movwf	fsr2l,c
  5810  001054  0E01               	movlw	high (_task_list+8)
  5811  001056  2002               	addwfc	(?i2___wmul+1)^0,w,c
  5812  001058  6EDA               	movwf	fsr2h,c
  5813  00105A  CFDE F01F          	movff	postinc2,_handleListHead$1816
  5814  00105E  CFDE F020          	movff	postinc2,_handleListHead$1816+1
  5815  001062  CFDD F021          	movff	postdec2,_handleListHead$1816+2
  5816                           
  5817                           ;task.c: 91:         enqueue(task_list[pos].func_ptr, task_list[pos].data_p);
  5818  001066  C02C  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  5819  00106A  C02D  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  5820  00106E  0E00               	movlw	0
  5821  001070  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  5822  001072  0E0F               	movlw	15
  5823  001074  6E03               	movwf	i2___wmul@multiplicand^0,c
  5824  001076  ECB0  F016         	call	i2___wmul	;wreg free
  5825  00107A  0E71               	movlw	low (_task_list+13)
  5826  00107C  2401               	addwf	?i2___wmul^0,w,c
  5827  00107E  6ED9               	movwf	fsr2l,c
  5828  001080  0E01               	movlw	high (_task_list+13)
  5829  001082  2002               	addwfc	(?i2___wmul+1)^0,w,c
  5830  001084  6EDA               	movwf	fsr2h,c
  5831  001086  CFDE F022          	movff	postinc2,_handleListHead$1821
  5832  00108A  CFDD F023          	movff	postdec2,_handleListHead$1821+1
  5833                           
  5834                           ;task.c: 91:         enqueue(task_list[pos].func_ptr, task_list[pos].data_p);
  5835  00108E  C01F  F00A         	movff	_handleListHead$1816,enqueue@ptr
  5836  001092  C020  F00B         	movff	_handleListHead$1816+1,enqueue@ptr+1
  5837  001096  C021  F00C         	movff	_handleListHead$1816+2,enqueue@ptr+2
  5838  00109A  C022  F00D         	movff	_handleListHead$1821,enqueue@data
  5839  00109E  C023  F00E         	movff	_handleListHead$1821+1,enqueue@data+1
  5840  0010A2  EC48  F012         	call	_enqueue	;wreg free
  5841                           
  5842                           ;task.c: 92:         head = task_list[pos].next;
  5843  0010A6  C02C  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  5844  0010AA  C02D  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  5845  0010AE  0E00               	movlw	0
  5846  0010B0  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  5847  0010B2  0E0F               	movlw	15
  5848  0010B4  6E03               	movwf	i2___wmul@multiplicand^0,c
  5849  0010B6  ECB0  F016         	call	i2___wmul	;wreg free
  5850  0010BA  0E6F               	movlw	low (_task_list+11)
  5851  0010BC  2401               	addwf	?i2___wmul^0,w,c
  5852  0010BE  6ED9               	movwf	fsr2l,c
  5853  0010C0  0E01               	movlw	high (_task_list+11)
  5854  0010C2  2002               	addwfc	(?i2___wmul+1)^0,w,c
  5855  0010C4  6EDA               	movwf	fsr2h,c
  5856  0010C6  50DF               	movf	indf2,w,c
  5857  0010C8  0100               	movlb	0	; () banked
  5858  0010CA  6FBF               	movwf	_head& (0+255),b
  5859                           
  5860                           ;task.c: 93:         if(task_list[pos].period_t == 0) {
  5861  0010CC  C02C  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  5862  0010D0  C02D  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  5863  0010D4  0E00               	movlw	0
  5864  0010D6  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  5865  0010D8  0E0F               	movlw	15
  5866  0010DA  6E03               	movwf	i2___wmul@multiplicand^0,c
  5867  0010DC  ECB0  F016         	call	i2___wmul	;wreg free
  5868  0010E0  0E68               	movlw	low (_task_list+4)
  5869  0010E2  2401               	addwf	?i2___wmul^0,w,c
  5870  0010E4  6ED9               	movwf	fsr2l,c
  5871  0010E6  0E01               	movlw	high (_task_list+4)
  5872  0010E8  2002               	addwfc	(?i2___wmul+1)^0,w,c
  5873  0010EA  6EDA               	movwf	fsr2h,c
  5874  0010EC  50DE               	movf	postinc2,w,c
  5875  0010EE  10DE               	iorwf	postinc2,w,c
  5876  0010F0  10DE               	iorwf	postinc2,w,c
  5877  0010F2  10DE               	iorwf	postinc2,w,c
  5878  0010F4  A4D8               	btfss	status,2,c
  5879  0010F6  EF7F  F008         	goto	i2u181_41
  5880  0010FA  EF81  F008         	goto	i2u181_40
  5881  0010FE                     i2u181_41:
  5882  0010FE  EF86  F008         	goto	i2l2599
  5883  001102                     i2u181_40:
  5884  001102                     
  5885                           ;task.c: 94:             removeTask(pos);
  5886  001102  502C               	movf	handleListHead@pos^0,w,c
  5887  001104  EC72  F00F         	call	i2_removeTask
  5888                           
  5889                           ;task.c: 95:         }
  5890  001108  EF44  F00A         	goto	i2l2629
  5891  00110C                     i2l2599:
  5892                           
  5893                           ;task.c: 97:             task_list[pos].delay_t = task_list[pos].period_t;
  5894  00110C  C02C  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  5895  001110  C02D  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  5896  001114  0E00               	movlw	0
  5897  001116  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  5898  001118  0E0F               	movlw	15
  5899  00111A  6E03               	movwf	i2___wmul@multiplicand^0,c
  5900  00111C  ECB0  F016         	call	i2___wmul	;wreg free
  5901  001120  0E68               	movlw	low (_task_list+4)
  5902  001122  2401               	addwf	?i2___wmul^0,w,c
  5903  001124  6ED9               	movwf	fsr2l,c
  5904  001126  0E01               	movlw	high (_task_list+4)
  5905  001128  2002               	addwfc	(?i2___wmul+1)^0,w,c
  5906  00112A  6EDA               	movwf	fsr2h,c
  5907  00112C  C02C  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  5908  001130  C02D  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  5909  001134  0E00               	movlw	0
  5910  001136  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  5911  001138  0E0F               	movlw	15
  5912  00113A  6E03               	movwf	i2___wmul@multiplicand^0,c
  5913  00113C  ECB0  F016         	call	i2___wmul	;wreg free
  5914  001140  0E64               	movlw	low _task_list
  5915  001142  2401               	addwf	?i2___wmul^0,w,c
  5916  001144  6EE1               	movwf	fsr1l,c
  5917  001146  0E01               	movlw	high _task_list
  5918  001148  2002               	addwfc	(?i2___wmul+1)^0,w,c
  5919  00114A  6EE2               	movwf	fsr1h,c
  5920  00114C  CFDE FFE6          	movff	postinc2,postinc1
  5921  001150  CFDE FFE6          	movff	postinc2,postinc1
  5922  001154  CFDE FFE6          	movff	postinc2,postinc1
  5923  001158  CFDE FFE6          	movff	postinc2,postinc1
  5924  00115C                     
  5925                           ;task.c: 98:             int sum = task_list[head].delay_t;
  5926  00115C  0100               	movlb	0	; () banked
  5927  00115E  51BF               	movf	_head& (0+255),w,b
  5928  001160  0D0F               	mullw	15
  5929  001162  0E64               	movlw	low _task_list
  5930  001164  24F3               	addwf	243,w,c
  5931  001166  6ED9               	movwf	fsr2l,c
  5932  001168  0E01               	movlw	high _task_list
  5933  00116A  20F4               	addwfc	prodh,w,c
  5934  00116C  6EDA               	movwf	fsr2h,c
  5935  00116E  CFDE F028          	movff	postinc2,handleListHead@sum
  5936  001172  CFDD F029          	movff	postdec2,handleListHead@sum+1
  5937  001176                     
  5938                           ; BSR set to: 0
  5939                           ;task.c: 99:             if(head == 105 || (head != 105 && sum > task_list[pos].delay_t)
      +                          ) {
  5940  001176  0E69               	movlw	105
  5941  001178  19BF               	xorwf	_head& (0+255),w,b
  5942  00117A  B4D8               	btfsc	status,2,c
  5943  00117C  EFC2  F008         	goto	i2u182_41
  5944  001180  EFC4  F008         	goto	i2u182_40
  5945  001184                     i2u182_41:
  5946  001184  EFF5  F008         	goto	i2l2609
  5947  001188                     i2u182_40:
  5948  001188                     
  5949                           ; BSR set to: 0
  5950  001188  0E69               	movlw	105
  5951  00118A  19BF               	xorwf	_head& (0+255),w,b
  5952  00118C  B4D8               	btfsc	status,2,c
  5953  00118E  EFCB  F008         	goto	i2u183_41
  5954  001192  EFCD  F008         	goto	i2u183_40
  5955  001196                     i2u183_41:
  5956  001196  EF11  F009         	goto	i2l2613
  5957  00119A                     i2u183_40:
  5958  00119A                     
  5959                           ; BSR set to: 0
  5960  00119A  C028  F00F         	movff	handleListHead@sum,??_handleListHead
  5961  00119E  C029  F010         	movff	handleListHead@sum+1,??_handleListHead+1
  5962  0011A2  0E00               	movlw	0
  5963  0011A4  BE10               	btfsc	(??_handleListHead+1)^0,7,c
  5964  0011A6  0EFF               	movlw	255
  5965  0011A8  6E11               	movwf	(??_handleListHead+2)^0,c
  5966  0011AA  6E12               	movwf	(??_handleListHead+3)^0,c
  5967  0011AC  C02C  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  5968  0011B0  C02D  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  5969  0011B4  0E00               	movlw	0
  5970  0011B6  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  5971  0011B8  0E0F               	movlw	15
  5972  0011BA  6E03               	movwf	i2___wmul@multiplicand^0,c
  5973  0011BC  ECB0  F016         	call	i2___wmul	;wreg free
  5974  0011C0  0E64               	movlw	low _task_list
  5975  0011C2  2401               	addwf	?i2___wmul^0,w,c
  5976  0011C4  6ED9               	movwf	fsr2l,c
  5977  0011C6  0E01               	movlw	high _task_list
  5978  0011C8  2002               	addwfc	(?i2___wmul+1)^0,w,c
  5979  0011CA  6EDA               	movwf	fsr2h,c
  5980  0011CC  500F               	movf	??_handleListHead^0,w,c
  5981  0011CE  5CDE               	subwf	postinc2,w,c
  5982  0011D0  5010               	movf	(??_handleListHead+1)^0,w,c
  5983  0011D2  58DE               	subwfb	postinc2,w,c
  5984  0011D4  5011               	movf	(??_handleListHead+2)^0,w,c
  5985  0011D6  58DE               	subwfb	postinc2,w,c
  5986  0011D8  5012               	movf	(??_handleListHead+3)^0,w,c
  5987  0011DA  58DE               	subwfb	postinc2,w,c
  5988  0011DC  B0D8               	btfsc	status,0,c
  5989  0011DE  EFF3  F008         	goto	i2u184_41
  5990  0011E2  EFF5  F008         	goto	i2u184_40
  5991  0011E6                     i2u184_41:
  5992  0011E6  EF11  F009         	goto	i2l2613
  5993  0011EA                     i2u184_40:
  5994  0011EA                     i2l2609:
  5995                           
  5996                           ;task.c: 100:                 task_list[pos].next = head;
  5997  0011EA  0100               	movlb	0	; () banked
  5998  0011EC  51BF               	movf	_head& (0+255),w,b
  5999  0011EE  6E0F               	movwf	??_handleListHead^0,c
  6000  0011F0  6A10               	clrf	(??_handleListHead+1)^0,c
  6001  0011F2  C02C  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  6002  0011F6  C02D  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  6003  0011FA  0E00               	movlw	0
  6004  0011FC  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  6005  0011FE  0E0F               	movlw	15
  6006  001200  6E03               	movwf	i2___wmul@multiplicand^0,c
  6007  001202  ECB0  F016         	call	i2___wmul	;wreg free
  6008  001206  0E6F               	movlw	low (_task_list+11)
  6009  001208  2401               	addwf	?i2___wmul^0,w,c
  6010  00120A  6ED9               	movwf	fsr2l,c
  6011  00120C  0E01               	movlw	high (_task_list+11)
  6012  00120E  2002               	addwfc	(?i2___wmul+1)^0,w,c
  6013  001210  6EDA               	movwf	fsr2h,c
  6014  001212  C00F  FFDE         	movff	??_handleListHead,postinc2
  6015  001216  C010  FFDD         	movff	??_handleListHead+1,postdec2
  6016  00121A                     
  6017                           ;task.c: 101:                 head = pos;
  6018  00121A  C02C  F0BF         	movff	handleListHead@pos,_head
  6019                           
  6020                           ;task.c: 102:             } else {
  6021  00121E  EFE6  F009         	goto	i2l259
  6022  001222                     i2l2613:
  6023                           
  6024                           ;task.c: 104:                 int cur = task_list[head].next;
  6025  001222  0100               	movlb	0	; () banked
  6026  001224  51BF               	movf	_head& (0+255),w,b
  6027  001226  0D0F               	mullw	15
  6028  001228  0E6F               	movlw	low (_task_list+11)
  6029  00122A  24F3               	addwf	243,w,c
  6030  00122C  6ED9               	movwf	fsr2l,c
  6031  00122E  0E01               	movlw	high (_task_list+11)
  6032  001230  20F4               	addwfc	prodh,w,c
  6033  001232  6EDA               	movwf	fsr2h,c
  6034  001234  CFDE F02A          	movff	postinc2,handleListHead@cur
  6035  001238  CFDD F02B          	movff	postdec2,handleListHead@cur+1
  6036  00123C                     
  6037                           ; BSR set to: 0
  6038                           ;task.c: 105:                 int prev = head;
  6039  00123C  C0BF  F026         	movff	_head,handleListHead@prev
  6040  001240  6A27               	clrf	(handleListHead@prev+1)^0,c
  6041                           
  6042                           ;task.c: 106:                 while(cur != 105 && sum + task_list[cur].delay_t <= task_l
      +                          ist[pos].delay_t) {
  6043  001242  EF4F  F009         	goto	i2l2621
  6044  001246                     i2l2617:
  6045                           
  6046                           ;task.c: 108:                     sum+= task_list[cur].delay_t;
  6047  001246  C02A  F001         	movff	handleListHead@cur,i2___wmul@multiplier
  6048  00124A  C02B  F002         	movff	handleListHead@cur+1,i2___wmul@multiplier+1
  6049  00124E  0E00               	movlw	0
  6050  001250  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  6051  001252  0E0F               	movlw	15
  6052  001254  6E03               	movwf	i2___wmul@multiplicand^0,c
  6053  001256  ECB0  F016         	call	i2___wmul	;wreg free
  6054  00125A  0E64               	movlw	low _task_list
  6055  00125C  2401               	addwf	?i2___wmul^0,w,c
  6056  00125E  6ED9               	movwf	fsr2l,c
  6057  001260  0E01               	movlw	high _task_list
  6058  001262  2002               	addwfc	(?i2___wmul+1)^0,w,c
  6059  001264  6EDA               	movwf	fsr2h,c
  6060  001266  50DE               	movf	postinc2,w,c
  6061  001268  2628               	addwf	handleListHead@sum^0,f,c
  6062  00126A  50DD               	movf	postdec2,w,c
  6063  00126C  2229               	addwfc	(handleListHead@sum+1)^0,f,c
  6064  00126E                     
  6065                           ;task.c: 109:                     prev = cur;
  6066  00126E  C02A  F026         	movff	handleListHead@cur,handleListHead@prev
  6067  001272  C02B  F027         	movff	handleListHead@cur+1,handleListHead@prev+1
  6068                           
  6069                           ;task.c: 110:                     cur = task_list[cur].next;
  6070  001276  C02A  F001         	movff	handleListHead@cur,i2___wmul@multiplier
  6071  00127A  C02B  F002         	movff	handleListHead@cur+1,i2___wmul@multiplier+1
  6072  00127E  0E00               	movlw	0
  6073  001280  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  6074  001282  0E0F               	movlw	15
  6075  001284  6E03               	movwf	i2___wmul@multiplicand^0,c
  6076  001286  ECB0  F016         	call	i2___wmul	;wreg free
  6077  00128A  0E6F               	movlw	low (_task_list+11)
  6078  00128C  2401               	addwf	?i2___wmul^0,w,c
  6079  00128E  6ED9               	movwf	fsr2l,c
  6080  001290  0E01               	movlw	high (_task_list+11)
  6081  001292  2002               	addwfc	(?i2___wmul+1)^0,w,c
  6082  001294  6EDA               	movwf	fsr2h,c
  6083  001296  CFDE F02A          	movff	postinc2,handleListHead@cur
  6084  00129A  CFDD F02B          	movff	postdec2,handleListHead@cur+1
  6085  00129E                     i2l2621:
  6086                           
  6087                           ;task.c: 106:                 while(cur != 105 && sum + task_list[cur].delay_t <= task_l
      +                          ist[pos].delay_t) {
  6088  00129E  0E69               	movlw	105
  6089  0012A0  182A               	xorwf	handleListHead@cur^0,w,c
  6090  0012A2  102B               	iorwf	(handleListHead@cur+1)^0,w,c
  6091  0012A4  B4D8               	btfsc	status,2,c
  6092  0012A6  EF57  F009         	goto	i2u185_41
  6093  0012AA  EF59  F009         	goto	i2u185_40
  6094  0012AE                     i2u185_41:
  6095  0012AE  EFA5  F009         	goto	i2l2625
  6096  0012B2                     i2u185_40:
  6097  0012B2  C02A  F001         	movff	handleListHead@cur,i2___wmul@multiplier
  6098  0012B6  C02B  F002         	movff	handleListHead@cur+1,i2___wmul@multiplier+1
  6099  0012BA  0E00               	movlw	0
  6100  0012BC  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  6101  0012BE  0E0F               	movlw	15
  6102  0012C0  6E03               	movwf	i2___wmul@multiplicand^0,c
  6103  0012C2  ECB0  F016         	call	i2___wmul	;wreg free
  6104  0012C6  0E64               	movlw	low _task_list
  6105  0012C8  2401               	addwf	?i2___wmul^0,w,c
  6106  0012CA  6ED9               	movwf	fsr2l,c
  6107  0012CC  0E01               	movlw	high _task_list
  6108  0012CE  2002               	addwfc	(?i2___wmul+1)^0,w,c
  6109  0012D0  6EDA               	movwf	fsr2h,c
  6110  0012D2  CFDE F00F          	movff	postinc2,??_handleListHead
  6111  0012D6  CFDE F010          	movff	postinc2,??_handleListHead+1
  6112  0012DA  CFDE F011          	movff	postinc2,??_handleListHead+2
  6113  0012DE  CFDE F012          	movff	postinc2,??_handleListHead+3
  6114  0012E2  C028  F013         	movff	handleListHead@sum,??_handleListHead+4
  6115  0012E6  C029  F014         	movff	handleListHead@sum+1,??_handleListHead+5
  6116  0012EA  0E00               	movlw	0
  6117  0012EC  BE14               	btfsc	(??_handleListHead+5)^0,7,c
  6118  0012EE  0EFF               	movlw	255
  6119  0012F0  6E15               	movwf	(??_handleListHead+6)^0,c
  6120  0012F2  6E16               	movwf	(??_handleListHead+7)^0,c
  6121  0012F4  500F               	movf	??_handleListHead^0,w,c
  6122  0012F6  2413               	addwf	(??_handleListHead+4)^0,w,c
  6123  0012F8  6E17               	movwf	(??_handleListHead+8)^0,c
  6124  0012FA  5010               	movf	(??_handleListHead+1)^0,w,c
  6125  0012FC  2014               	addwfc	(??_handleListHead+5)^0,w,c
  6126  0012FE  6E18               	movwf	(??_handleListHead+9)^0,c
  6127  001300  5011               	movf	(??_handleListHead+2)^0,w,c
  6128  001302  2015               	addwfc	(??_handleListHead+6)^0,w,c
  6129  001304  6E19               	movwf	(??_handleListHead+10)^0,c
  6130  001306  5012               	movf	(??_handleListHead+3)^0,w,c
  6131  001308  2016               	addwfc	(??_handleListHead+7)^0,w,c
  6132  00130A  6E1A               	movwf	(??_handleListHead+11)^0,c
  6133  00130C  C02C  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  6134  001310  C02D  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  6135  001314  0E00               	movlw	0
  6136  001316  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  6137  001318  0E0F               	movlw	15
  6138  00131A  6E03               	movwf	i2___wmul@multiplicand^0,c
  6139  00131C  ECB0  F016         	call	i2___wmul	;wreg free
  6140  001320  0E64               	movlw	low _task_list
  6141  001322  2401               	addwf	?i2___wmul^0,w,c
  6142  001324  6ED9               	movwf	fsr2l,c
  6143  001326  0E01               	movlw	high _task_list
  6144  001328  2002               	addwfc	(?i2___wmul+1)^0,w,c
  6145  00132A  6EDA               	movwf	fsr2h,c
  6146  00132C  5017               	movf	(??_handleListHead+8)^0,w,c
  6147  00132E  5CDE               	subwf	postinc2,w,c
  6148  001330  5018               	movf	(??_handleListHead+9)^0,w,c
  6149  001332  58DE               	subwfb	postinc2,w,c
  6150  001334  5019               	movf	(??_handleListHead+10)^0,w,c
  6151  001336  58DE               	subwfb	postinc2,w,c
  6152  001338  501A               	movf	(??_handleListHead+11)^0,w,c
  6153  00133A  58DE               	subwfb	postinc2,w,c
  6154  00133C  B0D8               	btfsc	status,0,c
  6155  00133E  EFA3  F009         	goto	i2u186_41
  6156  001342  EFA5  F009         	goto	i2u186_40
  6157  001346                     i2u186_41:
  6158  001346  EF23  F009         	goto	i2l2617
  6159  00134A                     i2u186_40:
  6160  00134A                     i2l2625:
  6161                           
  6162                           ;task.c: 112:                 task_list[prev].next = pos;
  6163  00134A  C026  F001         	movff	handleListHead@prev,i2___wmul@multiplier
  6164  00134E  C027  F002         	movff	handleListHead@prev+1,i2___wmul@multiplier+1
  6165  001352  0E00               	movlw	0
  6166  001354  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  6167  001356  0E0F               	movlw	15
  6168  001358  6E03               	movwf	i2___wmul@multiplicand^0,c
  6169  00135A  ECB0  F016         	call	i2___wmul	;wreg free
  6170  00135E  0E6F               	movlw	low (_task_list+11)
  6171  001360  2401               	addwf	?i2___wmul^0,w,c
  6172  001362  6ED9               	movwf	fsr2l,c
  6173  001364  0E01               	movlw	high (_task_list+11)
  6174  001366  2002               	addwfc	(?i2___wmul+1)^0,w,c
  6175  001368  6EDA               	movwf	fsr2h,c
  6176  00136A  C02C  FFDE         	movff	handleListHead@pos,postinc2
  6177  00136E  C02D  FFDD         	movff	handleListHead@pos+1,postdec2
  6178                           
  6179                           ;task.c: 113:                 task_list[pos].next = cur;
  6180  001372  C02C  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  6181  001376  C02D  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  6182  00137A  0E00               	movlw	0
  6183  00137C  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  6184  00137E  0E0F               	movlw	15
  6185  001380  6E03               	movwf	i2___wmul@multiplicand^0,c
  6186  001382  ECB0  F016         	call	i2___wmul	;wreg free
  6187  001386  0E6F               	movlw	low (_task_list+11)
  6188  001388  2401               	addwf	?i2___wmul^0,w,c
  6189  00138A  6ED9               	movwf	fsr2l,c
  6190  00138C  0E01               	movlw	high (_task_list+11)
  6191  00138E  2002               	addwfc	(?i2___wmul+1)^0,w,c
  6192  001390  6EDA               	movwf	fsr2h,c
  6193  001392  C02A  FFDE         	movff	handleListHead@cur,postinc2
  6194  001396  C02B  FFDD         	movff	handleListHead@cur+1,postdec2
  6195                           
  6196                           ;task.c: 114:                 task_list[pos].delay_t-= sum;
  6197  00139A  C02C  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  6198  00139E  C02D  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  6199  0013A2  0E00               	movlw	0
  6200  0013A4  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  6201  0013A6  0E0F               	movlw	15
  6202  0013A8  6E03               	movwf	i2___wmul@multiplicand^0,c
  6203  0013AA  ECB0  F016         	call	i2___wmul	;wreg free
  6204  0013AE  0E64               	movlw	low _task_list
  6205  0013B0  2401               	addwf	?i2___wmul^0,w,c
  6206  0013B2  6ED9               	movwf	fsr2l,c
  6207  0013B4  0E01               	movlw	high _task_list
  6208  0013B6  2002               	addwfc	(?i2___wmul+1)^0,w,c
  6209  0013B8  6EDA               	movwf	fsr2h,c
  6210  0013BA  5028               	movf	handleListHead@sum^0,w,c
  6211  0013BC  5EDE               	subwf	postinc2,f,c
  6212  0013BE  5029               	movf	(handleListHead@sum+1)^0,w,c
  6213  0013C0  5ADE               	subwfb	postinc2,f,c
  6214  0013C2  0E00               	movlw	0
  6215  0013C4  BE29               	btfsc	(handleListHead@sum+1)^0,7,c
  6216  0013C6  0EFF               	movlw	255
  6217  0013C8  5ADE               	subwfb	postinc2,f,c
  6218  0013CA  5ADE               	subwfb	postinc2,f,c
  6219  0013CC                     i2l259:
  6220                           
  6221                           ;task.c: 116:             if(task_list[pos].next != 105)
  6222  0013CC  C02C  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  6223  0013D0  C02D  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  6224  0013D4  0E00               	movlw	0
  6225  0013D6  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  6226  0013D8  0E0F               	movlw	15
  6227  0013DA  6E03               	movwf	i2___wmul@multiplicand^0,c
  6228  0013DC  ECB0  F016         	call	i2___wmul	;wreg free
  6229  0013E0  0E6F               	movlw	low (_task_list+11)
  6230  0013E2  2401               	addwf	?i2___wmul^0,w,c
  6231  0013E4  6ED9               	movwf	fsr2l,c
  6232  0013E6  0E01               	movlw	high (_task_list+11)
  6233  0013E8  2002               	addwfc	(?i2___wmul+1)^0,w,c
  6234  0013EA  6EDA               	movwf	fsr2h,c
  6235  0013EC  0E69               	movlw	105
  6236  0013EE  18DE               	xorwf	postinc2,w,c
  6237  0013F0  10DE               	iorwf	postinc2,w,c
  6238  0013F2  B4D8               	btfsc	status,2,c
  6239  0013F4  EFFE  F009         	goto	i2u187_41
  6240  0013F8  EF00  F00A         	goto	i2u187_40
  6241  0013FC                     i2u187_41:
  6242  0013FC  EF44  F00A         	goto	i2l2629
  6243  001400                     i2u187_40:
  6244  001400                     
  6245                           ;task.c: 117:                 task_list[task_list[pos].next].delay_t -= task_list[pos].d
      +                          elay_t;
  6246  001400  C02C  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  6247  001404  C02D  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  6248  001408  0E00               	movlw	0
  6249  00140A  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  6250  00140C  0E0F               	movlw	15
  6251  00140E  6E03               	movwf	i2___wmul@multiplicand^0,c
  6252  001410  ECB0  F016         	call	i2___wmul	;wreg free
  6253  001414  0E6F               	movlw	low (_task_list+11)
  6254  001416  2401               	addwf	?i2___wmul^0,w,c
  6255  001418  6ED9               	movwf	fsr2l,c
  6256  00141A  0E01               	movlw	high (_task_list+11)
  6257  00141C  2002               	addwfc	(?i2___wmul+1)^0,w,c
  6258  00141E  6EDA               	movwf	fsr2h,c
  6259  001420  CFDE F024          	movff	postinc2,_handleListHead$1822
  6260  001424  CFDD F025          	movff	postdec2,_handleListHead$1822+1
  6261                           
  6262                           ;task.c: 117:                 task_list[task_list[pos].next].delay_t -= task_list[pos].d
      +                          elay_t;
  6263  001428  C02C  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  6264  00142C  C02D  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  6265  001430  0E00               	movlw	0
  6266  001432  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  6267  001434  0E0F               	movlw	15
  6268  001436  6E03               	movwf	i2___wmul@multiplicand^0,c
  6269  001438  ECB0  F016         	call	i2___wmul	;wreg free
  6270  00143C  0E64               	movlw	low _task_list
  6271  00143E  2401               	addwf	?i2___wmul^0,w,c
  6272  001440  6ED9               	movwf	fsr2l,c
  6273  001442  0E01               	movlw	high _task_list
  6274  001444  2002               	addwfc	(?i2___wmul+1)^0,w,c
  6275  001446  6EDA               	movwf	fsr2h,c
  6276  001448  CFDE F00F          	movff	postinc2,??_handleListHead
  6277  00144C  CFDE F010          	movff	postinc2,??_handleListHead+1
  6278  001450  CFDE F011          	movff	postinc2,??_handleListHead+2
  6279  001454  CFDE F012          	movff	postinc2,??_handleListHead+3
  6280  001458  C024  F001         	movff	_handleListHead$1822,i2___wmul@multiplier
  6281  00145C  C025  F002         	movff	_handleListHead$1822+1,i2___wmul@multiplier+1
  6282  001460  0E00               	movlw	0
  6283  001462  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  6284  001464  0E0F               	movlw	15
  6285  001466  6E03               	movwf	i2___wmul@multiplicand^0,c
  6286  001468  ECB0  F016         	call	i2___wmul	;wreg free
  6287  00146C  0E64               	movlw	low _task_list
  6288  00146E  2401               	addwf	?i2___wmul^0,w,c
  6289  001470  6ED9               	movwf	fsr2l,c
  6290  001472  0E01               	movlw	high _task_list
  6291  001474  2002               	addwfc	(?i2___wmul+1)^0,w,c
  6292  001476  6EDA               	movwf	fsr2h,c
  6293  001478  500F               	movf	??_handleListHead^0,w,c
  6294  00147A  5EDE               	subwf	postinc2,f,c
  6295  00147C  5010               	movf	(??_handleListHead+1)^0,w,c
  6296  00147E  5ADE               	subwfb	postinc2,f,c
  6297  001480  5011               	movf	(??_handleListHead+2)^0,w,c
  6298  001482  5ADE               	subwfb	postinc2,f,c
  6299  001484  5012               	movf	(??_handleListHead+3)^0,w,c
  6300  001486  5ADE               	subwfb	postinc2,f,c
  6301  001488                     i2l2629:
  6302                           
  6303                           ;task.c: 89:     while(task_list[head].delay_t == 0) {
  6304  001488  0100               	movlb	0	; () banked
  6305  00148A  51BF               	movf	_head& (0+255),w,b
  6306  00148C  0D0F               	mullw	15
  6307  00148E  0E64               	movlw	low _task_list
  6308  001490  24F3               	addwf	243,w,c
  6309  001492  6ED9               	movwf	fsr2l,c
  6310  001494  0E01               	movlw	high _task_list
  6311  001496  20F4               	addwfc	prodh,w,c
  6312  001498  6EDA               	movwf	fsr2h,c
  6313  00149A  50DE               	movf	postinc2,w,c
  6314  00149C  10DE               	iorwf	postinc2,w,c
  6315  00149E  10DE               	iorwf	postinc2,w,c
  6316  0014A0  10DE               	iorwf	postinc2,w,c
  6317  0014A2  B4D8               	btfsc	status,2,c
  6318  0014A4  EF56  F00A         	goto	i2u188_41
  6319  0014A8  EF58  F00A         	goto	i2u188_40
  6320  0014AC                     i2u188_41:
  6321  0014AC  EF1A  F008         	goto	i2l253
  6322  0014B0                     i2u188_40:
  6323  0014B0                     
  6324                           ; BSR set to: 0
  6325                           ;task.c: 120:     task_list[head].delay_t-= 10;
  6326  0014B0  51BF               	movf	_head& (0+255),w,b
  6327  0014B2  0D0F               	mullw	15
  6328  0014B4  0E64               	movlw	low _task_list
  6329  0014B6  24F3               	addwf	243,w,c
  6330  0014B8  6ED9               	movwf	fsr2l,c
  6331  0014BA  0E01               	movlw	high _task_list
  6332  0014BC  20F4               	addwfc	prodh,w,c
  6333  0014BE  6EDA               	movwf	fsr2h,c
  6334  0014C0  0E0A               	movlw	10
  6335  0014C2  5EDE               	subwf	postinc2,f,c
  6336  0014C4  0E00               	movlw	0
  6337  0014C6  5ADE               	subwfb	postinc2,f,c
  6338  0014C8  5ADE               	subwfb	postinc2,f,c
  6339  0014CA  5ADE               	subwfb	postinc2,f,c
  6340  0014CC                     i2l251:
  6341                           
  6342                           ; BSR set to: 0
  6343  0014CC  0012               	return		;funcret
  6344  0014CE                     __end_of_handleListHead:
  6345                           	opt callstack 0
  6346                           
  6347 ;; *************** function i2_removeTask *****************
  6348 ;; Defined at:
  6349 ;;		line 63 in file "task.c"
  6350 ;; Parameters:    Size  Location     Type
  6351 ;;  idx             1    wreg     unsigned char 
  6352 ;; Auto vars:     Size  Location     Type
  6353 ;;  idx             1    5[COMRAM] unsigned char 
  6354 ;;  removeTask      1    4[COMRAM] unsigned char 
  6355 ;; Return value:  Size  Location     Type
  6356 ;;                  1    wreg      unsigned char 
  6357 ;; Registers used:
  6358 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6359 ;; Tracked objects:
  6360 ;;		On entry : 0/0
  6361 ;;		On exit  : 0/0
  6362 ;;		Unchanged: 0/0
  6363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6365 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6366 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;Total ram usage:        6 bytes
  6369 ;; Hardware stack levels used:    1
  6370 ;; Hardware stack levels required when called:    1
  6371 ;; This function calls:
  6372 ;;		i2_isEmptyList
  6373 ;; This function is called by:
  6374 ;;		_handleListHead
  6375 ;; This function uses a non-reentrant model
  6376 ;;
  6377                           
  6378                           	psect	text42
  6379  001EE4                     __ptext42:
  6380                           	opt callstack 0
  6381  001EE4                     i2_removeTask:
  6382                           	opt callstack 19
  6383                           
  6384                           ; BSR set to: 0
  6385                           ;incstack = 0
  6386                           ;i2removeTask@idx stored from wreg
  6387  001EE4  6E06               	movwf	i2removeTask@idx^0,c
  6388  001EE6                     
  6389                           ;task.c: 64:     if(isEmptyList() || task_list[idx].func_ptr == ((void*)0))
  6390  001EE6  EC2A  F017         	call	i2_isEmptyList	;wreg free
  6391  001EEA  0900               	iorlw	0
  6392  001EEC  A4D8               	btfss	status,2,c
  6393  001EEE  EF7B  F00F         	goto	i2u173_41
  6394  001EF2  EF7D  F00F         	goto	i2u173_40
  6395  001EF6                     i2u173_41:
  6396  001EF6  EF3D  F010         	goto	i2l240
  6397  001EFA                     i2u173_40:
  6398  001EFA  5006               	movf	i2removeTask@idx^0,w,c
  6399  001EFC  0D0F               	mullw	15
  6400  001EFE  0E6C               	movlw	low (_task_list+8)
  6401  001F00  24F3               	addwf	243,w,c
  6402  001F02  6ED9               	movwf	fsr2l,c
  6403  001F04  0E01               	movlw	high (_task_list+8)
  6404  001F06  20F4               	addwfc	prodh,w,c
  6405  001F08  6EDA               	movwf	fsr2h,c
  6406  001F0A  50DE               	movf	postinc2,w,c
  6407  001F0C  10DE               	iorwf	postinc2,w,c
  6408  001F0E  10DE               	iorwf	postinc2,w,c
  6409  001F10  A4D8               	btfss	status,2,c
  6410  001F12  EF8D  F00F         	goto	i2u174_41
  6411  001F16  EF8F  F00F         	goto	i2u174_40
  6412  001F1A                     i2u174_41:
  6413  001F1A  EF91  F00F         	goto	i2l2545
  6414  001F1E                     i2u174_40:
  6415  001F1E  EF3D  F010         	goto	i2l240
  6416  001F22                     i2l2545:
  6417                           
  6418                           ;task.c: 66:     task_list[idx].delay_t = 0;
  6419  001F22  5006               	movf	i2removeTask@idx^0,w,c
  6420  001F24  0D0F               	mullw	15
  6421  001F26  0E64               	movlw	low _task_list
  6422  001F28  24F3               	addwf	243,w,c
  6423  001F2A  6ED9               	movwf	fsr2l,c
  6424  001F2C  0E01               	movlw	high _task_list
  6425  001F2E  20F4               	addwfc	prodh,w,c
  6426  001F30  6EDA               	movwf	fsr2h,c
  6427  001F32  6ADE               	clrf	postinc2,c
  6428  001F34  6ADE               	clrf	postinc2,c
  6429  001F36  6ADE               	clrf	postinc2,c
  6430  001F38  6ADD               	clrf	postdec2,c
  6431                           
  6432                           ;task.c: 67:     task_list[idx].period_t = 0;
  6433  001F3A  5006               	movf	i2removeTask@idx^0,w,c
  6434  001F3C  0D0F               	mullw	15
  6435  001F3E  0E68               	movlw	low (_task_list+4)
  6436  001F40  24F3               	addwf	243,w,c
  6437  001F42  6ED9               	movwf	fsr2l,c
  6438  001F44  0E01               	movlw	high (_task_list+4)
  6439  001F46  20F4               	addwfc	prodh,w,c
  6440  001F48  6EDA               	movwf	fsr2h,c
  6441  001F4A  6ADE               	clrf	postinc2,c
  6442  001F4C  6ADE               	clrf	postinc2,c
  6443  001F4E  6ADE               	clrf	postinc2,c
  6444  001F50  6ADD               	clrf	postdec2,c
  6445                           
  6446                           ;task.c: 68:     task_list[idx].func_ptr = ((void*)0);
  6447  001F52  5006               	movf	i2removeTask@idx^0,w,c
  6448  001F54  0D0F               	mullw	15
  6449  001F56  0E6C               	movlw	low (_task_list+8)
  6450  001F58  24F3               	addwf	243,w,c
  6451  001F5A  6ED9               	movwf	fsr2l,c
  6452  001F5C  0E01               	movlw	high (_task_list+8)
  6453  001F5E  20F4               	addwfc	prodh,w,c
  6454  001F60  6EDA               	movwf	fsr2h,c
  6455  001F62  0E00               	movlw	0
  6456  001F64  6EDE               	movwf	postinc2,c
  6457  001F66  0E00               	movlw	0
  6458  001F68  6EDE               	movwf	postinc2,c
  6459  001F6A  0E00               	movlw	0
  6460  001F6C  6EDE               	movwf	postinc2,c
  6461                           
  6462                           ;task.c: 69:     task_list[idx].data_p = ((void*)0);
  6463  001F6E  5006               	movf	i2removeTask@idx^0,w,c
  6464  001F70  0D0F               	mullw	15
  6465  001F72  0E71               	movlw	low (_task_list+13)
  6466  001F74  24F3               	addwf	243,w,c
  6467  001F76  6ED9               	movwf	fsr2l,c
  6468  001F78  0E01               	movlw	high (_task_list+13)
  6469  001F7A  20F4               	addwfc	prodh,w,c
  6470  001F7C  6EDA               	movwf	fsr2h,c
  6471  001F7E  0E00               	movlw	0
  6472  001F80  6EDE               	movwf	postinc2,c
  6473  001F82  0E00               	movlw	0
  6474  001F84  6EDD               	movwf	postdec2,c
  6475  001F86                     
  6476                           ;task.c: 70:     num_task--;
  6477  001F86  0100               	movlb	0	; () banked
  6478  001F88  07C0               	decf	_num_task& (0+255),f,b
  6479  001F8A                     
  6480                           ; BSR set to: 0
  6481                           ;task.c: 71:     if(idx == head) {
  6482  001F8A  51BF               	movf	_head& (0+255),w,b
  6483  001F8C  1806               	xorwf	i2removeTask@idx^0,w,c
  6484  001F8E  A4D8               	btfss	status,2,c
  6485  001F90  EFCC  F00F         	goto	i2u175_41
  6486  001F94  EFCE  F00F         	goto	i2u175_40
  6487  001F98                     i2u175_41:
  6488  001F98  EFE6  F00F         	goto	i2l241
  6489  001F9C                     i2u175_40:
  6490  001F9C                     
  6491                           ; BSR set to: 0
  6492                           ;task.c: 72:         head = task_list[idx].next;
  6493  001F9C  5006               	movf	i2removeTask@idx^0,w,c
  6494  001F9E  0D0F               	mullw	15
  6495  001FA0  0E6F               	movlw	low (_task_list+11)
  6496  001FA2  24F3               	addwf	243,w,c
  6497  001FA4  6ED9               	movwf	fsr2l,c
  6498  001FA6  0E01               	movlw	high (_task_list+11)
  6499  001FA8  20F4               	addwfc	prodh,w,c
  6500  001FAA  6EDA               	movwf	fsr2h,c
  6501  001FAC  50DF               	movf	indf2,w,c
  6502  001FAE  6FBF               	movwf	_head& (0+255),b
  6503                           
  6504                           ;task.c: 73:         task_list[idx].next = 105;
  6505  001FB0  5006               	movf	i2removeTask@idx^0,w,c
  6506  001FB2  0D0F               	mullw	15
  6507  001FB4  0E6F               	movlw	low (_task_list+11)
  6508  001FB6  24F3               	addwf	243,w,c
  6509  001FB8  6ED9               	movwf	fsr2l,c
  6510  001FBA  0E01               	movlw	high (_task_list+11)
  6511  001FBC  20F4               	addwfc	prodh,w,c
  6512  001FBE  6EDA               	movwf	fsr2h,c
  6513  001FC0  0E69               	movlw	105
  6514  001FC2  6EDE               	movwf	postinc2,c
  6515  001FC4  0E00               	movlw	0
  6516  001FC6  6EDD               	movwf	postdec2,c
  6517                           
  6518                           ;task.c: 74:     }
  6519  001FC8  EF3D  F010         	goto	i2l240
  6520  001FCC                     i2l241:
  6521                           
  6522                           ; BSR set to: 0
  6523                           ;task.c: 76:         char pos = head;
  6524  001FCC  C0BF  F005         	movff	_head,i2removeTask@pos
  6525                           
  6526                           ;task.c: 77:         while(task_list[pos].next != 105 && task_list[pos].next != idx) {
  6527  001FD0  EFF4  F00F         	goto	i2l243
  6528  001FD4                     i2l2553:
  6529                           
  6530                           ;task.c: 78:             pos = task_list[pos].next;
  6531  001FD4  5005               	movf	i2removeTask@pos^0,w,c
  6532  001FD6  0D0F               	mullw	15
  6533  001FD8  0E6F               	movlw	low (_task_list+11)
  6534  001FDA  24F3               	addwf	243,w,c
  6535  001FDC  6ED9               	movwf	fsr2l,c
  6536  001FDE  0E01               	movlw	high (_task_list+11)
  6537  001FE0  20F4               	addwfc	prodh,w,c
  6538  001FE2  6EDA               	movwf	fsr2h,c
  6539  001FE4  50DF               	movf	indf2,w,c
  6540  001FE6  6E05               	movwf	i2removeTask@pos^0,c
  6541  001FE8                     i2l243:
  6542                           
  6543                           ;task.c: 77:         while(task_list[pos].next != 105 && task_list[pos].next != idx) {
  6544  001FE8  5005               	movf	i2removeTask@pos^0,w,c
  6545  001FEA  0D0F               	mullw	15
  6546  001FEC  0E6F               	movlw	low (_task_list+11)
  6547  001FEE  24F3               	addwf	243,w,c
  6548  001FF0  6ED9               	movwf	fsr2l,c
  6549  001FF2  0E01               	movlw	high (_task_list+11)
  6550  001FF4  20F4               	addwfc	prodh,w,c
  6551  001FF6  6EDA               	movwf	fsr2h,c
  6552  001FF8  0E69               	movlw	105
  6553  001FFA  18DE               	xorwf	postinc2,w,c
  6554  001FFC  10DE               	iorwf	postinc2,w,c
  6555  001FFE  B4D8               	btfsc	status,2,c
  6556  002000  EF04  F010         	goto	i2u176_41
  6557  002004  EF06  F010         	goto	i2u176_40
  6558  002008                     i2u176_41:
  6559  002008  EF1D  F010         	goto	i2l2557
  6560  00200C                     i2u176_40:
  6561  00200C  5005               	movf	i2removeTask@pos^0,w,c
  6562  00200E  0D0F               	mullw	15
  6563  002010  0E6F               	movlw	low (_task_list+11)
  6564  002012  24F3               	addwf	243,w,c
  6565  002014  6ED9               	movwf	fsr2l,c
  6566  002016  0E01               	movlw	high (_task_list+11)
  6567  002018  20F4               	addwfc	prodh,w,c
  6568  00201A  6EDA               	movwf	fsr2h,c
  6569  00201C  5006               	movf	i2removeTask@idx^0,w,c
  6570  00201E  6E03               	movwf	(??i2_removeTask+2)^0,c
  6571  002020  6A04               	clrf	(??i2_removeTask+3)^0,c
  6572  002022  50DE               	movf	postinc2,w,c
  6573  002024  1803               	xorwf	(??i2_removeTask+2)^0,w,c
  6574  002026  E107               	bnz	i2u177_41
  6575  002028  50DE               	movf	postinc2,w,c
  6576  00202A  1804               	xorwf	(??i2_removeTask+3)^0,w,c
  6577  00202C  A4D8               	btfss	status,2,c
  6578  00202E  EF1B  F010         	goto	i2u177_41
  6579  002032  EF1D  F010         	goto	i2u177_40
  6580  002036                     i2u177_41:
  6581  002036  EFEA  F00F         	goto	i2l2553
  6582  00203A                     i2u177_40:
  6583  00203A                     i2l2557:
  6584                           
  6585                           ;task.c: 80:         task_list[pos].next = task_list[idx].next;
  6586  00203A  5006               	movf	i2removeTask@idx^0,w,c
  6587  00203C  0D0F               	mullw	15
  6588  00203E  0E6F               	movlw	low (_task_list+11)
  6589  002040  24F3               	addwf	243,w,c
  6590  002042  6ED9               	movwf	fsr2l,c
  6591  002044  0E01               	movlw	high (_task_list+11)
  6592  002046  20F4               	addwfc	prodh,w,c
  6593  002048  6EDA               	movwf	fsr2h,c
  6594  00204A  5005               	movf	i2removeTask@pos^0,w,c
  6595  00204C  0D0F               	mullw	15
  6596  00204E  0E6F               	movlw	low (_task_list+11)
  6597  002050  24F3               	addwf	243,w,c
  6598  002052  6EE1               	movwf	fsr1l,c
  6599  002054  0E01               	movlw	high (_task_list+11)
  6600  002056  20F4               	addwfc	prodh,w,c
  6601  002058  6EE2               	movwf	fsr1h,c
  6602  00205A  CFDE FFE6          	movff	postinc2,postinc1
  6603  00205E  CFDD FFE5          	movff	postdec2,postdec1
  6604  002062                     
  6605                           ;task.c: 81:         task_list[idx].next = 105;
  6606  002062  5006               	movf	i2removeTask@idx^0,w,c
  6607  002064  0D0F               	mullw	15
  6608  002066  0E6F               	movlw	low (_task_list+11)
  6609  002068  24F3               	addwf	243,w,c
  6610  00206A  6ED9               	movwf	fsr2l,c
  6611  00206C  0E01               	movlw	high (_task_list+11)
  6612  00206E  20F4               	addwfc	prodh,w,c
  6613  002070  6EDA               	movwf	fsr2h,c
  6614  002072  0E69               	movlw	105
  6615  002074  6EDE               	movwf	postinc2,c
  6616  002076  0E00               	movlw	0
  6617  002078  6EDD               	movwf	postdec2,c
  6618  00207A                     i2l240:
  6619  00207A  0012               	return		;funcret
  6620  00207C                     __end_ofi2_removeTask:
  6621                           	opt callstack 0
  6622                           
  6623 ;; *************** function i2_isEmptyList *****************
  6624 ;; Defined at:
  6625 ;;		line 3 in file "task.c"
  6626 ;; Parameters:    Size  Location     Type
  6627 ;;		None
  6628 ;; Auto vars:     Size  Location     Type
  6629 ;;		None
  6630 ;; Return value:  Size  Location     Type
  6631 ;;                  1    wreg      unsigned char 
  6632 ;; Registers used:
  6633 ;;		wreg, status,2
  6634 ;; Tracked objects:
  6635 ;;		On entry : 0/0
  6636 ;;		On exit  : 0/0
  6637 ;;		Unchanged: 0/0
  6638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6643 ;;Total ram usage:        0 bytes
  6644 ;; Hardware stack levels used:    1
  6645 ;; This function calls:
  6646 ;;		Nothing
  6647 ;; This function is called by:
  6648 ;;		i2_removeTask
  6649 ;; This function uses a non-reentrant model
  6650 ;;
  6651                           
  6652                           	psect	text43
  6653  002E54                     __ptext43:
  6654                           	opt callstack 0
  6655  002E54                     i2_isEmptyList:
  6656                           	opt callstack 19
  6657  002E54                     
  6658                           ;task.c: 4:     return num_task == 0 ? 1 : 0;
  6659  002E54  0100               	movlb	0	; () banked
  6660  002E56  51C0               	movf	_num_task& (0+255),w,b
  6661  002E58  B4D8               	btfsc	status,2,c
  6662  002E5A  EF31  F017         	goto	i2u148_41
  6663  002E5E  EF34  F017         	goto	i2u148_40
  6664  002E62                     i2u148_41:
  6665  002E62  0E01               	movlw	1
  6666  002E64  EF35  F017         	goto	i2u149_40
  6667  002E68                     i2u148_40:
  6668  002E68  0E00               	movlw	0
  6669  002E6A                     i2u149_40:
  6670  002E6A                     
  6671                           ; BSR set to: 0
  6672  002E6A  0012               	return		;funcret
  6673  002E6C                     __end_ofi2_isEmptyList:
  6674                           	opt callstack 0
  6675                           
  6676 ;; *************** function _enqueue *****************
  6677 ;; Defined at:
  6678 ;;		line 24 in file "ready_queue.c"
  6679 ;; Parameters:    Size  Location     Type
  6680 ;;  ptr             3    9[COMRAM] PTR FTN(PTR void ,)void 
  6681 ;;		 -> handleButton(1), NULL(0), printTime_ms(1), blinking_LED(1), 
  6682 ;;  data            2   12[COMRAM] PTR void 
  6683 ;;		 -> RAM(3935), NULL(0), 
  6684 ;; Auto vars:     Size  Location     Type
  6685 ;;		None
  6686 ;; Return value:  Size  Location     Type
  6687 ;;                  1    wreg      unsigned char 
  6688 ;; Registers used:
  6689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6690 ;; Tracked objects:
  6691 ;;		On entry : 0/0
  6692 ;;		On exit  : 0/0
  6693 ;;		Unchanged: 0/0
  6694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6695 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6698 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;Total ram usage:        5 bytes
  6700 ;; Hardware stack levels used:    1
  6701 ;; Hardware stack levels required when called:    3
  6702 ;; This function calls:
  6703 ;;		_isFullQueue
  6704 ;;		i2___awmod
  6705 ;;		i2___wmul
  6706 ;; This function is called by:
  6707 ;;		_handleListHead
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           	psect	text44
  6712  002490                     __ptext44:
  6713                           	opt callstack 0
  6714  002490                     _enqueue:
  6715                           	opt callstack 17
  6716  002490                     
  6717                           ;ready_queue.c: 25:     if(isFullQueue())
  6718  002490  EC03  F017         	call	_isFullQueue	;wreg free
  6719  002494  0900               	iorlw	0
  6720  002496  B4D8               	btfsc	status,2,c
  6721  002498  EF50  F012         	goto	i2u151_41
  6722  00249C  EF52  F012         	goto	i2u151_40
  6723  0024A0                     i2u151_41:
  6724  0024A0  EF54  F012         	goto	i2l2415
  6725  0024A4                     i2u151_40:
  6726  0024A4  EF9D  F012         	goto	i2l172
  6727  0024A8                     i2l2415:
  6728                           
  6729                           ;ready_queue.c: 27:     if(front == -1)
  6730  0024A8  0100               	movlb	0	; () banked
  6731  0024AA  29C5               	incf	_front& (0+255),w,b
  6732  0024AC  E106               	bnz	i2u152_41
  6733  0024AE  29C6               	incf	(_front+1)& (0+255),w,b
  6734  0024B0  A4D8               	btfss	status,2,c
  6735  0024B2  EF5D  F012         	goto	i2u152_41
  6736  0024B6  EF5F  F012         	goto	i2u152_40
  6737  0024BA                     i2u152_41:
  6738  0024BA  EF63  F012         	goto	i2l2419
  6739  0024BE                     i2u152_40:
  6740  0024BE                     
  6741                           ; BSR set to: 0
  6742                           ;ready_queue.c: 28:         front = 0;
  6743  0024BE  0E00               	movlw	0
  6744  0024C0  6FC6               	movwf	(_front+1)& (0+255),b
  6745  0024C2  0E00               	movlw	0
  6746  0024C4  6FC5               	movwf	_front& (0+255),b
  6747  0024C6                     i2l2419:
  6748                           
  6749                           ; BSR set to: 0
  6750                           ;ready_queue.c: 29:     rear = (rear + 1) % 20;
  6751  0024C6  0E01               	movlw	1
  6752  0024C8  25C3               	addwf	_rear& (0+255),w,b
  6753  0024CA  6E01               	movwf	i2___awmod@dividend^0,c
  6754  0024CC  0E00               	movlw	0
  6755  0024CE  21C4               	addwfc	(_rear+1)& (0+255),w,b
  6756  0024D0  6E02               	movwf	(i2___awmod@dividend+1)^0,c
  6757  0024D2  0E00               	movlw	0
  6758  0024D4  6E04               	movwf	(i2___awmod@divisor+1)^0,c
  6759  0024D6  0E14               	movlw	20
  6760  0024D8  6E03               	movwf	i2___awmod@divisor^0,c
  6761  0024DA  ECF0  F011         	call	i2___awmod	;wreg free
  6762  0024DE  C001  F0C3         	movff	?i2___awmod,_rear
  6763  0024E2  C002  F0C4         	movff	?i2___awmod+1,_rear+1
  6764  0024E6                     
  6765                           ;ready_queue.c: 30:     ready_queue[rear].func_ptr = ptr;
  6766  0024E6  C0C3  F001         	movff	_rear,i2___wmul@multiplier
  6767  0024EA  C0C4  F002         	movff	_rear+1,i2___wmul@multiplier+1
  6768  0024EE  0E00               	movlw	0
  6769  0024F0  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  6770  0024F2  0E05               	movlw	5
  6771  0024F4  6E03               	movwf	i2___wmul@multiplicand^0,c
  6772  0024F6  ECB0  F016         	call	i2___wmul	;wreg free
  6773  0024FA  0E00               	movlw	low _ready_queue
  6774  0024FC  2401               	addwf	?i2___wmul^0,w,c
  6775  0024FE  6ED9               	movwf	fsr2l,c
  6776  002500  0E01               	movlw	high _ready_queue
  6777  002502  2002               	addwfc	(?i2___wmul+1)^0,w,c
  6778  002504  6EDA               	movwf	fsr2h,c
  6779  002506  C00A  FFDE         	movff	enqueue@ptr,postinc2
  6780  00250A  C00B  FFDE         	movff	enqueue@ptr+1,postinc2
  6781  00250E  C00C  FFDE         	movff	enqueue@ptr+2,postinc2
  6782  002512                     
  6783                           ;ready_queue.c: 31:     ready_queue[rear].data_p = data;
  6784  002512  C0C3  F001         	movff	_rear,i2___wmul@multiplier
  6785  002516  C0C4  F002         	movff	_rear+1,i2___wmul@multiplier+1
  6786  00251A  0E00               	movlw	0
  6787  00251C  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  6788  00251E  0E05               	movlw	5
  6789  002520  6E03               	movwf	i2___wmul@multiplicand^0,c
  6790  002522  ECB0  F016         	call	i2___wmul	;wreg free
  6791  002526  0E03               	movlw	low (_ready_queue+3)
  6792  002528  2401               	addwf	?i2___wmul^0,w,c
  6793  00252A  6ED9               	movwf	fsr2l,c
  6794  00252C  0E01               	movlw	high (_ready_queue+3)
  6795  00252E  2002               	addwfc	(?i2___wmul+1)^0,w,c
  6796  002530  6EDA               	movwf	fsr2h,c
  6797  002532  C00D  FFDE         	movff	enqueue@data,postinc2
  6798  002536  C00E  FFDD         	movff	enqueue@data+1,postdec2
  6799  00253A                     i2l172:
  6800  00253A  0012               	return		;funcret
  6801  00253C                     __end_of_enqueue:
  6802                           	opt callstack 0
  6803                           
  6804 ;; *************** function i2___wmul *****************
  6805 ;; Defined at:
  6806 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  6807 ;; Parameters:    Size  Location     Type
  6808 ;;  multiplier      2    0[COMRAM] unsigned int 
  6809 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6810 ;; Auto vars:     Size  Location     Type
  6811 ;;  __wmul          2    4[COMRAM] unsigned int 
  6812 ;; Return value:  Size  Location     Type
  6813 ;;                  2    0[COMRAM] unsigned int 
  6814 ;; Registers used:
  6815 ;;		wreg, status,2, status,0, prodl, prodh
  6816 ;; Tracked objects:
  6817 ;;		On entry : 0/0
  6818 ;;		On exit  : 0/0
  6819 ;;		Unchanged: 0/0
  6820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6821 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6822 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6824 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6825 ;;Total ram usage:        6 bytes
  6826 ;; Hardware stack levels used:    1
  6827 ;; This function calls:
  6828 ;;		Nothing
  6829 ;; This function is called by:
  6830 ;;		_enqueue
  6831 ;;		_handleListHead
  6832 ;; This function uses a non-reentrant model
  6833 ;;
  6834                           
  6835                           	psect	text45
  6836  002D60                     __ptext45:
  6837                           	opt callstack 0
  6838  002D60                     i2___wmul:
  6839                           	opt callstack 20
  6840  002D60  5001               	movf	i2___wmul@multiplier^0,w,c
  6841  002D62  0203               	mulwf	i2___wmul@multiplicand^0,c
  6842  002D64  CFF3 F005          	movff	prodl,i2___wmul@product
  6843  002D68  CFF4 F006          	movff	prodh,i2___wmul@product+1
  6844  002D6C  5001               	movf	i2___wmul@multiplier^0,w,c
  6845  002D6E  0204               	mulwf	(i2___wmul@multiplicand+1)^0,c
  6846  002D70  50F3               	movf	243,w,c
  6847  002D72  2606               	addwf	(i2___wmul@product+1)^0,f,c
  6848  002D74  5002               	movf	(i2___wmul@multiplier+1)^0,w,c
  6849  002D76  0203               	mulwf	i2___wmul@multiplicand^0,c
  6850  002D78  50F3               	movf	243,w,c
  6851  002D7A  2606               	addwf	(i2___wmul@product+1)^0,f,c
  6852  002D7C  C005  F001         	movff	i2___wmul@product,?i2___wmul
  6853  002D80  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  6854  002D84  0012               	return		;funcret
  6855  002D86                     __end_ofi2___wmul:
  6856                           	opt callstack 0
  6857                           
  6858 ;; *************** function _isFullQueue *****************
  6859 ;; Defined at:
  6860 ;;		line 14 in file "ready_queue.c"
  6861 ;; Parameters:    Size  Location     Type
  6862 ;;		None
  6863 ;; Auto vars:     Size  Location     Type
  6864 ;;		None
  6865 ;; Return value:  Size  Location     Type
  6866 ;;                  1    wreg      unsigned char 
  6867 ;; Registers used:
  6868 ;;		wreg, status,2, status,0, cstack
  6869 ;; Tracked objects:
  6870 ;;		On entry : 0/0
  6871 ;;		On exit  : 0/0
  6872 ;;		Unchanged: 0/0
  6873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6876 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6877 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6878 ;;Total ram usage:        1 bytes
  6879 ;; Hardware stack levels used:    1
  6880 ;; Hardware stack levels required when called:    2
  6881 ;; This function calls:
  6882 ;;		i2_getSizeQueue
  6883 ;; This function is called by:
  6884 ;;		_enqueue
  6885 ;; This function uses a non-reentrant model
  6886 ;;
  6887                           
  6888                           	psect	text46
  6889  002E06                     __ptext46:
  6890                           	opt callstack 0
  6891  002E06                     _isFullQueue:
  6892                           	opt callstack 17
  6893  002E06                     
  6894                           ;ready_queue.c: 15:     return getSizeQueue() >= 20 ? 1 : 0;
  6895  002E06  EC87  F016         	call	i2_getSizeQueue	;wreg free
  6896  002E0A  6E09               	movwf	??_isFullQueue^0,c
  6897  002E0C  0E14               	movlw	20
  6898  002E0E  6009               	cpfslt	??_isFullQueue^0,c
  6899  002E10  EF0C  F017         	goto	i2u134_41
  6900  002E14  EF0F  F017         	goto	i2u134_40
  6901  002E18                     i2u134_41:
  6902  002E18  0E01               	movlw	1
  6903  002E1A  EF10  F017         	goto	i2u135_40
  6904  002E1E                     i2u134_40:
  6905  002E1E  0E00               	movlw	0
  6906  002E20                     i2u135_40:
  6907  002E20  0012               	return		;funcret
  6908  002E22                     __end_of_isFullQueue:
  6909                           	opt callstack 0
  6910                           
  6911 ;; *************** function i2_getSizeQueue *****************
  6912 ;; Defined at:
  6913 ;;		line 10 in file "ready_queue.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;		None
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;		None
  6918 ;; Return value:  Size  Location     Type
  6919 ;;                  1    wreg      unsigned char 
  6920 ;; Registers used:
  6921 ;;		wreg, status,2, status,0, cstack
  6922 ;; Tracked objects:
  6923 ;;		On entry : 0/0
  6924 ;;		On exit  : 0/0
  6925 ;;		Unchanged: 0/0
  6926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6929 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6930 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6931 ;;Total ram usage:        2 bytes
  6932 ;; Hardware stack levels used:    1
  6933 ;; Hardware stack levels required when called:    1
  6934 ;; This function calls:
  6935 ;;		i2___awmod
  6936 ;; This function is called by:
  6937 ;;		_isFullQueue
  6938 ;; This function uses a non-reentrant model
  6939 ;;
  6940                           
  6941                           	psect	text47
  6942  002D0E                     __ptext47:
  6943                           	opt callstack 0
  6944  002D0E                     i2_getSizeQueue:
  6945                           	opt callstack 17
  6946  002D0E                     
  6947                           ;ready_queue.c: 11:     return (rear - front + 1 + 20) % 20;
  6948  002D0E  0100               	movlb	0	; () banked
  6949  002D10  51C5               	movf	_front& (0+255),w,b
  6950  002D12  5DC3               	subwf	_rear& (0+255),w,b
  6951  002D14  6E07               	movwf	??i2_getSizeQueue^0,c
  6952  002D16  51C6               	movf	(_front+1)& (0+255),w,b
  6953  002D18  59C4               	subwfb	(_rear+1)& (0+255),w,b
  6954  002D1A  6E08               	movwf	(??i2_getSizeQueue+1)^0,c
  6955  002D1C  0E15               	movlw	21
  6956  002D1E  2407               	addwf	??i2_getSizeQueue^0,w,c
  6957  002D20  6E01               	movwf	i2___awmod@dividend^0,c
  6958  002D22  0E00               	movlw	0
  6959  002D24  2008               	addwfc	(??i2_getSizeQueue+1)^0,w,c
  6960  002D26  6E02               	movwf	(i2___awmod@dividend+1)^0,c
  6961  002D28  0E00               	movlw	0
  6962  002D2A  6E04               	movwf	(i2___awmod@divisor+1)^0,c
  6963  002D2C  0E14               	movlw	20
  6964  002D2E  6E03               	movwf	i2___awmod@divisor^0,c
  6965  002D30  ECF0  F011         	call	i2___awmod	;wreg free
  6966  002D34  5001               	movf	?i2___awmod^0,w,c
  6967  002D36  0012               	return		;funcret
  6968  002D38                     __end_ofi2_getSizeQueue:
  6969                           	opt callstack 0
  6970                           
  6971 ;; *************** function i2___awmod *****************
  6972 ;; Defined at:
  6973 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
  6974 ;; Parameters:    Size  Location     Type
  6975 ;;  dividend        2    0[COMRAM] int 
  6976 ;;  divisor         2    2[COMRAM] int 
  6977 ;; Auto vars:     Size  Location     Type
  6978 ;;  __awmod         1    5[COMRAM] unsigned char 
  6979 ;;  __awmod         1    4[COMRAM] unsigned char 
  6980 ;; Return value:  Size  Location     Type
  6981 ;;                  2    0[COMRAM] int 
  6982 ;; Registers used:
  6983 ;;		wreg, status,2, status,0
  6984 ;; Tracked objects:
  6985 ;;		On entry : 0/0
  6986 ;;		On exit  : 0/0
  6987 ;;		Unchanged: 0/0
  6988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6989 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6990 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6992 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6993 ;;Total ram usage:        6 bytes
  6994 ;; Hardware stack levels used:    1
  6995 ;; This function calls:
  6996 ;;		Nothing
  6997 ;; This function is called by:
  6998 ;;		_enqueue
  6999 ;;		i2_getSizeQueue
  7000 ;; This function uses a non-reentrant model
  7001 ;;
  7002                           
  7003                           	psect	text48
  7004  0023E0                     __ptext48:
  7005                           	opt callstack 0
  7006  0023E0                     i2___awmod:
  7007                           	opt callstack 19
  7008  0023E0  0E00               	movlw	0
  7009  0023E2  6E06               	movwf	i2___awmod@sign^0,c
  7010  0023E4  BE02               	btfsc	(i2___awmod@dividend+1)^0,7,c
  7011  0023E6  EFF9  F011         	goto	i2u108_40
  7012  0023EA  EFF7  F011         	goto	i2u108_41
  7013  0023EE                     i2u108_41:
  7014  0023EE  EFFF  F011         	goto	i2l2075
  7015  0023F2                     i2u108_40:
  7016  0023F2  6C01               	negf	i2___awmod@dividend^0,c
  7017  0023F4  1E02               	comf	(i2___awmod@dividend+1)^0,f,c
  7018  0023F6  B0D8               	btfsc	status,0,c
  7019  0023F8  2A02               	incf	(i2___awmod@dividend+1)^0,f,c
  7020  0023FA  0E01               	movlw	1
  7021  0023FC  6E06               	movwf	i2___awmod@sign^0,c
  7022  0023FE                     i2l2075:
  7023  0023FE  BE04               	btfsc	(i2___awmod@divisor+1)^0,7,c
  7024  002400  EF06  F012         	goto	i2u109_40
  7025  002404  EF04  F012         	goto	i2u109_41
  7026  002408                     i2u109_41:
  7027  002408  EF0A  F012         	goto	i2l2079
  7028  00240C                     i2u109_40:
  7029  00240C  6C03               	negf	i2___awmod@divisor^0,c
  7030  00240E  1E04               	comf	(i2___awmod@divisor+1)^0,f,c
  7031  002410  B0D8               	btfsc	status,0,c
  7032  002412  2A04               	incf	(i2___awmod@divisor+1)^0,f,c
  7033  002414                     i2l2079:
  7034  002414  5003               	movf	i2___awmod@divisor^0,w,c
  7035  002416  1004               	iorwf	(i2___awmod@divisor+1)^0,w,c
  7036  002418  B4D8               	btfsc	status,2,c
  7037  00241A  EF11  F012         	goto	i2u110_41
  7038  00241E  EF13  F012         	goto	i2u110_40
  7039  002422                     i2u110_41:
  7040  002422  EF37  F012         	goto	i2l2095
  7041  002426                     i2u110_40:
  7042  002426  0E01               	movlw	1
  7043  002428  6E05               	movwf	i2___awmod@counter^0,c
  7044  00242A  EF1B  F012         	goto	i2l2085
  7045  00242E                     i2l2083:
  7046  00242E  90D8               	bcf	status,0,c
  7047  002430  3603               	rlcf	i2___awmod@divisor^0,f,c
  7048  002432  3604               	rlcf	(i2___awmod@divisor+1)^0,f,c
  7049  002434  2A05               	incf	i2___awmod@counter^0,f,c
  7050  002436                     i2l2085:
  7051  002436  AE04               	btfss	(i2___awmod@divisor+1)^0,7,c
  7052  002438  EF20  F012         	goto	i2u111_41
  7053  00243C  EF22  F012         	goto	i2u111_40
  7054  002440                     i2u111_41:
  7055  002440  EF17  F012         	goto	i2l2083
  7056  002444                     i2u111_40:
  7057  002444                     i2l2087:
  7058  002444  5003               	movf	i2___awmod@divisor^0,w,c
  7059  002446  5C01               	subwf	i2___awmod@dividend^0,w,c
  7060  002448  5004               	movf	(i2___awmod@divisor+1)^0,w,c
  7061  00244A  5802               	subwfb	(i2___awmod@dividend+1)^0,w,c
  7062  00244C  A0D8               	btfss	status,0,c
  7063  00244E  EF2B  F012         	goto	i2u112_41
  7064  002452  EF2D  F012         	goto	i2u112_40
  7065  002456                     i2u112_41:
  7066  002456  EF31  F012         	goto	i2l2091
  7067  00245A                     i2u112_40:
  7068  00245A  5003               	movf	i2___awmod@divisor^0,w,c
  7069  00245C  5E01               	subwf	i2___awmod@dividend^0,f,c
  7070  00245E  5004               	movf	(i2___awmod@divisor+1)^0,w,c
  7071  002460  5A02               	subwfb	(i2___awmod@dividend+1)^0,f,c
  7072  002462                     i2l2091:
  7073  002462  90D8               	bcf	status,0,c
  7074  002464  3204               	rrcf	(i2___awmod@divisor+1)^0,f,c
  7075  002466  3203               	rrcf	i2___awmod@divisor^0,f,c
  7076  002468  2E05               	decfsz	i2___awmod@counter^0,f,c
  7077  00246A  EF22  F012         	goto	i2l2087
  7078  00246E                     i2l2095:
  7079  00246E  5006               	movf	i2___awmod@sign^0,w,c
  7080  002470  B4D8               	btfsc	status,2,c
  7081  002472  EF3D  F012         	goto	i2u113_41
  7082  002476  EF3F  F012         	goto	i2u113_40
  7083  00247A                     i2u113_41:
  7084  00247A  EF43  F012         	goto	i2l2099
  7085  00247E                     i2u113_40:
  7086  00247E  6C01               	negf	i2___awmod@dividend^0,c
  7087  002480  1E02               	comf	(i2___awmod@dividend+1)^0,f,c
  7088  002482  B0D8               	btfsc	status,0,c
  7089  002484  2A02               	incf	(i2___awmod@dividend+1)^0,f,c
  7090  002486                     i2l2099:
  7091  002486  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  7092  00248A  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  7093  00248E  0012               	return		;funcret
  7094  002490                     __end_ofi2___awmod:
  7095                           	opt callstack 0
  7096                           
  7097                           	psect	text49
  7098  000000                     __ptext49:
  7099                           	opt callstack 0
  7100  000000                     
  7101                           	psect	rparam
  7102  0000                     
  7103                           	psect	temp
  7104  00004B                     btemp:
  7105                           	opt callstack 0
  7106  00004B                     	ds	1
  7107  0000                     int$flags	set	btemp
  7108  0000                     wtemp8	set	btemp+1
  7109  0000                     ttemp5	set	btemp+1
  7110  0000                     ttemp6	set	btemp+4
  7111  0000                     ttemp7	set	btemp+8
  7112                           tosu	equ	0xFFF
  7113                           tosh	equ	0xFFE
  7114                           tosl	equ	0xFFD
  7115                           stkptr	equ	0xFFC
  7116                           pclatu	equ	0xFFB
  7117                           pclath	equ	0xFFA
  7118                           pcl	equ	0xFF9
  7119                           tblptru	equ	0xFF8
  7120                           tblptrh	equ	0xFF7
  7121                           tblptrl	equ	0xFF6
  7122                           tablat	equ	0xFF5
  7123                           prodh	equ	0xFF4
  7124                           prodl	equ	0xFF3
  7125                           indf0	equ	0xFEF
  7126                           postinc0	equ	0xFEE
  7127                           postdec0	equ	0xFED
  7128                           preinc0	equ	0xFEC
  7129                           plusw0	equ	0xFEB
  7130                           fsr0h	equ	0xFEA
  7131                           fsr0l	equ	0xFE9
  7132                           wreg	equ	0xFE8
  7133                           indf1	equ	0xFE7
  7134                           postinc1	equ	0xFE6
  7135                           postdec1	equ	0xFE5
  7136                           preinc1	equ	0xFE4
  7137                           plusw1	equ	0xFE3
  7138                           fsr1h	equ	0xFE2
  7139                           fsr1l	equ	0xFE1
  7140                           bsr	equ	0xFE0
  7141                           indf2	equ	0xFDF
  7142                           postinc2	equ	0xFDE
  7143                           postdec2	equ	0xFDD
  7144                           preinc2	equ	0xFDC
  7145                           plusw2	equ	0xFDB
  7146                           fsr2h	equ	0xFDA
  7147                           fsr2l	equ	0xFD9
  7148                           status	equ	0xFD8


Data Sizes:
    Strings     25
    Constant    0
    Data        8
    BSS         471
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     51      74
    BANK0           160     51     107
    BANK1           256      0     100
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    handleListHead$1821	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    handleListHead$1816	PTR FTN(PTR void ,)void  size(3) Largest target is 1
		 -> handleButton(), NULL(NULL[0]), printTime_ms(), blinking_LED(), 

    ptr$0	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    S33$2$0	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    ptr$0	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    callback$0	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    handleButton@data_ptr	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    S25$0$0	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    ?_dequeue.data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    ?_dequeue.func_ptr	PTR FTN(PTR void ,)void  size(3) Largest target is 1
		 -> handleButton(), NULL(NULL[0]), printTime_ms(), blinking_LED(), 

    printTime_ms@data_ptr	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    LCDPrint@ptr	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_3(CODE[3]), STR_2(CODE[5]), STR_1(CODE[17]), 

    LCDPutStr@ptr	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_3(CODE[3]), STR_2(CODE[5]), STR_1(CODE[17]), 

    register_timer@data	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    register_timer@callback	PTR FTN(PTR void ,)void  size(3) Largest target is 1
		 -> handleButton(), printTime_ms(), blinking_LED(), 

    node.data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    node.func_ptr	PTR FTN(PTR void ,)void  size(3) Largest target is 1
		 -> handleButton(), NULL(NULL[0]), printTime_ms(), blinking_LED(), 

    addTask@data	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    addTask@ptr	PTR FTN(PTR void ,)void  size(3) Largest target is 1
		 -> handleButton(), printTime_ms(), blinking_LED(), 

    S33$data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    task_list.data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    S33$func_ptr	PTR FTN(PTR void ,)void  size(3) Largest target is 1
		 -> handleButton(), NULL(NULL[0]), printTime_ms(), blinking_LED(), 

    task_list.func_ptr	PTR FTN(PTR void ,)void  size(3) Largest target is 1
		 -> handleButton(), NULL(NULL[0]), printTime_ms(), blinking_LED(), 

    temp.data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    temp.func_ptr	PTR FTN(PTR void ,)void  size(3) Largest target is 1
		 -> handleButton(), NULL(NULL[0]), printTime_ms(), blinking_LED(), 

    enqueue@data	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    enqueue@ptr	PTR FTN(PTR void ,)void  size(3) Largest target is 1
		 -> handleButton(), NULL(NULL[0]), printTime_ms(), blinking_LED(), 

    S25$data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    ready_queue.data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    S25$func_ptr	PTR FTN(PTR void ,)void  size(3) Largest target is 1
		 -> handleButton(), NULL(NULL[0]), printTime_ms(), blinking_LED(), 

    ready_queue.func_ptr	PTR FTN(PTR void ,)void  size(3) Largest target is 1
		 -> handleButton(), NULL(NULL[0]), printTime_ms(), blinking_LED(), 

    blinking_LED@idx_ptr	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _timer_interrupt in COMRAM

    _timer_interrupt->_handleListHead
    _handleListHead->_enqueue
    _enqueue->_isFullQueue
    _isFullQueue->i2_getSizeQueue
    i2_getSizeQueue->i2___awmod

Critical Paths under _main in BANK0

    _main->_register_timer
    _system_initialize->_start_timer
    _start_timer->_initializeTaskList
    _initializeTaskList->_queueInitialize
    _queueInitialize->___wmul
    _LCDInit->_LCDPutInst
    _Port_BBSPIInit->_SendByteBBSPI
    _remove_timer->_removeTask
    _register_timer->_addTask
    _addTask->___wmul
    _dispatch->_selectReadyTask
    _selectReadyTask->_handleButton
    _selectReadyTask->_printTime_ms
    _printTime_ms->_LCDPrintChar
    _LCDPrintChar->_LCDMoveCursor
    _isEmptyQueue->_getSizeQueue
    _getSizeQueue->___awmod
    _LCDPrint->_LCDMoveCursor
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_WritePort_BBSPI
    _LCDMoveCursor->_LCDPutInst
    _LCDPutInst->_WritePort_BBSPI
    _WritePort_BBSPI->_SendByteBBSPI

Critical Paths under _timer_interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _timer_interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _timer_interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _timer_interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _timer_interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _timer_interrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _timer_interrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _timer_interrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _timer_interrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _timer_interrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _timer_interrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _timer_interrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _timer_interrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _timer_interrupt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _timer_interrupt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _timer_interrupt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   23313
                           _LCDPrint
                            ___awmod
                           _dispatch
                       _printTime_ms
                     _register_timer
                       _remove_timer
                  _system_initialize
 ---------------------------------------------------------------------------------
 (1) _system_initialize                                    0     0      0    3994
                            _LCDInit
               _interrupt_initialize
                     _osc_initialize
                     _pin_initialize
                        _start_timer
 ---------------------------------------------------------------------------------
 (2) _start_timer                                          3     3      0    2080
                                             10 BANK0      3     3      0
                 _initializeTaskList
 ---------------------------------------------------------------------------------
 (3) _initializeTaskList                                   2     2      0    2036
                                              8 BANK0      2     2      0
                             ___wmul
                    _queueInitialize
 ---------------------------------------------------------------------------------
 (4) _queueInitialize                                      2     2      0     985
                                              6 BANK0      2     2      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _pin_initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _osc_initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _interrupt_initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0    1914
                                              6 BANK0      1     1      0
                          _InitBBSPI
                         _LCDPutInst
                     _Port_BBSPIInit
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (3) _Port_BBSPIInit                                       1     1      0     160
                                              3 BANK0      1     1      0
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (3) _InitBBSPI                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _remove_timer                                         1     1      0     354
                                              6 BANK0      1     1      0
                         _removeTask
 ---------------------------------------------------------------------------------
 (2) _removeTask                                           6     6      0     332
                                              0 BANK0      6     6      0
                        _isEmptyList
 ---------------------------------------------------------------------------------
 (3) _isEmptyList                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _register_timer                                      13     0     13    5083
                                             38 BANK0     13     0     13
                            _addTask
 ---------------------------------------------------------------------------------
 (2) _addTask                                             32    19     13    1955
                                              6 BANK0     32    19     13
                             ___wmul
                         _isFullList
 ---------------------------------------------------------------------------------
 (3) _isFullList                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dispatch                                             0     0      0    7161
                    _selectReadyTask
 ---------------------------------------------------------------------------------
 (2) _selectReadyTask                                      5     5      0    7161
                                             22 BANK0      5     5      0
                       _blinking_LED *
                            _dequeue
                       _handleButton *
                       _isEmptyQueue
                       _printTime_ms *
 ---------------------------------------------------------------------------------
 (1) _printTime_ms                                         8     6      2    3141
                                             14 BANK0      8     6      2
                       _LCDPrintChar
                            ___lldiv
                            ___llmod
                           _get_time
 ---------------------------------------------------------------------------------
 (2) _get_time                                             4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     311
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _LCDPrintChar                                         3     1      2    2303
                                             11 BANK0      3     1      2
                      _LCDMoveCursor
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (3) _handleButton                                         8     6      2     143
                                             14 BANK0      8     6      2
                      _readButtonRA5
                      _readButtonRB0
 ---------------------------------------------------------------------------------
 (4) _readButtonRB0                                        2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _readButtonRA5                                        2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _dequeue                                             12     7      5    2692
                                              8 BANK0     12     7      5
                            ___awmod
                             ___wmul
                       _isEmptyQueue
 ---------------------------------------------------------------------------------
 (3) _isEmptyQueue                                         0     0      0     852
                       _getSizeQueue
 ---------------------------------------------------------------------------------
 (4) _getSizeQueue                                         2     2      0     852
                                              6 BANK0      2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     852
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     895
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _blinking_LED                                         7     5      2     265
                                             14 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (1) _LCDPrint                                             4     1      3    2728
                                             11 BANK0      4     1      3
                      _LCDMoveCursor
                          _LCDPutStr
 ---------------------------------------------------------------------------------
 (2) _LCDPutStr                                            2     0      2    1009
                                              6 BANK0      2     0      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (3) _LCDPutChar                                           1     1      0     888
                                              5 BANK0      1     1      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (3) _LCDMoveCursor                                        5     4      1    1153
                                              6 BANK0      5     4      1
                         _LCDPutInst
 ---------------------------------------------------------------------------------
 (3) _LCDPutInst                                           1     1      0     888
                                              5 BANK0      1     1      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (3) _WritePort_BBSPI                                      2     1      1     866
                                              3 BANK0      2     1      1
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (4) _SendByteBBSPI                                        3     3      0     138
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _timer_interrupt                                      6     6      0    2774
                                             45 COMRAM     6     6      0
                     _handleListHead
 ---------------------------------------------------------------------------------
 (10) _handleListHead                                     31    31      0    2774
                                             14 COMRAM    31    31      0
                            _enqueue
                           i2___wmul
                       i2_removeTask
 ---------------------------------------------------------------------------------
 (11) i2_removeTask                                        6     6      0     332
                                              0 COMRAM     6     6      0
                      i2_isEmptyList
 ---------------------------------------------------------------------------------
 (12) i2_isEmptyList                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _enqueue                                             5     0      5    1411
                                              9 COMRAM     5     0      5
                        _isFullQueue
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     415
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (12) _isFullQueue                                         1     1      0     400
                                              8 COMRAM     1     1      0
                     i2_getSizeQueue
 ---------------------------------------------------------------------------------
 (13) i2_getSizeQueue                                      2     2      0     400
                                              6 COMRAM     2     2      0
                          i2___awmod
 ---------------------------------------------------------------------------------
 (12) i2___awmod                                           6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCDPrint
     _LCDMoveCursor
       _LCDPutInst
         _WritePort_BBSPI
           _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
   ___awmod
   _dispatch
     _selectReadyTask
       _blinking_LED *
       _dequeue *
         ___awmod
         ___wmul
         _isEmptyQueue
           _getSizeQueue
             ___awmod
       _handleButton *
         _readButtonRA5
         _readButtonRB0
       _isEmptyQueue *
         _getSizeQueue
           ___awmod
       _printTime_ms *
         _LCDPrintChar
           _LCDMoveCursor
             _LCDPutInst
               _WritePort_BBSPI
                 _SendByteBBSPI
           _LCDPutChar
             _WritePort_BBSPI
               _SendByteBBSPI
         ___lldiv
         ___llmod
         _get_time
   _printTime_ms
     _LCDPrintChar
       _LCDMoveCursor
         _LCDPutInst
           _WritePort_BBSPI
             _SendByteBBSPI
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     ___lldiv
     ___llmod
     _get_time
   _register_timer
     _addTask
       ___wmul
       _isFullList
   _remove_timer
     _removeTask
       _isEmptyList
   _system_initialize
     _LCDInit
       _InitBBSPI
       _LCDPutInst
         _WritePort_BBSPI
           _SendByteBBSPI
       _Port_BBSPIInit
         _SendByteBBSPI
       _WritePort_BBSPI
         _SendByteBBSPI
     _interrupt_initialize
     _osc_initialize
     _pin_initialize
     _start_timer
       _initializeTaskList
         ___wmul
         _queueInitialize
           ___wmul

 _timer_interrupt (ROOT)
   _handleListHead
     _enqueue
       _isFullQueue
         i2_getSizeQueue
           i2___awmod
       i2___awmod
       i2___wmul
     i2___wmul
     i2_removeTask
       i2_isEmptyList

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0     12C      37        7.6%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      64       7       39.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     33      6B       5       66.9%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     33      4A       1       78.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     119      32        0.0%
DATA                 0      0     245       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Oct 23 11:12:54 2019

                _LCDMoveCursor 2C34               ??i2_getSizeQueue 0007                    ?_LCDPutChar 0001  
                           l67 232C                             l59 1D44                 ??_getSizeQueue 0066  
                  ?_LCDPutInst 0001            ___wmul@multiplicand 0062          SendByteBBSPI@bitcount 0061  
                          l130 2EAA                            l211 2E3A                            l220 186C  
                          l133 2DA8                            l208 2E52                            l240 1EE2  
                          l136 2EB0                            l216 2188                            l161 2D0C  
                          l241 1E32                            l243 1E4E                            l331 269E  
                          l139 2DE6                            l421 2270                            l406 2A9C  
                          l342 2CAA                            l158 28B6                            l168 2CE0  
                          l176 2622                            l177 2682                            l505 2C32  
                          l273 29E8                            l345 2E9C                            l329 2718  
                          l339 2E8E                            l508 2D5E                            l462 28C6  
                          l542 25E0                            l358 2EB6                            l535 25D0  
                          l471 2E04                            l464 28DA                            l480 2BB4  
                          l456 2984                            l465 28DC                            l474 2DC8  
                          l459 2E7C                            l468 2920                            l493 2C70  
                          l477 2B72                            l486 2BF4                            l398 2AEE  
                          l752 23DE                            l499 2B30                            l935 2832  
                          l928 2822                            u980 28D4                            u981 28D0  
                          u990 28EA                            u991 28E6                    _start_timer 2684  
                 ___awmod@sign 0065                            prod 000FF3           __end_ofi2_removeTask 207C  
                          tosl 000FFD                            wreg 000FE8                __end_of_LCDInit 2986  
                 __CFG_LVP$OFF 000000                   __CFG_WDT$OFF 000000                           l2001 234A  
                         l2011 237E                           l2003 234E                           l2021 23B8  
                         l2013 2386                           l2005 235C                           l2015 2394  
                         l2023 23BE                           l2007 2364                           l2031 2CE2  
                         l2103 2E7E                           l2111 2834                           l2041 2B4C  
                         l2025 23CE                           l2017 23AA                           l2009 2376  
                         l2105 2BFA                           l2201 2802                           l2121 289A  
                         l2051 2C38                           l2043 2B56                           l2035 2B36  
                         l2027 23D6                           l2019 23B2                           l2123 2CAC  
                         l2107 2C0C                           l2203 2812                           l2211 1B72  
                         l2053 2C4A                           l2045 2B58                           l2037 2B3E  
                         l2061 2D38                           l2125 2CC2                           l2141 2ACE  
                         l2133 2A9E                           l2109 2C20                           l2205 281C  
                         l2301 21C6                           l2221 1C2A                           l2213 1B76  
                         l2117 283E                           l2055 2C5A                           l2047 2B64  
                         l2039 2B4A                           l2063 2D56                           l2143 2ADA  
                         l2135 2AA2                           l2151 2A4C                           l2311 2220  
                         l2303 21D8                           l2223 1C52                           l2215 1BBE  
                         l2119 2896                           l2057 2C66                           l2049 2B66  
                         l2129 2CC8                           l2137 2AAC                           l2161 2A88  
                         l2153 2A50                           l2241 2286                           l2313 222C  
                         l2225 1C76                           l2217 1BE0                           l2233 1CEA  
                         l2059 2C6A                           l2139 2ABE                           l2147 2AE6  
                         l2155 2A5A                           l2171 254E                           l2243 2290  
                         l2315 223E                           l2307 21E0                           l2227 1C9C  
                         l2219 1C04                           l2331 2DEC                           l2403 26D6  
                         l2157 2A6C                           l2165 2A94                           l2181 2590  
                         l2173 2564                           l2245 2302                           l2309 220C  
                         l2229 1CC4                           l2333 2DEE                           l2263 262A  
                         l2255 25E2                           l2159 2A7C                           l2183 25AE  
                         l2175 256C                           l2191 27AA                           l2247 2306  
                         l2239 2272                           l2319 2246                           l2271 2E3C  
                         l2511 1E3A                           l2503 1D8A                           l2335 2E02  
                         l2351 2DA6                           l2265 264C                           l2257 25F8  
                         l2185 25BE                           l2177 2578                           l2169 253C  
                         l2193 27C2                           l2249 231C                           l2433 14E8  
                         l2513 1E72                           l2505 1DEE                           l2329 2E6C  
                         l2361 292A                           l2353 2EAC                           l2281 2080  
                         l2259 260C                           l2187 25C0                           l2179 2586  
                         l2195 27CA                           l2531 29D4                           l2523 2986  
                         l2275 2E22                           l2443 1516                           l2427 14CE  
                         l2515 1EA0                           l2507 1DF0                           l2371 2956  
                         l2363 293C                           l2355 2922                           l2347 2EA6  
                         l2291 2164                           l2533 2BB6                           l2189 25CA  
                         l2197 27D6                           l2525 298A                           l2461 15DE  
                         l2453 153E                           l2445 1518                           l2429 14E2  
                         l2517 1EC8                           l2509 1E02                           l2381 297E  
                         l2373 2966                           l2365 293E                           l2357 2926  
                         l2349 2D86                           l2293 2180                           l2535 2BBA  
                         l2199 27E4                           l2295 218A                           l2527 299C  
                         l2471 165E                           l2463 15F0                           l2455 15B2  
                         l2447 1528                           l2439 14EE                           l2519 1EE0  
                         l2375 296C                           l2367 2944                           l2359 2928  
                         l2287 208A                           l2279 207C                           l2391 26C2  
                         l2383 2688                           l2537 2BCE                           l2297 21A6  
                         l2529 29B2                           l2481 1752                           l2473 1668  
                         l2465 1620                           l2457 15B4                           l2377 2972  
                         l2369 294A                           l2289 2160                           l2393 26C4  
                         l2641 1B06                           l2633 186E                           l2539 2BD4  
                         l2299 21BA                           l2491 186A                           l2483 1782  
                         l2475 1692                           l2467 163E                           l2459 15CC  
                         l2379 2978                           l2395 26C6                           l2387 26A2  
                         l2571 2DE0                           l2563 2DCA                           l2651 1B3E  
                         l2643 1B0A                           l2635 1ACC                           l1941 28C0  
                         l2581 2B1A                           l2485 179A                           l2477 16C4  
                         l2469 1646                           l2573 2C72                           l2397 26CA  
                         l2389 26BE                           l2565 2DD2                           l2653 1B42  
                         l2645 1B1C                           l2637 1ADE                           l1951 28F2  
                         l2583 2B24                           l2479 16D8                           l2487 17E4  
                         l2495 1D4A                           l2399 26CE                           l2567 2DD6  
                         l2655 1B48                           l2647 1B20                           l2639 1AF2  
                         l1961 2900                           l1953 28F8                           l2577 2AF4  
                         l2585 2EB2                           l2489 1808                           l2497 1D5E  
                         l2569 2DDA                           l2649 1B2C                           l1971 2910  
                         l1963 2902                           l1955 28FA                           l1947 28D4  
                         l1939 28BC                           l2579 2B06                           l2499 1D84  
                         l2587 2E94                           l1965 2904                           l1957 28FC  
                         l1949 28EA                           l1973 2DAE                           l1981 2B80  
                         l2773 26EA                           l1967 2906                           l1959 28FE  
                         l1975 2DB0                           l1991 2BA6                           l1983 2B8C  
                         l2775 1CFE                           l1969 290E                           l1977 2DC6  
                         l1993 2BA8                           l1985 2B8E                           l2777 21F6  
                         l1987 2B98                           l1979 2B78                           l1995 232E  
                         l2779 225A                           l1989 2B9A                           l1997 2334  
                         l1999 2342                           STR_1 1001                           STR_2 1012  
                         STR_3 1017                           u1000 2920                           u1001 291C  
                         u1010 2342                           u1011 233E                           u1020 235C  
                         u1021 2358                           u1030 2376                           u1031 2372  
                         u1040 2394                           u1200 2ABE                           u1041 2390  
                         u1201 2ABA                           u1050 23AA                           u1210 2ACE  
                         u1051 23A6                           u1211 2ACA                           u1060 23CE  
                         u1220 2A6C                           u1140 2C0C                           u1300 1B9C  
                         u1061 23CA                           u1221 2A68                           u1141 2C08  
                         u1301 1B96                           u1070 2C4A                           u1230 2A7C  
                         u1150 2C1C                           u1310 1B9E                           u1071 2C46  
                         u1231 2A78                           u1151 2C18                           u1240 2564  
                         u1320 231C                           u1400 2E52                           u1160 28B6  
                         u1241 2560                           u1321 2318                           u1161 28B2  
                         u1170 2CC2                           u1250 2586                           u1330 232C  
                         u1410 2E38                           u1171 2CBE                           u1251 2582  
                         u1331 2328                           u1411 2E32                           u1180 2CDE  
                         u1260 25AE                           u1420 2E3A                           u1500 269A  
                         u1181 2CD8                           u1261 25AA                           u1501 2696  
                         _LATA 000F89                           u1190 2CE0                           u1270 27C2  
                         u1430 2180                           _LATB 000F8A                           u1271 27BE  
                         u1431 217C                           _LATC 000F8B                           u1360 260C  
                         u1280 27E4                           u1440 21BA                           u1600 16D8  
                         _LATD 000F8C                           u1361 2608                           u1281 27E0  
                         u1441 21B6                           u1601 16D4                           u1290 2802  
                         u1450 21D8                           u1610 1752                           u1530 14E2  
                         u1371 2616                           u1291 27FE                           u1451 21D4  
                         u1611 174E                           u1531 14DE                           u1460 2220  
                         u1620 1808                           u1540 1512                           u1381 2676  
                         u1461 221C                           u1621 1804                           u1541 150E  
                         u1470 223E                           u1710 29E8                           u1550 1528  
                         u1390 2E50                           u1630 1D5E                           u1471 223A  
                         u1711 29E4                           u1551 1524                           u1391 2E4A  
                         u1631 1D5A                           u1720 2BF4                           u1560 153A  
                         u1640 1D84                           u1721 2BF0                           u1561 1536  
                         u1641 1D80                           u1570 15DE                           u1650 1E02  
                         u1571 15DA                           u1651 1DFE                           u1708 29C0  
                         u1580 15F0                           u1660 1E72                           u1900 1B3E  
                         u1709 29D4                           u1581 15EC                           u1661 1E6E  
                         u1901 1B3A                           u1590 1620                           u1670 1EA0  
                         u1591 161C                           u1671 1E9C                           u1681 2994  
                         u1690 29B2                           u1691 29AE                           u1780 2B06  
                         u1781 2B02                           u1790 2B16                           u1791 2B12  
                         u1890 1B1C                           u1891 1B18                           u1957 2932  
                         u1967 295E                           u1977 2B38                           u1987 2B7A  
               ??_isEmptyQueue 0068                  ?_LCDPrintChar 006B            blinking_LED@idx_ptr 006E  
     __size_of_selectReadyTask 0064                           _head 00BF                           _main 186E  
                         _rear 00C3                           fsr1h 000FE2                           fsr2h 000FDA  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 004B               ?_WritePort_BBSPI 0063                           prodh 000FF4  
                         prodl 000FF3                           start 000E             __size_of_LCDPutStr 0040  
                __CFG_IESO$OFF 000000                  __CFG_MCLRE$ON 000000                 ?_LCDMoveCursor 0066  
                 ___param_bank 000000        __end_of_queueInitialize 28B8               __end_of_LCDPrint 2B32  
              i2removeTask@idx 0006                i2removeTask@pos 0005                  printTime_ms@i 0071  
                  LCDPrint@pos 006B                    LCDPrint@ptr 006C                          ?_main 0001  
              __end_of___awmod 23E0                __end_of_addTask 186E                __end_of___lldiv 25E2  
                        _T0CON 000FD5                          _T1CON 000FCD                __end_of___llmod 2834  
                        i2l208 2E6A                          i2l240 207A                          i2l161 2D36  
                        i2l241 1FCC                          i2l243 1FE8                          i2l251 14CC  
                        i2l164 2E20                          i2l172 253A                          i2l253 1034  
                        i2l259 13CC                          i2l355 278E                          i2l508 2D84  
                        i2l752 248E                          _TMR1H 000FCF                          _TMR0L 000FD6  
                        _TMR1L 000FCE                          _TRISA 000F92                          _TRISB 000F93  
                        _TRISC 000F94                          _TRISD 000F95                  __CFG_PWRT$OFF 000000  
               __CFG_FCMEN$OFF 000000                __end_of_dequeue 2684        __size_of_Port_BBSPIInit 001E  
              __end_of_enqueue 253C                          _count 0048                          _front 00C5  
  __size_of_initializeTaskList 010E                          _value 004A                 ??_LCDPrintChar 006D  
               __CFG_BOREN$OFF 000000                          pclath 000FFA                          tablat 000FF5  
__size_of_interrupt_initialize 0006            __size_of_LCDPutChar 0042               __end_ofi2___wmul 2D86  
           _LCDMoveCursor$1108 0068                          plusw0 000FEB                          plusw1 000FE3  
                        plusw2 000FDB            __size_of_LCDPutInst 0042                          ttemp5 004C  
                        ttemp6 004F                          ttemp7 0053                          status 000FD8  
      __size_of_osc_initialize 0006                          wtemp8 004C             __size_ofi2___awmod 00B0  
              blinking_LED@idx 0074                __initialization 29EA                   __end_of_main 1B72  
         __end_of_blinking_LED 1D46           __end_of_handleButton 2272                 _pin_initialize 2D86  
     __size_of_timer_interrupt 27A2                         ??_main 0093                  __activetblptr 000003  
       __size_of_readButtonRB0 0052         __size_of_readButtonRA5 0052                      ??_LCDInit 0066  
                 LCDPutChar@ch 0065              __end_of_LCDPutStr 2BF6                    enqueue@data 000D  
                 LCDPrint@line 006E                         _ADCON1 000FC1               ___llmod@dividend 0060  
           __size_of_InitBBSPI 0012                   LCDPutInst@ch 0065                 _register_timer 2C72  
                       i2l2071 23F2                         i2l2207 2D0E                         i2l2081 2426  
                       i2l2073 23FA                         i2l2091 2462                         i2l2083 242E  
                       i2l2075 23FE                         i2l2067 23E0                         i2l2251 2E06  
                       i2l2411 2490                         i2l2093 2468                         i2l2085 2436  
                       i2l2077 240C                         i2l2069 23E4                         i2l2341 2D60  
                       i2l2421 24E6                         i2l2087 2444                         i2l2095 246E  
                       i2l2079 2414                         i2l2343 2D7C                         i2l2423 2512  
                       i2l2415 24A8                         i2l2097 247E                         i2l2089 245A  
                       i2l2417 24BE                         i2l2337 2E54                         i2l2601 115C  
                       i2l2099 2486                         i2l2419 24C6                         i2l2611 121A  
                       i2l2603 1176                         i2l2541 1EE6                         i2l2621 129E  
                       i2l2613 1222                         i2l2605 1188                         i2l2551 1F9C  
                       i2l2543 1EFA                         i2l2631 14B0                         i2l2623 12B2  
                       i2l2615 123C                         i2l2607 119A                         i2l2553 1FD4  
                       i2l2545 1F22                         i2l2625 134A                         i2l2617 1246  
                       i2l2609 11EA                         i2l2555 200C                         i2l2547 1F86  
                       i2l2627 1400                         i2l2619 126E                         i2l2557 203A  
                       i2l2549 1F8A                         i2l2629 1488                         i2l2559 2062  
                       i2l2591 101C                         i2l2671 2756                         i2l2663 2734  
                       i2l2681 278A                         i2l2665 2742                         i2l2673 2764  
                       i2l2595 103A                         i2l2675 2772                         i2l2667 2750  
                       i2l2597 1102                         i2l2677 2780                         i2l2669 2752  
                       i2l2599 110C                         i2l2679 2782            initializeTaskList@i 0068  
         __end_of_getSizeQueue 2D0E                         _OSCCON 000FD3                   LCDPutStr@ptr 0066  
              ??_LCDMoveCursor 0067                 __CFG_XINST$OFF 000000           __size_of_isEmptyList 0018  
             __end_of_dispatch 2EB8              ??_selectReadyTask 0076               __end_of_get_time 2E90  
                       ___wmul 2D38         __end_of_pin_initialize 2DAA                      ??___awmod 0064  
                    ??_addTask 0073                      ??___lldiv 0068           __size_of_isFullQueue 001C  
             ?_queueInitialize 0001                      ??___llmod 0068                   addTask@delay 006A  
                       clear_0 2A12                         clear_1 2A24                         clear_2 2A30  
                       clear_3 2A3C          __size_ofi2_removeTask 0198                ___awmod@divisor 0062  
              ___awmod@counter 0064           __end_of_isEmptyQueue 2CE2                      ??_dequeue 006D  
                    ??_enqueue 000F         Port_BBSPIInit@port_dir 0063              __end_ofi2___awmod 2490  
             LCDMoveCursor@pos 0066                   __mediumconst 0000         __size_ofi2_isEmptyList 0018  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
       __end_of_register_timer 2CAC                 i2___awmod@sign 0006                     __accesstop 0060  
      __end_of__initialization 2A42                      ?_LCDPrint 006B                  _readButtonRB0 2A4C  
                _readButtonRA5 2A9E                  ___rparam_used 000001         __size_of_SendByteBBSPI 006A  
                 i2_removeTask 1EE4                 __pcstackCOMRAM 0001                   __pidataBANK0 2E9E  
              ?_pin_initialize 0001              __end_of_InitBBSPI 2E7E                   ??_LCDPutChar 0065  
                 ??_LCDPutInst 0065           __end_of_LCDPrintChar 2C34                      ?i2___wmul 0001  
                 ?_start_timer 0001                __CFG_OSC$INTIO7 000000                 _Port_BBSPIInit 2DE8  
            ??_timer_interrupt 002E                     addTask@idx 0085                     addTask@cur 0083  
                   addTask@ptr 006E                     addTask@sum 0081                ?_register_timer 0086  
                   __pbssBANK0 0093                     __pbssBANK1 0100                 _osc_initialize 2EA6  
               ?_readButtonRB0 0060                 ?_readButtonRA5 0060             __end_of_LCDPutChar 2B74  
                   ??_LCDPrint 006E             __end_of_LCDPutInst 2BB6        __size_of_handleListHead 04B2  
        __size_of_blinking_LED 01D4                  i2_isEmptyList 2E54          __size_of_handleButton 00E8  
       start_timer@timer_vaddr 006C                        ?___wmul 0060             register_timer@data 0091  
              LCDPrintChar@pos 006B                     ??i2___wmul 0005         __end_of_Port_BBSPIInit 2E06  
                      _LCDInit 2922                  _SendByteBBSPI 28B8                     _isFullList 2E22  
        __size_of_getSizeQueue 002C         __end_of_osc_initialize 2EAC                      ?_dispatch 0001  
                    ?_get_time 0060                   _blinking_LED 1B72                     _countRB0_1 0034  
                   _countRA5_1 003C                   _handleButton 218A               WritePort_BBSPI@a 0063  
        LCDMoveCursor@position 006A                  ?_remove_timer 0001                 ?i2_isEmptyList 0001  
         register_timer@period 0086                        __Hparam 0000                        __Lparam 0000  
        __size_of_isEmptyQueue 0036                fp__printTime_ms 0000                        ___awmod 232E  
                      _addTask 14CE                        ___lldiv 253C                __size_of___wmul 0028  
                      ___llmod 27AA       __size_of_WritePort_BBSPI 0020   __end_of_interrupt_initialize 2EB2  
                 __psmallconst 1000                 remove_timer@id 0066                        __pcinit 29EA  
                      __ramtop 1000                   _getSizeQueue 2CE2                        __ptext0 186E  
                      __ptext1 2DCA                        __ptext2 2684                        __ptext3 207C  
                      __ptext4 2834                        __ptext5 2D86                        __ptext6 2EA6  
                      __ptext7 2EAC                        __ptext8 2922                        __ptext9 2DE8  
                      _dequeue 25E2                 ?_SendByteBBSPI 0001                ?_Port_BBSPIInit 0001  
                      _enqueue 2490               ___awmod@dividend 0060        __size_ofi2_getSizeQueue 002A  
                addTask@period 0066     __end_of_initializeTaskList 218A                        _task_id 0093  
                      _time_ms 00B7                      _LCDPutStr 2BB6                     ??_dispatch 007B  
                   ??_get_time 0064                 __pintcode_body 271A                ?_osc_initialize 0001  
         end_of_initialization 2A42                ??_readButtonRB0 0062                ??_readButtonRA5 0062  
              _selectReadyTask 2986                        int_func 271A                      _LED_state 00A7  
          i2___wmul@multiplier 0001                   _isEmptyQueue 2CAC                 ??_remove_timer 0066  
            LCDMoveCursor@line 0067                ___lldiv@divisor 0064                     _removeTask 1D46  
              ___lldiv@counter 006C          __size_of_LCDPrintChar 003E             handleListHead@prev 0026  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc1 000FE6                        postinc2 000FDE           handleButton@checkRB0 0074  
         handleButton@checkRA5 0072                  ?_printTime_ms 006E                      _PORTAbits 000F80  
                    _PORTBbits 000F81           handleButton@data_ptr 006E                     dequeue@idx 006D  
                  ?_isFullList 0001                      _TRISAbits 000F92                      _TRISCbits 000F94  
                    _TRISFbits 000F97           __size_of_start_timer 0096                     ?_LCDPutStr 0066  
                    i2___awmod 23E0            SendByteBBSPI@output 0060                   _LCDPrintChar 2BF6  
              ??i2_isEmptyList 0001                  ??_isEmptyList 0060               ??_pin_initialize 0060  
               _handleListHead 101C              __size_of_LCDPrint 0042                  ??_isFullQueue 0009  
        __end_of_LCDMoveCursor 2C72                _timer_interrupt 0008                 __end_of___wmul 2D60  
       register_timer@callback 008E                 ??_printTime_ms 0070                   _firstReadRB0 00C8  
                 _firstReadRA5 00CA                ??_SendByteBBSPI 0060                  _secondReadRB0 00C7  
                _secondReadRA5 00C9                      _InitBBSPI 2E6C               ??_register_timer 0093  
             i2___wmul@product 0005              ??_WritePort_BBSPI 0064       __size_of_queueInitialize 0084  
          start_initialization 29EA        __end_of_selectReadyTask 29EA              __size_ofi2___wmul 0026  
                   ?i2___awmod 0001            selectReadyTask@node 0076           _interrupt_initialize 2EAC  
       __end_of_handleListHead 14CE                     enqueue@ptr 000A                ___llmod@divisor 0064  
              ___llmod@counter 0068                    ?_removeTask 0001            __size_of_isFullList 001A  
                  addTask@data 0071                       ??___wmul 0064            __end_of_isEmptyList 2E54  
                  addTask@prev 007F                    __pdataBANK0 00C3            __end_of_isFullQueue 2E22  
                   ?_InitBBSPI 0001           __end_of_remove_timer 2E9E                       ?_LCDInit 0001  
                  __pbssBIGRAM 0164                 i2_getSizeQueue 2D0E                    __pbssCOMRAM 0034  
                __pcstackBANK0 0060                    ??_LCDPutStr 0068          ?_interrupt_initialize 0001  
            __size_of_dispatch 0006              __size_of_get_time 0012                ?_handleListHead 0001  
      __end_of_timer_interrupt 27AA                  removeTask@idx 0065                  removeTask@pos 0064  
                    __pintcode 0008               printTime_ms@temp 0070                       ?___awmod 0060  
                     ?_addTask 0066                       ?___lldiv 0060                       ?___llmod 0060  
               LCDPrintChar@ch 006C               ??_Port_BBSPIInit 0063         __end_ofi2_getSizeQueue 2D38  
                     ?_dequeue 0068                    __smallconst 1000                       ?_enqueue 000A  
          register_timer@delay 008A               ??_osc_initialize 0060               ?_selectReadyTask 0001  
          __size_of_removeTask 019E                    ??i2___awmod 0005               LCDPrintChar@line 006D  
            ??_queueInitialize 0066           printTime_ms@data_ptr 006E           __end_of_printTime_ms 232E  
               ___wmul@product 0064                       _LCDPrint 2AF0                       _LATAbits 000F89  
                     _LATCbits 000F8B                       _LATDbits 000F8C                       _LATFbits 000F8E  
           _initializeTaskList 207C                       _PIE1bits 000F9D                    _isEmptyList 2E3C  
                     i2u110_40 2426                       i2u110_41 2422                       i2u111_40 2444  
                     i2u111_41 2440                       i2u112_40 245A                       i2u112_41 2456  
                     i2u113_40 247E                       i2u113_41 247A                       i2u108_40 23F2  
                     i2u108_41 23EE                       i2u109_40 240C                       i2u109_41 2408  
                     i2u134_40 2E1E                       i2u134_41 2E18                       i2u135_40 2E20  
                     i2u151_40 24A4                       i2u151_41 24A0                       i2u152_40 24BE  
                     i2u152_41 24BA                       i2u148_40 2E68                       i2u180_40 1030  
                     i2u148_41 2E62                       i2u180_41 102C                       i2u149_40 2E6A  
                     i2u173_40 1EFA                       i2u181_40 1102                       i2u173_41 1EF6  
                     i2u181_41 10FE                       i2u174_40 1F1E                       i2u182_40 1188  
                     i2u174_41 1F1A                       i2u182_41 1184                       i2u175_40 1F9C  
                     i2u183_40 119A                       i2u191_40 2742                       i2u175_41 1F98  
                     i2u183_41 1196                       i2u191_41 273E                       i2u176_40 200C  
                     i2u184_40 11EA                       i2u192_40 2750                       i2u176_41 2008  
                     i2u184_41 11E6                       i2u192_41 274C                       i2u177_40 203A  
                     i2u185_40 12B2                       i2u193_40 2772                       i2u177_41 2036  
                     i2u185_41 12AE                       i2u193_41 276E                       _PIR1bits 000F9E  
                    _task_list 0164                       i2u186_40 134A                       i2u194_40 2780  
                     i2u186_41 1346                       i2u194_41 277C                       i2u187_40 1400  
                     i2u187_41 13FC                       i2u188_40 14B0                       i2u188_41 14AC  
                  _isFullQueue 2E06              handleListHead@cur 002A              handleListHead@pos 002C  
            handleListHead@sum 0028            ?_initializeTaskList 0001                ?i2_getSizeQueue 0001  
            ___wmul@multiplier 0060                    ??_InitBBSPI 0060             SendByteBBSPI@input 0062  
                     i2___wmul 2D60               __size_of_LCDInit 0064                   ??_isFullList 0060  
            _system_initialize 2DCA           ??_initializeTaskList 0068         ??_interrupt_initialize 0060  
                    copy_data0 29FE             i2___awmod@dividend 0001             ?_system_initialize 0001  
        __end_of_readButtonRB0 2A9E          __end_of_readButtonRA5 2AF0            ??_system_initialize 006D  
             ?_timer_interrupt 0001                       __Hrparam 0000                  ?i2_removeTask 0001  
                     __Lrparam 0000                    _RB0_pressed 00C1            _handleListHead$1821 0022  
          _handleListHead$1822 0024            _handleListHead$1816 001F                _WritePort_BBSPI 2DAA  
           __end_of_isFullList 2E3C          __size_of_remove_timer 000E               __size_of___awmod 00B2  
             __size_of_addTask 03A0          i2___wmul@multiplicand 0003               __size_of___lldiv 00A6  
             __size_of___llmod 008A                    _RA5_pressed 00C2               __size_of_dequeue 00A2  
                ??_start_timer 006A                fp__blinking_LED 0000       printTime_ms@current_time 0072  
    __end_of_system_initialize 2DE8               __size_of_enqueue 00AC                fp__handleButton 0000  
                     __ptext10 2E6C                       __ptext11 2E90                       __ptext20 218A  
                     __ptext12 1D46                       __ptext21 2272                       __ptext13 2E3C  
                     __ptext30 2CE2                       __ptext22 2E7E                       __ptext14 2C72  
                     __ptext31 232E                       __ptext23 27AA                       __ptext15 14CE  
                     __ptext32 2D38                       __ptext24 253C                       __ptext16 2E22  
                     __ptext41 101C                       __ptext33 2AF0                       __ptext25 2BF6  
                     __ptext17 2EB2                       __ptext42 1EE4                       __ptext34 2BB6  
                     __ptext26 2A4C                       __ptext18 2986                       __ptext43 2E54  
                     __ptext35 2B32                       __ptext27 2A9E                       __ptext19 1B72  
                     __ptext44 2490                       __ptext36 2C34                       __ptext28 25E2  
                     __ptext45 2D60                       __ptext37 2B74                       __ptext29 2CAC  
                     __ptext46 2E06                       __ptext38 2DAA                       __ptext47 2D0E  
                     __ptext39 28B8                       __ptext48 23E0                       __ptext49 0000  
                     _dispatch 2EB2                       _get_time 2E7E                       _countRB0 0038  
                     _countRA5 0040                  __size_of_main 0304                 ??i2_removeTask 0001  
                 _remove_timer 2E90          __end_ofi2_isEmptyList 2E6C                    _ready_queue 0100  
                 ??_removeTask 0060                       _num_task 00C0                       _stateRB0 00BD  
                     int$flags 004B                       _stateRA5 00BE                     _LCDPutChar 2B32  
                   _LCDPutInst 2B74          __end_of_SendByteBBSPI 2922              i2___awmod@divisor 0003  
            i2___awmod@counter 0005                     _INTCONbits 000FF2             __end_of_removeTask 1EE4  
             ??_handleListHead 000F          __size_of_printTime_ms 00BC         __size_of_LCDMoveCursor 003E  
                ?_blinking_LED 006E            __end_of_start_timer 271A                       intlevel2 0000  
                ?_handleButton 006E            _remove_task_counter 00BB               ___lldiv@dividend 0060  
      __end_of_WritePort_BBSPI 2DCA                   _prev_time_ms 0044                  ?_getSizeQueue 0001  
      __size_of_pin_initialize 0024                   _printTime_ms 2272                _queueInitialize 2834  
      WritePort_BBSPI@port_add 0064               ___lldiv@quotient 0068     __size_of_system_initialize 001E  
               ??_blinking_LED 0070                 ??_handleButton 0070        __size_of_register_timer 003A  
                  dequeue@temp 006F                  ?_isEmptyQueue 0001               queueInitialize@i 0066  
                 ?_isEmptyList 0001                   ?_isFullQueue 0001  
