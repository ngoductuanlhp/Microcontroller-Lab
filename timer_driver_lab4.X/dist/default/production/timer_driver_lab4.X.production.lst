

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Oct 06 19:40:56 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           ; Version 2.10
    49                           ; Generated 31/07/2019 GMT
    50                           ; 
    51                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F8722 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	idataCOMRAM
    84  0016CA                     __pidataCOMRAM:
    85                           	opt callstack 0
    86                           
    87                           ;initializer for _rear
    88  0016CA  FFFF               	dw	65535
    89                           
    90                           ;initializer for _front
    91  0016CC  FFFF               	dw	65535
    92                           
    93                           ;initializer for _secondReadRB0
    94  0016CE  01                 	db	1
    95                           
    96                           ;initializer for _firstReadRB0
    97  0016CF  01                 	db	1
    98                           
    99                           ;initializer for _secondReadRA5
   100  0016D0  01                 	db	1
   101                           
   102                           ;initializer for _firstReadRA5
   103  0016D1  01                 	db	1
   104  0000                     _LATCbits	set	3979
   105  0000                     _LATAbits	set	3977
   106  0000                     _TRISCbits	set	3988
   107  0000                     _TRISAbits	set	3986
   108  0000                     _LATFbits	set	3982
   109  0000                     _TRISFbits	set	3991
   110  0000                     _PORTBbits	set	3969
   111  0000                     _PORTAbits	set	3968
   112  0000                     _TMR1L	set	4046
   113  0000                     _TMR1H	set	4047
   114  0000                     _T1CON	set	4045
   115  0000                     _PIR1bits	set	3998
   116  0000                     _PIE1bits	set	3997
   117  0000                     _TMR0L	set	4054
   118  0000                     _T0CON	set	4053
   119  0000                     _INTCONbits	set	4082
   120  0000                     _TRISB	set	3987
   121  0000                     _LATB	set	3978
   122  0000                     _TRISA	set	3986
   123  0000                     _LATA	set	3977
   124  0000                     _TRISD	set	3989
   125  0000                     _LATD	set	3980
   126  0000                     _ADCON1	set	4033
   127  0000                     _TRISC	set	3988
   128  0000                     _LATC	set	3979
   129  0000                     _OSCCON	set	4051
   130  0000                     _LATDbits	set	3980
   131                           
   132                           ; #config settings
   133  0000                     
   134                           	psect	cinit
   135  0014CC                     __pcinit:
   136                           	opt callstack 0
   137  0014CC                     start_initialization:
   138                           	opt callstack 0
   139  0014CC                     __initialization:
   140                           	opt callstack 0
   141                           
   142                           ; Initialize objects allocated to COMRAM (8 bytes)
   143                           ; load TBLPTR registers with __pidataCOMRAM
   144  0014CC  0ECA               	movlw	low __pidataCOMRAM
   145  0014CE  6EF6               	movwf	tblptrl,c
   146  0014D0  0E16               	movlw	high __pidataCOMRAM
   147  0014D2  6EF7               	movwf	tblptrh,c
   148  0014D4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   149  0014D6  6EF8               	movwf	tblptru,c
   150  0014D8  EE00  F050         	lfsr	0,__pdataCOMRAM
   151  0014DC  EE10 F008          	lfsr	1,8
   152  0014E0                     copy_data0:
   153  0014E0  0009               	tblrd		*+
   154  0014E2  CFF5 FFEE          	movff	tablat,postinc0
   155  0014E6  50E5               	movf	postdec1,w,c
   156  0014E8  50E1               	movf	fsr1l,w,c
   157  0014EA  E1FA               	bnz	copy_data0
   158                           
   159                           ; Clear objects allocated to BIGRAM (300 bytes)
   160  0014EC  EE01  F064         	lfsr	0,__pbssBIGRAM
   161  0014F0  EE11 F02C          	lfsr	1,300
   162  0014F4                     clear_0:
   163  0014F4  6AEE               	clrf	postinc0,c
   164  0014F6  50E5               	movf	postdec1,w,c
   165  0014F8  50E1               	movf	fsr1l,w,c
   166  0014FA  E1FC               	bnz	clear_0
   167  0014FC  50E2               	movf	fsr1h,w,c
   168  0014FE  E1FA               	bnz	clear_0
   169                           
   170                           ; Clear objects allocated to BANK1 (100 bytes)
   171  001500  EE01  F000         	lfsr	0,__pbssBANK1
   172  001504  0E64               	movlw	100
   173  001506                     clear_1:
   174  001506  6AEE               	clrf	postinc0,c
   175  001508  06E8               	decf	wreg,f,c
   176  00150A  E1FD               	bnz	clear_1
   177                           
   178                           ; Clear objects allocated to BANK0 (12 bytes)
   179  00150C  EE00  F08D         	lfsr	0,__pbssBANK0
   180  001510  0E0C               	movlw	12
   181  001512                     clear_2:
   182  001512  6AEE               	clrf	postinc0,c
   183  001514  06E8               	decf	wreg,f,c
   184  001516  E1FD               	bnz	clear_2
   185                           
   186                           ; Clear objects allocated to COMRAM (34 bytes)
   187  001518  EE00  F02E         	lfsr	0,__pbssCOMRAM
   188  00151C  0E22               	movlw	34
   189  00151E                     clear_3:
   190  00151E  6AEE               	clrf	postinc0,c
   191  001520  06E8               	decf	wreg,f,c
   192  001522  E1FD               	bnz	clear_3
   193  001524                     end_of_initialization:
   194                           	opt callstack 0
   195  001524                     __end_of__initialization:
   196                           	opt callstack 0
   197  001524  9058               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   198  001526  9258               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   199  001528  0100               	movlb	0
   200  00152A  EFBF  F004         	goto	_main	;jump to C main() function
   201                           
   202                           	psect	bssCOMRAM
   203  00002E                     __pbssCOMRAM:
   204                           	opt callstack 0
   205  00002E                     _LED_state:
   206                           	opt callstack 0
   207  00002E                     	ds	16
   208  00003E                     _countRB0:
   209                           	opt callstack 0
   210  00003E                     	ds	4
   211  000042                     _countRA5_1:
   212                           	opt callstack 0
   213  000042                     	ds	4
   214  000046                     _countRA5:
   215                           	opt callstack 0
   216  000046                     	ds	4
   217  00004A                     _count:
   218                           	opt callstack 0
   219  00004A                     	ds	2
   220  00004C                     _stateRB0:
   221                           	opt callstack 0
   222  00004C                     	ds	1
   223  00004D                     _stateRA5:
   224                           	opt callstack 0
   225  00004D                     	ds	1
   226  00004E                     _RB0_pressed:
   227                           	opt callstack 0
   228  00004E                     	ds	1
   229  00004F                     _RA5_pressed:
   230                           	opt callstack 0
   231  00004F                     	ds	1
   232                           
   233                           	psect	dataCOMRAM
   234  000050                     __pdataCOMRAM:
   235                           	opt callstack 0
   236  000050                     _rear:
   237                           	opt callstack 0
   238  000050                     	ds	2
   239  000052                     _front:
   240                           	opt callstack 0
   241  000052                     	ds	2
   242  000054                     _secondReadRB0:
   243                           	opt callstack 0
   244  000054                     	ds	1
   245  000055                     _firstReadRB0:
   246                           	opt callstack 0
   247  000055                     	ds	1
   248  000056                     _secondReadRA5:
   249                           	opt callstack 0
   250  000056                     	ds	1
   251  000057                     _firstReadRA5:
   252                           	opt callstack 0
   253  000057                     	ds	1
   254                           
   255                           	psect	bssBANK0
   256  00008D                     __pbssBANK0:
   257                           	opt callstack 0
   258  00008D                     _countRB0_1:
   259                           	opt callstack 0
   260  00008D                     	ds	4
   261  000091                     _time_ms:
   262                           	opt callstack 0
   263  000091                     	ds	4
   264  000095                     _head:
   265                           	opt callstack 0
   266  000095                     	ds	2
   267  000097                     _num_task:
   268                           	opt callstack 0
   269  000097                     	ds	1
   270  000098                     _value:
   271                           	opt callstack 0
   272  000098                     	ds	1
   273                           
   274                           	psect	bssBANK1
   275  000100                     __pbssBANK1:
   276                           	opt callstack 0
   277  000100                     _ready_queue:
   278                           	opt callstack 0
   279  000100                     	ds	100
   280                           
   281                           	psect	bssBIGRAM
   282  000164                     __pbssBIGRAM:
   283                           	opt callstack 0
   284  000164                     _task_list:
   285                           	opt callstack 0
   286  000164                     	ds	300
   287                           
   288                           	psect	cstackBANK0
   289  000060                     __pcstackBANK0:
   290                           	opt callstack 0
   291  000060                     ?___wmul:
   292                           	opt callstack 0
   293  000060                     ?___awmod:
   294                           	opt callstack 0
   295  000060                     blink_LED@data:
   296                           	opt callstack 0
   297  000060                     ___wmul@multiplier:
   298                           	opt callstack 0
   299  000060                     ___awmod@dividend:
   300                           	opt callstack 0
   301                           
   302                           ; 2 bytes @ 0x0
   303  000060                     	ds	2
   304  000062                     ??_blink_LED:
   305  000062                     ___wmul@multiplicand:
   306                           	opt callstack 0
   307  000062                     ___awmod@divisor:
   308                           	opt callstack 0
   309                           
   310                           ; 2 bytes @ 0x2
   311  000062                     	ds	2
   312  000064                     ___awmod@counter:
   313                           	opt callstack 0
   314  000064                     ___wmul@product:
   315                           	opt callstack 0
   316                           
   317                           ; 2 bytes @ 0x4
   318  000064                     	ds	1
   319  000065                     ___awmod@sign:
   320                           	opt callstack 0
   321                           
   322                           ; 1 bytes @ 0x5
   323  000065                     	ds	1
   324  000066                     ??_getSizeQueue:
   325  000066                     blink_LED@idx:
   326                           	opt callstack 0
   327  000066                     queueInitialize@i:
   328                           	opt callstack 0
   329  000066                     addTask@period:
   330                           	opt callstack 0
   331                           
   332                           ; 4 bytes @ 0x6
   333  000066                     	ds	2
   334  000068                     ?_dequeue:
   335                           	opt callstack 0
   336  000068                     initializeTaskList@i:
   337                           	opt callstack 0
   338                           
   339                           ; 2 bytes @ 0x8
   340  000068                     	ds	2
   341  00006A                     ??_start_timer:
   342  00006A                     addTask@delay:
   343                           	opt callstack 0
   344                           
   345                           ; 4 bytes @ 0xA
   346  00006A                     	ds	2
   347  00006C                     start_timer@timer_vaddr:
   348                           	opt callstack 0
   349                           
   350                           ; 1 bytes @ 0xC
   351  00006C                     	ds	1
   352  00006D                     dequeue@idx:
   353                           	opt callstack 0
   354                           
   355                           ; 2 bytes @ 0xD
   356  00006D                     	ds	1
   357  00006E                     addTask@ptr:
   358                           	opt callstack 0
   359                           
   360                           ; 3 bytes @ 0xE
   361  00006E                     	ds	1
   362  00006F                     dequeue@temp:
   363                           	opt callstack 0
   364                           
   365                           ; 5 bytes @ 0xF
   366  00006F                     	ds	2
   367  000071                     addTask@data:
   368                           	opt callstack 0
   369                           
   370                           ; 2 bytes @ 0x11
   371  000071                     	ds	2
   372  000073                     ??_addTask:
   373                           
   374                           ; 1 bytes @ 0x13
   375  000073                     	ds	1
   376  000074                     selectReadyTask@node:
   377                           	opt callstack 0
   378                           
   379                           ; 5 bytes @ 0x14
   380  000074                     	ds	5
   381  000079                     
   382                           ; 1 bytes @ 0x19
   383  000079                     	ds	2
   384  00007B                     addTask@prev:
   385                           	opt callstack 0
   386                           
   387                           ; 2 bytes @ 0x1B
   388  00007B                     	ds	2
   389  00007D                     addTask@cur:
   390                           	opt callstack 0
   391                           
   392                           ; 2 bytes @ 0x1D
   393  00007D                     	ds	2
   394  00007F                     addTask@idx:
   395                           	opt callstack 0
   396                           
   397                           ; 1 bytes @ 0x1F
   398  00007F                     	ds	1
   399  000080                     register_timer@period:
   400                           	opt callstack 0
   401                           
   402                           ; 4 bytes @ 0x20
   403  000080                     	ds	4
   404  000084                     register_timer@delay:
   405                           	opt callstack 0
   406                           
   407                           ; 4 bytes @ 0x24
   408  000084                     	ds	4
   409  000088                     register_timer@callback:
   410                           	opt callstack 0
   411                           
   412                           ; 3 bytes @ 0x28
   413  000088                     	ds	3
   414  00008B                     register_timer@data:
   415                           	opt callstack 0
   416                           
   417                           ; 2 bytes @ 0x2B
   418  00008B                     	ds	2
   419  00008D                     
   420                           ; 1 bytes @ 0x2D
   421                           
   422                           	psect	cstackCOMRAM
   423  000001                     __pcstackCOMRAM:
   424                           	opt callstack 0
   425  000001                     ??_removeTask:
   426  000001                     ?i2___wmul:
   427                           	opt callstack 0
   428  000001                     ?i2___awmod:
   429                           	opt callstack 0
   430  000001                     i2___wmul@multiplier:
   431                           	opt callstack 0
   432  000001                     i2___awmod@dividend:
   433                           	opt callstack 0
   434                           
   435                           ; 2 bytes @ 0x0
   436  000001                     	ds	2
   437  000003                     i2___wmul@multiplicand:
   438                           	opt callstack 0
   439  000003                     i2___awmod@divisor:
   440                           	opt callstack 0
   441                           
   442                           ; 2 bytes @ 0x2
   443  000003                     	ds	2
   444  000005                     removeTask@pos:
   445                           	opt callstack 0
   446  000005                     i2___awmod@counter:
   447                           	opt callstack 0
   448  000005                     i2___wmul@product:
   449                           	opt callstack 0
   450                           
   451                           ; 2 bytes @ 0x4
   452  000005                     	ds	1
   453  000006                     removeTask@idx:
   454                           	opt callstack 0
   455  000006                     i2___awmod@sign:
   456                           	opt callstack 0
   457                           
   458                           ; 1 bytes @ 0x5
   459  000006                     	ds	1
   460  000007                     ??i2_getSizeQueue:
   461                           
   462                           ; 1 bytes @ 0x6
   463  000007                     	ds	2
   464  000009                     ??_isFullQueue:
   465                           
   466                           ; 1 bytes @ 0x8
   467  000009                     	ds	1
   468  00000A                     enqueue@ptr:
   469                           	opt callstack 0
   470                           
   471                           ; 3 bytes @ 0x9
   472  00000A                     	ds	3
   473  00000D                     enqueue@data:
   474                           	opt callstack 0
   475                           
   476                           ; 2 bytes @ 0xC
   477  00000D                     	ds	2
   478  00000F                     ??_handleListHead:
   479                           
   480                           ; 1 bytes @ 0xE
   481  00000F                     	ds	12
   482  00001B                     _handleListHead$1754:
   483                           	opt callstack 0
   484                           
   485                           ; 3 bytes @ 0x1A
   486  00001B                     	ds	3
   487  00001E                     _handleListHead$1755:
   488                           	opt callstack 0
   489                           
   490                           ; 2 bytes @ 0x1D
   491  00001E                     	ds	2
   492  000020                     _handleListHead$1756:
   493                           	opt callstack 0
   494                           
   495                           ; 2 bytes @ 0x1F
   496  000020                     	ds	2
   497  000022                     handleListHead@prev:
   498                           	opt callstack 0
   499                           
   500                           ; 2 bytes @ 0x21
   501  000022                     	ds	2
   502  000024                     handleListHead@cur:
   503                           	opt callstack 0
   504                           
   505                           ; 2 bytes @ 0x23
   506  000024                     	ds	2
   507  000026                     handleListHead@pos:
   508                           	opt callstack 0
   509                           
   510                           ; 2 bytes @ 0x25
   511  000026                     	ds	2
   512  000028                     ??_timer_interrupt:
   513                           
   514                           ; 1 bytes @ 0x27
   515  000028                     	ds	6
   516                           
   517 ;;
   518 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   519 ;;
   520 ;; *************** function _main *****************
   521 ;; Defined at:
   522 ;;		line 74 in file "main.c"
   523 ;; Parameters:    Size  Location     Type
   524 ;;		None
   525 ;; Auto vars:     Size  Location     Type
   526 ;;  idx7            1    0        unsigned char 
   527 ;;  idx6            1    0        unsigned char 
   528 ;;  idx5            1    0        unsigned char 
   529 ;;  idx4            1    0        unsigned char 
   530 ;;  idx3            1    0        unsigned char 
   531 ;;  idx2            1    0        unsigned char 
   532 ;;  idx1            1    0        unsigned char 
   533 ;;  idx0            1    0        unsigned char 
   534 ;; Return value:  Size  Location     Type
   535 ;;                  1    wreg      void 
   536 ;; Registers used:
   537 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
   538 ;; Tracked objects:
   539 ;;		On entry : 0/0
   540 ;;		On exit  : 0/0
   541 ;;		Unchanged: 0/0
   542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   544 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   546 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   547 ;;Total ram usage:        8 bytes
   548 ;; Hardware stack levels required when called:   12
   549 ;; This function calls:
   550 ;;		_dispatch
   551 ;;		_register_timer
   552 ;;		_system_initialize
   553 ;; This function is called by:
   554 ;;		Startup code after reset
   555 ;; This function uses a non-reentrant model
   556 ;;
   557                           
   558                           	psect	text0
   559  00097E                     __ptext0:
   560                           	opt callstack 0
   561  00097E                     _main:
   562                           	opt callstack 19
   563  00097E                     
   564                           ;main.c: 75:     system_initialize();
   565  00097E  EC3F  F00B         	call	_system_initialize	;wreg free
   566  000982  0EE8               	movlw	232
   567  000984  0100               	movlb	0	; () banked
   568  000986  6F80               	movwf	register_timer@period& (0+255),b
   569  000988  0E03               	movlw	3
   570  00098A  6F81               	movwf	(register_timer@period+1)& (0+255),b
   571  00098C  0E00               	movlw	0
   572  00098E  6F82               	movwf	(register_timer@period+2)& (0+255),b
   573  000990  0E00               	movlw	0
   574  000992  6F83               	movwf	(register_timer@period+3)& (0+255),b
   575  000994  0E00               	movlw	0
   576  000996  6F84               	movwf	register_timer@delay& (0+255),b
   577  000998  0E00               	movlw	0
   578  00099A  6F85               	movwf	(register_timer@delay+1)& (0+255),b
   579  00099C  0E00               	movlw	0
   580  00099E  6F86               	movwf	(register_timer@delay+2)& (0+255),b
   581  0009A0  0E00               	movlw	0
   582  0009A2  6F87               	movwf	(register_timer@delay+3)& (0+255),b
   583  0009A4  0E5E               	movlw	low _blink_LED
   584  0009A6  6F88               	movwf	register_timer@callback& (0+255),b
   585  0009A8  0E0B               	movlw	high _blink_LED
   586  0009AA  6F89               	movwf	(register_timer@callback+1)& (0+255),b
   587  0009AC  0E00               	movlw	low (_blink_LED shr (0+16))
   588  0009AE  6F8A               	movwf	(register_timer@callback+2)& (0+255),b
   589  0009B0  0E00               	movlw	0
   590  0009B2  6F8B               	movwf	register_timer@data& (0+255),b
   591  0009B4  0E00               	movlw	0
   592  0009B6  6F8C               	movwf	(register_timer@data+1)& (0+255),b
   593  0009B8  EC97  F00A         	call	_register_timer	;wreg free
   594  0009BC  0EE8               	movlw	232
   595  0009BE  0100               	movlb	0	; () banked
   596  0009C0  6F80               	movwf	register_timer@period& (0+255),b
   597  0009C2  0E03               	movlw	3
   598  0009C4  6F81               	movwf	(register_timer@period+1)& (0+255),b
   599  0009C6  0E00               	movlw	0
   600  0009C8  6F82               	movwf	(register_timer@period+2)& (0+255),b
   601  0009CA  0E00               	movlw	0
   602  0009CC  6F83               	movwf	(register_timer@period+3)& (0+255),b
   603  0009CE  0EC8               	movlw	200
   604  0009D0  6F84               	movwf	register_timer@delay& (0+255),b
   605  0009D2  0E00               	movlw	0
   606  0009D4  6F85               	movwf	(register_timer@delay+1)& (0+255),b
   607  0009D6  0E00               	movlw	0
   608  0009D8  6F86               	movwf	(register_timer@delay+2)& (0+255),b
   609  0009DA  0E00               	movlw	0
   610  0009DC  6F87               	movwf	(register_timer@delay+3)& (0+255),b
   611  0009DE  0E5E               	movlw	low _blink_LED
   612  0009E0  6F88               	movwf	register_timer@callback& (0+255),b
   613  0009E2  0E0B               	movlw	high _blink_LED
   614  0009E4  6F89               	movwf	(register_timer@callback+1)& (0+255),b
   615  0009E6  0E00               	movlw	low (_blink_LED shr (0+16))
   616  0009E8  6F8A               	movwf	(register_timer@callback+2)& (0+255),b
   617  0009EA  0E01               	movlw	1
   618  0009EC  6F8B               	movwf	register_timer@data& (0+255),b
   619  0009EE  0E00               	movlw	0
   620  0009F0  6F8C               	movwf	(register_timer@data+1)& (0+255),b
   621  0009F2  EC97  F00A         	call	_register_timer	;wreg free
   622  0009F6  0EB8               	movlw	184
   623  0009F8  0100               	movlb	0	; () banked
   624  0009FA  6F80               	movwf	register_timer@period& (0+255),b
   625  0009FC  0E0B               	movlw	11
   626  0009FE  6F81               	movwf	(register_timer@period+1)& (0+255),b
   627  000A00  0E00               	movlw	0
   628  000A02  6F82               	movwf	(register_timer@period+2)& (0+255),b
   629  000A04  0E00               	movlw	0
   630  000A06  6F83               	movwf	(register_timer@period+3)& (0+255),b
   631  000A08  0E90               	movlw	144
   632  000A0A  6F84               	movwf	register_timer@delay& (0+255),b
   633  000A0C  0E01               	movlw	1
   634  000A0E  6F85               	movwf	(register_timer@delay+1)& (0+255),b
   635  000A10  0E00               	movlw	0
   636  000A12  6F86               	movwf	(register_timer@delay+2)& (0+255),b
   637  000A14  0E00               	movlw	0
   638  000A16  6F87               	movwf	(register_timer@delay+3)& (0+255),b
   639  000A18  0E5E               	movlw	low _blink_LED
   640  000A1A  6F88               	movwf	register_timer@callback& (0+255),b
   641  000A1C  0E0B               	movlw	high _blink_LED
   642  000A1E  6F89               	movwf	(register_timer@callback+1)& (0+255),b
   643  000A20  0E00               	movlw	low (_blink_LED shr (0+16))
   644  000A22  6F8A               	movwf	(register_timer@callback+2)& (0+255),b
   645  000A24  0E02               	movlw	2
   646  000A26  6F8B               	movwf	register_timer@data& (0+255),b
   647  000A28  0E00               	movlw	0
   648  000A2A  6F8C               	movwf	(register_timer@data+1)& (0+255),b
   649  000A2C  EC97  F00A         	call	_register_timer	;wreg free
   650  000A30  0E28               	movlw	40
   651  000A32  0100               	movlb	0	; () banked
   652  000A34  6F80               	movwf	register_timer@period& (0+255),b
   653  000A36  0E23               	movlw	35
   654  000A38  6F81               	movwf	(register_timer@period+1)& (0+255),b
   655  000A3A  0E00               	movlw	0
   656  000A3C  6F82               	movwf	(register_timer@period+2)& (0+255),b
   657  000A3E  0E00               	movlw	0
   658  000A40  6F83               	movwf	(register_timer@period+3)& (0+255),b
   659  000A42  0E90               	movlw	144
   660  000A44  6F84               	movwf	register_timer@delay& (0+255),b
   661  000A46  0E01               	movlw	1
   662  000A48  6F85               	movwf	(register_timer@delay+1)& (0+255),b
   663  000A4A  0E00               	movlw	0
   664  000A4C  6F86               	movwf	(register_timer@delay+2)& (0+255),b
   665  000A4E  0E00               	movlw	0
   666  000A50  6F87               	movwf	(register_timer@delay+3)& (0+255),b
   667  000A52  0E5E               	movlw	low _blink_LED
   668  000A54  6F88               	movwf	register_timer@callback& (0+255),b
   669  000A56  0E0B               	movlw	high _blink_LED
   670  000A58  6F89               	movwf	(register_timer@callback+1)& (0+255),b
   671  000A5A  0E00               	movlw	low (_blink_LED shr (0+16))
   672  000A5C  6F8A               	movwf	(register_timer@callback+2)& (0+255),b
   673  000A5E  0E03               	movlw	3
   674  000A60  6F8B               	movwf	register_timer@data& (0+255),b
   675  000A62  0E00               	movlw	0
   676  000A64  6F8C               	movwf	(register_timer@data+1)& (0+255),b
   677  000A66  EC97  F00A         	call	_register_timer	;wreg free
   678  000A6A  0E7C               	movlw	124
   679  000A6C  0100               	movlb	0	; () banked
   680  000A6E  6F80               	movwf	register_timer@period& (0+255),b
   681  000A70  0E15               	movlw	21
   682  000A72  6F81               	movwf	(register_timer@period+1)& (0+255),b
   683  000A74  0E00               	movlw	0
   684  000A76  6F82               	movwf	(register_timer@period+2)& (0+255),b
   685  000A78  0E00               	movlw	0
   686  000A7A  6F83               	movwf	(register_timer@period+3)& (0+255),b
   687  000A7C  0E90               	movlw	144
   688  000A7E  6F84               	movwf	register_timer@delay& (0+255),b
   689  000A80  0E01               	movlw	1
   690  000A82  6F85               	movwf	(register_timer@delay+1)& (0+255),b
   691  000A84  0E00               	movlw	0
   692  000A86  6F86               	movwf	(register_timer@delay+2)& (0+255),b
   693  000A88  0E00               	movlw	0
   694  000A8A  6F87               	movwf	(register_timer@delay+3)& (0+255),b
   695  000A8C  0E5E               	movlw	low _blink_LED
   696  000A8E  6F88               	movwf	register_timer@callback& (0+255),b
   697  000A90  0E0B               	movlw	high _blink_LED
   698  000A92  6F89               	movwf	(register_timer@callback+1)& (0+255),b
   699  000A94  0E00               	movlw	low (_blink_LED shr (0+16))
   700  000A96  6F8A               	movwf	(register_timer@callback+2)& (0+255),b
   701  000A98  0E04               	movlw	4
   702  000A9A  6F8B               	movwf	register_timer@data& (0+255),b
   703  000A9C  0E00               	movlw	0
   704  000A9E  6F8C               	movwf	(register_timer@data+1)& (0+255),b
   705  000AA0  EC97  F00A         	call	_register_timer	;wreg free
   706  000AA4  0EB8               	movlw	184
   707  000AA6  0100               	movlb	0	; () banked
   708  000AA8  6F80               	movwf	register_timer@period& (0+255),b
   709  000AAA  0E0B               	movlw	11
   710  000AAC  6F81               	movwf	(register_timer@period+1)& (0+255),b
   711  000AAE  0E00               	movlw	0
   712  000AB0  6F82               	movwf	(register_timer@period+2)& (0+255),b
   713  000AB2  0E00               	movlw	0
   714  000AB4  6F83               	movwf	(register_timer@period+3)& (0+255),b
   715  000AB6  0E90               	movlw	144
   716  000AB8  6F84               	movwf	register_timer@delay& (0+255),b
   717  000ABA  0E01               	movlw	1
   718  000ABC  6F85               	movwf	(register_timer@delay+1)& (0+255),b
   719  000ABE  0E00               	movlw	0
   720  000AC0  6F86               	movwf	(register_timer@delay+2)& (0+255),b
   721  000AC2  0E00               	movlw	0
   722  000AC4  6F87               	movwf	(register_timer@delay+3)& (0+255),b
   723  000AC6  0E5E               	movlw	low _blink_LED
   724  000AC8  6F88               	movwf	register_timer@callback& (0+255),b
   725  000ACA  0E0B               	movlw	high _blink_LED
   726  000ACC  6F89               	movwf	(register_timer@callback+1)& (0+255),b
   727  000ACE  0E00               	movlw	low (_blink_LED shr (0+16))
   728  000AD0  6F8A               	movwf	(register_timer@callback+2)& (0+255),b
   729  000AD2  0E05               	movlw	5
   730  000AD4  6F8B               	movwf	register_timer@data& (0+255),b
   731  000AD6  0E00               	movlw	0
   732  000AD8  6F8C               	movwf	(register_timer@data+1)& (0+255),b
   733  000ADA  EC97  F00A         	call	_register_timer	;wreg free
   734  000ADE  0ED0               	movlw	208
   735  000AE0  0100               	movlb	0	; () banked
   736  000AE2  6F80               	movwf	register_timer@period& (0+255),b
   737  000AE4  0E07               	movlw	7
   738  000AE6  6F81               	movwf	(register_timer@period+1)& (0+255),b
   739  000AE8  0E00               	movlw	0
   740  000AEA  6F82               	movwf	(register_timer@period+2)& (0+255),b
   741  000AEC  0E00               	movlw	0
   742  000AEE  6F83               	movwf	(register_timer@period+3)& (0+255),b
   743  000AF0  0E90               	movlw	144
   744  000AF2  6F84               	movwf	register_timer@delay& (0+255),b
   745  000AF4  0E01               	movlw	1
   746  000AF6  6F85               	movwf	(register_timer@delay+1)& (0+255),b
   747  000AF8  0E00               	movlw	0
   748  000AFA  6F86               	movwf	(register_timer@delay+2)& (0+255),b
   749  000AFC  0E00               	movlw	0
   750  000AFE  6F87               	movwf	(register_timer@delay+3)& (0+255),b
   751  000B00  0E5E               	movlw	low _blink_LED
   752  000B02  6F88               	movwf	register_timer@callback& (0+255),b
   753  000B04  0E0B               	movlw	high _blink_LED
   754  000B06  6F89               	movwf	(register_timer@callback+1)& (0+255),b
   755  000B08  0E00               	movlw	low (_blink_LED shr (0+16))
   756  000B0A  6F8A               	movwf	(register_timer@callback+2)& (0+255),b
   757  000B0C  0E06               	movlw	6
   758  000B0E  6F8B               	movwf	register_timer@data& (0+255),b
   759  000B10  0E00               	movlw	0
   760  000B12  6F8C               	movwf	(register_timer@data+1)& (0+255),b
   761  000B14  EC97  F00A         	call	_register_timer	;wreg free
   762  000B18  0ED0               	movlw	208
   763  000B1A  0100               	movlb	0	; () banked
   764  000B1C  6F80               	movwf	register_timer@period& (0+255),b
   765  000B1E  0E07               	movlw	7
   766  000B20  6F81               	movwf	(register_timer@period+1)& (0+255),b
   767  000B22  0E00               	movlw	0
   768  000B24  6F82               	movwf	(register_timer@period+2)& (0+255),b
   769  000B26  0E00               	movlw	0
   770  000B28  6F83               	movwf	(register_timer@period+3)& (0+255),b
   771  000B2A  0E90               	movlw	144
   772  000B2C  6F84               	movwf	register_timer@delay& (0+255),b
   773  000B2E  0E01               	movlw	1
   774  000B30  6F85               	movwf	(register_timer@delay+1)& (0+255),b
   775  000B32  0E00               	movlw	0
   776  000B34  6F86               	movwf	(register_timer@delay+2)& (0+255),b
   777  000B36  0E00               	movlw	0
   778  000B38  6F87               	movwf	(register_timer@delay+3)& (0+255),b
   779  000B3A  0E5E               	movlw	low _blink_LED
   780  000B3C  6F88               	movwf	register_timer@callback& (0+255),b
   781  000B3E  0E0B               	movlw	high _blink_LED
   782  000B40  6F89               	movwf	(register_timer@callback+1)& (0+255),b
   783  000B42  0E00               	movlw	low (_blink_LED shr (0+16))
   784  000B44  6F8A               	movwf	(register_timer@callback+2)& (0+255),b
   785  000B46  0E07               	movlw	7
   786  000B48  6F8B               	movwf	register_timer@data& (0+255),b
   787  000B4A  0E00               	movlw	0
   788  000B4C  6F8C               	movwf	(register_timer@data+1)& (0+255),b
   789  000B4E  EC97  F00A         	call	_register_timer	;wreg free
   790  000B52                     l2625:
   791                           
   792                           ;main.c: 92:         dispatch();
   793  000B52  EC6F  F00B         	call	_dispatch	;wreg free
   794  000B56  EFA9  F005         	goto	l2625
   795  000B5A  EF07  F000         	goto	start
   796  000B5E                     __end_of_main:
   797                           	opt callstack 0
   798                           
   799 ;; *************** function _system_initialize *****************
   800 ;; Defined at:
   801 ;;		line 30 in file "mcc.c"
   802 ;; Parameters:    Size  Location     Type
   803 ;;		None
   804 ;; Auto vars:     Size  Location     Type
   805 ;;		None
   806 ;; Return value:  Size  Location     Type
   807 ;;                  1    wreg      void 
   808 ;; Registers used:
   809 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   810 ;; Tracked objects:
   811 ;;		On entry : 0/0
   812 ;;		On exit  : 0/0
   813 ;;		Unchanged: 0/0
   814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   819 ;;Total ram usage:        0 bytes
   820 ;; Hardware stack levels used:    1
   821 ;; Hardware stack levels required when called:   10
   822 ;; This function calls:
   823 ;;		_interrupt_initialize
   824 ;;		_osc_initialize
   825 ;;		_pin_initialize
   826 ;;		_start_timer
   827 ;; This function is called by:
   828 ;;		_main
   829 ;; This function uses a non-reentrant model
   830 ;;
   831                           
   832                           	psect	text1
   833  00167E                     __ptext1:
   834                           	opt callstack 0
   835  00167E                     _system_initialize:
   836                           	opt callstack 20
   837  00167E                     
   838                           ;mcc.c: 31:     osc_initialize();
   839  00167E  EC69  F00B         	call	_osc_initialize	;wreg free
   840                           
   841                           ;mcc.c: 32:     pin_initialize();
   842  001682  EC1F  F00B         	call	_pin_initialize	;wreg free
   843  001686                     
   844                           ;mcc.c: 33:     interrupt_initialize();
   845  001686  EC6C  F00B         	call	_interrupt_initialize	;wreg free
   846  00168A                     
   847                           ;mcc.c: 34:     start_timer(0);
   848  00168A  0E00               	movlw	0
   849  00168C  ECA7  F009         	call	_start_timer
   850  001690                     
   851                           ;mcc.c: 35:     start_timer(1);
   852  001690  0E01               	movlw	1
   853  001692  ECA7  F009         	call	_start_timer
   854  001696  0012               	return		;funcret
   855  001698                     __end_of_system_initialize:
   856                           	opt callstack 0
   857                           
   858 ;; *************** function _start_timer *****************
   859 ;; Defined at:
   860 ;;		line 5 in file "clock.c"
   861 ;; Parameters:    Size  Location     Type
   862 ;;  timer_vaddr     1    wreg     unsigned char 
   863 ;; Auto vars:     Size  Location     Type
   864 ;;  timer_vaddr     1   12[BANK0 ] unsigned char 
   865 ;; Return value:  Size  Location     Type
   866 ;;                  2   93[None  ] int 
   867 ;; Registers used:
   868 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   869 ;; Tracked objects:
   870 ;;		On entry : 0/0
   871 ;;		On exit  : 0/0
   872 ;;		Unchanged: 0/0
   873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   875 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   876 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   877 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   878 ;;Total ram usage:        3 bytes
   879 ;; Hardware stack levels used:    1
   880 ;; Hardware stack levels required when called:    9
   881 ;; This function calls:
   882 ;;		_initializeTaskList
   883 ;; This function is called by:
   884 ;;		_system_initialize
   885 ;; This function uses a non-reentrant model
   886 ;;
   887                           
   888                           	psect	text2
   889  00134E                     __ptext2:
   890                           	opt callstack 0
   891  00134E                     _start_timer:
   892                           	opt callstack 20
   893                           
   894                           ;incstack = 0
   895                           ;start_timer@timer_vaddr stored from wreg
   896  00134E  0100               	movlb	0	; () banked
   897  001350  6F6C               	movwf	start_timer@timer_vaddr& (0+255),b
   898  001352                     
   899                           ;clock.c: 6:     if(timer_vaddr > 4)
   900  001352  0E04               	movlw	4
   901  001354  0100               	movlb	0	; () banked
   902  001356  656C               	cpfsgt	start_timer@timer_vaddr& (0+255),b
   903  001358  EFB0  F009         	goto	u1821
   904  00135C  EFB2  F009         	goto	u1820
   905  001360                     u1821:
   906  001360  EFD0  F009         	goto	l2505
   907  001364                     u1820:
   908  001364  EFF1  F009         	goto	l308
   909  001368                     l310:
   910                           
   911                           ; BSR set to: 0
   912                           ;clock.c: 10:             INTCONbits.TMR0IE = 1;
   913  001368  8AF2               	bsf	242,5,c	;volatile
   914                           
   915                           ;clock.c: 11:             INTCONbits.TMR0IF = 0;
   916  00136A  94F2               	bcf	242,2,c	;volatile
   917  00136C                     
   918                           ; BSR set to: 0
   919                           ;clock.c: 12:             T0CON = 0xC3;
   920  00136C  0EC3               	movlw	195
   921  00136E  6ED5               	movwf	213,c	;volatile
   922                           
   923                           ;clock.c: 13:             TMR0L = 131;
   924  001370  0E83               	movlw	131
   925  001372  6ED6               	movwf	214,c	;volatile
   926                           
   927                           ;clock.c: 14:             time_ms = 0;
   928  001374  0E00               	movlw	0
   929  001376  6F91               	movwf	_time_ms& (0+255),b
   930  001378  0E00               	movlw	0
   931  00137A  6F92               	movwf	(_time_ms+1)& (0+255),b
   932  00137C  0E00               	movlw	0
   933  00137E  6F93               	movwf	(_time_ms+2)& (0+255),b
   934  001380  0E00               	movlw	0
   935  001382  6F94               	movwf	(_time_ms+3)& (0+255),b
   936                           
   937                           ;clock.c: 15:             break;
   938  001384  EFF1  F009         	goto	l308
   939  001388                     l2491:
   940                           
   941                           ; BSR set to: 0
   942                           ;clock.c: 17:             initializeTaskList();
   943  001388  EC6F  F007         	call	_initializeTaskList	;wreg free
   944  00138C                     
   945                           ;clock.c: 18:             PIE1bits.TMR1IE = 1;
   946  00138C  809D               	bsf	157,0,c	;volatile
   947  00138E                     
   948                           ;clock.c: 19:             PIR1bits.TMR1IF = 0;
   949  00138E  909E               	bcf	158,0,c	;volatile
   950  001390                     
   951                           ;clock.c: 20:             T1CON = 0b10000001;
   952  001390  0E81               	movlw	129
   953  001392  6ECD               	movwf	205,c	;volatile
   954  001394                     
   955                           ;clock.c: 21:             TMR1H = 0xB1;
   956  001394  0EB1               	movlw	177
   957  001396  6ECF               	movwf	207,c	;volatile
   958  001398                     
   959                           ;clock.c: 22:             TMR1L = 0xE0;
   960  001398  0EE0               	movlw	224
   961  00139A  6ECE               	movwf	206,c	;volatile
   962                           
   963                           ;clock.c: 23:             break;
   964  00139C  EFF1  F009         	goto	l308
   965  0013A0                     l2505:
   966                           
   967                           ; BSR set to: 0
   968  0013A0  516C               	movf	start_timer@timer_vaddr& (0+255),w,b
   969  0013A2  6F6A               	movwf	??_start_timer& (0+255),b
   970  0013A4  6B6B               	clrf	(??_start_timer+1)& (0+255),b
   971                           
   972                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   973                           ; Switch size 1, requested type "simple"
   974                           ; Number of cases is 1, Range of values is 0 to 0
   975                           ; switch strategies available:
   976                           ; Name         Instructions Cycles
   977                           ; simple_byte            4     3 (average)
   978                           ;	Chosen strategy is simple_byte
   979  0013A6  516B               	movf	(??_start_timer+1)& (0+255),w,b
   980  0013A8  0A00               	xorlw	0	; case 0
   981  0013AA  B4D8               	btfsc	status,2,c
   982  0013AC  EFDA  F009         	goto	l2677
   983  0013B0  EFF1  F009         	goto	l308
   984  0013B4                     l2677:
   985                           
   986                           ; BSR set to: 0
   987                           ; Switch size 1, requested type "simple"
   988                           ; Number of cases is 5, Range of values is 0 to 4
   989                           ; switch strategies available:
   990                           ; Name         Instructions Cycles
   991                           ; simple_byte           16     9 (average)
   992                           ;	Chosen strategy is simple_byte
   993  0013B4  516A               	movf	??_start_timer& (0+255),w,b
   994  0013B6  0A00               	xorlw	0	; case 0
   995  0013B8  B4D8               	btfsc	status,2,c
   996  0013BA  EFB4  F009         	goto	l310
   997  0013BE  0A01               	xorlw	1	; case 1
   998  0013C0  B4D8               	btfsc	status,2,c
   999  0013C2  EFC4  F009         	goto	l2491
  1000  0013C6  0A03               	xorlw	3	; case 2
  1001  0013C8  B4D8               	btfsc	status,2,c
  1002  0013CA  EFF1  F009         	goto	l308
  1003  0013CE  0A01               	xorlw	1	; case 3
  1004  0013D0  B4D8               	btfsc	status,2,c
  1005  0013D2  EFF1  F009         	goto	l308
  1006  0013D6  0A07               	xorlw	7	; case 4
  1007  0013D8  B4D8               	btfsc	status,2,c
  1008  0013DA  EFF1  F009         	goto	l308
  1009  0013DE  EFF1  F009         	goto	l308
  1010  0013E2                     l308:
  1011  0013E2  0012               	return		;funcret
  1012  0013E4                     __end_of_start_timer:
  1013                           	opt callstack 0
  1014                           
  1015 ;; *************** function _initializeTaskList *****************
  1016 ;; Defined at:
  1017 ;;		line 11 in file "task.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;		None
  1020 ;; Auto vars:     Size  Location     Type
  1021 ;;  i               2    8[BANK0 ] int 
  1022 ;; Return value:  Size  Location     Type
  1023 ;;                  1    wreg      void 
  1024 ;; Registers used:
  1025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1032 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1034 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1035 ;;Total ram usage:        2 bytes
  1036 ;; Hardware stack levels used:    1
  1037 ;; Hardware stack levels required when called:    8
  1038 ;; This function calls:
  1039 ;;		___wmul
  1040 ;;		_queueInitialize
  1041 ;; This function is called by:
  1042 ;;		_start_timer
  1043 ;; This function uses a non-reentrant model
  1044 ;;
  1045                           
  1046                           	psect	text3
  1047  000EDE                     __ptext3:
  1048                           	opt callstack 0
  1049  000EDE                     _initializeTaskList:
  1050                           	opt callstack 20
  1051  000EDE                     
  1052                           ;task.c: 12:     queueInitialize();
  1053  000EDE  ECF2  F009         	call	_queueInitialize	;wreg free
  1054  000EE2                     
  1055                           ;task.c: 13:     for(int i = 0; i < 20; i++) {
  1056  000EE2  0E00               	movlw	0
  1057  000EE4  0100               	movlb	0	; () banked
  1058  000EE6  6F69               	movwf	(initializeTaskList@i+1)& (0+255),b
  1059  000EE8  0E00               	movlw	0
  1060  000EEA  6F68               	movwf	initializeTaskList@i& (0+255),b
  1061  000EEC                     l2469:
  1062                           
  1063                           ; BSR set to: 0
  1064                           ;task.c: 14:         task_list[i].delay_t = 0;
  1065  000EEC  C068  F060         	movff	initializeTaskList@i,___wmul@multiplier
  1066  000EF0  C069  F061         	movff	initializeTaskList@i+1,___wmul@multiplier+1
  1067  000EF4  0E00               	movlw	0
  1068  000EF6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1069  000EF8  0E0F               	movlw	15
  1070  000EFA  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1071  000EFC  ECE4  F00A         	call	___wmul	;wreg free
  1072  000F00  0E64               	movlw	low _task_list
  1073  000F02  0100               	movlb	0	; () banked
  1074  000F04  2560               	addwf	?___wmul& (0+255),w,b
  1075  000F06  6ED9               	movwf	fsr2l,c
  1076  000F08  0E01               	movlw	high _task_list
  1077  000F0A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1078  000F0C  6EDA               	movwf	fsr2h,c
  1079  000F0E  6ADE               	clrf	postinc2,c
  1080  000F10  6ADE               	clrf	postinc2,c
  1081  000F12  6ADE               	clrf	postinc2,c
  1082  000F14  6ADD               	clrf	postdec2,c
  1083                           
  1084                           ;task.c: 15:         task_list[i].period_t = 0;
  1085  000F16  C068  F060         	movff	initializeTaskList@i,___wmul@multiplier
  1086  000F1A  C069  F061         	movff	initializeTaskList@i+1,___wmul@multiplier+1
  1087  000F1E  0E00               	movlw	0
  1088  000F20  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1089  000F22  0E0F               	movlw	15
  1090  000F24  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1091  000F26  ECE4  F00A         	call	___wmul	;wreg free
  1092  000F2A  0E68               	movlw	low (_task_list+4)
  1093  000F2C  0100               	movlb	0	; () banked
  1094  000F2E  2560               	addwf	?___wmul& (0+255),w,b
  1095  000F30  6ED9               	movwf	fsr2l,c
  1096  000F32  0E01               	movlw	high (_task_list+4)
  1097  000F34  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1098  000F36  6EDA               	movwf	fsr2h,c
  1099  000F38  6ADE               	clrf	postinc2,c
  1100  000F3A  6ADE               	clrf	postinc2,c
  1101  000F3C  6ADE               	clrf	postinc2,c
  1102  000F3E  6ADD               	clrf	postdec2,c
  1103                           
  1104                           ;task.c: 16:         task_list[i].func_ptr = ((void*)0);
  1105  000F40  C068  F060         	movff	initializeTaskList@i,___wmul@multiplier
  1106  000F44  C069  F061         	movff	initializeTaskList@i+1,___wmul@multiplier+1
  1107  000F48  0E00               	movlw	0
  1108  000F4A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1109  000F4C  0E0F               	movlw	15
  1110  000F4E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1111  000F50  ECE4  F00A         	call	___wmul	;wreg free
  1112  000F54  0E6C               	movlw	low (_task_list+8)
  1113  000F56  0100               	movlb	0	; () banked
  1114  000F58  2560               	addwf	?___wmul& (0+255),w,b
  1115  000F5A  6ED9               	movwf	fsr2l,c
  1116  000F5C  0E01               	movlw	high (_task_list+8)
  1117  000F5E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1118  000F60  6EDA               	movwf	fsr2h,c
  1119  000F62  0E00               	movlw	0
  1120  000F64  6EDE               	movwf	postinc2,c
  1121  000F66  0E00               	movlw	0
  1122  000F68  6EDE               	movwf	postinc2,c
  1123  000F6A  0E00               	movlw	0
  1124  000F6C  6EDE               	movwf	postinc2,c
  1125                           
  1126                           ;task.c: 17:         task_list[i].data_p = ((void*)0);
  1127  000F6E  C068  F060         	movff	initializeTaskList@i,___wmul@multiplier
  1128  000F72  C069  F061         	movff	initializeTaskList@i+1,___wmul@multiplier+1
  1129  000F76  0E00               	movlw	0
  1130  000F78  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1131  000F7A  0E0F               	movlw	15
  1132  000F7C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1133  000F7E  ECE4  F00A         	call	___wmul	;wreg free
  1134  000F82  0E71               	movlw	low (_task_list+13)
  1135  000F84  0100               	movlb	0	; () banked
  1136  000F86  2560               	addwf	?___wmul& (0+255),w,b
  1137  000F88  6ED9               	movwf	fsr2l,c
  1138  000F8A  0E01               	movlw	high (_task_list+13)
  1139  000F8C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1140  000F8E  6EDA               	movwf	fsr2h,c
  1141  000F90  0E00               	movlw	0
  1142  000F92  6EDE               	movwf	postinc2,c
  1143  000F94  0E00               	movlw	0
  1144  000F96  6EDD               	movwf	postdec2,c
  1145                           
  1146                           ;task.c: 18:         task_list[i].next = 105;
  1147  000F98  C068  F060         	movff	initializeTaskList@i,___wmul@multiplier
  1148  000F9C  C069  F061         	movff	initializeTaskList@i+1,___wmul@multiplier+1
  1149  000FA0  0E00               	movlw	0
  1150  000FA2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1151  000FA4  0E0F               	movlw	15
  1152  000FA6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1153  000FA8  ECE4  F00A         	call	___wmul	;wreg free
  1154  000FAC  0E6F               	movlw	low (_task_list+11)
  1155  000FAE  0100               	movlb	0	; () banked
  1156  000FB0  2560               	addwf	?___wmul& (0+255),w,b
  1157  000FB2  6ED9               	movwf	fsr2l,c
  1158  000FB4  0E01               	movlw	high (_task_list+11)
  1159  000FB6  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1160  000FB8  6EDA               	movwf	fsr2h,c
  1161  000FBA  0E69               	movlw	105
  1162  000FBC  6EDE               	movwf	postinc2,c
  1163  000FBE  0E00               	movlw	0
  1164  000FC0  6EDD               	movwf	postdec2,c
  1165  000FC2                     
  1166                           ; BSR set to: 0
  1167                           ;task.c: 19:     }
  1168  000FC2  4B68               	infsnz	initializeTaskList@i& (0+255),f,b
  1169  000FC4  2B69               	incf	(initializeTaskList@i+1)& (0+255),f,b
  1170  000FC6                     
  1171                           ; BSR set to: 0
  1172  000FC6  BF69               	btfsc	(initializeTaskList@i+1)& (0+255),7,b
  1173  000FC8  EFEF  F007         	goto	u1811
  1174  000FCC  5169               	movf	(initializeTaskList@i+1)& (0+255),w,b
  1175  000FCE  E109               	bnz	u1810
  1176  000FD0  0E14               	movlw	20
  1177  000FD2  5D68               	subwf	initializeTaskList@i& (0+255),w,b
  1178  000FD4  A0D8               	btfss	status,0,c
  1179  000FD6  EFEF  F007         	goto	u1811
  1180  000FDA  EFF1  F007         	goto	u1810
  1181  000FDE                     u1811:
  1182  000FDE  EF76  F007         	goto	l2469
  1183  000FE2                     u1810:
  1184  000FE2                     
  1185                           ; BSR set to: 0
  1186                           ;task.c: 20:     num_task = 0;
  1187  000FE2  0E00               	movlw	0
  1188  000FE4  6F97               	movwf	_num_task& (0+255),b
  1189                           
  1190                           ;task.c: 21:     head = 105;
  1191  000FE6  0E00               	movlw	0
  1192  000FE8  6F96               	movwf	(_head+1)& (0+255),b
  1193  000FEA  0E69               	movlw	105
  1194  000FEC  6F95               	movwf	_head& (0+255),b
  1195  000FEE                     
  1196                           ; BSR set to: 0
  1197  000FEE  0012               	return		;funcret
  1198  000FF0                     __end_of_initializeTaskList:
  1199                           	opt callstack 0
  1200                           
  1201 ;; *************** function _queueInitialize *****************
  1202 ;; Defined at:
  1203 ;;		line 3 in file "ready_queue.c"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;		None
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;  i               2    6[BANK0 ] int 
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      void 
  1210 ;; Registers used:
  1211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1218 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1220 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1221 ;;Total ram usage:        2 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    7
  1224 ;; This function calls:
  1225 ;;		___wmul
  1226 ;; This function is called by:
  1227 ;;		_initializeTaskList
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           	psect	text4
  1232  0013E4                     __ptext4:
  1233                           	opt callstack 0
  1234  0013E4                     _queueInitialize:
  1235                           	opt callstack 20
  1236  0013E4                     
  1237                           ;ready_queue.c: 4:     for(int i = 0; i< 20; i++) {
  1238  0013E4  0E00               	movlw	0
  1239  0013E6  0100               	movlb	0	; () banked
  1240  0013E8  6F67               	movwf	(queueInitialize@i+1)& (0+255),b
  1241  0013EA  0E00               	movlw	0
  1242  0013EC  6F66               	movwf	queueInitialize@i& (0+255),b
  1243  0013EE                     l2397:
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;ready_queue.c: 5:         ready_queue[i].data_p = ((void*)0);
  1247  0013EE  C066  F060         	movff	queueInitialize@i,___wmul@multiplier
  1248  0013F2  C067  F061         	movff	queueInitialize@i+1,___wmul@multiplier+1
  1249  0013F6  0E00               	movlw	0
  1250  0013F8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1251  0013FA  0E05               	movlw	5
  1252  0013FC  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1253  0013FE  ECE4  F00A         	call	___wmul	;wreg free
  1254  001402  0E03               	movlw	low (_ready_queue+3)
  1255  001404  0100               	movlb	0	; () banked
  1256  001406  2560               	addwf	?___wmul& (0+255),w,b
  1257  001408  6ED9               	movwf	fsr2l,c
  1258  00140A  0E01               	movlw	high (_ready_queue+3)
  1259  00140C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1260  00140E  6EDA               	movwf	fsr2h,c
  1261  001410  0E00               	movlw	0
  1262  001412  6EDE               	movwf	postinc2,c
  1263  001414  0E00               	movlw	0
  1264  001416  6EDD               	movwf	postdec2,c
  1265                           
  1266                           ;ready_queue.c: 6:         ready_queue[i].func_ptr = ((void*)0);
  1267  001418  C066  F060         	movff	queueInitialize@i,___wmul@multiplier
  1268  00141C  C067  F061         	movff	queueInitialize@i+1,___wmul@multiplier+1
  1269  001420  0E00               	movlw	0
  1270  001422  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1271  001424  0E05               	movlw	5
  1272  001426  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1273  001428  ECE4  F00A         	call	___wmul	;wreg free
  1274  00142C  0E00               	movlw	low _ready_queue
  1275  00142E  0100               	movlb	0	; () banked
  1276  001430  2560               	addwf	?___wmul& (0+255),w,b
  1277  001432  6ED9               	movwf	fsr2l,c
  1278  001434  0E01               	movlw	high _ready_queue
  1279  001436  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1280  001438  6EDA               	movwf	fsr2h,c
  1281  00143A  0E00               	movlw	0
  1282  00143C  6EDE               	movwf	postinc2,c
  1283  00143E  0E00               	movlw	0
  1284  001440  6EDE               	movwf	postinc2,c
  1285  001442  0E00               	movlw	0
  1286  001444  6EDE               	movwf	postinc2,c
  1287  001446                     
  1288                           ; BSR set to: 0
  1289                           ;ready_queue.c: 7:     }
  1290  001446  4B66               	infsnz	queueInitialize@i& (0+255),f,b
  1291  001448  2B67               	incf	(queueInitialize@i+1)& (0+255),f,b
  1292  00144A                     
  1293                           ; BSR set to: 0
  1294  00144A  BF67               	btfsc	(queueInitialize@i+1)& (0+255),7,b
  1295  00144C  EF31  F00A         	goto	u1701
  1296  001450  5167               	movf	(queueInitialize@i+1)& (0+255),w,b
  1297  001452  E109               	bnz	u1700
  1298  001454  0E14               	movlw	20
  1299  001456  5D66               	subwf	queueInitialize@i& (0+255),w,b
  1300  001458  A0D8               	btfss	status,0,c
  1301  00145A  EF31  F00A         	goto	u1701
  1302  00145E  EF33  F00A         	goto	u1700
  1303  001462                     u1701:
  1304  001462  EFF7  F009         	goto	l2397
  1305  001466                     u1700:
  1306  001466                     
  1307                           ; BSR set to: 0
  1308  001466  0012               	return		;funcret
  1309  001468                     __end_of_queueInitialize:
  1310                           	opt callstack 0
  1311                           
  1312 ;; *************** function _pin_initialize *****************
  1313 ;; Defined at:
  1314 ;;		line 7 in file "mcc.c"
  1315 ;; Parameters:    Size  Location     Type
  1316 ;;		None
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;		None
  1319 ;; Return value:  Size  Location     Type
  1320 ;;                  1    wreg      void 
  1321 ;; Registers used:
  1322 ;;		wreg, status,2
  1323 ;; Tracked objects:
  1324 ;;		On entry : 0/0
  1325 ;;		On exit  : 0/0
  1326 ;;		Unchanged: 0/0
  1327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1332 ;;Total ram usage:        0 bytes
  1333 ;; Hardware stack levels used:    1
  1334 ;; Hardware stack levels required when called:    6
  1335 ;; This function calls:
  1336 ;;		Nothing
  1337 ;; This function is called by:
  1338 ;;		_system_initialize
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           	psect	text5
  1343  00163E                     __ptext5:
  1344                           	opt callstack 0
  1345  00163E                     _pin_initialize:
  1346                           	opt callstack 23
  1347  00163E                     
  1348                           ;mcc.c: 8:     LATC = 0x00;
  1349  00163E  0E00               	movlw	0
  1350  001640  6E8B               	movwf	139,c	;volatile
  1351                           
  1352                           ;mcc.c: 9:     TRISC = 0xD7;
  1353  001642  0ED7               	movlw	215
  1354  001644  6E94               	movwf	148,c	;volatile
  1355                           
  1356                           ;mcc.c: 10:     ADCON1 = 0b00001111;
  1357  001646  0E0F               	movlw	15
  1358  001648  6EC1               	movwf	193,c	;volatile
  1359                           
  1360                           ;mcc.c: 13:     LATD = 0x00;
  1361  00164A  0E00               	movlw	0
  1362  00164C  6E8C               	movwf	140,c	;volatile
  1363                           
  1364                           ;mcc.c: 14:     TRISD = 0x00;
  1365  00164E  0E00               	movlw	0
  1366  001650  6E95               	movwf	149,c	;volatile
  1367                           
  1368                           ;mcc.c: 16:     LATA = 0x00;
  1369  001652  0E00               	movlw	0
  1370  001654  6E89               	movwf	137,c	;volatile
  1371                           
  1372                           ;mcc.c: 17:     TRISA = 0xF3;
  1373  001656  0EF3               	movlw	243
  1374  001658  6E92               	movwf	146,c	;volatile
  1375                           
  1376                           ;mcc.c: 20:     LATB = 0x00;
  1377  00165A  0E00               	movlw	0
  1378  00165C  6E8A               	movwf	138,c	;volatile
  1379  00165E                     
  1380                           ;mcc.c: 21:     TRISB = 0xFF;
  1381  00165E  6893               	setf	147,c	;volatile
  1382  001660  0012               	return		;funcret
  1383  001662                     __end_of_pin_initialize:
  1384                           	opt callstack 0
  1385                           
  1386 ;; *************** function _osc_initialize *****************
  1387 ;; Defined at:
  1388 ;;		line 3 in file "mcc.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;		None
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;		None
  1393 ;; Return value:  Size  Location     Type
  1394 ;;                  1    wreg      void 
  1395 ;; Registers used:
  1396 ;;		wreg, status,2
  1397 ;; Tracked objects:
  1398 ;;		On entry : 0/0
  1399 ;;		On exit  : 0/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1406 ;;Total ram usage:        0 bytes
  1407 ;; Hardware stack levels used:    1
  1408 ;; Hardware stack levels required when called:    6
  1409 ;; This function calls:
  1410 ;;		Nothing
  1411 ;; This function is called by:
  1412 ;;		_system_initialize
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           	psect	text6
  1417  0016D2                     __ptext6:
  1418                           	opt callstack 0
  1419  0016D2                     _osc_initialize:
  1420                           	opt callstack 23
  1421  0016D2                     
  1422                           ;mcc.c: 4:     OSCCON = 0x70;
  1423  0016D2  0E70               	movlw	112
  1424  0016D4  6ED3               	movwf	211,c	;volatile
  1425  0016D6  0012               	return		;funcret
  1426  0016D8                     __end_of_osc_initialize:
  1427                           	opt callstack 0
  1428                           
  1429 ;; *************** function _interrupt_initialize *****************
  1430 ;; Defined at:
  1431 ;;		line 25 in file "mcc.c"
  1432 ;; Parameters:    Size  Location     Type
  1433 ;;		None
  1434 ;; Auto vars:     Size  Location     Type
  1435 ;;		None
  1436 ;; Return value:  Size  Location     Type
  1437 ;;                  1    wreg      void 
  1438 ;; Registers used:
  1439 ;;		None
  1440 ;; Tracked objects:
  1441 ;;		On entry : 0/0
  1442 ;;		On exit  : 0/0
  1443 ;;		Unchanged: 0/0
  1444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1449 ;;Total ram usage:        0 bytes
  1450 ;; Hardware stack levels used:    1
  1451 ;; Hardware stack levels required when called:    6
  1452 ;; This function calls:
  1453 ;;		Nothing
  1454 ;; This function is called by:
  1455 ;;		_system_initialize
  1456 ;; This function uses a non-reentrant model
  1457 ;;
  1458                           
  1459                           	psect	text7
  1460  0016D8                     __ptext7:
  1461                           	opt callstack 0
  1462  0016D8                     _interrupt_initialize:
  1463                           	opt callstack 23
  1464  0016D8                     
  1465                           ;mcc.c: 26:     INTCONbits.GIE = 1;
  1466  0016D8  8EF2               	bsf	242,7,c	;volatile
  1467                           
  1468                           ;mcc.c: 27:     INTCONbits.PEIE = 1;
  1469  0016DA  8CF2               	bsf	242,6,c	;volatile
  1470  0016DC  0012               	return		;funcret
  1471  0016DE                     __end_of_interrupt_initialize:
  1472                           	opt callstack 0
  1473                           
  1474 ;; *************** function _register_timer *****************
  1475 ;; Defined at:
  1476 ;;		line 38 in file "clock.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;  period          4   32[BANK0 ] unsigned long 
  1479 ;;  delay           4   36[BANK0 ] unsigned long 
  1480 ;;  callback        3   40[BANK0 ] PTR FTN()void 
  1481 ;;		 -> blink_LED(1), 
  1482 ;;  data            2   43[BANK0 ] PTR void 
  1483 ;;		 -> RAM(3935), NULL(0), 
  1484 ;; Auto vars:     Size  Location     Type
  1485 ;;		None
  1486 ;; Return value:  Size  Location     Type
  1487 ;;                  1    wreg      unsigned char 
  1488 ;; Registers used:
  1489 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1490 ;; Tracked objects:
  1491 ;;		On entry : 0/0
  1492 ;;		On exit  : 0/0
  1493 ;;		Unchanged: 0/0
  1494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1495 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1498 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1499 ;;Total ram usage:       13 bytes
  1500 ;; Hardware stack levels used:    1
  1501 ;; Hardware stack levels required when called:    8
  1502 ;; This function calls:
  1503 ;;		_addTask
  1504 ;; This function is called by:
  1505 ;;		_main
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508                           
  1509                           	psect	text8
  1510  00152E                     __ptext8:
  1511                           	opt callstack 0
  1512  00152E                     _register_timer:
  1513                           	opt callstack 22
  1514  00152E                     
  1515                           ;clock.c: 39:     return addTask(period, delay, callback, data);
  1516  00152E  C080  F066         	movff	register_timer@period,addTask@period
  1517  001532  C081  F067         	movff	register_timer@period+1,addTask@period+1
  1518  001536  C082  F068         	movff	register_timer@period+2,addTask@period+2
  1519  00153A  C083  F069         	movff	register_timer@period+3,addTask@period+3
  1520  00153E  C084  F06A         	movff	register_timer@delay,addTask@delay
  1521  001542  C085  F06B         	movff	register_timer@delay+1,addTask@delay+1
  1522  001546  C086  F06C         	movff	register_timer@delay+2,addTask@delay+2
  1523  00154A  C087  F06D         	movff	register_timer@delay+3,addTask@delay+3
  1524  00154E  C088  F06E         	movff	register_timer@callback,addTask@ptr
  1525  001552  C089  F06F         	movff	register_timer@callback+1,addTask@ptr+1
  1526  001556  C08A  F070         	movff	register_timer@callback+2,addTask@ptr+2
  1527  00155A  C08B  F071         	movff	register_timer@data,addTask@data
  1528  00155E  C08C  F072         	movff	register_timer@data+1,addTask@data+1
  1529  001562  ECB1  F002         	call	_addTask	;wreg free
  1530  001566  0012               	return		;funcret
  1531  001568                     __end_of_register_timer:
  1532                           	opt callstack 0
  1533                           
  1534 ;; *************** function _addTask *****************
  1535 ;; Defined at:
  1536 ;;		line 24 in file "task.c"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;  period          4    6[BANK0 ] unsigned long 
  1539 ;;  delay           4   10[BANK0 ] unsigned long 
  1540 ;;  ptr             3   14[BANK0 ] PTR FTN()void 
  1541 ;;		 -> blink_LED(1), 
  1542 ;;  data            2   17[BANK0 ] PTR void 
  1543 ;;		 -> RAM(3935), NULL(0), 
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;  cur             2   29[BANK0 ] int 
  1546 ;;  prev            2   27[BANK0 ] int 
  1547 ;;  idx             1   31[BANK0 ] unsigned char 
  1548 ;; Return value:  Size  Location     Type
  1549 ;;                  1    wreg      unsigned char 
  1550 ;; Registers used:
  1551 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1552 ;; Tracked objects:
  1553 ;;		On entry : 0/0
  1554 ;;		On exit  : 0/0
  1555 ;;		Unchanged: 0/0
  1556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1557 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1558 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1559 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1560 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1561 ;;Total ram usage:       26 bytes
  1562 ;; Hardware stack levels used:    1
  1563 ;; Hardware stack levels required when called:    7
  1564 ;; This function calls:
  1565 ;;		___wmul
  1566 ;;		_isFullList
  1567 ;; This function is called by:
  1568 ;;		_register_timer
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           	psect	text9
  1573  000562                     __ptext9:
  1574                           	opt callstack 0
  1575  000562                     _addTask:
  1576                           	opt callstack 22
  1577  000562                     
  1578                           ;task.c: 25:     if(isFullList()) {
  1579  000562  EC4C  F00B         	call	_isFullList	;wreg free
  1580  000566  0900               	iorlw	0
  1581  000568  B4D8               	btfsc	status,2,c
  1582  00056A  EFB9  F002         	goto	u1831
  1583  00056E  EFBB  F002         	goto	u1830
  1584  000572                     u1831:
  1585  000572  EFBE  F002         	goto	l2519
  1586  000576                     u1830:
  1587  000576                     l2515:
  1588                           
  1589                           ;task.c: 26:         return 109;
  1590  000576  0E6D               	movlw	109
  1591  000578  EFBE  F004         	goto	l202
  1592  00057C                     l2519:
  1593                           
  1594                           ;task.c: 30:     char idx;;task.c: 31:     for(idx = 0; idx < 20; idx++) {
  1595  00057C  0E00               	movlw	0
  1596  00057E  0100               	movlb	0	; () banked
  1597  000580  6F7F               	movwf	addTask@idx& (0+255),b
  1598  000582                     l2525:
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;task.c: 32:         if(task_list[idx].func_ptr == ((void*)0))
  1602  000582  517F               	movf	addTask@idx& (0+255),w,b
  1603  000584  0D0F               	mullw	15
  1604  000586  0E6C               	movlw	low (_task_list+8)
  1605  000588  24F3               	addwf	243,w,c
  1606  00058A  6ED9               	movwf	fsr2l,c
  1607  00058C  0E01               	movlw	high (_task_list+8)
  1608  00058E  20F4               	addwfc	prodh,w,c
  1609  000590  6EDA               	movwf	fsr2h,c
  1610  000592  50DE               	movf	postinc2,w,c
  1611  000594  10DE               	iorwf	postinc2,w,c
  1612  000596  10DE               	iorwf	postinc2,w,c
  1613  000598  A4D8               	btfss	status,2,c
  1614  00059A  EFD1  F002         	goto	u1841
  1615  00059E  EFD3  F002         	goto	u1840
  1616  0005A2                     u1841:
  1617  0005A2  EFD5  F002         	goto	l2529
  1618  0005A6                     u1840:
  1619  0005A6  EFDE  F002         	goto	l2533
  1620  0005AA                     l2529:
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;task.c: 34:     }
  1624  0005AA  2B7F               	incf	addTask@idx& (0+255),f,b
  1625  0005AC                     
  1626                           ; BSR set to: 0
  1627  0005AC  0E13               	movlw	19
  1628  0005AE  657F               	cpfsgt	addTask@idx& (0+255),b
  1629  0005B0  EFDC  F002         	goto	u1851
  1630  0005B4  EFDE  F002         	goto	u1850
  1631  0005B8                     u1851:
  1632  0005B8  EFC1  F002         	goto	l2525
  1633  0005BC                     u1850:
  1634  0005BC                     l2533:
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;task.c: 35:     if(period == 5500)
  1638  0005BC  0E7C               	movlw	124
  1639  0005BE  1966               	xorwf	addTask@period& (0+255),w,b
  1640  0005C0  E109               	bnz	u1861
  1641  0005C2  0E15               	movlw	21
  1642  0005C4  1967               	xorwf	(addTask@period+1)& (0+255),w,b
  1643  0005C6  1168               	iorwf	(addTask@period+2)& (0+255),w,b
  1644  0005C8  1169               	iorwf	(addTask@period+3)& (0+255),w,b
  1645  0005CA  A4D8               	btfss	status,2,c
  1646  0005CC  EFEA  F002         	goto	u1861
  1647  0005D0  EFEC  F002         	goto	u1860
  1648  0005D4                     u1861:
  1649  0005D4  EFEE  F002         	goto	l2537
  1650  0005D8                     u1860:
  1651  0005D8                     
  1652                           ; BSR set to: 0
  1653                           ;task.c: 36:         value = 0xF1;
  1654  0005D8  0EF1               	movlw	241
  1655  0005DA  6F98               	movwf	_value& (0+255),b
  1656  0005DC                     l2537:
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;task.c: 37:     if(idx == 20)
  1660  0005DC  0E14               	movlw	20
  1661  0005DE  197F               	xorwf	addTask@idx& (0+255),w,b
  1662  0005E0  A4D8               	btfss	status,2,c
  1663  0005E2  EFF5  F002         	goto	u1871
  1664  0005E6  EFF7  F002         	goto	u1870
  1665  0005EA                     u1871:
  1666  0005EA  EFF9  F002         	goto	l2543
  1667  0005EE                     u1870:
  1668  0005EE  EFBB  F002         	goto	l2515
  1669  0005F2                     l2543:
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;task.c: 39:     task_list[idx].delay_t = delay;
  1673  0005F2  517F               	movf	addTask@idx& (0+255),w,b
  1674  0005F4  0D0F               	mullw	15
  1675  0005F6  0E64               	movlw	low _task_list
  1676  0005F8  24F3               	addwf	243,w,c
  1677  0005FA  6ED9               	movwf	fsr2l,c
  1678  0005FC  0E01               	movlw	high _task_list
  1679  0005FE  20F4               	addwfc	prodh,w,c
  1680  000600  6EDA               	movwf	fsr2h,c
  1681  000602  C06A  FFDE         	movff	addTask@delay,postinc2
  1682  000606  C06B  FFDE         	movff	addTask@delay+1,postinc2
  1683  00060A  C06C  FFDE         	movff	addTask@delay+2,postinc2
  1684  00060E  C06D  FFDE         	movff	addTask@delay+3,postinc2
  1685                           
  1686                           ;task.c: 40:     task_list[idx].period_t = period;
  1687  000612  517F               	movf	addTask@idx& (0+255),w,b
  1688  000614  0D0F               	mullw	15
  1689  000616  0E68               	movlw	low (_task_list+4)
  1690  000618  24F3               	addwf	243,w,c
  1691  00061A  6ED9               	movwf	fsr2l,c
  1692  00061C  0E01               	movlw	high (_task_list+4)
  1693  00061E  20F4               	addwfc	prodh,w,c
  1694  000620  6EDA               	movwf	fsr2h,c
  1695  000622  C066  FFDE         	movff	addTask@period,postinc2
  1696  000626  C067  FFDE         	movff	addTask@period+1,postinc2
  1697  00062A  C068  FFDE         	movff	addTask@period+2,postinc2
  1698  00062E  C069  FFDE         	movff	addTask@period+3,postinc2
  1699                           
  1700                           ;task.c: 41:     task_list[idx].func_ptr = ptr;
  1701  000632  517F               	movf	addTask@idx& (0+255),w,b
  1702  000634  0D0F               	mullw	15
  1703  000636  0E6C               	movlw	low (_task_list+8)
  1704  000638  24F3               	addwf	243,w,c
  1705  00063A  6ED9               	movwf	fsr2l,c
  1706  00063C  0E01               	movlw	high (_task_list+8)
  1707  00063E  20F4               	addwfc	prodh,w,c
  1708  000640  6EDA               	movwf	fsr2h,c
  1709  000642  C06E  FFDE         	movff	addTask@ptr,postinc2
  1710  000646  C06F  FFDE         	movff	addTask@ptr+1,postinc2
  1711  00064A  C070  FFDE         	movff	addTask@ptr+2,postinc2
  1712                           
  1713                           ;task.c: 42:     task_list[idx].data_p = data;
  1714  00064E  517F               	movf	addTask@idx& (0+255),w,b
  1715  000650  0D0F               	mullw	15
  1716  000652  0E71               	movlw	low (_task_list+13)
  1717  000654  24F3               	addwf	243,w,c
  1718  000656  6ED9               	movwf	fsr2l,c
  1719  000658  0E01               	movlw	high (_task_list+13)
  1720  00065A  20F4               	addwfc	prodh,w,c
  1721  00065C  6EDA               	movwf	fsr2h,c
  1722  00065E  C071  FFDE         	movff	addTask@data,postinc2
  1723  000662  C072  FFDD         	movff	addTask@data+1,postdec2
  1724  000666                     
  1725                           ; BSR set to: 0
  1726                           ;task.c: 43:     num_task++;
  1727  000666  2B97               	incf	_num_task& (0+255),f,b
  1728  000668                     
  1729                           ; BSR set to: 0
  1730                           ;task.c: 45:     if(head == 105 || (head != 105 && task_list[head].delay_t > task_list[i
      +                          dx].delay_t)) {
  1731  000668  0E69               	movlw	105
  1732  00066A  1995               	xorwf	_head& (0+255),w,b
  1733  00066C  1196               	iorwf	(_head+1)& (0+255),w,b
  1734  00066E  B4D8               	btfsc	status,2,c
  1735  000670  EF3C  F003         	goto	u1881
  1736  000674  EF3E  F003         	goto	u1880
  1737  000678                     u1881:
  1738  000678  EF70  F003         	goto	l2553
  1739  00067C                     u1880:
  1740  00067C                     
  1741                           ; BSR set to: 0
  1742  00067C  0E69               	movlw	105
  1743  00067E  1995               	xorwf	_head& (0+255),w,b
  1744  000680  1196               	iorwf	(_head+1)& (0+255),w,b
  1745  000682  B4D8               	btfsc	status,2,c
  1746  000684  EF46  F003         	goto	u1891
  1747  000688  EF48  F003         	goto	u1890
  1748  00068C                     u1891:
  1749  00068C  EF81  F003         	goto	l2557
  1750  000690                     u1890:
  1751  000690                     
  1752                           ; BSR set to: 0
  1753  000690  C095  F060         	movff	_head,___wmul@multiplier
  1754  000694  C096  F061         	movff	_head+1,___wmul@multiplier+1
  1755  000698  0E00               	movlw	0
  1756  00069A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1757  00069C  0E0F               	movlw	15
  1758  00069E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1759  0006A0  ECE4  F00A         	call	___wmul	;wreg free
  1760  0006A4  0E64               	movlw	low _task_list
  1761  0006A6  0100               	movlb	0	; () banked
  1762  0006A8  2560               	addwf	?___wmul& (0+255),w,b
  1763  0006AA  6ED9               	movwf	fsr2l,c
  1764  0006AC  0E01               	movlw	high _task_list
  1765  0006AE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1766  0006B0  6EDA               	movwf	fsr2h,c
  1767  0006B2  517F               	movf	addTask@idx& (0+255),w,b
  1768  0006B4  0D0F               	mullw	15
  1769  0006B6  0E64               	movlw	low _task_list
  1770  0006B8  24F3               	addwf	243,w,c
  1771  0006BA  6EE1               	movwf	fsr1l,c
  1772  0006BC  0E01               	movlw	high _task_list
  1773  0006BE  20F4               	addwfc	prodh,w,c
  1774  0006C0  6EE2               	movwf	fsr1h,c
  1775  0006C2  50DE               	movf	postinc2,w,c
  1776  0006C4  5CE6               	subwf	postinc1,w,c
  1777  0006C6  50DE               	movf	postinc2,w,c
  1778  0006C8  58E6               	subwfb	postinc1,w,c
  1779  0006CA  50DE               	movf	postinc2,w,c
  1780  0006CC  58E6               	subwfb	postinc1,w,c
  1781  0006CE  50DE               	movf	postinc2,w,c
  1782  0006D0  58E6               	subwfb	postinc1,w,c
  1783  0006D2  B0D8               	btfsc	status,0,c
  1784  0006D4  EF6E  F003         	goto	u1901
  1785  0006D8  EF70  F003         	goto	u1900
  1786  0006DC                     u1901:
  1787  0006DC  EF81  F003         	goto	l2557
  1788  0006E0                     u1900:
  1789  0006E0                     l2553:
  1790                           
  1791                           ; BSR set to: 0
  1792                           ;task.c: 46:         task_list[idx].next = head;
  1793  0006E0  517F               	movf	addTask@idx& (0+255),w,b
  1794  0006E2  0D0F               	mullw	15
  1795  0006E4  0E6F               	movlw	low (_task_list+11)
  1796  0006E6  24F3               	addwf	243,w,c
  1797  0006E8  6ED9               	movwf	fsr2l,c
  1798  0006EA  0E01               	movlw	high (_task_list+11)
  1799  0006EC  20F4               	addwfc	prodh,w,c
  1800  0006EE  6EDA               	movwf	fsr2h,c
  1801  0006F0  C095  FFDE         	movff	_head,postinc2
  1802  0006F4  C096  FFDD         	movff	_head+1,postdec2
  1803  0006F8                     
  1804                           ; BSR set to: 0
  1805                           ;task.c: 47:         head = idx;
  1806  0006F8  C07F  F095         	movff	addTask@idx,_head
  1807  0006FC  6B96               	clrf	(_head+1)& (0+255),b
  1808                           
  1809                           ;task.c: 48:     }
  1810  0006FE  EF5D  F004         	goto	l2575
  1811  000702                     l2557:
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;task.c: 50:         delay = delay - task_list[head].delay_t;
  1815  000702  C095  F060         	movff	_head,___wmul@multiplier
  1816  000706  C096  F061         	movff	_head+1,___wmul@multiplier+1
  1817  00070A  0E00               	movlw	0
  1818  00070C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1819  00070E  0E0F               	movlw	15
  1820  000710  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1821  000712  ECE4  F00A         	call	___wmul	;wreg free
  1822  000716  0E64               	movlw	low _task_list
  1823  000718  0100               	movlb	0	; () banked
  1824  00071A  2560               	addwf	?___wmul& (0+255),w,b
  1825  00071C  6ED9               	movwf	fsr2l,c
  1826  00071E  0E01               	movlw	high _task_list
  1827  000720  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1828  000722  6EDA               	movwf	fsr2h,c
  1829  000724  CFDE F073          	movff	postinc2,??_addTask
  1830  000728  CFDE F074          	movff	postinc2,??_addTask+1
  1831  00072C  CFDE F075          	movff	postinc2,??_addTask+2
  1832  000730  CFDE F076          	movff	postinc2,??_addTask+3
  1833  000734  5173               	movf	??_addTask& (0+255),w,b
  1834  000736  5D6A               	subwf	addTask@delay& (0+255),w,b
  1835  000738  6F6A               	movwf	addTask@delay& (0+255),b
  1836  00073A  5174               	movf	(??_addTask+1)& (0+255),w,b
  1837  00073C  596B               	subwfb	(addTask@delay+1)& (0+255),w,b
  1838  00073E  6F6B               	movwf	(addTask@delay+1)& (0+255),b
  1839  000740  5175               	movf	(??_addTask+2)& (0+255),w,b
  1840  000742  596C               	subwfb	(addTask@delay+2)& (0+255),w,b
  1841  000744  6F6C               	movwf	(addTask@delay+2)& (0+255),b
  1842  000746  5176               	movf	(??_addTask+3)& (0+255),w,b
  1843  000748  596D               	subwfb	(addTask@delay+3)& (0+255),w,b
  1844  00074A  6F6D               	movwf	(addTask@delay+3)& (0+255),b
  1845                           
  1846                           ;task.c: 51:         int cur = task_list[head].next;
  1847  00074C  C095  F060         	movff	_head,___wmul@multiplier
  1848  000750  C096  F061         	movff	_head+1,___wmul@multiplier+1
  1849  000754  0E00               	movlw	0
  1850  000756  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1851  000758  0E0F               	movlw	15
  1852  00075A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1853  00075C  ECE4  F00A         	call	___wmul	;wreg free
  1854  000760  0E6F               	movlw	low (_task_list+11)
  1855  000762  0100               	movlb	0	; () banked
  1856  000764  2560               	addwf	?___wmul& (0+255),w,b
  1857  000766  6ED9               	movwf	fsr2l,c
  1858  000768  0E01               	movlw	high (_task_list+11)
  1859  00076A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1860  00076C  6EDA               	movwf	fsr2h,c
  1861  00076E  CFDE F07D          	movff	postinc2,addTask@cur
  1862  000772  CFDD F07E          	movff	postdec2,addTask@cur+1
  1863  000776                     
  1864                           ; BSR set to: 0
  1865                           ;task.c: 52:         int prev = head;
  1866  000776  C095  F07B         	movff	_head,addTask@prev
  1867  00077A  C096  F07C         	movff	_head+1,addTask@prev+1
  1868                           
  1869                           ;task.c: 53:         while(cur != 105 && task_list[cur].delay_t <= delay) {
  1870  00077E  EFFF  F003         	goto	l2565
  1871  000782                     l2561:
  1872                           
  1873                           ; BSR set to: 0
  1874                           ;task.c: 54:             delay = delay - task_list[cur].delay_t;
  1875  000782  C07D  F060         	movff	addTask@cur,___wmul@multiplier
  1876  000786  C07E  F061         	movff	addTask@cur+1,___wmul@multiplier+1
  1877  00078A  0E00               	movlw	0
  1878  00078C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1879  00078E  0E0F               	movlw	15
  1880  000790  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1881  000792  ECE4  F00A         	call	___wmul	;wreg free
  1882  000796  0E64               	movlw	low _task_list
  1883  000798  0100               	movlb	0	; () banked
  1884  00079A  2560               	addwf	?___wmul& (0+255),w,b
  1885  00079C  6ED9               	movwf	fsr2l,c
  1886  00079E  0E01               	movlw	high _task_list
  1887  0007A0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1888  0007A2  6EDA               	movwf	fsr2h,c
  1889  0007A4  CFDE F073          	movff	postinc2,??_addTask
  1890  0007A8  CFDE F074          	movff	postinc2,??_addTask+1
  1891  0007AC  CFDE F075          	movff	postinc2,??_addTask+2
  1892  0007B0  CFDE F076          	movff	postinc2,??_addTask+3
  1893  0007B4  5173               	movf	??_addTask& (0+255),w,b
  1894  0007B6  5D6A               	subwf	addTask@delay& (0+255),w,b
  1895  0007B8  6F6A               	movwf	addTask@delay& (0+255),b
  1896  0007BA  5174               	movf	(??_addTask+1)& (0+255),w,b
  1897  0007BC  596B               	subwfb	(addTask@delay+1)& (0+255),w,b
  1898  0007BE  6F6B               	movwf	(addTask@delay+1)& (0+255),b
  1899  0007C0  5175               	movf	(??_addTask+2)& (0+255),w,b
  1900  0007C2  596C               	subwfb	(addTask@delay+2)& (0+255),w,b
  1901  0007C4  6F6C               	movwf	(addTask@delay+2)& (0+255),b
  1902  0007C6  5176               	movf	(??_addTask+3)& (0+255),w,b
  1903  0007C8  596D               	subwfb	(addTask@delay+3)& (0+255),w,b
  1904  0007CA  6F6D               	movwf	(addTask@delay+3)& (0+255),b
  1905  0007CC                     
  1906                           ; BSR set to: 0
  1907                           ;task.c: 55:             prev = cur;
  1908  0007CC  C07D  F07B         	movff	addTask@cur,addTask@prev
  1909  0007D0  C07E  F07C         	movff	addTask@cur+1,addTask@prev+1
  1910                           
  1911                           ;task.c: 56:             cur = task_list[cur].next;
  1912  0007D4  C07D  F060         	movff	addTask@cur,___wmul@multiplier
  1913  0007D8  C07E  F061         	movff	addTask@cur+1,___wmul@multiplier+1
  1914  0007DC  0E00               	movlw	0
  1915  0007DE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1916  0007E0  0E0F               	movlw	15
  1917  0007E2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1918  0007E4  ECE4  F00A         	call	___wmul	;wreg free
  1919  0007E8  0E6F               	movlw	low (_task_list+11)
  1920  0007EA  0100               	movlb	0	; () banked
  1921  0007EC  2560               	addwf	?___wmul& (0+255),w,b
  1922  0007EE  6ED9               	movwf	fsr2l,c
  1923  0007F0  0E01               	movlw	high (_task_list+11)
  1924  0007F2  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1925  0007F4  6EDA               	movwf	fsr2h,c
  1926  0007F6  CFDE F07D          	movff	postinc2,addTask@cur
  1927  0007FA  CFDD F07E          	movff	postdec2,addTask@cur+1
  1928  0007FE                     l2565:
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;task.c: 53:         while(cur != 105 && task_list[cur].delay_t <= delay) {
  1932  0007FE  0E69               	movlw	105
  1933  000800  197D               	xorwf	addTask@cur& (0+255),w,b
  1934  000802  117E               	iorwf	(addTask@cur+1)& (0+255),w,b
  1935  000804  B4D8               	btfsc	status,2,c
  1936  000806  EF07  F004         	goto	u1911
  1937  00080A  EF09  F004         	goto	u1910
  1938  00080E                     u1911:
  1939  00080E  EF29  F004         	goto	l2569
  1940  000812                     u1910:
  1941  000812                     
  1942                           ; BSR set to: 0
  1943  000812  C07D  F060         	movff	addTask@cur,___wmul@multiplier
  1944  000816  C07E  F061         	movff	addTask@cur+1,___wmul@multiplier+1
  1945  00081A  0E00               	movlw	0
  1946  00081C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1947  00081E  0E0F               	movlw	15
  1948  000820  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1949  000822  ECE4  F00A         	call	___wmul	;wreg free
  1950  000826  0E64               	movlw	low _task_list
  1951  000828  0100               	movlb	0	; () banked
  1952  00082A  2560               	addwf	?___wmul& (0+255),w,b
  1953  00082C  6ED9               	movwf	fsr2l,c
  1954  00082E  0E01               	movlw	high _task_list
  1955  000830  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1956  000832  6EDA               	movwf	fsr2h,c
  1957  000834  50DE               	movf	postinc2,w,c
  1958  000836  5D6A               	subwf	addTask@delay& (0+255),w,b
  1959  000838  50DE               	movf	postinc2,w,c
  1960  00083A  596B               	subwfb	(addTask@delay+1)& (0+255),w,b
  1961  00083C  50DE               	movf	postinc2,w,c
  1962  00083E  596C               	subwfb	(addTask@delay+2)& (0+255),w,b
  1963  000840  50DE               	movf	postinc2,w,c
  1964  000842  596D               	subwfb	(addTask@delay+3)& (0+255),w,b
  1965  000844  B0D8               	btfsc	status,0,c
  1966  000846  EF27  F004         	goto	u1921
  1967  00084A  EF29  F004         	goto	u1920
  1968  00084E                     u1921:
  1969  00084E  EFC1  F003         	goto	l2561
  1970  000852                     u1920:
  1971  000852                     l2569:
  1972                           
  1973                           ; BSR set to: 0
  1974                           ;task.c: 58:         task_list[prev].next = idx;
  1975  000852  517F               	movf	addTask@idx& (0+255),w,b
  1976  000854  6F73               	movwf	??_addTask& (0+255),b
  1977  000856  6B74               	clrf	(??_addTask+1)& (0+255),b
  1978  000858  C07B  F060         	movff	addTask@prev,___wmul@multiplier
  1979  00085C  C07C  F061         	movff	addTask@prev+1,___wmul@multiplier+1
  1980  000860  0E00               	movlw	0
  1981  000862  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1982  000864  0E0F               	movlw	15
  1983  000866  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1984  000868  ECE4  F00A         	call	___wmul	;wreg free
  1985  00086C  0E6F               	movlw	low (_task_list+11)
  1986  00086E  0100               	movlb	0	; () banked
  1987  000870  2560               	addwf	?___wmul& (0+255),w,b
  1988  000872  6ED9               	movwf	fsr2l,c
  1989  000874  0E01               	movlw	high (_task_list+11)
  1990  000876  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1991  000878  6EDA               	movwf	fsr2h,c
  1992  00087A  C073  FFDE         	movff	??_addTask,postinc2
  1993  00087E  C074  FFDD         	movff	??_addTask+1,postdec2
  1994  000882                     
  1995                           ; BSR set to: 0
  1996                           ;task.c: 59:         task_list[idx].next = cur;
  1997  000882  517F               	movf	addTask@idx& (0+255),w,b
  1998  000884  0D0F               	mullw	15
  1999  000886  0E6F               	movlw	low (_task_list+11)
  2000  000888  24F3               	addwf	243,w,c
  2001  00088A  6ED9               	movwf	fsr2l,c
  2002  00088C  0E01               	movlw	high (_task_list+11)
  2003  00088E  20F4               	addwfc	prodh,w,c
  2004  000890  6EDA               	movwf	fsr2h,c
  2005  000892  C07D  FFDE         	movff	addTask@cur,postinc2
  2006  000896  C07E  FFDD         	movff	addTask@cur+1,postdec2
  2007  00089A                     
  2008                           ; BSR set to: 0
  2009                           ;task.c: 60:         task_list[idx].delay_t = delay;
  2010  00089A  517F               	movf	addTask@idx& (0+255),w,b
  2011  00089C  0D0F               	mullw	15
  2012  00089E  0E64               	movlw	low _task_list
  2013  0008A0  24F3               	addwf	243,w,c
  2014  0008A2  6ED9               	movwf	fsr2l,c
  2015  0008A4  0E01               	movlw	high _task_list
  2016  0008A6  20F4               	addwfc	prodh,w,c
  2017  0008A8  6EDA               	movwf	fsr2h,c
  2018  0008AA  C06A  FFDE         	movff	addTask@delay,postinc2
  2019  0008AE  C06B  FFDE         	movff	addTask@delay+1,postinc2
  2020  0008B2  C06C  FFDE         	movff	addTask@delay+2,postinc2
  2021  0008B6  C06D  FFDE         	movff	addTask@delay+3,postinc2
  2022  0008BA                     l2575:
  2023                           
  2024                           ; BSR set to: 0
  2025                           ;task.c: 62:     if(task_list[idx].next != 105)
  2026  0008BA  517F               	movf	addTask@idx& (0+255),w,b
  2027  0008BC  0D0F               	mullw	15
  2028  0008BE  0E6F               	movlw	low (_task_list+11)
  2029  0008C0  24F3               	addwf	243,w,c
  2030  0008C2  6ED9               	movwf	fsr2l,c
  2031  0008C4  0E01               	movlw	high (_task_list+11)
  2032  0008C6  20F4               	addwfc	prodh,w,c
  2033  0008C8  6EDA               	movwf	fsr2h,c
  2034  0008CA  0E69               	movlw	105
  2035  0008CC  18DE               	xorwf	postinc2,w,c
  2036  0008CE  10DE               	iorwf	postinc2,w,c
  2037  0008D0  B4D8               	btfsc	status,2,c
  2038  0008D2  EF6D  F004         	goto	u1931
  2039  0008D6  EF6F  F004         	goto	u1930
  2040  0008DA                     u1931:
  2041  0008DA  EFBD  F004         	goto	l2579
  2042  0008DE                     u1930:
  2043  0008DE                     
  2044                           ; BSR set to: 0
  2045                           ;task.c: 63:         task_list[task_list[idx].next].delay_t = task_list[task_list[idx].n
      +                          ext].delay_t - delay;
  2046  0008DE  517F               	movf	addTask@idx& (0+255),w,b
  2047  0008E0  0D0F               	mullw	15
  2048  0008E2  0E6F               	movlw	low (_task_list+11)
  2049  0008E4  24F3               	addwf	243,w,c
  2050  0008E6  6ED9               	movwf	fsr2l,c
  2051  0008E8  0E01               	movlw	high (_task_list+11)
  2052  0008EA  20F4               	addwfc	prodh,w,c
  2053  0008EC  6EDA               	movwf	fsr2h,c
  2054  0008EE  CFDE F060          	movff	postinc2,___wmul@multiplier
  2055  0008F2  CFDD F061          	movff	postdec2,___wmul@multiplier+1
  2056  0008F6  0E00               	movlw	0
  2057  0008F8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2058  0008FA  0E0F               	movlw	15
  2059  0008FC  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2060  0008FE  ECE4  F00A         	call	___wmul	;wreg free
  2061  000902  0E64               	movlw	low _task_list
  2062  000904  0100               	movlb	0	; () banked
  2063  000906  2560               	addwf	?___wmul& (0+255),w,b
  2064  000908  6ED9               	movwf	fsr2l,c
  2065  00090A  0E01               	movlw	high _task_list
  2066  00090C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  2067  00090E  6EDA               	movwf	fsr2h,c
  2068  000910  CFDE F073          	movff	postinc2,??_addTask
  2069  000914  CFDE F074          	movff	postinc2,??_addTask+1
  2070  000918  CFDE F075          	movff	postinc2,??_addTask+2
  2071  00091C  CFDE F076          	movff	postinc2,??_addTask+3
  2072  000920  516A               	movf	addTask@delay& (0+255),w,b
  2073  000922  5D73               	subwf	??_addTask& (0+255),w,b
  2074  000924  6F77               	movwf	(??_addTask+4)& (0+255),b
  2075  000926  516B               	movf	(addTask@delay+1)& (0+255),w,b
  2076  000928  5974               	subwfb	(??_addTask+1)& (0+255),w,b
  2077  00092A  6F78               	movwf	(??_addTask+5)& (0+255),b
  2078  00092C  516C               	movf	(addTask@delay+2)& (0+255),w,b
  2079  00092E  5975               	subwfb	(??_addTask+2)& (0+255),w,b
  2080  000930  6F79               	movwf	(??_addTask+6)& (0+255),b
  2081  000932  516D               	movf	(addTask@delay+3)& (0+255),w,b
  2082  000934  5976               	subwfb	(??_addTask+3)& (0+255),w,b
  2083  000936  6F7A               	movwf	(??_addTask+7)& (0+255),b
  2084  000938  517F               	movf	addTask@idx& (0+255),w,b
  2085  00093A  0D0F               	mullw	15
  2086  00093C  0E6F               	movlw	low (_task_list+11)
  2087  00093E  24F3               	addwf	243,w,c
  2088  000940  6ED9               	movwf	fsr2l,c
  2089  000942  0E01               	movlw	high (_task_list+11)
  2090  000944  20F4               	addwfc	prodh,w,c
  2091  000946  6EDA               	movwf	fsr2h,c
  2092  000948  CFDE F060          	movff	postinc2,___wmul@multiplier
  2093  00094C  CFDD F061          	movff	postdec2,___wmul@multiplier+1
  2094  000950  0E00               	movlw	0
  2095  000952  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2096  000954  0E0F               	movlw	15
  2097  000956  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2098  000958  ECE4  F00A         	call	___wmul	;wreg free
  2099  00095C  0E64               	movlw	low _task_list
  2100  00095E  0100               	movlb	0	; () banked
  2101  000960  2560               	addwf	?___wmul& (0+255),w,b
  2102  000962  6ED9               	movwf	fsr2l,c
  2103  000964  0E01               	movlw	high _task_list
  2104  000966  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  2105  000968  6EDA               	movwf	fsr2h,c
  2106  00096A  C077  FFDE         	movff	??_addTask+4,postinc2
  2107  00096E  C078  FFDE         	movff	??_addTask+5,postinc2
  2108  000972  C079  FFDE         	movff	??_addTask+6,postinc2
  2109  000976  C07A  FFDE         	movff	??_addTask+7,postinc2
  2110  00097A                     l2579:
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;task.c: 64:     return idx;
  2114  00097A  517F               	movf	addTask@idx& (0+255),w,b
  2115  00097C                     l202:
  2116  00097C  0012               	return		;funcret
  2117  00097E                     __end_of_addTask:
  2118                           	opt callstack 0
  2119                           
  2120 ;; *************** function _isFullList *****************
  2121 ;; Defined at:
  2122 ;;		line 7 in file "task.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;		None
  2125 ;; Auto vars:     Size  Location     Type
  2126 ;;		None
  2127 ;; Return value:  Size  Location     Type
  2128 ;;                  1    wreg      unsigned char 
  2129 ;; Registers used:
  2130 ;;		wreg, status,2, status,0
  2131 ;; Tracked objects:
  2132 ;;		On entry : 0/0
  2133 ;;		On exit  : 0/0
  2134 ;;		Unchanged: 0/0
  2135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2140 ;;Total ram usage:        0 bytes
  2141 ;; Hardware stack levels used:    1
  2142 ;; Hardware stack levels required when called:    6
  2143 ;; This function calls:
  2144 ;;		Nothing
  2145 ;; This function is called by:
  2146 ;;		_addTask
  2147 ;; This function uses a non-reentrant model
  2148 ;;
  2149                           
  2150                           	psect	text10
  2151  001698                     __ptext10:
  2152                           	opt callstack 0
  2153  001698                     _isFullList:
  2154                           	opt callstack 22
  2155  001698                     
  2156                           ;task.c: 8:     return num_task == 20 ? 1 : 0;
  2157  001698  0E14               	movlw	20
  2158  00169A  0100               	movlb	0	; () banked
  2159  00169C  1997               	xorwf	_num_task& (0+255),w,b
  2160  00169E  B4D8               	btfsc	status,2,c
  2161  0016A0  EF54  F00B         	goto	u1791
  2162  0016A4  EF57  F00B         	goto	u1790
  2163  0016A8                     u1791:
  2164  0016A8  0E01               	movlw	1
  2165  0016AA  EF58  F00B         	goto	u1800
  2166  0016AE                     u1790:
  2167  0016AE  0E00               	movlw	0
  2168  0016B0                     u1800:
  2169  0016B0                     
  2170                           ; BSR set to: 0
  2171  0016B0  0012               	return		;funcret
  2172  0016B2                     __end_of_isFullList:
  2173                           	opt callstack 0
  2174                           
  2175 ;; *************** function _dispatch *****************
  2176 ;; Defined at:
  2177 ;;		line 72 in file "clock.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;		None
  2180 ;; Auto vars:     Size  Location     Type
  2181 ;;		None
  2182 ;; Return value:  Size  Location     Type
  2183 ;;                  1    wreg      void 
  2184 ;; Registers used:
  2185 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2186 ;; Tracked objects:
  2187 ;;		On entry : 0/0
  2188 ;;		On exit  : 0/0
  2189 ;;		Unchanged: 0/0
  2190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;Total ram usage:        0 bytes
  2196 ;; Hardware stack levels used:    1
  2197 ;; Hardware stack levels required when called:   11
  2198 ;; This function calls:
  2199 ;;		_selectReadyTask
  2200 ;; This function is called by:
  2201 ;;		_main
  2202 ;; This function uses a non-reentrant model
  2203 ;;
  2204                           
  2205                           	psect	text11
  2206  0016DE                     __ptext11:
  2207                           	opt callstack 0
  2208  0016DE                     _dispatch:
  2209                           	opt callstack 19
  2210  0016DE                     
  2211                           ;clock.c: 73:     selectReadyTask();
  2212  0016DE  EC34  F00A         	call	_selectReadyTask	;wreg free
  2213  0016E2  0012               	return		;funcret
  2214  0016E4                     __end_of_dispatch:
  2215                           	opt callstack 0
  2216                           
  2217 ;; *************** function _selectReadyTask *****************
  2218 ;; Defined at:
  2219 ;;		line 125 in file "task.c"
  2220 ;; Parameters:    Size  Location     Type
  2221 ;;		None
  2222 ;; Auto vars:     Size  Location     Type
  2223 ;;  node            5   20[BANK0 ] struct .
  2224 ;; Return value:  Size  Location     Type
  2225 ;;                  1    wreg      void 
  2226 ;; Registers used:
  2227 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2228 ;; Tracked objects:
  2229 ;;		On entry : 0/0
  2230 ;;		On exit  : 0/0
  2231 ;;		Unchanged: 0/0
  2232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2234 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2236 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2237 ;;Total ram usage:        5 bytes
  2238 ;; Hardware stack levels used:    1
  2239 ;; Hardware stack levels required when called:   10
  2240 ;; This function calls:
  2241 ;;		_blink_LED
  2242 ;;		_dequeue
  2243 ;;		_isEmptyQueue
  2244 ;; This function is called by:
  2245 ;;		_dispatch
  2246 ;; This function uses a non-reentrant model
  2247 ;;
  2248                           
  2249                           	psect	text12
  2250  001468                     __ptext12:
  2251                           	opt callstack 0
  2252  001468                     _selectReadyTask:
  2253                           	opt callstack 19
  2254  001468                     
  2255                           ;task.c: 126:     while(!isEmptyQueue()) {
  2256  001468  EF5B  F00A         	goto	l2591
  2257  00146C                     l2585:
  2258                           
  2259                           ;task.c: 127:         queue_node node = dequeue();
  2260  00146C  EC56  F009         	call	_dequeue	;wreg free
  2261  001470  EE20  F074         	lfsr	2,selectReadyTask@node
  2262  001474  0E04               	movlw	4
  2263  001476                     u1941:
  2264  001476  CFEB FFDB          	movff	plusw0,plusw2
  2265  00147A  06E8               	decf	wreg,f,c
  2266  00147C  E2FC               	bc	u1941
  2267  00147E                     
  2268                           ;task.c: 128:         if(node.func_ptr != ((void*)0))
  2269  00147E  0100               	movlb	0	; () banked
  2270  001480  5174               	movf	selectReadyTask@node& (0+255),w,b
  2271  001482  1175               	iorwf	(selectReadyTask@node+1)& (0+255),w,b
  2272  001484  1176               	iorwf	(selectReadyTask@node+2)& (0+255),w,b
  2273  001486  B4D8               	btfsc	status,2,c
  2274  001488  EF48  F00A         	goto	u1951
  2275  00148C  EF4A  F00A         	goto	u1950
  2276  001490                     u1951:
  2277  001490  EF5B  F00A         	goto	l2591
  2278  001494                     u1950:
  2279  001494                     
  2280                           ; BSR set to: 0
  2281                           ;task.c: 129:             (node.func_ptr)(node.data_p);
  2282  001494  C077  F060         	movff	selectReadyTask@node+3,blink_LED@data
  2283  001498  C078  F061         	movff	selectReadyTask@node+4,blink_LED@data+1
  2284  00149C  D802               	call	u1968
  2285  00149E  EF5B  F00A         	goto	u1969
  2286  0014A2                     u1968:
  2287  0014A2  0005               	push	
  2288  0014A4  6EFA               	movwf	pclath,c
  2289  0014A6  5174               	movf	selectReadyTask@node& (0+255),w,b
  2290  0014A8  6EFD               	movwf	tosl,c
  2291  0014AA  5175               	movf	(selectReadyTask@node+1)& (0+255),w,b
  2292  0014AC  6EFE               	movwf	tosh,c
  2293  0014AE  5176               	movf	(selectReadyTask@node+2)& (0+255),w,b
  2294  0014B0  6EFF               	movwf	tosu,c
  2295  0014B2  50FA               	movf	pclath,w,c
  2296  0014B4  0012               	return		;indir
  2297  0014B6                     u1969:
  2298  0014B6                     l2591:
  2299                           
  2300                           ;task.c: 126:     while(!isEmptyQueue()) {
  2301  0014B6  ECB4  F00A         	call	_isEmptyQueue	;wreg free
  2302  0014BA  0900               	iorlw	0
  2303  0014BC  B4D8               	btfsc	status,2,c
  2304  0014BE  EF63  F00A         	goto	u1971
  2305  0014C2  EF65  F00A         	goto	u1970
  2306  0014C6                     u1971:
  2307  0014C6  EF36  F00A         	goto	l2585
  2308  0014CA                     u1970:
  2309  0014CA  0012               	return		;funcret
  2310  0014CC                     __end_of_selectReadyTask:
  2311                           	opt callstack 0
  2312                           
  2313 ;; *************** function _dequeue *****************
  2314 ;; Defined at:
  2315 ;;		line 35 in file "ready_queue.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;		None
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;  temp            5   15[BANK0 ] struct .
  2320 ;;  idx             2   13[BANK0 ] int 
  2321 ;; Return value:  Size  Location     Type
  2322 ;;                  5    8[BANK0 ] struct .
  2323 ;; Registers used:
  2324 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2325 ;; Tracked objects:
  2326 ;;		On entry : 0/0
  2327 ;;		On exit  : 0/0
  2328 ;;		Unchanged: 0/0
  2329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2330 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2331 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2333 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2334 ;;Total ram usage:       12 bytes
  2335 ;; Hardware stack levels used:    1
  2336 ;; Hardware stack levels required when called:    9
  2337 ;; This function calls:
  2338 ;;		___awmod
  2339 ;;		___wmul
  2340 ;;		_isEmptyQueue
  2341 ;; This function is called by:
  2342 ;;		_selectReadyTask
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           	psect	text13
  2347  0012AC                     __ptext13:
  2348                           	opt callstack 0
  2349  0012AC                     _dequeue:
  2350                           	opt callstack 19
  2351  0012AC                     
  2352                           ;ready_queue.c: 36:     queue_node temp;;ready_queue.c: 37:     temp.func_ptr = ((void*)
      +                          0);
  2353  0012AC  0E00               	movlw	0
  2354  0012AE  0100               	movlb	0	; () banked
  2355  0012B0  6F6F               	movwf	dequeue@temp& (0+255),b
  2356  0012B2  0E00               	movlw	0
  2357  0012B4  6F70               	movwf	(dequeue@temp+1)& (0+255),b
  2358  0012B6  0E00               	movlw	0
  2359  0012B8  6F71               	movwf	(dequeue@temp+2)& (0+255),b
  2360                           
  2361                           ;ready_queue.c: 38:     temp.data_p = ((void*)0);
  2362  0012BA  0E00               	movlw	0
  2363  0012BC  6F72               	movwf	(dequeue@temp+3)& (0+255),b
  2364  0012BE  0E00               	movlw	0
  2365  0012C0  6F73               	movwf	(dequeue@temp+4)& (0+255),b
  2366  0012C2                     
  2367                           ; BSR set to: 0
  2368                           ;ready_queue.c: 39:     if(isEmptyQueue())
  2369  0012C2  ECB4  F00A         	call	_isEmptyQueue	;wreg free
  2370  0012C6  0900               	iorlw	0
  2371  0012C8  B4D8               	btfsc	status,2,c
  2372  0012CA  EF69  F009         	goto	u1761
  2373  0012CE  EF6B  F009         	goto	u1760
  2374  0012D2                     u1761:
  2375  0012D2  EF76  F009         	goto	l160
  2376  0012D6                     u1760:
  2377  0012D6                     l2445:
  2378                           
  2379                           ;ready_queue.c: 40:         return temp;
  2380  0012D6  EE20  F06F         	lfsr	2,dequeue@temp
  2381  0012DA  EE00  F068         	lfsr	0,?_dequeue
  2382  0012DE  0E04               	movlw	4
  2383  0012E0                     u1771:
  2384  0012E0  CFDB FFEB          	movff	plusw2,plusw0
  2385  0012E4  06E8               	decf	wreg,f,c
  2386  0012E6  E2FC               	bc	u1771
  2387  0012E8  EFA6  F009         	goto	l161
  2388  0012EC                     l160:
  2389                           
  2390                           ;ready_queue.c: 41:     int idx = front;
  2391  0012EC  C052  F06D         	movff	_front,dequeue@idx
  2392  0012F0  C053  F06E         	movff	_front+1,dequeue@idx+1
  2393  0012F4                     
  2394                           ;ready_queue.c: 42:     front = (front + 1) % 20;
  2395  0012F4  0E01               	movlw	1
  2396  0012F6  2452               	addwf	_front^0,w,c
  2397  0012F8  0100               	movlb	0	; () banked
  2398  0012FA  6F60               	movwf	___awmod@dividend& (0+255),b
  2399  0012FC  0E00               	movlw	0
  2400  0012FE  2053               	addwfc	(_front+1)^0,w,c
  2401  001300  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  2402  001302  0E00               	movlw	0
  2403  001304  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2404  001306  0E14               	movlw	20
  2405  001308  6F62               	movwf	___awmod@divisor& (0+255),b
  2406  00130A  ECF8  F007         	call	___awmod	;wreg free
  2407  00130E  C060  F052         	movff	?___awmod,_front
  2408  001312  C061  F053         	movff	?___awmod+1,_front+1
  2409  001316                     
  2410                           ;ready_queue.c: 43:     temp = ready_queue[idx];
  2411  001316  C06D  F060         	movff	dequeue@idx,___wmul@multiplier
  2412  00131A  C06E  F061         	movff	dequeue@idx+1,___wmul@multiplier+1
  2413  00131E  0E00               	movlw	0
  2414  001320  0100               	movlb	0	; () banked
  2415  001322  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2416  001324  0E05               	movlw	5
  2417  001326  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2418  001328  ECE4  F00A         	call	___wmul	;wreg free
  2419  00132C  0E00               	movlw	low _ready_queue
  2420  00132E  0100               	movlb	0	; () banked
  2421  001330  2560               	addwf	?___wmul& (0+255),w,b
  2422  001332  6ED9               	movwf	fsr2l,c
  2423  001334  0E01               	movlw	high _ready_queue
  2424  001336  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  2425  001338  6EDA               	movwf	fsr2h,c
  2426  00133A  EE10  F06F         	lfsr	1,dequeue@temp
  2427  00133E  0E04               	movlw	4
  2428  001340                     u1781:
  2429  001340  CFDB FFE3          	movff	plusw2,plusw1
  2430  001344  06E8               	decf	wreg,f,c
  2431  001346  E2FC               	bc	u1781
  2432  001348  EF6B  F009         	goto	l2445
  2433  00134C                     l161:
  2434  00134C  0012               	return		;funcret
  2435  00134E                     __end_of_dequeue:
  2436                           	opt callstack 0
  2437                           
  2438 ;; *************** function _isEmptyQueue *****************
  2439 ;; Defined at:
  2440 ;;		line 18 in file "ready_queue.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;		None
  2443 ;; Auto vars:     Size  Location     Type
  2444 ;;		None
  2445 ;; Return value:  Size  Location     Type
  2446 ;;                  1    wreg      unsigned char 
  2447 ;; Registers used:
  2448 ;;		wreg, status,2, status,0, cstack
  2449 ;; Tracked objects:
  2450 ;;		On entry : 0/0
  2451 ;;		On exit  : 0/0
  2452 ;;		Unchanged: 0/0
  2453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2458 ;;Total ram usage:        0 bytes
  2459 ;; Hardware stack levels used:    1
  2460 ;; Hardware stack levels required when called:    8
  2461 ;; This function calls:
  2462 ;;		_getSizeQueue
  2463 ;; This function is called by:
  2464 ;;		_dequeue
  2465 ;;		_selectReadyTask
  2466 ;; This function uses a non-reentrant model
  2467 ;;
  2468                           
  2469                           	psect	text14
  2470  001568                     __ptext14:
  2471                           	opt callstack 0
  2472  001568                     _isEmptyQueue:
  2473                           	opt callstack 20
  2474  001568                     
  2475                           ;ready_queue.c: 19:     if(front == -1)
  2476  001568  2852               	incf	_front^0,w,c
  2477  00156A  E106               	bnz	u1711
  2478  00156C  2853               	incf	(_front+1)^0,w,c
  2479  00156E  A4D8               	btfss	status,2,c
  2480  001570  EFBC  F00A         	goto	u1711
  2481  001574  EFBE  F00A         	goto	u1710
  2482  001578                     u1711:
  2483  001578  EFC1  F00A         	goto	l2409
  2484  00157C                     u1710:
  2485  00157C                     
  2486                           ;ready_queue.c: 20:         return 0;
  2487  00157C  0E00               	movlw	0
  2488  00157E  EFCD  F00A         	goto	l152
  2489  001582                     l2409:
  2490                           
  2491                           ;ready_queue.c: 21:     return getSizeQueue() == 0 ? 1 : 0;
  2492  001582  ECCE  F00A         	call	_getSizeQueue	;wreg free
  2493  001586  0900               	iorlw	0
  2494  001588  B4D8               	btfsc	status,2,c
  2495  00158A  EFC9  F00A         	goto	u1721
  2496  00158E  EFCC  F00A         	goto	u1720
  2497  001592                     u1721:
  2498  001592  0E01               	movlw	1
  2499  001594  EFCD  F00A         	goto	u1730
  2500  001598                     u1720:
  2501  001598  0E00               	movlw	0
  2502  00159A                     u1730:
  2503  00159A                     l152:
  2504  00159A  0012               	return		;funcret
  2505  00159C                     __end_of_isEmptyQueue:
  2506                           	opt callstack 0
  2507                           
  2508 ;; *************** function _getSizeQueue *****************
  2509 ;; Defined at:
  2510 ;;		line 10 in file "ready_queue.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;		None
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;		None
  2515 ;; Return value:  Size  Location     Type
  2516 ;;                  1    wreg      unsigned char 
  2517 ;; Registers used:
  2518 ;;		wreg, status,2, status,0, cstack
  2519 ;; Tracked objects:
  2520 ;;		On entry : 0/0
  2521 ;;		On exit  : 0/0
  2522 ;;		Unchanged: 0/0
  2523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2526 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2527 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2528 ;;Total ram usage:        2 bytes
  2529 ;; Hardware stack levels used:    1
  2530 ;; Hardware stack levels required when called:    7
  2531 ;; This function calls:
  2532 ;;		___awmod
  2533 ;; This function is called by:
  2534 ;;		_isEmptyQueue
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           	psect	text15
  2539  00159C                     __ptext15:
  2540                           	opt callstack 0
  2541  00159C                     _getSizeQueue:
  2542                           	opt callstack 20
  2543  00159C                     
  2544                           ;ready_queue.c: 11:     return (rear - front + 1 + 20) % 20;
  2545  00159C  5052               	movf	_front^0,w,c
  2546  00159E  5C50               	subwf	_rear^0,w,c
  2547  0015A0  0100               	movlb	0	; () banked
  2548  0015A2  6F66               	movwf	??_getSizeQueue& (0+255),b
  2549  0015A4  5053               	movf	(_front+1)^0,w,c
  2550  0015A6  5851               	subwfb	(_rear+1)^0,w,c
  2551  0015A8  6F67               	movwf	(??_getSizeQueue+1)& (0+255),b
  2552  0015AA  0E15               	movlw	21
  2553  0015AC  2566               	addwf	??_getSizeQueue& (0+255),w,b
  2554  0015AE  6F60               	movwf	___awmod@dividend& (0+255),b
  2555  0015B0  0E00               	movlw	0
  2556  0015B2  2167               	addwfc	(??_getSizeQueue+1)& (0+255),w,b
  2557  0015B4  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  2558  0015B6  0E00               	movlw	0
  2559  0015B8  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2560  0015BA  0E14               	movlw	20
  2561  0015BC  6F62               	movwf	___awmod@divisor& (0+255),b
  2562  0015BE  ECF8  F007         	call	___awmod	;wreg free
  2563  0015C2  0100               	movlb	0	; () banked
  2564  0015C4  5160               	movf	?___awmod& (0+255),w,b
  2565  0015C6                     
  2566                           ; BSR set to: 0
  2567  0015C6  0012               	return		;funcret
  2568  0015C8                     __end_of_getSizeQueue:
  2569                           	opt callstack 0
  2570                           
  2571 ;; *************** function ___awmod *****************
  2572 ;; Defined at:
  2573 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;  dividend        2    0[BANK0 ] int 
  2576 ;;  divisor         2    2[BANK0 ] int 
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;  sign            1    5[BANK0 ] unsigned char 
  2579 ;;  counter         1    4[BANK0 ] unsigned char 
  2580 ;; Return value:  Size  Location     Type
  2581 ;;                  2    0[BANK0 ] int 
  2582 ;; Registers used:
  2583 ;;		wreg, status,2, status,0
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 0/0
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2589 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2590 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2592 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;Total ram usage:        6 bytes
  2594 ;; Hardware stack levels used:    1
  2595 ;; Hardware stack levels required when called:    6
  2596 ;; This function calls:
  2597 ;;		Nothing
  2598 ;; This function is called by:
  2599 ;;		_getSizeQueue
  2600 ;;		_dequeue
  2601 ;; This function uses a non-reentrant model
  2602 ;;
  2603                           
  2604                           	psect	text16
  2605  000FF0                     __ptext16:
  2606                           	opt callstack 0
  2607  000FF0                     ___awmod:
  2608                           	opt callstack 20
  2609  000FF0  0E00               	movlw	0
  2610  000FF2  0100               	movlb	0	; () banked
  2611  000FF4  6F65               	movwf	___awmod@sign& (0+255),b
  2612  000FF6                     
  2613                           ; BSR set to: 0
  2614  000FF6  BF61               	btfsc	(___awmod@dividend+1)& (0+255),7,b
  2615  000FF8  EF02  F008         	goto	u1640
  2616  000FFC  EF00  F008         	goto	u1641
  2617  001000                     u1641:
  2618  001000  EF08  F008         	goto	l2353
  2619  001004                     u1640:
  2620  001004                     
  2621                           ; BSR set to: 0
  2622  001004  6D60               	negf	___awmod@dividend& (0+255),b
  2623  001006  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  2624  001008  B0D8               	btfsc	status,0,c
  2625  00100A  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  2626  00100C                     
  2627                           ; BSR set to: 0
  2628  00100C  0E01               	movlw	1
  2629  00100E  6F65               	movwf	___awmod@sign& (0+255),b
  2630  001010                     l2353:
  2631                           
  2632                           ; BSR set to: 0
  2633  001010  BF63               	btfsc	(___awmod@divisor+1)& (0+255),7,b
  2634  001012  EF0F  F008         	goto	u1650
  2635  001016  EF0D  F008         	goto	u1651
  2636  00101A                     u1651:
  2637  00101A  EF13  F008         	goto	l2357
  2638  00101E                     u1650:
  2639  00101E                     
  2640                           ; BSR set to: 0
  2641  00101E  6D62               	negf	___awmod@divisor& (0+255),b
  2642  001020  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  2643  001022  B0D8               	btfsc	status,0,c
  2644  001024  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  2645  001026                     l2357:
  2646                           
  2647                           ; BSR set to: 0
  2648  001026  5162               	movf	___awmod@divisor& (0+255),w,b
  2649  001028  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  2650  00102A  B4D8               	btfsc	status,2,c
  2651  00102C  EF1A  F008         	goto	u1661
  2652  001030  EF1C  F008         	goto	u1660
  2653  001034                     u1661:
  2654  001034  EF40  F008         	goto	l2373
  2655  001038                     u1660:
  2656  001038                     
  2657                           ; BSR set to: 0
  2658  001038  0E01               	movlw	1
  2659  00103A  6F64               	movwf	___awmod@counter& (0+255),b
  2660  00103C  EF24  F008         	goto	l2363
  2661  001040                     l2361:
  2662                           
  2663                           ; BSR set to: 0
  2664  001040  90D8               	bcf	status,0,c
  2665  001042  3762               	rlcf	___awmod@divisor& (0+255),f,b
  2666  001044  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  2667  001046  2B64               	incf	___awmod@counter& (0+255),f,b
  2668  001048                     l2363:
  2669                           
  2670                           ; BSR set to: 0
  2671  001048  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  2672  00104A  EF29  F008         	goto	u1671
  2673  00104E  EF2B  F008         	goto	u1670
  2674  001052                     u1671:
  2675  001052  EF20  F008         	goto	l2361
  2676  001056                     u1670:
  2677  001056                     l2365:
  2678                           
  2679                           ; BSR set to: 0
  2680  001056  5162               	movf	___awmod@divisor& (0+255),w,b
  2681  001058  5D60               	subwf	___awmod@dividend& (0+255),w,b
  2682  00105A  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  2683  00105C  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  2684  00105E  A0D8               	btfss	status,0,c
  2685  001060  EF34  F008         	goto	u1681
  2686  001064  EF36  F008         	goto	u1680
  2687  001068                     u1681:
  2688  001068  EF3A  F008         	goto	l2369
  2689  00106C                     u1680:
  2690  00106C                     
  2691                           ; BSR set to: 0
  2692  00106C  5162               	movf	___awmod@divisor& (0+255),w,b
  2693  00106E  5F60               	subwf	___awmod@dividend& (0+255),f,b
  2694  001070  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  2695  001072  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  2696  001074                     l2369:
  2697                           
  2698                           ; BSR set to: 0
  2699  001074  90D8               	bcf	status,0,c
  2700  001076  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  2701  001078  3362               	rrcf	___awmod@divisor& (0+255),f,b
  2702  00107A                     
  2703                           ; BSR set to: 0
  2704  00107A  2F64               	decfsz	___awmod@counter& (0+255),f,b
  2705  00107C  EF2B  F008         	goto	l2365
  2706  001080                     l2373:
  2707                           
  2708                           ; BSR set to: 0
  2709  001080  5165               	movf	___awmod@sign& (0+255),w,b
  2710  001082  B4D8               	btfsc	status,2,c
  2711  001084  EF46  F008         	goto	u1691
  2712  001088  EF48  F008         	goto	u1690
  2713  00108C                     u1691:
  2714  00108C  EF4C  F008         	goto	l2377
  2715  001090                     u1690:
  2716  001090                     
  2717                           ; BSR set to: 0
  2718  001090  6D60               	negf	___awmod@dividend& (0+255),b
  2719  001092  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  2720  001094  B0D8               	btfsc	status,0,c
  2721  001096  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  2722  001098                     l2377:
  2723                           
  2724                           ; BSR set to: 0
  2725  001098  C060  F060         	movff	___awmod@dividend,?___awmod
  2726  00109C  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  2727  0010A0                     
  2728                           ; BSR set to: 0
  2729  0010A0  0012               	return		;funcret
  2730  0010A2                     __end_of___awmod:
  2731                           	opt callstack 0
  2732                           
  2733 ;; *************** function ___wmul *****************
  2734 ;; Defined at:
  2735 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2738 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;  product         2    4[BANK0 ] unsigned int 
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  2    0[BANK0 ] unsigned int 
  2743 ;; Registers used:
  2744 ;;		wreg, status,2, status,0, prodl, prodh
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2750 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2751 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2753 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2754 ;;Total ram usage:        6 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; Hardware stack levels required when called:    6
  2757 ;; This function calls:
  2758 ;;		Nothing
  2759 ;; This function is called by:
  2760 ;;		_queueInitialize
  2761 ;;		_dequeue
  2762 ;;		_initializeTaskList
  2763 ;;		_addTask
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           	psect	text17
  2768  0015C8                     __ptext17:
  2769                           	opt callstack 0
  2770  0015C8                     ___wmul:
  2771                           	opt callstack 20
  2772  0015C8  0100               	movlb	0	; () banked
  2773  0015CA  5160               	movf	___wmul@multiplier& (0+255),w,b
  2774  0015CC  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2775  0015CE  CFF3 F064          	movff	prodl,___wmul@product
  2776  0015D2  CFF4 F065          	movff	prodh,___wmul@product+1
  2777  0015D6  5160               	movf	___wmul@multiplier& (0+255),w,b
  2778  0015D8  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2779  0015DA  50F3               	movf	243,w,c
  2780  0015DC  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2781  0015DE  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2782  0015E0  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2783  0015E2  50F3               	movf	243,w,c
  2784  0015E4  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2785  0015E6                     
  2786                           ; BSR set to: 0
  2787  0015E6  C064  F060         	movff	___wmul@product,?___wmul
  2788  0015EA  C065  F061         	movff	___wmul@product+1,?___wmul+1
  2789  0015EE                     
  2790                           ; BSR set to: 0
  2791  0015EE  0012               	return		;funcret
  2792  0015F0                     __end_of___wmul:
  2793                           	opt callstack 0
  2794                           
  2795 ;; *************** function _blink_LED *****************
  2796 ;; Defined at:
  2797 ;;		line 51 in file "main.c"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;  data            2    0[BANK0 ] PTR void 
  2800 ;;		 -> RAM(3935), NULL(0), 
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;  idx             1    6[BANK0 ] unsigned char 
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  1    wreg      void 
  2805 ;; Registers used:
  2806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2812 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2813 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2814 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2815 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2816 ;;Total ram usage:        7 bytes
  2817 ;; Hardware stack levels used:    1
  2818 ;; Hardware stack levels required when called:    6
  2819 ;; This function calls:
  2820 ;;		Nothing
  2821 ;; This function is called by:
  2822 ;;		_main
  2823 ;;		_selectReadyTask
  2824 ;; This function uses a non-reentrant model
  2825 ;;
  2826                           
  2827                           	psect	text18
  2828  000B5E                     __ptext18:
  2829                           	opt callstack 0
  2830  000B5E                     _blink_LED:
  2831                           	opt callstack 22
  2832  000B5E                     
  2833                           ;main.c: 52:     char idx = (char)data;
  2834  000B5E  C060  F066         	movff	blink_LED@data,blink_LED@idx
  2835  000B62                     
  2836                           ;main.c: 53:     LED_state[idx] = !LED_state[idx];
  2837  000B62  0100               	movlb	0	; () banked
  2838  000B64  5166               	movf	blink_LED@idx& (0+255),w,b
  2839  000B66  0D02               	mullw	2
  2840  000B68  0E2E               	movlw	low _LED_state
  2841  000B6A  24F3               	addwf	243,w,c
  2842  000B6C  6ED9               	movwf	fsr2l,c
  2843  000B6E  0E00               	movlw	high _LED_state
  2844  000B70  20F4               	addwfc	prodh,w,c
  2845  000B72  6EDA               	movwf	fsr2h,c
  2846  000B74  50DE               	movf	postinc2,w,c
  2847  000B76  10DE               	iorwf	postinc2,w,c
  2848  000B78  B4D8               	btfsc	status,2,c
  2849  000B7A  EFC1  F005         	goto	u1741
  2850  000B7E  EFC4  F005         	goto	u1740
  2851  000B82                     u1741:
  2852  000B82  0E01               	movlw	1
  2853  000B84  EFC5  F005         	goto	u1750
  2854  000B88                     u1740:
  2855  000B88  0E00               	movlw	0
  2856  000B8A                     u1750:
  2857  000B8A  6F64               	movwf	(??_blink_LED+2)& (0+255),b
  2858  000B8C  6B65               	clrf	(??_blink_LED+3)& (0+255),b
  2859  000B8E  5166               	movf	blink_LED@idx& (0+255),w,b
  2860  000B90  0D02               	mullw	2
  2861  000B92  0E2E               	movlw	low _LED_state
  2862  000B94  24F3               	addwf	243,w,c
  2863  000B96  6ED9               	movwf	fsr2l,c
  2864  000B98  0E00               	movlw	high _LED_state
  2865  000B9A  20F4               	addwfc	prodh,w,c
  2866  000B9C  6EDA               	movwf	fsr2h,c
  2867  000B9E  C064  FFDE         	movff	??_blink_LED+2,postinc2
  2868  000BA2  C065  FFDD         	movff	??_blink_LED+3,postdec2
  2869                           
  2870                           ;main.c: 54:     switch(idx) {
  2871  000BA6  EF6B  F006         	goto	l2435
  2872  000BAA                     l2417:
  2873                           
  2874                           ; BSR set to: 0
  2875  000BAA  5166               	movf	blink_LED@idx& (0+255),w,b
  2876  000BAC  0D02               	mullw	2
  2877  000BAE  0E2E               	movlw	low _LED_state
  2878  000BB0  24F3               	addwf	243,w,c
  2879  000BB2  6ED9               	movwf	fsr2l,c
  2880  000BB4  0E00               	movlw	high _LED_state
  2881  000BB6  20F4               	addwfc	prodh,w,c
  2882  000BB8  6EDA               	movwf	fsr2h,c
  2883  000BBA  50DF               	movf	indf2,w,c
  2884  000BBC  6F62               	movwf	??_blink_LED& (0+255),b
  2885  000BBE  508C               	movf	140,w,c	;volatile
  2886  000BC0  1962               	xorwf	??_blink_LED& (0+255),w,b
  2887  000BC2  0BFE               	andlw	-2
  2888  000BC4  1962               	xorwf	??_blink_LED& (0+255),w,b
  2889  000BC6  6E8C               	movwf	140,c	;volatile
  2890                           
  2891                           ;main.c: 56:             break;
  2892  000BC8  EF98  F006         	goto	l61
  2893  000BCC                     l2419:
  2894                           
  2895                           ; BSR set to: 0
  2896  000BCC  5166               	movf	blink_LED@idx& (0+255),w,b
  2897  000BCE  0D02               	mullw	2
  2898  000BD0  0E2E               	movlw	low _LED_state
  2899  000BD2  24F3               	addwf	243,w,c
  2900  000BD4  6ED9               	movwf	fsr2l,c
  2901  000BD6  0E00               	movlw	high _LED_state
  2902  000BD8  20F4               	addwfc	prodh,w,c
  2903  000BDA  6EDA               	movwf	fsr2h,c
  2904  000BDC  50DF               	movf	indf2,w,c
  2905  000BDE  6F62               	movwf	??_blink_LED& (0+255),b
  2906  000BE0  4762               	rlncf	??_blink_LED& (0+255),f,b
  2907  000BE2  508C               	movf	140,w,c	;volatile
  2908  000BE4  1962               	xorwf	??_blink_LED& (0+255),w,b
  2909  000BE6  0BFD               	andlw	-3
  2910  000BE8  1962               	xorwf	??_blink_LED& (0+255),w,b
  2911  000BEA  6E8C               	movwf	140,c	;volatile
  2912                           
  2913                           ;main.c: 58:             break;
  2914  000BEC  EF98  F006         	goto	l61
  2915  000BF0                     l2421:
  2916                           
  2917                           ; BSR set to: 0
  2918  000BF0  5166               	movf	blink_LED@idx& (0+255),w,b
  2919  000BF2  0D02               	mullw	2
  2920  000BF4  0E2E               	movlw	low _LED_state
  2921  000BF6  24F3               	addwf	243,w,c
  2922  000BF8  6ED9               	movwf	fsr2l,c
  2923  000BFA  0E00               	movlw	high _LED_state
  2924  000BFC  20F4               	addwfc	prodh,w,c
  2925  000BFE  6EDA               	movwf	fsr2h,c
  2926  000C00  50DF               	movf	indf2,w,c
  2927  000C02  6F62               	movwf	??_blink_LED& (0+255),b
  2928  000C04  4762               	rlncf	??_blink_LED& (0+255),f,b
  2929  000C06  4762               	rlncf	??_blink_LED& (0+255),f,b
  2930  000C08  508C               	movf	140,w,c	;volatile
  2931  000C0A  1962               	xorwf	??_blink_LED& (0+255),w,b
  2932  000C0C  0BFB               	andlw	-5
  2933  000C0E  1962               	xorwf	??_blink_LED& (0+255),w,b
  2934  000C10  6E8C               	movwf	140,c	;volatile
  2935                           
  2936                           ;main.c: 60:             break;
  2937  000C12  EF98  F006         	goto	l61
  2938  000C16                     l2423:
  2939                           
  2940                           ; BSR set to: 0
  2941  000C16  5166               	movf	blink_LED@idx& (0+255),w,b
  2942  000C18  0D02               	mullw	2
  2943  000C1A  0E2E               	movlw	low _LED_state
  2944  000C1C  24F3               	addwf	243,w,c
  2945  000C1E  6ED9               	movwf	fsr2l,c
  2946  000C20  0E00               	movlw	high _LED_state
  2947  000C22  20F4               	addwfc	prodh,w,c
  2948  000C24  6EDA               	movwf	fsr2h,c
  2949  000C26  50DF               	movf	indf2,w,c
  2950  000C28  6F62               	movwf	??_blink_LED& (0+255),b
  2951  000C2A  4762               	rlncf	??_blink_LED& (0+255),f,b
  2952  000C2C  4762               	rlncf	??_blink_LED& (0+255),f,b
  2953  000C2E  4762               	rlncf	??_blink_LED& (0+255),f,b
  2954  000C30  508C               	movf	140,w,c	;volatile
  2955  000C32  1962               	xorwf	??_blink_LED& (0+255),w,b
  2956  000C34  0BF7               	andlw	-9
  2957  000C36  1962               	xorwf	??_blink_LED& (0+255),w,b
  2958  000C38  6E8C               	movwf	140,c	;volatile
  2959                           
  2960                           ;main.c: 62:             break;
  2961  000C3A  EF98  F006         	goto	l61
  2962  000C3E                     l2425:
  2963                           
  2964                           ; BSR set to: 0
  2965  000C3E  5166               	movf	blink_LED@idx& (0+255),w,b
  2966  000C40  0D02               	mullw	2
  2967  000C42  0E2E               	movlw	low _LED_state
  2968  000C44  24F3               	addwf	243,w,c
  2969  000C46  6ED9               	movwf	fsr2l,c
  2970  000C48  0E00               	movlw	high _LED_state
  2971  000C4A  20F4               	addwfc	prodh,w,c
  2972  000C4C  6EDA               	movwf	fsr2h,c
  2973  000C4E  50DF               	movf	indf2,w,c
  2974  000C50  6F62               	movwf	??_blink_LED& (0+255),b
  2975  000C52  3B62               	swapf	??_blink_LED& (0+255),f,b
  2976  000C54  508C               	movf	140,w,c	;volatile
  2977  000C56  1962               	xorwf	??_blink_LED& (0+255),w,b
  2978  000C58  0BEF               	andlw	-17
  2979  000C5A  1962               	xorwf	??_blink_LED& (0+255),w,b
  2980  000C5C  6E8C               	movwf	140,c	;volatile
  2981                           
  2982                           ;main.c: 64:             break;
  2983  000C5E  EF98  F006         	goto	l61
  2984  000C62                     l2427:
  2985                           
  2986                           ; BSR set to: 0
  2987  000C62  5166               	movf	blink_LED@idx& (0+255),w,b
  2988  000C64  0D02               	mullw	2
  2989  000C66  0E2E               	movlw	low _LED_state
  2990  000C68  24F3               	addwf	243,w,c
  2991  000C6A  6ED9               	movwf	fsr2l,c
  2992  000C6C  0E00               	movlw	high _LED_state
  2993  000C6E  20F4               	addwfc	prodh,w,c
  2994  000C70  6EDA               	movwf	fsr2h,c
  2995  000C72  50DF               	movf	indf2,w,c
  2996  000C74  6F62               	movwf	??_blink_LED& (0+255),b
  2997  000C76  3B62               	swapf	??_blink_LED& (0+255),f,b
  2998  000C78  4762               	rlncf	??_blink_LED& (0+255),f,b
  2999  000C7A  508C               	movf	140,w,c	;volatile
  3000  000C7C  1962               	xorwf	??_blink_LED& (0+255),w,b
  3001  000C7E  0BDF               	andlw	-33
  3002  000C80  1962               	xorwf	??_blink_LED& (0+255),w,b
  3003  000C82  6E8C               	movwf	140,c	;volatile
  3004                           
  3005                           ;main.c: 66:             break;
  3006  000C84  EF98  F006         	goto	l61
  3007  000C88                     l2429:
  3008                           
  3009                           ; BSR set to: 0
  3010  000C88  5166               	movf	blink_LED@idx& (0+255),w,b
  3011  000C8A  0D02               	mullw	2
  3012  000C8C  0E2E               	movlw	low _LED_state
  3013  000C8E  24F3               	addwf	243,w,c
  3014  000C90  6ED9               	movwf	fsr2l,c
  3015  000C92  0E00               	movlw	high _LED_state
  3016  000C94  20F4               	addwfc	prodh,w,c
  3017  000C96  6EDA               	movwf	fsr2h,c
  3018  000C98  50DF               	movf	indf2,w,c
  3019  000C9A  6F62               	movwf	??_blink_LED& (0+255),b
  3020  000C9C  3B62               	swapf	??_blink_LED& (0+255),f,b
  3021  000C9E  4762               	rlncf	??_blink_LED& (0+255),f,b
  3022  000CA0  4762               	rlncf	??_blink_LED& (0+255),f,b
  3023  000CA2  508C               	movf	140,w,c	;volatile
  3024  000CA4  1962               	xorwf	??_blink_LED& (0+255),w,b
  3025  000CA6  0BBF               	andlw	-65
  3026  000CA8  1962               	xorwf	??_blink_LED& (0+255),w,b
  3027  000CAA  6E8C               	movwf	140,c	;volatile
  3028                           
  3029                           ;main.c: 68:             break;
  3030  000CAC  EF98  F006         	goto	l61
  3031  000CB0                     l2431:
  3032                           
  3033                           ; BSR set to: 0
  3034  000CB0  5166               	movf	blink_LED@idx& (0+255),w,b
  3035  000CB2  0D02               	mullw	2
  3036  000CB4  0E2E               	movlw	low _LED_state
  3037  000CB6  24F3               	addwf	243,w,c
  3038  000CB8  6ED9               	movwf	fsr2l,c
  3039  000CBA  0E00               	movlw	high _LED_state
  3040  000CBC  20F4               	addwfc	prodh,w,c
  3041  000CBE  6EDA               	movwf	fsr2h,c
  3042  000CC0  50DF               	movf	indf2,w,c
  3043  000CC2  6F62               	movwf	??_blink_LED& (0+255),b
  3044  000CC4  3362               	rrcf	??_blink_LED& (0+255),f,b
  3045  000CC6  3362               	rrcf	??_blink_LED& (0+255),f,b
  3046  000CC8  508C               	movf	140,w,c	;volatile
  3047  000CCA  1962               	xorwf	??_blink_LED& (0+255),w,b
  3048  000CCC  0B7F               	andlw	-129
  3049  000CCE  1962               	xorwf	??_blink_LED& (0+255),w,b
  3050  000CD0  6E8C               	movwf	140,c	;volatile
  3051                           
  3052                           ;main.c: 70:             break;
  3053  000CD2  EF98  F006         	goto	l61
  3054  000CD6                     l2435:
  3055                           
  3056                           ; BSR set to: 0
  3057  000CD6  5166               	movf	blink_LED@idx& (0+255),w,b
  3058  000CD8  6F62               	movwf	??_blink_LED& (0+255),b
  3059  000CDA  6B63               	clrf	(??_blink_LED+1)& (0+255),b
  3060                           
  3061                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3062                           ; Switch size 1, requested type "simple"
  3063                           ; Number of cases is 1, Range of values is 0 to 0
  3064                           ; switch strategies available:
  3065                           ; Name         Instructions Cycles
  3066                           ; simple_byte            4     3 (average)
  3067                           ;	Chosen strategy is simple_byte
  3068  000CDC  5163               	movf	(??_blink_LED+1)& (0+255),w,b
  3069  000CDE  0A00               	xorlw	0	; case 0
  3070  000CE0  B4D8               	btfsc	status,2,c
  3071  000CE2  EF75  F006         	goto	l2679
  3072  000CE6  EF98  F006         	goto	l61
  3073  000CEA                     l2679:
  3074                           
  3075                           ; BSR set to: 0
  3076                           ; Switch size 1, requested type "simple"
  3077                           ; Number of cases is 8, Range of values is 0 to 7
  3078                           ; switch strategies available:
  3079                           ; Name         Instructions Cycles
  3080                           ; simple_byte           25    13 (average)
  3081                           ;	Chosen strategy is simple_byte
  3082  000CEA  5162               	movf	??_blink_LED& (0+255),w,b
  3083  000CEC  0A00               	xorlw	0	; case 0
  3084  000CEE  B4D8               	btfsc	status,2,c
  3085  000CF0  EFD5  F005         	goto	l2417
  3086  000CF4  0A01               	xorlw	1	; case 1
  3087  000CF6  B4D8               	btfsc	status,2,c
  3088  000CF8  EFE6  F005         	goto	l2419
  3089  000CFC  0A03               	xorlw	3	; case 2
  3090  000CFE  B4D8               	btfsc	status,2,c
  3091  000D00  EFF8  F005         	goto	l2421
  3092  000D04  0A01               	xorlw	1	; case 3
  3093  000D06  B4D8               	btfsc	status,2,c
  3094  000D08  EF0B  F006         	goto	l2423
  3095  000D0C  0A07               	xorlw	7	; case 4
  3096  000D0E  B4D8               	btfsc	status,2,c
  3097  000D10  EF1F  F006         	goto	l2425
  3098  000D14  0A01               	xorlw	1	; case 5
  3099  000D16  B4D8               	btfsc	status,2,c
  3100  000D18  EF31  F006         	goto	l2427
  3101  000D1C  0A03               	xorlw	3	; case 6
  3102  000D1E  B4D8               	btfsc	status,2,c
  3103  000D20  EF44  F006         	goto	l2429
  3104  000D24  0A01               	xorlw	1	; case 7
  3105  000D26  B4D8               	btfsc	status,2,c
  3106  000D28  EF58  F006         	goto	l2431
  3107  000D2C  EF98  F006         	goto	l61
  3108  000D30                     l61:
  3109                           
  3110                           ; BSR set to: 0
  3111  000D30  0012               	return		;funcret
  3112  000D32                     __end_of_blink_LED:
  3113                           	opt callstack 0
  3114                           
  3115 ;; *************** function _timer_interrupt *****************
  3116 ;; Defined at:
  3117 ;;		line 53 in file "clock.c"
  3118 ;; Parameters:    Size  Location     Type
  3119 ;;		None
  3120 ;; Auto vars:     Size  Location     Type
  3121 ;;		None
  3122 ;; Return value:  Size  Location     Type
  3123 ;;                  1    wreg      void 
  3124 ;; Registers used:
  3125 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3126 ;; Tracked objects:
  3127 ;;		On entry : 0/0
  3128 ;;		On exit  : 0/0
  3129 ;;		Unchanged: 0/0
  3130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3133 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3134 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3135 ;;Total ram usage:        6 bytes
  3136 ;; Hardware stack levels used:    1
  3137 ;; Hardware stack levels required when called:    5
  3138 ;; This function calls:
  3139 ;;		_handleListHead
  3140 ;; This function is called by:
  3141 ;;		Interrupt level 2
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           	psect	intcode
  3146  000008                     __pintcode:
  3147                           	opt callstack 0
  3148  000008                     _timer_interrupt:
  3149                           	opt callstack 19
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;incstack = 0
  3153  000008  8258               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3154  00000A  ED51  F008         	call	int_func,f	;refresh shadow registers
  3155                           
  3156                           	psect	intcode_body
  3157  0010A2                     __pintcode_body:
  3158                           	opt callstack 19
  3159  0010A2                     int_func:
  3160                           	opt callstack 19
  3161  0010A2  0006               	pop		; remove dummy address from shadow register refresh
  3162  0010A4  CFE1 F028          	movff	fsr1l,??_timer_interrupt
  3163  0010A8  CFE2 F029          	movff	fsr1h,??_timer_interrupt+1
  3164  0010AC  CFD9 F02A          	movff	fsr2l,??_timer_interrupt+2
  3165  0010B0  CFDA F02B          	movff	fsr2h,??_timer_interrupt+3
  3166  0010B4  CFF3 F02C          	movff	prodl,??_timer_interrupt+4
  3167  0010B8  CFF4 F02D          	movff	prodh,??_timer_interrupt+5
  3168  0010BC                     
  3169                           ;clock.c: 54:     if(INTCONbits.TMR0IE && INTCONbits.TMR0IF) {
  3170  0010BC  AAF2               	btfss	242,5,c	;volatile
  3171  0010BE  EF63  F008         	goto	i2u159_41
  3172  0010C2  EF65  F008         	goto	i2u159_40
  3173  0010C6                     i2u159_41:
  3174  0010C6  EF76  F008         	goto	i2l2279
  3175  0010CA                     i2u159_40:
  3176  0010CA  A4F2               	btfss	242,2,c	;volatile
  3177  0010CC  EF6A  F008         	goto	i2u160_41
  3178  0010D0  EF6C  F008         	goto	i2u160_40
  3179  0010D4                     i2u160_41:
  3180  0010D4  EF76  F008         	goto	i2l2279
  3181  0010D8                     i2u160_40:
  3182  0010D8                     
  3183                           ;clock.c: 55:         INTCONbits.TMR0IF = 0;
  3184  0010D8  94F2               	bcf	242,2,c	;volatile
  3185  0010DA                     
  3186                           ;clock.c: 56:         TMR0L = 131;
  3187  0010DA  0E83               	movlw	131
  3188  0010DC  6ED6               	movwf	214,c	;volatile
  3189  0010DE                     
  3190                           ;clock.c: 57:         time_ms++;
  3191  0010DE  0E01               	movlw	1
  3192  0010E0  0100               	movlb	0	; () banked
  3193  0010E2  2791               	addwf	_time_ms& (0+255),f,b
  3194  0010E4  0E00               	movlw	0
  3195  0010E6  2392               	addwfc	(_time_ms+1)& (0+255),f,b
  3196  0010E8  2393               	addwfc	(_time_ms+2)& (0+255),f,b
  3197  0010EA  2394               	addwfc	(_time_ms+3)& (0+255),f,b
  3198  0010EC                     i2l2279:
  3199                           
  3200                           ;clock.c: 59:     if(PIE1bits.TMR1IE && PIR1bits.TMR1IF) {
  3201  0010EC  A09D               	btfss	157,0,c	;volatile
  3202  0010EE  EF7B  F008         	goto	i2u161_41
  3203  0010F2  EF7D  F008         	goto	i2u161_40
  3204  0010F6                     i2u161_41:
  3205  0010F6  EF9B  F008         	goto	i2l335
  3206  0010FA                     i2u161_40:
  3207  0010FA  A09E               	btfss	158,0,c	;volatile
  3208  0010FC  EF82  F008         	goto	i2u162_41
  3209  001100  EF84  F008         	goto	i2u162_40
  3210  001104                     i2u162_41:
  3211  001104  EF9B  F008         	goto	i2l335
  3212  001108                     i2u162_40:
  3213  001108                     
  3214                           ;clock.c: 60:         PIR1bits.TMR1IF = 0;
  3215  001108  909E               	bcf	158,0,c	;volatile
  3216  00110A                     
  3217                           ;clock.c: 61:         TMR1H = 0xB1;
  3218  00110A  0EB1               	movlw	177
  3219  00110C  6ECF               	movwf	207,c	;volatile
  3220                           
  3221                           ;clock.c: 62:         TMR1L = 0xE0;
  3222  00110E  0EE0               	movlw	224
  3223  001110  6ECE               	movwf	206,c	;volatile
  3224  001112                     
  3225                           ;clock.c: 63:         handleListHead();
  3226  001112  EC09  F000         	call	_handleListHead	;wreg free
  3227  001116                     
  3228                           ;clock.c: 64:         count++;
  3229  001116  4A4A               	infsnz	_count^0,f,c
  3230  001118  2A4B               	incf	(_count+1)^0,f,c
  3231  00111A                     
  3232                           ;clock.c: 65:         if(count == 100) {
  3233  00111A  0E64               	movlw	100
  3234  00111C  184A               	xorwf	_count^0,w,c
  3235  00111E  104B               	iorwf	(_count+1)^0,w,c
  3236  001120  A4D8               	btfss	status,2,c
  3237  001122  EF95  F008         	goto	i2u163_41
  3238  001126  EF97  F008         	goto	i2u163_40
  3239  00112A                     i2u163_41:
  3240  00112A  EF9B  F008         	goto	i2l335
  3241  00112E                     i2u163_40:
  3242  00112E                     
  3243                           ;clock.c: 66:             count = 0;
  3244  00112E  0E00               	movlw	0
  3245  001130  6E4B               	movwf	(_count+1)^0,c
  3246  001132  0E00               	movlw	0
  3247  001134  6E4A               	movwf	_count^0,c
  3248  001136                     i2l335:
  3249  001136  C02D  FFF4         	movff	??_timer_interrupt+5,prodh
  3250  00113A  C02C  FFF3         	movff	??_timer_interrupt+4,prodl
  3251  00113E  C02B  FFDA         	movff	??_timer_interrupt+3,fsr2h
  3252  001142  C02A  FFD9         	movff	??_timer_interrupt+2,fsr2l
  3253  001146  C029  FFE2         	movff	??_timer_interrupt+1,fsr1h
  3254  00114A  C028  FFE1         	movff	??_timer_interrupt,fsr1l
  3255  00114E  9258               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3256  001150  0011               	retfie		f
  3257  001152                     __end_of_timer_interrupt:
  3258                           	opt callstack 0
  3259                           
  3260 ;; *************** function _handleListHead *****************
  3261 ;; Defined at:
  3262 ;;		line 91 in file "task.c"
  3263 ;; Parameters:    Size  Location     Type
  3264 ;;		None
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;  cur             2   35[COMRAM] int 
  3267 ;;  prev            2   33[COMRAM] int 
  3268 ;;  pos             2   37[COMRAM] int 
  3269 ;; Return value:  Size  Location     Type
  3270 ;;                  1    wreg      void 
  3271 ;; Registers used:
  3272 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3273 ;; Tracked objects:
  3274 ;;		On entry : 0/0
  3275 ;;		On exit  : 0/0
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3279 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3280 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3281 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3282 ;;Total ram usage:       25 bytes
  3283 ;; Hardware stack levels used:    1
  3284 ;; Hardware stack levels required when called:    4
  3285 ;; This function calls:
  3286 ;;		_enqueue
  3287 ;;		_removeTask
  3288 ;;		i2___wmul
  3289 ;; This function is called by:
  3290 ;;		_timer_interrupt
  3291 ;; This function uses a non-reentrant model
  3292 ;;
  3293                           
  3294                           	psect	text20
  3295  000012                     __ptext20:
  3296                           	opt callstack 0
  3297  000012                     _handleListHead:
  3298                           	opt callstack 19
  3299  000012                     
  3300                           ;task.c: 92:     if(head == 105)
  3301  000012  0E69               	movlw	105
  3302  000014  0100               	movlb	0	; () banked
  3303  000016  1995               	xorwf	_head& (0+255),w,b
  3304  000018  1196               	iorwf	(_head+1)& (0+255),w,b
  3305  00001A  A4D8               	btfss	status,2,c
  3306  00001C  EF12  F000         	goto	i2u150_41
  3307  000020  EF14  F000         	goto	i2u150_40
  3308  000024                     i2u150_41:
  3309  000024  EF7F  F002         	goto	i2l235
  3310  000028                     i2u150_40:
  3311  000028  EFB0  F002         	goto	i2l234
  3312  00002C                     i2l236:
  3313                           
  3314                           ;task.c: 95:         int pos = head;
  3315  00002C  C095  F026         	movff	_head,handleListHead@pos
  3316  000030  C096  F027         	movff	_head+1,handleListHead@pos+1
  3317  000034                     
  3318                           ;task.c: 96:         enqueue(task_list[pos].func_ptr, task_list[pos].data_p);
  3319  000034  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3320  000038  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3321  00003C  0E00               	movlw	0
  3322  00003E  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3323  000040  0E0F               	movlw	15
  3324  000042  6E03               	movwf	i2___wmul@multiplicand^0,c
  3325  000044  EC0C  F00B         	call	i2___wmul	;wreg free
  3326  000048  0E6C               	movlw	low (_task_list+8)
  3327  00004A  2401               	addwf	?i2___wmul^0,w,c
  3328  00004C  6ED9               	movwf	fsr2l,c
  3329  00004E  0E01               	movlw	high (_task_list+8)
  3330  000050  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3331  000052  6EDA               	movwf	fsr2h,c
  3332  000054  CFDE F01B          	movff	postinc2,_handleListHead$1754
  3333  000058  CFDE F01C          	movff	postinc2,_handleListHead$1754+1
  3334  00005C  CFDD F01D          	movff	postdec2,_handleListHead$1754+2
  3335                           
  3336                           ;task.c: 96:         enqueue(task_list[pos].func_ptr, task_list[pos].data_p);
  3337  000060  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3338  000064  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3339  000068  0E00               	movlw	0
  3340  00006A  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3341  00006C  0E0F               	movlw	15
  3342  00006E  6E03               	movwf	i2___wmul@multiplicand^0,c
  3343  000070  EC0C  F00B         	call	i2___wmul	;wreg free
  3344  000074  0E71               	movlw	low (_task_list+13)
  3345  000076  2401               	addwf	?i2___wmul^0,w,c
  3346  000078  6ED9               	movwf	fsr2l,c
  3347  00007A  0E01               	movlw	high (_task_list+13)
  3348  00007C  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3349  00007E  6EDA               	movwf	fsr2h,c
  3350  000080  CFDE F01E          	movff	postinc2,_handleListHead$1755
  3351  000084  CFDD F01F          	movff	postdec2,_handleListHead$1755+1
  3352                           
  3353                           ;task.c: 96:         enqueue(task_list[pos].func_ptr, task_list[pos].data_p);
  3354  000088  C01B  F00A         	movff	_handleListHead$1754,enqueue@ptr
  3355  00008C  C01C  F00B         	movff	_handleListHead$1754+1,enqueue@ptr+1
  3356  000090  C01D  F00C         	movff	_handleListHead$1754+2,enqueue@ptr+2
  3357  000094  C01E  F00D         	movff	_handleListHead$1755,enqueue@data
  3358  000098  C01F  F00E         	movff	_handleListHead$1755+1,enqueue@data+1
  3359  00009C  EC01  F009         	call	_enqueue	;wreg free
  3360                           
  3361                           ;task.c: 97:         head = task_list[pos].next;
  3362  0000A0  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3363  0000A4  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3364  0000A8  0E00               	movlw	0
  3365  0000AA  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3366  0000AC  0E0F               	movlw	15
  3367  0000AE  6E03               	movwf	i2___wmul@multiplicand^0,c
  3368  0000B0  EC0C  F00B         	call	i2___wmul	;wreg free
  3369  0000B4  0E6F               	movlw	low (_task_list+11)
  3370  0000B6  2401               	addwf	?i2___wmul^0,w,c
  3371  0000B8  6ED9               	movwf	fsr2l,c
  3372  0000BA  0E01               	movlw	high (_task_list+11)
  3373  0000BC  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3374  0000BE  6EDA               	movwf	fsr2h,c
  3375  0000C0  CFDE F095          	movff	postinc2,_head
  3376  0000C4  CFDD F096          	movff	postdec2,_head+1
  3377                           
  3378                           ;task.c: 98:         if(task_list[pos].period_t == 0) {
  3379  0000C8  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3380  0000CC  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3381  0000D0  0E00               	movlw	0
  3382  0000D2  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3383  0000D4  0E0F               	movlw	15
  3384  0000D6  6E03               	movwf	i2___wmul@multiplicand^0,c
  3385  0000D8  EC0C  F00B         	call	i2___wmul	;wreg free
  3386  0000DC  0E68               	movlw	low (_task_list+4)
  3387  0000DE  2401               	addwf	?i2___wmul^0,w,c
  3388  0000E0  6ED9               	movwf	fsr2l,c
  3389  0000E2  0E01               	movlw	high (_task_list+4)
  3390  0000E4  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3391  0000E6  6EDA               	movwf	fsr2h,c
  3392  0000E8  50DE               	movf	postinc2,w,c
  3393  0000EA  10DE               	iorwf	postinc2,w,c
  3394  0000EC  10DE               	iorwf	postinc2,w,c
  3395  0000EE  10DE               	iorwf	postinc2,w,c
  3396  0000F0  A4D8               	btfss	status,2,c
  3397  0000F2  EF7D  F000         	goto	i2u151_41
  3398  0000F6  EF7F  F000         	goto	i2u151_40
  3399  0000FA                     i2u151_41:
  3400  0000FA  EF84  F000         	goto	i2l2209
  3401  0000FE                     i2u151_40:
  3402  0000FE                     
  3403                           ;task.c: 99:             removeTask(pos);
  3404  0000FE  5026               	movf	handleListHead@pos^0,w,c
  3405  000100  EC99  F006         	call	_removeTask
  3406                           
  3407                           ;task.c: 100:         }
  3408  000104  EF7F  F002         	goto	i2l235
  3409  000108                     i2l2209:
  3410                           
  3411                           ;task.c: 102:             task_list[pos].delay_t = task_list[pos].period_t;
  3412  000108  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3413  00010C  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3414  000110  0E00               	movlw	0
  3415  000112  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3416  000114  0E0F               	movlw	15
  3417  000116  6E03               	movwf	i2___wmul@multiplicand^0,c
  3418  000118  EC0C  F00B         	call	i2___wmul	;wreg free
  3419  00011C  0E68               	movlw	low (_task_list+4)
  3420  00011E  2401               	addwf	?i2___wmul^0,w,c
  3421  000120  6ED9               	movwf	fsr2l,c
  3422  000122  0E01               	movlw	high (_task_list+4)
  3423  000124  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3424  000126  6EDA               	movwf	fsr2h,c
  3425  000128  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3426  00012C  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3427  000130  0E00               	movlw	0
  3428  000132  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3429  000134  0E0F               	movlw	15
  3430  000136  6E03               	movwf	i2___wmul@multiplicand^0,c
  3431  000138  EC0C  F00B         	call	i2___wmul	;wreg free
  3432  00013C  0E64               	movlw	low _task_list
  3433  00013E  2401               	addwf	?i2___wmul^0,w,c
  3434  000140  6EE1               	movwf	fsr1l,c
  3435  000142  0E01               	movlw	high _task_list
  3436  000144  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3437  000146  6EE2               	movwf	fsr1h,c
  3438  000148  CFDE FFE6          	movff	postinc2,postinc1
  3439  00014C  CFDE FFE6          	movff	postinc2,postinc1
  3440  000150  CFDE FFE6          	movff	postinc2,postinc1
  3441  000154  CFDE FFE6          	movff	postinc2,postinc1
  3442  000158                     
  3443                           ;task.c: 103:             if(head == 105 || (head != 105 && task_list[head].delay_t > ta
      +                          sk_list[pos].delay_t)) {
  3444  000158  0E69               	movlw	105
  3445  00015A  0100               	movlb	0	; () banked
  3446  00015C  1995               	xorwf	_head& (0+255),w,b
  3447  00015E  1196               	iorwf	(_head+1)& (0+255),w,b
  3448  000160  B4D8               	btfsc	status,2,c
  3449  000162  EFB5  F000         	goto	i2u152_41
  3450  000166  EFB7  F000         	goto	i2u152_40
  3451  00016A                     i2u152_41:
  3452  00016A  EFF0  F000         	goto	i2l2217
  3453  00016E                     i2u152_40:
  3454  00016E                     
  3455                           ; BSR set to: 0
  3456  00016E  0E69               	movlw	105
  3457  000170  1995               	xorwf	_head& (0+255),w,b
  3458  000172  1196               	iorwf	(_head+1)& (0+255),w,b
  3459  000174  B4D8               	btfsc	status,2,c
  3460  000176  EFBF  F000         	goto	i2u153_41
  3461  00017A  EFC1  F000         	goto	i2u153_40
  3462  00017E                     i2u153_41:
  3463  00017E  EF0A  F001         	goto	i2l2221
  3464  000182                     i2u153_40:
  3465  000182                     
  3466                           ; BSR set to: 0
  3467  000182  C095  F001         	movff	_head,i2___wmul@multiplier
  3468  000186  C096  F002         	movff	_head+1,i2___wmul@multiplier+1
  3469  00018A  0E00               	movlw	0
  3470  00018C  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3471  00018E  0E0F               	movlw	15
  3472  000190  6E03               	movwf	i2___wmul@multiplicand^0,c
  3473  000192  EC0C  F00B         	call	i2___wmul	;wreg free
  3474  000196  0E64               	movlw	low _task_list
  3475  000198  2401               	addwf	?i2___wmul^0,w,c
  3476  00019A  6ED9               	movwf	fsr2l,c
  3477  00019C  0E01               	movlw	high _task_list
  3478  00019E  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3479  0001A0  6EDA               	movwf	fsr2h,c
  3480  0001A2  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3481  0001A6  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3482  0001AA  0E00               	movlw	0
  3483  0001AC  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3484  0001AE  0E0F               	movlw	15
  3485  0001B0  6E03               	movwf	i2___wmul@multiplicand^0,c
  3486  0001B2  EC0C  F00B         	call	i2___wmul	;wreg free
  3487  0001B6  0E64               	movlw	low _task_list
  3488  0001B8  2401               	addwf	?i2___wmul^0,w,c
  3489  0001BA  6EE1               	movwf	fsr1l,c
  3490  0001BC  0E01               	movlw	high _task_list
  3491  0001BE  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3492  0001C0  6EE2               	movwf	fsr1h,c
  3493  0001C2  50DE               	movf	postinc2,w,c
  3494  0001C4  5CE6               	subwf	postinc1,w,c
  3495  0001C6  50DE               	movf	postinc2,w,c
  3496  0001C8  58E6               	subwfb	postinc1,w,c
  3497  0001CA  50DE               	movf	postinc2,w,c
  3498  0001CC  58E6               	subwfb	postinc1,w,c
  3499  0001CE  50DE               	movf	postinc2,w,c
  3500  0001D0  58E6               	subwfb	postinc1,w,c
  3501  0001D2  B0D8               	btfsc	status,0,c
  3502  0001D4  EFEE  F000         	goto	i2u154_41
  3503  0001D8  EFF0  F000         	goto	i2u154_40
  3504  0001DC                     i2u154_41:
  3505  0001DC  EF0A  F001         	goto	i2l2221
  3506  0001E0                     i2u154_40:
  3507  0001E0                     i2l2217:
  3508                           
  3509                           ;task.c: 104:                 task_list[pos].next = head;
  3510  0001E0  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3511  0001E4  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3512  0001E8  0E00               	movlw	0
  3513  0001EA  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3514  0001EC  0E0F               	movlw	15
  3515  0001EE  6E03               	movwf	i2___wmul@multiplicand^0,c
  3516  0001F0  EC0C  F00B         	call	i2___wmul	;wreg free
  3517  0001F4  0E6F               	movlw	low (_task_list+11)
  3518  0001F6  2401               	addwf	?i2___wmul^0,w,c
  3519  0001F8  6ED9               	movwf	fsr2l,c
  3520  0001FA  0E01               	movlw	high (_task_list+11)
  3521  0001FC  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3522  0001FE  6EDA               	movwf	fsr2h,c
  3523  000200  C095  FFDE         	movff	_head,postinc2
  3524  000204  C096  FFDD         	movff	_head+1,postdec2
  3525  000208                     
  3526                           ;task.c: 105:                 head = pos;
  3527  000208  C026  F095         	movff	handleListHead@pos,_head
  3528  00020C  C027  F096         	movff	handleListHead@pos+1,_head+1
  3529                           
  3530                           ;task.c: 106:             } else {
  3531  000210  EF21  F002         	goto	i2l242
  3532  000214                     i2l2221:
  3533                           
  3534                           ;task.c: 107:                 task_list[pos].delay_t = task_list[pos].delay_t - task_lis
      +                          t[head].delay_t;
  3535  000214  C095  F001         	movff	_head,i2___wmul@multiplier
  3536  000218  C096  F002         	movff	_head+1,i2___wmul@multiplier+1
  3537  00021C  0E00               	movlw	0
  3538  00021E  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3539  000220  0E0F               	movlw	15
  3540  000222  6E03               	movwf	i2___wmul@multiplicand^0,c
  3541  000224  EC0C  F00B         	call	i2___wmul	;wreg free
  3542  000228  0E64               	movlw	low _task_list
  3543  00022A  2401               	addwf	?i2___wmul^0,w,c
  3544  00022C  6ED9               	movwf	fsr2l,c
  3545  00022E  0E01               	movlw	high _task_list
  3546  000230  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3547  000232  6EDA               	movwf	fsr2h,c
  3548  000234  CFDE F00F          	movff	postinc2,??_handleListHead
  3549  000238  CFDE F010          	movff	postinc2,??_handleListHead+1
  3550  00023C  CFDE F011          	movff	postinc2,??_handleListHead+2
  3551  000240  CFDE F012          	movff	postinc2,??_handleListHead+3
  3552  000244  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3553  000248  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3554  00024C  0E00               	movlw	0
  3555  00024E  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3556  000250  0E0F               	movlw	15
  3557  000252  6E03               	movwf	i2___wmul@multiplicand^0,c
  3558  000254  EC0C  F00B         	call	i2___wmul	;wreg free
  3559  000258  0E64               	movlw	low _task_list
  3560  00025A  2401               	addwf	?i2___wmul^0,w,c
  3561  00025C  6ED9               	movwf	fsr2l,c
  3562  00025E  0E01               	movlw	high _task_list
  3563  000260  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3564  000262  6EDA               	movwf	fsr2h,c
  3565  000264  CFDE F013          	movff	postinc2,??_handleListHead+4
  3566  000268  CFDE F014          	movff	postinc2,??_handleListHead+5
  3567  00026C  CFDE F015          	movff	postinc2,??_handleListHead+6
  3568  000270  CFDE F016          	movff	postinc2,??_handleListHead+7
  3569  000274  500F               	movf	??_handleListHead^0,w,c
  3570  000276  5C13               	subwf	(??_handleListHead+4)^0,w,c
  3571  000278  6E17               	movwf	(??_handleListHead+8)^0,c
  3572  00027A  5010               	movf	(??_handleListHead+1)^0,w,c
  3573  00027C  5814               	subwfb	(??_handleListHead+5)^0,w,c
  3574  00027E  6E18               	movwf	(??_handleListHead+9)^0,c
  3575  000280  5011               	movf	(??_handleListHead+2)^0,w,c
  3576  000282  5815               	subwfb	(??_handleListHead+6)^0,w,c
  3577  000284  6E19               	movwf	(??_handleListHead+10)^0,c
  3578  000286  5012               	movf	(??_handleListHead+3)^0,w,c
  3579  000288  5816               	subwfb	(??_handleListHead+7)^0,w,c
  3580  00028A  6E1A               	movwf	(??_handleListHead+11)^0,c
  3581  00028C  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3582  000290  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3583  000294  0E00               	movlw	0
  3584  000296  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3585  000298  0E0F               	movlw	15
  3586  00029A  6E03               	movwf	i2___wmul@multiplicand^0,c
  3587  00029C  EC0C  F00B         	call	i2___wmul	;wreg free
  3588  0002A0  0E64               	movlw	low _task_list
  3589  0002A2  2401               	addwf	?i2___wmul^0,w,c
  3590  0002A4  6ED9               	movwf	fsr2l,c
  3591  0002A6  0E01               	movlw	high _task_list
  3592  0002A8  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3593  0002AA  6EDA               	movwf	fsr2h,c
  3594  0002AC  C017  FFDE         	movff	??_handleListHead+8,postinc2
  3595  0002B0  C018  FFDE         	movff	??_handleListHead+9,postinc2
  3596  0002B4  C019  FFDE         	movff	??_handleListHead+10,postinc2
  3597  0002B8  C01A  FFDE         	movff	??_handleListHead+11,postinc2
  3598                           
  3599                           ;task.c: 108:                 int cur = task_list[head].next;
  3600  0002BC  C095  F001         	movff	_head,i2___wmul@multiplier
  3601  0002C0  C096  F002         	movff	_head+1,i2___wmul@multiplier+1
  3602  0002C4  0E00               	movlw	0
  3603  0002C6  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3604  0002C8  0E0F               	movlw	15
  3605  0002CA  6E03               	movwf	i2___wmul@multiplicand^0,c
  3606  0002CC  EC0C  F00B         	call	i2___wmul	;wreg free
  3607  0002D0  0E6F               	movlw	low (_task_list+11)
  3608  0002D2  2401               	addwf	?i2___wmul^0,w,c
  3609  0002D4  6ED9               	movwf	fsr2l,c
  3610  0002D6  0E01               	movlw	high (_task_list+11)
  3611  0002D8  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3612  0002DA  6EDA               	movwf	fsr2h,c
  3613  0002DC  CFDE F024          	movff	postinc2,handleListHead@cur
  3614  0002E0  CFDD F025          	movff	postdec2,handleListHead@cur+1
  3615  0002E4                     
  3616                           ;task.c: 109:                 int prev = head;
  3617  0002E4  C095  F022         	movff	_head,handleListHead@prev
  3618  0002E8  C096  F023         	movff	_head+1,handleListHead@prev+1
  3619                           
  3620                           ;task.c: 110:                 while(cur != 105 && task_list[cur].delay_t <= task_list[po
      +                          s].delay_t) {
  3621  0002EC  EFC0  F001         	goto	i2l2229
  3622  0002F0                     i2l2225:
  3623                           
  3624                           ;task.c: 111:                     task_list[pos].delay_t -= task_list[cur].delay_t;
  3625  0002F0  C024  F001         	movff	handleListHead@cur,i2___wmul@multiplier
  3626  0002F4  C025  F002         	movff	handleListHead@cur+1,i2___wmul@multiplier+1
  3627  0002F8  0E00               	movlw	0
  3628  0002FA  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3629  0002FC  0E0F               	movlw	15
  3630  0002FE  6E03               	movwf	i2___wmul@multiplicand^0,c
  3631  000300  EC0C  F00B         	call	i2___wmul	;wreg free
  3632  000304  0E64               	movlw	low _task_list
  3633  000306  2401               	addwf	?i2___wmul^0,w,c
  3634  000308  6ED9               	movwf	fsr2l,c
  3635  00030A  0E01               	movlw	high _task_list
  3636  00030C  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3637  00030E  6EDA               	movwf	fsr2h,c
  3638  000310  CFDE F00F          	movff	postinc2,??_handleListHead
  3639  000314  CFDE F010          	movff	postinc2,??_handleListHead+1
  3640  000318  CFDE F011          	movff	postinc2,??_handleListHead+2
  3641  00031C  CFDE F012          	movff	postinc2,??_handleListHead+3
  3642  000320  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3643  000324  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3644  000328  0E00               	movlw	0
  3645  00032A  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3646  00032C  0E0F               	movlw	15
  3647  00032E  6E03               	movwf	i2___wmul@multiplicand^0,c
  3648  000330  EC0C  F00B         	call	i2___wmul	;wreg free
  3649  000334  0E64               	movlw	low _task_list
  3650  000336  2401               	addwf	?i2___wmul^0,w,c
  3651  000338  6ED9               	movwf	fsr2l,c
  3652  00033A  0E01               	movlw	high _task_list
  3653  00033C  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3654  00033E  6EDA               	movwf	fsr2h,c
  3655  000340  500F               	movf	??_handleListHead^0,w,c
  3656  000342  5EDE               	subwf	postinc2,f,c
  3657  000344  5010               	movf	(??_handleListHead+1)^0,w,c
  3658  000346  5ADE               	subwfb	postinc2,f,c
  3659  000348  5011               	movf	(??_handleListHead+2)^0,w,c
  3660  00034A  5ADE               	subwfb	postinc2,f,c
  3661  00034C  5012               	movf	(??_handleListHead+3)^0,w,c
  3662  00034E  5ADE               	subwfb	postinc2,f,c
  3663  000350                     
  3664                           ;task.c: 112:                     prev = cur;
  3665  000350  C024  F022         	movff	handleListHead@cur,handleListHead@prev
  3666  000354  C025  F023         	movff	handleListHead@cur+1,handleListHead@prev+1
  3667                           
  3668                           ;task.c: 113:                     cur = task_list[cur].next;
  3669  000358  C024  F001         	movff	handleListHead@cur,i2___wmul@multiplier
  3670  00035C  C025  F002         	movff	handleListHead@cur+1,i2___wmul@multiplier+1
  3671  000360  0E00               	movlw	0
  3672  000362  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3673  000364  0E0F               	movlw	15
  3674  000366  6E03               	movwf	i2___wmul@multiplicand^0,c
  3675  000368  EC0C  F00B         	call	i2___wmul	;wreg free
  3676  00036C  0E6F               	movlw	low (_task_list+11)
  3677  00036E  2401               	addwf	?i2___wmul^0,w,c
  3678  000370  6ED9               	movwf	fsr2l,c
  3679  000372  0E01               	movlw	high (_task_list+11)
  3680  000374  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3681  000376  6EDA               	movwf	fsr2h,c
  3682  000378  CFDE F024          	movff	postinc2,handleListHead@cur
  3683  00037C  CFDD F025          	movff	postdec2,handleListHead@cur+1
  3684  000380                     i2l2229:
  3685                           
  3686                           ;task.c: 110:                 while(cur != 105 && task_list[cur].delay_t <= task_list[po
      +                          s].delay_t) {
  3687  000380  0E69               	movlw	105
  3688  000382  1824               	xorwf	handleListHead@cur^0,w,c
  3689  000384  1025               	iorwf	(handleListHead@cur+1)^0,w,c
  3690  000386  B4D8               	btfsc	status,2,c
  3691  000388  EFC8  F001         	goto	i2u155_41
  3692  00038C  EFCA  F001         	goto	i2u155_40
  3693  000390                     i2u155_41:
  3694  000390  EFF9  F001         	goto	i2l2233
  3695  000394                     i2u155_40:
  3696  000394  C024  F001         	movff	handleListHead@cur,i2___wmul@multiplier
  3697  000398  C025  F002         	movff	handleListHead@cur+1,i2___wmul@multiplier+1
  3698  00039C  0E00               	movlw	0
  3699  00039E  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3700  0003A0  0E0F               	movlw	15
  3701  0003A2  6E03               	movwf	i2___wmul@multiplicand^0,c
  3702  0003A4  EC0C  F00B         	call	i2___wmul	;wreg free
  3703  0003A8  0E64               	movlw	low _task_list
  3704  0003AA  2401               	addwf	?i2___wmul^0,w,c
  3705  0003AC  6ED9               	movwf	fsr2l,c
  3706  0003AE  0E01               	movlw	high _task_list
  3707  0003B0  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3708  0003B2  6EDA               	movwf	fsr2h,c
  3709  0003B4  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3710  0003B8  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3711  0003BC  0E00               	movlw	0
  3712  0003BE  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3713  0003C0  0E0F               	movlw	15
  3714  0003C2  6E03               	movwf	i2___wmul@multiplicand^0,c
  3715  0003C4  EC0C  F00B         	call	i2___wmul	;wreg free
  3716  0003C8  0E64               	movlw	low _task_list
  3717  0003CA  2401               	addwf	?i2___wmul^0,w,c
  3718  0003CC  6EE1               	movwf	fsr1l,c
  3719  0003CE  0E01               	movlw	high _task_list
  3720  0003D0  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3721  0003D2  6EE2               	movwf	fsr1h,c
  3722  0003D4  50DE               	movf	postinc2,w,c
  3723  0003D6  5CE6               	subwf	postinc1,w,c
  3724  0003D8  50DE               	movf	postinc2,w,c
  3725  0003DA  58E6               	subwfb	postinc1,w,c
  3726  0003DC  50DE               	movf	postinc2,w,c
  3727  0003DE  58E6               	subwfb	postinc1,w,c
  3728  0003E0  50DE               	movf	postinc2,w,c
  3729  0003E2  58E6               	subwfb	postinc1,w,c
  3730  0003E4  B0D8               	btfsc	status,0,c
  3731  0003E6  EFF7  F001         	goto	i2u156_41
  3732  0003EA  EFF9  F001         	goto	i2u156_40
  3733  0003EE                     i2u156_41:
  3734  0003EE  EF78  F001         	goto	i2l2225
  3735  0003F2                     i2u156_40:
  3736  0003F2                     i2l2233:
  3737                           
  3738                           ;task.c: 115:                 task_list[prev].next = pos;
  3739  0003F2  C022  F001         	movff	handleListHead@prev,i2___wmul@multiplier
  3740  0003F6  C023  F002         	movff	handleListHead@prev+1,i2___wmul@multiplier+1
  3741  0003FA  0E00               	movlw	0
  3742  0003FC  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3743  0003FE  0E0F               	movlw	15
  3744  000400  6E03               	movwf	i2___wmul@multiplicand^0,c
  3745  000402  EC0C  F00B         	call	i2___wmul	;wreg free
  3746  000406  0E6F               	movlw	low (_task_list+11)
  3747  000408  2401               	addwf	?i2___wmul^0,w,c
  3748  00040A  6ED9               	movwf	fsr2l,c
  3749  00040C  0E01               	movlw	high (_task_list+11)
  3750  00040E  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3751  000410  6EDA               	movwf	fsr2h,c
  3752  000412  C026  FFDE         	movff	handleListHead@pos,postinc2
  3753  000416  C027  FFDD         	movff	handleListHead@pos+1,postdec2
  3754                           
  3755                           ;task.c: 116:                 task_list[pos].next = cur;
  3756  00041A  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3757  00041E  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3758  000422  0E00               	movlw	0
  3759  000424  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3760  000426  0E0F               	movlw	15
  3761  000428  6E03               	movwf	i2___wmul@multiplicand^0,c
  3762  00042A  EC0C  F00B         	call	i2___wmul	;wreg free
  3763  00042E  0E6F               	movlw	low (_task_list+11)
  3764  000430  2401               	addwf	?i2___wmul^0,w,c
  3765  000432  6ED9               	movwf	fsr2l,c
  3766  000434  0E01               	movlw	high (_task_list+11)
  3767  000436  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3768  000438  6EDA               	movwf	fsr2h,c
  3769  00043A  C024  FFDE         	movff	handleListHead@cur,postinc2
  3770  00043E  C025  FFDD         	movff	handleListHead@cur+1,postdec2
  3771  000442                     i2l242:
  3772                           
  3773                           ;task.c: 118:             if(task_list[pos].next != 105)
  3774  000442  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3775  000446  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3776  00044A  0E00               	movlw	0
  3777  00044C  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3778  00044E  0E0F               	movlw	15
  3779  000450  6E03               	movwf	i2___wmul@multiplicand^0,c
  3780  000452  EC0C  F00B         	call	i2___wmul	;wreg free
  3781  000456  0E6F               	movlw	low (_task_list+11)
  3782  000458  2401               	addwf	?i2___wmul^0,w,c
  3783  00045A  6ED9               	movwf	fsr2l,c
  3784  00045C  0E01               	movlw	high (_task_list+11)
  3785  00045E  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3786  000460  6EDA               	movwf	fsr2h,c
  3787  000462  0E69               	movlw	105
  3788  000464  18DE               	xorwf	postinc2,w,c
  3789  000466  10DE               	iorwf	postinc2,w,c
  3790  000468  B4D8               	btfsc	status,2,c
  3791  00046A  EF39  F002         	goto	i2u157_41
  3792  00046E  EF3B  F002         	goto	i2u157_40
  3793  000472                     i2u157_41:
  3794  000472  EF7F  F002         	goto	i2l235
  3795  000476                     i2u157_40:
  3796  000476                     
  3797                           ;task.c: 119:                 task_list[task_list[pos].next].delay_t -= task_list[pos].d
      +                          elay_t;
  3798  000476  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3799  00047A  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3800  00047E  0E00               	movlw	0
  3801  000480  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3802  000482  0E0F               	movlw	15
  3803  000484  6E03               	movwf	i2___wmul@multiplicand^0,c
  3804  000486  EC0C  F00B         	call	i2___wmul	;wreg free
  3805  00048A  0E6F               	movlw	low (_task_list+11)
  3806  00048C  2401               	addwf	?i2___wmul^0,w,c
  3807  00048E  6ED9               	movwf	fsr2l,c
  3808  000490  0E01               	movlw	high (_task_list+11)
  3809  000492  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3810  000494  6EDA               	movwf	fsr2h,c
  3811  000496  CFDE F020          	movff	postinc2,_handleListHead$1756
  3812  00049A  CFDD F021          	movff	postdec2,_handleListHead$1756+1
  3813                           
  3814                           ;task.c: 119:                 task_list[task_list[pos].next].delay_t -= task_list[pos].d
      +                          elay_t;
  3815  00049E  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3816  0004A2  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3817  0004A6  0E00               	movlw	0
  3818  0004A8  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3819  0004AA  0E0F               	movlw	15
  3820  0004AC  6E03               	movwf	i2___wmul@multiplicand^0,c
  3821  0004AE  EC0C  F00B         	call	i2___wmul	;wreg free
  3822  0004B2  0E64               	movlw	low _task_list
  3823  0004B4  2401               	addwf	?i2___wmul^0,w,c
  3824  0004B6  6ED9               	movwf	fsr2l,c
  3825  0004B8  0E01               	movlw	high _task_list
  3826  0004BA  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3827  0004BC  6EDA               	movwf	fsr2h,c
  3828  0004BE  CFDE F00F          	movff	postinc2,??_handleListHead
  3829  0004C2  CFDE F010          	movff	postinc2,??_handleListHead+1
  3830  0004C6  CFDE F011          	movff	postinc2,??_handleListHead+2
  3831  0004CA  CFDE F012          	movff	postinc2,??_handleListHead+3
  3832  0004CE  C020  F001         	movff	_handleListHead$1756,i2___wmul@multiplier
  3833  0004D2  C021  F002         	movff	_handleListHead$1756+1,i2___wmul@multiplier+1
  3834  0004D6  0E00               	movlw	0
  3835  0004D8  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3836  0004DA  0E0F               	movlw	15
  3837  0004DC  6E03               	movwf	i2___wmul@multiplicand^0,c
  3838  0004DE  EC0C  F00B         	call	i2___wmul	;wreg free
  3839  0004E2  0E64               	movlw	low _task_list
  3840  0004E4  2401               	addwf	?i2___wmul^0,w,c
  3841  0004E6  6ED9               	movwf	fsr2l,c
  3842  0004E8  0E01               	movlw	high _task_list
  3843  0004EA  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3844  0004EC  6EDA               	movwf	fsr2h,c
  3845  0004EE  500F               	movf	??_handleListHead^0,w,c
  3846  0004F0  5EDE               	subwf	postinc2,f,c
  3847  0004F2  5010               	movf	(??_handleListHead+1)^0,w,c
  3848  0004F4  5ADE               	subwfb	postinc2,f,c
  3849  0004F6  5011               	movf	(??_handleListHead+2)^0,w,c
  3850  0004F8  5ADE               	subwfb	postinc2,f,c
  3851  0004FA  5012               	movf	(??_handleListHead+3)^0,w,c
  3852  0004FC  5ADE               	subwfb	postinc2,f,c
  3853  0004FE                     i2l235:
  3854                           
  3855                           ;task.c: 94:     while(task_list[head].delay_t == 0) {
  3856  0004FE  C095  F001         	movff	_head,i2___wmul@multiplier
  3857  000502  C096  F002         	movff	_head+1,i2___wmul@multiplier+1
  3858  000506  0E00               	movlw	0
  3859  000508  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3860  00050A  0E0F               	movlw	15
  3861  00050C  6E03               	movwf	i2___wmul@multiplicand^0,c
  3862  00050E  EC0C  F00B         	call	i2___wmul	;wreg free
  3863  000512  0E64               	movlw	low _task_list
  3864  000514  2401               	addwf	?i2___wmul^0,w,c
  3865  000516  6ED9               	movwf	fsr2l,c
  3866  000518  0E01               	movlw	high _task_list
  3867  00051A  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3868  00051C  6EDA               	movwf	fsr2h,c
  3869  00051E  50DE               	movf	postinc2,w,c
  3870  000520  10DE               	iorwf	postinc2,w,c
  3871  000522  10DE               	iorwf	postinc2,w,c
  3872  000524  10DE               	iorwf	postinc2,w,c
  3873  000526  B4D8               	btfsc	status,2,c
  3874  000528  EF98  F002         	goto	i2u158_41
  3875  00052C  EF9A  F002         	goto	i2u158_40
  3876  000530                     i2u158_41:
  3877  000530  EF16  F000         	goto	i2l236
  3878  000534                     i2u158_40:
  3879  000534                     
  3880                           ;task.c: 122:     task_list[head].delay_t-= 10;
  3881  000534  C095  F001         	movff	_head,i2___wmul@multiplier
  3882  000538  C096  F002         	movff	_head+1,i2___wmul@multiplier+1
  3883  00053C  0E00               	movlw	0
  3884  00053E  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3885  000540  0E0F               	movlw	15
  3886  000542  6E03               	movwf	i2___wmul@multiplicand^0,c
  3887  000544  EC0C  F00B         	call	i2___wmul	;wreg free
  3888  000548  0E64               	movlw	low _task_list
  3889  00054A  2401               	addwf	?i2___wmul^0,w,c
  3890  00054C  6ED9               	movwf	fsr2l,c
  3891  00054E  0E01               	movlw	high _task_list
  3892  000550  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3893  000552  6EDA               	movwf	fsr2h,c
  3894  000554  0E0A               	movlw	10
  3895  000556  5EDE               	subwf	postinc2,f,c
  3896  000558  0E00               	movlw	0
  3897  00055A  5ADE               	subwfb	postinc2,f,c
  3898  00055C  5ADE               	subwfb	postinc2,f,c
  3899  00055E  5ADE               	subwfb	postinc2,f,c
  3900  000560                     i2l234:
  3901  000560  0012               	return		;funcret
  3902  000562                     __end_of_handleListHead:
  3903                           	opt callstack 0
  3904                           
  3905 ;; *************** function _removeTask *****************
  3906 ;; Defined at:
  3907 ;;		line 67 in file "task.c"
  3908 ;; Parameters:    Size  Location     Type
  3909 ;;  idx             1    wreg     unsigned char 
  3910 ;; Auto vars:     Size  Location     Type
  3911 ;;  idx             1    5[COMRAM] unsigned char 
  3912 ;;  pos             1    4[COMRAM] unsigned char 
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  1    wreg      unsigned char 
  3915 ;; Registers used:
  3916 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3917 ;; Tracked objects:
  3918 ;;		On entry : 0/0
  3919 ;;		On exit  : 0/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3923 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3924 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3925 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3926 ;;Total ram usage:        6 bytes
  3927 ;; Hardware stack levels used:    1
  3928 ;; Hardware stack levels required when called:    1
  3929 ;; This function calls:
  3930 ;;		_isEmptyList
  3931 ;; This function is called by:
  3932 ;;		_handleListHead
  3933 ;;		_remove_timer
  3934 ;; This function uses a non-reentrant model
  3935 ;;
  3936                           
  3937                           	psect	text21
  3938  000D32                     __ptext21:
  3939                           	opt callstack 0
  3940  000D32                     _removeTask:
  3941                           	opt callstack 21
  3942                           
  3943                           ;incstack = 0
  3944                           ;removeTask@idx stored from wreg
  3945  000D32  6E06               	movwf	removeTask@idx^0,c
  3946  000D34                     
  3947                           ;task.c: 68:     if(isEmptyList() || task_list[idx].func_ptr == ((void*)0))
  3948  000D34  EC59  F00B         	call	_isEmptyList	;wreg free
  3949  000D38  0900               	iorlw	0
  3950  000D3A  A4D8               	btfss	status,2,c
  3951  000D3C  EFA2  F006         	goto	i2u141_41
  3952  000D40  EFA4  F006         	goto	i2u141_40
  3953  000D44                     i2u141_41:
  3954  000D44  EFB6  F006         	goto	i2l2153
  3955  000D48                     i2u141_40:
  3956  000D48  5006               	movf	removeTask@idx^0,w,c
  3957  000D4A  0D0F               	mullw	15
  3958  000D4C  0E6C               	movlw	low (_task_list+8)
  3959  000D4E  24F3               	addwf	243,w,c
  3960  000D50  6ED9               	movwf	fsr2l,c
  3961  000D52  0E01               	movlw	high (_task_list+8)
  3962  000D54  20F4               	addwfc	prodh,w,c
  3963  000D56  6EDA               	movwf	fsr2h,c
  3964  000D58  50DE               	movf	postinc2,w,c
  3965  000D5A  10DE               	iorwf	postinc2,w,c
  3966  000D5C  10DE               	iorwf	postinc2,w,c
  3967  000D5E  A4D8               	btfss	status,2,c
  3968  000D60  EFB4  F006         	goto	i2u142_41
  3969  000D64  EFB6  F006         	goto	i2u142_40
  3970  000D68                     i2u142_41:
  3971  000D68  EFB9  F006         	goto	i2l2157
  3972  000D6C                     i2u142_40:
  3973  000D6C                     i2l2153:
  3974                           
  3975                           ;task.c: 69:         return 0;
  3976  000D6C  0E00               	movlw	0
  3977  000D6E  EF6E  F007         	goto	i2l223
  3978  000D72                     i2l2157:
  3979                           
  3980                           ;task.c: 70:     task_list[idx].delay_t = 0;
  3981  000D72  5006               	movf	removeTask@idx^0,w,c
  3982  000D74  0D0F               	mullw	15
  3983  000D76  0E64               	movlw	low _task_list
  3984  000D78  24F3               	addwf	243,w,c
  3985  000D7A  6ED9               	movwf	fsr2l,c
  3986  000D7C  0E01               	movlw	high _task_list
  3987  000D7E  20F4               	addwfc	prodh,w,c
  3988  000D80  6EDA               	movwf	fsr2h,c
  3989  000D82  6ADE               	clrf	postinc2,c
  3990  000D84  6ADE               	clrf	postinc2,c
  3991  000D86  6ADE               	clrf	postinc2,c
  3992  000D88  6ADD               	clrf	postdec2,c
  3993                           
  3994                           ;task.c: 71:     task_list[idx].period_t = 0;
  3995  000D8A  5006               	movf	removeTask@idx^0,w,c
  3996  000D8C  0D0F               	mullw	15
  3997  000D8E  0E68               	movlw	low (_task_list+4)
  3998  000D90  24F3               	addwf	243,w,c
  3999  000D92  6ED9               	movwf	fsr2l,c
  4000  000D94  0E01               	movlw	high (_task_list+4)
  4001  000D96  20F4               	addwfc	prodh,w,c
  4002  000D98  6EDA               	movwf	fsr2h,c
  4003  000D9A  6ADE               	clrf	postinc2,c
  4004  000D9C  6ADE               	clrf	postinc2,c
  4005  000D9E  6ADE               	clrf	postinc2,c
  4006  000DA0  6ADD               	clrf	postdec2,c
  4007                           
  4008                           ;task.c: 72:     task_list[idx].func_ptr = ((void*)0);
  4009  000DA2  5006               	movf	removeTask@idx^0,w,c
  4010  000DA4  0D0F               	mullw	15
  4011  000DA6  0E6C               	movlw	low (_task_list+8)
  4012  000DA8  24F3               	addwf	243,w,c
  4013  000DAA  6ED9               	movwf	fsr2l,c
  4014  000DAC  0E01               	movlw	high (_task_list+8)
  4015  000DAE  20F4               	addwfc	prodh,w,c
  4016  000DB0  6EDA               	movwf	fsr2h,c
  4017  000DB2  0E00               	movlw	0
  4018  000DB4  6EDE               	movwf	postinc2,c
  4019  000DB6  0E00               	movlw	0
  4020  000DB8  6EDE               	movwf	postinc2,c
  4021  000DBA  0E00               	movlw	0
  4022  000DBC  6EDE               	movwf	postinc2,c
  4023                           
  4024                           ;task.c: 73:     task_list[idx].data_p = ((void*)0);
  4025  000DBE  5006               	movf	removeTask@idx^0,w,c
  4026  000DC0  0D0F               	mullw	15
  4027  000DC2  0E71               	movlw	low (_task_list+13)
  4028  000DC4  24F3               	addwf	243,w,c
  4029  000DC6  6ED9               	movwf	fsr2l,c
  4030  000DC8  0E01               	movlw	high (_task_list+13)
  4031  000DCA  20F4               	addwfc	prodh,w,c
  4032  000DCC  6EDA               	movwf	fsr2h,c
  4033  000DCE  0E00               	movlw	0
  4034  000DD0  6EDE               	movwf	postinc2,c
  4035  000DD2  0E00               	movlw	0
  4036  000DD4  6EDD               	movwf	postdec2,c
  4037  000DD6                     
  4038                           ;task.c: 74:     num_task--;
  4039  000DD6  0100               	movlb	0	; () banked
  4040  000DD8  0797               	decf	_num_task& (0+255),f,b
  4041  000DDA                     
  4042                           ; BSR set to: 0
  4043                           ;task.c: 75:     if(idx == head) {
  4044  000DDA  5006               	movf	removeTask@idx^0,w,c
  4045  000DDC  6E01               	movwf	??_removeTask^0,c
  4046  000DDE  6A02               	clrf	(??_removeTask+1)^0,c
  4047  000DE0  5195               	movf	_head& (0+255),w,b
  4048  000DE2  1801               	xorwf	??_removeTask^0,w,c
  4049  000DE4  E107               	bnz	i2u143_41
  4050  000DE6  5196               	movf	(_head+1)& (0+255),w,b
  4051  000DE8  1802               	xorwf	(??_removeTask+1)^0,w,c
  4052  000DEA  A4D8               	btfss	status,2,c
  4053  000DEC  EFFA  F006         	goto	i2u143_41
  4054  000DF0  EFFC  F006         	goto	i2u143_40
  4055  000DF4                     i2u143_41:
  4056  000DF4  EF16  F007         	goto	i2l224
  4057  000DF8                     i2u143_40:
  4058  000DF8                     
  4059                           ; BSR set to: 0
  4060                           ;task.c: 76:         head = task_list[idx].next;
  4061  000DF8  5006               	movf	removeTask@idx^0,w,c
  4062  000DFA  0D0F               	mullw	15
  4063  000DFC  0E6F               	movlw	low (_task_list+11)
  4064  000DFE  24F3               	addwf	243,w,c
  4065  000E00  6ED9               	movwf	fsr2l,c
  4066  000E02  0E01               	movlw	high (_task_list+11)
  4067  000E04  20F4               	addwfc	prodh,w,c
  4068  000E06  6EDA               	movwf	fsr2h,c
  4069  000E08  CFDE F095          	movff	postinc2,_head
  4070  000E0C  CFDD F096          	movff	postdec2,_head+1
  4071                           
  4072                           ;task.c: 77:         task_list[idx].next = 105;
  4073  000E10  5006               	movf	removeTask@idx^0,w,c
  4074  000E12  0D0F               	mullw	15
  4075  000E14  0E6F               	movlw	low (_task_list+11)
  4076  000E16  24F3               	addwf	243,w,c
  4077  000E18  6ED9               	movwf	fsr2l,c
  4078  000E1A  0E01               	movlw	high (_task_list+11)
  4079  000E1C  20F4               	addwfc	prodh,w,c
  4080  000E1E  6EDA               	movwf	fsr2h,c
  4081  000E20  0E69               	movlw	105
  4082  000E22  6EDE               	movwf	postinc2,c
  4083  000E24  0E00               	movlw	0
  4084  000E26  6EDD               	movwf	postdec2,c
  4085                           
  4086                           ;task.c: 78:     }
  4087  000E28  EF6D  F007         	goto	i2l2173
  4088  000E2C                     i2l224:
  4089                           
  4090                           ; BSR set to: 0
  4091                           ;task.c: 80:         char pos = head;
  4092  000E2C  C095  F005         	movff	_head,removeTask@pos
  4093                           
  4094                           ;task.c: 81:         while(task_list[pos].next != 105 && task_list[pos].next != idx) {
  4095  000E30  EF24  F007         	goto	i2l226
  4096  000E34                     i2l2165:
  4097                           
  4098                           ;task.c: 82:             pos = task_list[pos].next;
  4099  000E34  5005               	movf	removeTask@pos^0,w,c
  4100  000E36  0D0F               	mullw	15
  4101  000E38  0E6F               	movlw	low (_task_list+11)
  4102  000E3A  24F3               	addwf	243,w,c
  4103  000E3C  6ED9               	movwf	fsr2l,c
  4104  000E3E  0E01               	movlw	high (_task_list+11)
  4105  000E40  20F4               	addwfc	prodh,w,c
  4106  000E42  6EDA               	movwf	fsr2h,c
  4107  000E44  50DF               	movf	indf2,w,c
  4108  000E46  6E05               	movwf	removeTask@pos^0,c
  4109  000E48                     i2l226:
  4110                           
  4111                           ;task.c: 81:         while(task_list[pos].next != 105 && task_list[pos].next != idx) {
  4112  000E48  5005               	movf	removeTask@pos^0,w,c
  4113  000E4A  0D0F               	mullw	15
  4114  000E4C  0E6F               	movlw	low (_task_list+11)
  4115  000E4E  24F3               	addwf	243,w,c
  4116  000E50  6ED9               	movwf	fsr2l,c
  4117  000E52  0E01               	movlw	high (_task_list+11)
  4118  000E54  20F4               	addwfc	prodh,w,c
  4119  000E56  6EDA               	movwf	fsr2h,c
  4120  000E58  0E69               	movlw	105
  4121  000E5A  18DE               	xorwf	postinc2,w,c
  4122  000E5C  10DE               	iorwf	postinc2,w,c
  4123  000E5E  B4D8               	btfsc	status,2,c
  4124  000E60  EF34  F007         	goto	i2u144_41
  4125  000E64  EF36  F007         	goto	i2u144_40
  4126  000E68                     i2u144_41:
  4127  000E68  EF4D  F007         	goto	i2l2169
  4128  000E6C                     i2u144_40:
  4129  000E6C  5005               	movf	removeTask@pos^0,w,c
  4130  000E6E  0D0F               	mullw	15
  4131  000E70  0E6F               	movlw	low (_task_list+11)
  4132  000E72  24F3               	addwf	243,w,c
  4133  000E74  6ED9               	movwf	fsr2l,c
  4134  000E76  0E01               	movlw	high (_task_list+11)
  4135  000E78  20F4               	addwfc	prodh,w,c
  4136  000E7A  6EDA               	movwf	fsr2h,c
  4137  000E7C  5006               	movf	removeTask@idx^0,w,c
  4138  000E7E  6E03               	movwf	(??_removeTask+2)^0,c
  4139  000E80  6A04               	clrf	(??_removeTask+3)^0,c
  4140  000E82  50DE               	movf	postinc2,w,c
  4141  000E84  1803               	xorwf	(??_removeTask+2)^0,w,c
  4142  000E86  E107               	bnz	i2u145_41
  4143  000E88  50DE               	movf	postinc2,w,c
  4144  000E8A  1804               	xorwf	(??_removeTask+3)^0,w,c
  4145  000E8C  A4D8               	btfss	status,2,c
  4146  000E8E  EF4B  F007         	goto	i2u145_41
  4147  000E92  EF4D  F007         	goto	i2u145_40
  4148  000E96                     i2u145_41:
  4149  000E96  EF1A  F007         	goto	i2l2165
  4150  000E9A                     i2u145_40:
  4151  000E9A                     i2l2169:
  4152                           
  4153                           ;task.c: 84:         task_list[pos].next = task_list[idx].next;
  4154  000E9A  5006               	movf	removeTask@idx^0,w,c
  4155  000E9C  0D0F               	mullw	15
  4156  000E9E  0E6F               	movlw	low (_task_list+11)
  4157  000EA0  24F3               	addwf	243,w,c
  4158  000EA2  6ED9               	movwf	fsr2l,c
  4159  000EA4  0E01               	movlw	high (_task_list+11)
  4160  000EA6  20F4               	addwfc	prodh,w,c
  4161  000EA8  6EDA               	movwf	fsr2h,c
  4162  000EAA  5005               	movf	removeTask@pos^0,w,c
  4163  000EAC  0D0F               	mullw	15
  4164  000EAE  0E6F               	movlw	low (_task_list+11)
  4165  000EB0  24F3               	addwf	243,w,c
  4166  000EB2  6EE1               	movwf	fsr1l,c
  4167  000EB4  0E01               	movlw	high (_task_list+11)
  4168  000EB6  20F4               	addwfc	prodh,w,c
  4169  000EB8  6EE2               	movwf	fsr1h,c
  4170  000EBA  CFDE FFE6          	movff	postinc2,postinc1
  4171  000EBE  CFDD FFE5          	movff	postdec2,postdec1
  4172  000EC2                     
  4173                           ;task.c: 85:         task_list[idx].next = 105;
  4174  000EC2  5006               	movf	removeTask@idx^0,w,c
  4175  000EC4  0D0F               	mullw	15
  4176  000EC6  0E6F               	movlw	low (_task_list+11)
  4177  000EC8  24F3               	addwf	243,w,c
  4178  000ECA  6ED9               	movwf	fsr2l,c
  4179  000ECC  0E01               	movlw	high (_task_list+11)
  4180  000ECE  20F4               	addwfc	prodh,w,c
  4181  000ED0  6EDA               	movwf	fsr2h,c
  4182  000ED2  0E69               	movlw	105
  4183  000ED4  6EDE               	movwf	postinc2,c
  4184  000ED6  0E00               	movlw	0
  4185  000ED8  6EDD               	movwf	postdec2,c
  4186  000EDA                     i2l2173:
  4187                           
  4188                           ;task.c: 88:     return 1;
  4189  000EDA  0E01               	movlw	1
  4190  000EDC                     i2l223:
  4191  000EDC  0012               	return		;funcret
  4192  000EDE                     __end_of_removeTask:
  4193                           	opt callstack 0
  4194                           
  4195 ;; *************** function _isEmptyList *****************
  4196 ;; Defined at:
  4197 ;;		line 3 in file "task.c"
  4198 ;; Parameters:    Size  Location     Type
  4199 ;;		None
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;		None
  4202 ;; Return value:  Size  Location     Type
  4203 ;;                  1    wreg      unsigned char 
  4204 ;; Registers used:
  4205 ;;		wreg, status,2
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4215 ;;Total ram usage:        0 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; This function calls:
  4218 ;;		Nothing
  4219 ;; This function is called by:
  4220 ;;		_removeTask
  4221 ;; This function uses a non-reentrant model
  4222 ;;
  4223                           
  4224                           	psect	text22
  4225  0016B2                     __ptext22:
  4226                           	opt callstack 0
  4227  0016B2                     _isEmptyList:
  4228                           	opt callstack 21
  4229  0016B2                     
  4230                           ;task.c: 4:     return num_task == 0 ? 1 : 0;
  4231  0016B2  0100               	movlb	0	; () banked
  4232  0016B4  5197               	movf	_num_task& (0+255),w,b
  4233  0016B6  B4D8               	btfsc	status,2,c
  4234  0016B8  EF60  F00B         	goto	i2u122_41
  4235  0016BC  EF63  F00B         	goto	i2u122_40
  4236  0016C0                     i2u122_41:
  4237  0016C0  0E01               	movlw	1
  4238  0016C2  EF64  F00B         	goto	i2u123_40
  4239  0016C6                     i2u122_40:
  4240  0016C6  0E00               	movlw	0
  4241  0016C8                     i2u123_40:
  4242  0016C8                     
  4243                           ; BSR set to: 0
  4244  0016C8  0012               	return		;funcret
  4245  0016CA                     __end_of_isEmptyList:
  4246                           	opt callstack 0
  4247                           
  4248 ;; *************** function _enqueue *****************
  4249 ;; Defined at:
  4250 ;;		line 24 in file "ready_queue.c"
  4251 ;; Parameters:    Size  Location     Type
  4252 ;;  ptr             3    9[COMRAM] PTR FTN()void 
  4253 ;;		 -> NULL(0), blink_LED(1), 
  4254 ;;  data            2   12[COMRAM] PTR void 
  4255 ;;		 -> RAM(3935), NULL(0), 
  4256 ;; Auto vars:     Size  Location     Type
  4257 ;;		None
  4258 ;; Return value:  Size  Location     Type
  4259 ;;                  1    wreg      unsigned char 
  4260 ;; Registers used:
  4261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4262 ;; Tracked objects:
  4263 ;;		On entry : 0/0
  4264 ;;		On exit  : 0/0
  4265 ;;		Unchanged: 0/0
  4266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4267 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4270 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4271 ;;Total ram usage:        5 bytes
  4272 ;; Hardware stack levels used:    1
  4273 ;; Hardware stack levels required when called:    3
  4274 ;; This function calls:
  4275 ;;		_isFullQueue
  4276 ;;		i2___awmod
  4277 ;;		i2___wmul
  4278 ;; This function is called by:
  4279 ;;		_handleListHead
  4280 ;; This function uses a non-reentrant model
  4281 ;;
  4282                           
  4283                           	psect	text23
  4284  001202                     __ptext23:
  4285                           	opt callstack 0
  4286  001202                     _enqueue:
  4287                           	opt callstack 19
  4288  001202                     
  4289                           ;ready_queue.c: 25:     if(isFullQueue())
  4290  001202  EC31  F00B         	call	_isFullQueue	;wreg free
  4291  001206  0900               	iorlw	0
  4292  001208  B4D8               	btfsc	status,2,c
  4293  00120A  EF09  F009         	goto	i2u128_41
  4294  00120E  EF0B  F009         	goto	i2u128_40
  4295  001212                     i2u128_41:
  4296  001212  EF0D  F009         	goto	i2l2067
  4297  001216                     i2u128_40:
  4298  001216  EF55  F009         	goto	i2l156
  4299  00121A                     i2l2067:
  4300                           
  4301                           ;ready_queue.c: 27:     if(front == -1)
  4302  00121A  2852               	incf	_front^0,w,c
  4303  00121C  E106               	bnz	i2u129_41
  4304  00121E  2853               	incf	(_front+1)^0,w,c
  4305  001220  A4D8               	btfss	status,2,c
  4306  001222  EF15  F009         	goto	i2u129_41
  4307  001226  EF17  F009         	goto	i2u129_40
  4308  00122A                     i2u129_41:
  4309  00122A  EF1B  F009         	goto	i2l2071
  4310  00122E                     i2u129_40:
  4311  00122E                     
  4312                           ;ready_queue.c: 28:         front = 0;
  4313  00122E  0E00               	movlw	0
  4314  001230  6E53               	movwf	(_front+1)^0,c
  4315  001232  0E00               	movlw	0
  4316  001234  6E52               	movwf	_front^0,c
  4317  001236                     i2l2071:
  4318                           
  4319                           ;ready_queue.c: 29:     rear = (rear + 1) % 20;
  4320  001236  0E01               	movlw	1
  4321  001238  2450               	addwf	_rear^0,w,c
  4322  00123A  6E01               	movwf	i2___awmod@dividend^0,c
  4323  00123C  0E00               	movlw	0
  4324  00123E  2051               	addwfc	(_rear+1)^0,w,c
  4325  001240  6E02               	movwf	(i2___awmod@dividend+1)^0,c
  4326  001242  0E00               	movlw	0
  4327  001244  6E04               	movwf	(i2___awmod@divisor+1)^0,c
  4328  001246  0E14               	movlw	20
  4329  001248  6E03               	movwf	i2___awmod@divisor^0,c
  4330  00124A  ECA9  F008         	call	i2___awmod	;wreg free
  4331  00124E  C001  F050         	movff	?i2___awmod,_rear
  4332  001252  C002  F051         	movff	?i2___awmod+1,_rear+1
  4333  001256                     
  4334                           ;ready_queue.c: 30:     ready_queue[rear].func_ptr = ptr;
  4335  001256  C050  F001         	movff	_rear,i2___wmul@multiplier
  4336  00125A  C051  F002         	movff	_rear+1,i2___wmul@multiplier+1
  4337  00125E  0E00               	movlw	0
  4338  001260  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  4339  001262  0E05               	movlw	5
  4340  001264  6E03               	movwf	i2___wmul@multiplicand^0,c
  4341  001266  EC0C  F00B         	call	i2___wmul	;wreg free
  4342  00126A  0E00               	movlw	low _ready_queue
  4343  00126C  2401               	addwf	?i2___wmul^0,w,c
  4344  00126E  6ED9               	movwf	fsr2l,c
  4345  001270  0E01               	movlw	high _ready_queue
  4346  001272  2002               	addwfc	(?i2___wmul+1)^0,w,c
  4347  001274  6EDA               	movwf	fsr2h,c
  4348  001276  C00A  FFDE         	movff	enqueue@ptr,postinc2
  4349  00127A  C00B  FFDE         	movff	enqueue@ptr+1,postinc2
  4350  00127E  C00C  FFDE         	movff	enqueue@ptr+2,postinc2
  4351  001282                     
  4352                           ;ready_queue.c: 31:     ready_queue[rear].data_p = data;
  4353  001282  C050  F001         	movff	_rear,i2___wmul@multiplier
  4354  001286  C051  F002         	movff	_rear+1,i2___wmul@multiplier+1
  4355  00128A  0E00               	movlw	0
  4356  00128C  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  4357  00128E  0E05               	movlw	5
  4358  001290  6E03               	movwf	i2___wmul@multiplicand^0,c
  4359  001292  EC0C  F00B         	call	i2___wmul	;wreg free
  4360  001296  0E03               	movlw	low (_ready_queue+3)
  4361  001298  2401               	addwf	?i2___wmul^0,w,c
  4362  00129A  6ED9               	movwf	fsr2l,c
  4363  00129C  0E01               	movlw	high (_ready_queue+3)
  4364  00129E  2002               	addwfc	(?i2___wmul+1)^0,w,c
  4365  0012A0  6EDA               	movwf	fsr2h,c
  4366  0012A2  C00D  FFDE         	movff	enqueue@data,postinc2
  4367  0012A6  C00E  FFDD         	movff	enqueue@data+1,postdec2
  4368  0012AA                     i2l156:
  4369  0012AA  0012               	return		;funcret
  4370  0012AC                     __end_of_enqueue:
  4371                           	opt callstack 0
  4372                           
  4373 ;; *************** function i2___wmul *****************
  4374 ;; Defined at:
  4375 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  4376 ;; Parameters:    Size  Location     Type
  4377 ;;  multiplier      2    0[COMRAM] unsigned int 
  4378 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4379 ;; Auto vars:     Size  Location     Type
  4380 ;;  __wmul          2    4[COMRAM] unsigned int 
  4381 ;; Return value:  Size  Location     Type
  4382 ;;                  2    0[COMRAM] unsigned int 
  4383 ;; Registers used:
  4384 ;;		wreg, status,2, status,0, prodl, prodh
  4385 ;; Tracked objects:
  4386 ;;		On entry : 0/0
  4387 ;;		On exit  : 0/0
  4388 ;;		Unchanged: 0/0
  4389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4390 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4391 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;Total ram usage:        6 bytes
  4395 ;; Hardware stack levels used:    1
  4396 ;; This function calls:
  4397 ;;		Nothing
  4398 ;; This function is called by:
  4399 ;;		_enqueue
  4400 ;;		_handleListHead
  4401 ;; This function uses a non-reentrant model
  4402 ;;
  4403                           
  4404                           	psect	text24
  4405  001618                     __ptext24:
  4406                           	opt callstack 0
  4407  001618                     i2___wmul:
  4408                           	opt callstack 22
  4409  001618  5001               	movf	i2___wmul@multiplier^0,w,c
  4410  00161A  0203               	mulwf	i2___wmul@multiplicand^0,c
  4411  00161C  CFF3 F005          	movff	prodl,i2___wmul@product
  4412  001620  CFF4 F006          	movff	prodh,i2___wmul@product+1
  4413  001624  5001               	movf	i2___wmul@multiplier^0,w,c
  4414  001626  0204               	mulwf	(i2___wmul@multiplicand+1)^0,c
  4415  001628  50F3               	movf	243,w,c
  4416  00162A  2606               	addwf	(i2___wmul@product+1)^0,f,c
  4417  00162C  5002               	movf	(i2___wmul@multiplier+1)^0,w,c
  4418  00162E  0203               	mulwf	i2___wmul@multiplicand^0,c
  4419  001630  50F3               	movf	243,w,c
  4420  001632  2606               	addwf	(i2___wmul@product+1)^0,f,c
  4421  001634  C005  F001         	movff	i2___wmul@product,?i2___wmul
  4422  001638  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  4423  00163C  0012               	return		;funcret
  4424  00163E                     __end_ofi2___wmul:
  4425                           	opt callstack 0
  4426                           
  4427 ;; *************** function _isFullQueue *****************
  4428 ;; Defined at:
  4429 ;;		line 14 in file "ready_queue.c"
  4430 ;; Parameters:    Size  Location     Type
  4431 ;;		None
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;		None
  4434 ;; Return value:  Size  Location     Type
  4435 ;;                  1    wreg      unsigned char 
  4436 ;; Registers used:
  4437 ;;		wreg, status,2, status,0, cstack
  4438 ;; Tracked objects:
  4439 ;;		On entry : 0/0
  4440 ;;		On exit  : 0/0
  4441 ;;		Unchanged: 0/0
  4442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4445 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4446 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4447 ;;Total ram usage:        1 bytes
  4448 ;; Hardware stack levels used:    1
  4449 ;; Hardware stack levels required when called:    2
  4450 ;; This function calls:
  4451 ;;		i2_getSizeQueue
  4452 ;; This function is called by:
  4453 ;;		_enqueue
  4454 ;; This function uses a non-reentrant model
  4455 ;;
  4456                           
  4457                           	psect	text25
  4458  001662                     __ptext25:
  4459                           	opt callstack 0
  4460  001662                     _isFullQueue:
  4461                           	opt callstack 19
  4462  001662                     
  4463                           ;ready_queue.c: 15:     return getSizeQueue() >= 20 ? 1 : 0;
  4464  001662  ECF8  F00A         	call	i2_getSizeQueue	;wreg free
  4465  001666  6E09               	movwf	??_isFullQueue^0,c
  4466  001668  0E14               	movlw	20
  4467  00166A  6009               	cpfslt	??_isFullQueue^0,c
  4468  00166C  EF3A  F00B         	goto	i2u117_41
  4469  001670  EF3D  F00B         	goto	i2u117_40
  4470  001674                     i2u117_41:
  4471  001674  0E01               	movlw	1
  4472  001676  EF3E  F00B         	goto	i2u118_40
  4473  00167A                     i2u117_40:
  4474  00167A  0E00               	movlw	0
  4475  00167C                     i2u118_40:
  4476  00167C  0012               	return		;funcret
  4477  00167E                     __end_of_isFullQueue:
  4478                           	opt callstack 0
  4479                           
  4480 ;; *************** function i2_getSizeQueue *****************
  4481 ;; Defined at:
  4482 ;;		line 10 in file "ready_queue.c"
  4483 ;; Parameters:    Size  Location     Type
  4484 ;;		None
  4485 ;; Auto vars:     Size  Location     Type
  4486 ;;		None
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  1    wreg      unsigned char 
  4489 ;; Registers used:
  4490 ;;		wreg, status,2, status,0, cstack
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4498 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4499 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4500 ;;Total ram usage:        2 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; Hardware stack levels required when called:    1
  4503 ;; This function calls:
  4504 ;;		i2___awmod
  4505 ;; This function is called by:
  4506 ;;		_isFullQueue
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           	psect	text26
  4511  0015F0                     __ptext26:
  4512                           	opt callstack 0
  4513  0015F0                     i2_getSizeQueue:
  4514                           	opt callstack 19
  4515  0015F0                     
  4516                           ;ready_queue.c: 11:     return (rear - front + 1 + 20) % 20;
  4517  0015F0  5052               	movf	_front^0,w,c
  4518  0015F2  5C50               	subwf	_rear^0,w,c
  4519  0015F4  6E07               	movwf	??i2_getSizeQueue^0,c
  4520  0015F6  5053               	movf	(_front+1)^0,w,c
  4521  0015F8  5851               	subwfb	(_rear+1)^0,w,c
  4522  0015FA  6E08               	movwf	(??i2_getSizeQueue+1)^0,c
  4523  0015FC  0E15               	movlw	21
  4524  0015FE  2407               	addwf	??i2_getSizeQueue^0,w,c
  4525  001600  6E01               	movwf	i2___awmod@dividend^0,c
  4526  001602  0E00               	movlw	0
  4527  001604  2008               	addwfc	(??i2_getSizeQueue+1)^0,w,c
  4528  001606  6E02               	movwf	(i2___awmod@dividend+1)^0,c
  4529  001608  0E00               	movlw	0
  4530  00160A  6E04               	movwf	(i2___awmod@divisor+1)^0,c
  4531  00160C  0E14               	movlw	20
  4532  00160E  6E03               	movwf	i2___awmod@divisor^0,c
  4533  001610  ECA9  F008         	call	i2___awmod	;wreg free
  4534  001614  5001               	movf	?i2___awmod^0,w,c
  4535  001616  0012               	return		;funcret
  4536  001618                     __end_ofi2_getSizeQueue:
  4537                           	opt callstack 0
  4538                           
  4539 ;; *************** function i2___awmod *****************
  4540 ;; Defined at:
  4541 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
  4542 ;; Parameters:    Size  Location     Type
  4543 ;;  dividend        2    0[COMRAM] int 
  4544 ;;  divisor         2    2[COMRAM] int 
  4545 ;; Auto vars:     Size  Location     Type
  4546 ;;  __awmod         1    5[COMRAM] unsigned char 
  4547 ;;  __awmod         1    4[COMRAM] unsigned char 
  4548 ;; Return value:  Size  Location     Type
  4549 ;;                  2    0[COMRAM] int 
  4550 ;; Registers used:
  4551 ;;		wreg, status,2, status,0
  4552 ;; Tracked objects:
  4553 ;;		On entry : 0/0
  4554 ;;		On exit  : 0/0
  4555 ;;		Unchanged: 0/0
  4556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4557 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4558 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4560 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4561 ;;Total ram usage:        6 bytes
  4562 ;; Hardware stack levels used:    1
  4563 ;; This function calls:
  4564 ;;		Nothing
  4565 ;; This function is called by:
  4566 ;;		_enqueue
  4567 ;;		i2_getSizeQueue
  4568 ;; This function uses a non-reentrant model
  4569 ;;
  4570                           
  4571                           	psect	text27
  4572  001152                     __ptext27:
  4573                           	opt callstack 0
  4574  001152                     i2___awmod:
  4575                           	opt callstack 21
  4576  001152  0E00               	movlw	0
  4577  001154  6E06               	movwf	i2___awmod@sign^0,c
  4578  001156  BE02               	btfsc	(i2___awmod@dividend+1)^0,7,c
  4579  001158  EFB2  F008         	goto	i2u105_40
  4580  00115C  EFB0  F008         	goto	i2u105_41
  4581  001160                     i2u105_41:
  4582  001160  EFB8  F008         	goto	i2l1895
  4583  001164                     i2u105_40:
  4584  001164  6C01               	negf	i2___awmod@dividend^0,c
  4585  001166  1E02               	comf	(i2___awmod@dividend+1)^0,f,c
  4586  001168  B0D8               	btfsc	status,0,c
  4587  00116A  2A02               	incf	(i2___awmod@dividend+1)^0,f,c
  4588  00116C  0E01               	movlw	1
  4589  00116E  6E06               	movwf	i2___awmod@sign^0,c
  4590  001170                     i2l1895:
  4591  001170  BE04               	btfsc	(i2___awmod@divisor+1)^0,7,c
  4592  001172  EFBF  F008         	goto	i2u106_40
  4593  001176  EFBD  F008         	goto	i2u106_41
  4594  00117A                     i2u106_41:
  4595  00117A  EFC3  F008         	goto	i2l1899
  4596  00117E                     i2u106_40:
  4597  00117E  6C03               	negf	i2___awmod@divisor^0,c
  4598  001180  1E04               	comf	(i2___awmod@divisor+1)^0,f,c
  4599  001182  B0D8               	btfsc	status,0,c
  4600  001184  2A04               	incf	(i2___awmod@divisor+1)^0,f,c
  4601  001186                     i2l1899:
  4602  001186  5003               	movf	i2___awmod@divisor^0,w,c
  4603  001188  1004               	iorwf	(i2___awmod@divisor+1)^0,w,c
  4604  00118A  B4D8               	btfsc	status,2,c
  4605  00118C  EFCA  F008         	goto	i2u107_41
  4606  001190  EFCC  F008         	goto	i2u107_40
  4607  001194                     i2u107_41:
  4608  001194  EFF0  F008         	goto	i2l1915
  4609  001198                     i2u107_40:
  4610  001198  0E01               	movlw	1
  4611  00119A  6E05               	movwf	i2___awmod@counter^0,c
  4612  00119C  EFD4  F008         	goto	i2l1905
  4613  0011A0                     i2l1903:
  4614  0011A0  90D8               	bcf	status,0,c
  4615  0011A2  3603               	rlcf	i2___awmod@divisor^0,f,c
  4616  0011A4  3604               	rlcf	(i2___awmod@divisor+1)^0,f,c
  4617  0011A6  2A05               	incf	i2___awmod@counter^0,f,c
  4618  0011A8                     i2l1905:
  4619  0011A8  AE04               	btfss	(i2___awmod@divisor+1)^0,7,c
  4620  0011AA  EFD9  F008         	goto	i2u108_41
  4621  0011AE  EFDB  F008         	goto	i2u108_40
  4622  0011B2                     i2u108_41:
  4623  0011B2  EFD0  F008         	goto	i2l1903
  4624  0011B6                     i2u108_40:
  4625  0011B6                     i2l1907:
  4626  0011B6  5003               	movf	i2___awmod@divisor^0,w,c
  4627  0011B8  5C01               	subwf	i2___awmod@dividend^0,w,c
  4628  0011BA  5004               	movf	(i2___awmod@divisor+1)^0,w,c
  4629  0011BC  5802               	subwfb	(i2___awmod@dividend+1)^0,w,c
  4630  0011BE  A0D8               	btfss	status,0,c
  4631  0011C0  EFE4  F008         	goto	i2u109_41
  4632  0011C4  EFE6  F008         	goto	i2u109_40
  4633  0011C8                     i2u109_41:
  4634  0011C8  EFEA  F008         	goto	i2l1911
  4635  0011CC                     i2u109_40:
  4636  0011CC  5003               	movf	i2___awmod@divisor^0,w,c
  4637  0011CE  5E01               	subwf	i2___awmod@dividend^0,f,c
  4638  0011D0  5004               	movf	(i2___awmod@divisor+1)^0,w,c
  4639  0011D2  5A02               	subwfb	(i2___awmod@dividend+1)^0,f,c
  4640  0011D4                     i2l1911:
  4641  0011D4  90D8               	bcf	status,0,c
  4642  0011D6  3204               	rrcf	(i2___awmod@divisor+1)^0,f,c
  4643  0011D8  3203               	rrcf	i2___awmod@divisor^0,f,c
  4644  0011DA  2E05               	decfsz	i2___awmod@counter^0,f,c
  4645  0011DC  EFDB  F008         	goto	i2l1907
  4646  0011E0                     i2l1915:
  4647  0011E0  5006               	movf	i2___awmod@sign^0,w,c
  4648  0011E2  B4D8               	btfsc	status,2,c
  4649  0011E4  EFF6  F008         	goto	i2u110_41
  4650  0011E8  EFF8  F008         	goto	i2u110_40
  4651  0011EC                     i2u110_41:
  4652  0011EC  EFFC  F008         	goto	i2l1919
  4653  0011F0                     i2u110_40:
  4654  0011F0  6C01               	negf	i2___awmod@dividend^0,c
  4655  0011F2  1E02               	comf	(i2___awmod@dividend+1)^0,f,c
  4656  0011F4  B0D8               	btfsc	status,0,c
  4657  0011F6  2A02               	incf	(i2___awmod@dividend+1)^0,f,c
  4658  0011F8                     i2l1919:
  4659  0011F8  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  4660  0011FC  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  4661  001200  0012               	return		;funcret
  4662  001202                     __end_ofi2___awmod:
  4663                           	opt callstack 0
  4664  0000                     
  4665                           	psect	text28
  4666  000000                     __ptext28:
  4667                           	opt callstack 0
  4668  000000                     
  4669                           	psect	rparam
  4670  0000                     
  4671                           	psect	temp
  4672  000058                     btemp:
  4673                           	opt callstack 0
  4674  000058                     	ds	1
  4675  0000                     int$flags	set	btemp
  4676  0000                     wtemp8	set	btemp+1
  4677  0000                     ttemp5	set	btemp+1
  4678  0000                     ttemp6	set	btemp+4
  4679  0000                     ttemp7	set	btemp+8
  4680                           tosu	equ	0xFFF
  4681                           tosh	equ	0xFFE
  4682                           tosl	equ	0xFFD
  4683                           stkptr	equ	0xFFC
  4684                           pclatu	equ	0xFFB
  4685                           pclath	equ	0xFFA
  4686                           pcl	equ	0xFF9
  4687                           tblptru	equ	0xFF8
  4688                           tblptrh	equ	0xFF7
  4689                           tblptrl	equ	0xFF6
  4690                           tablat	equ	0xFF5
  4691                           prodh	equ	0xFF4
  4692                           prodl	equ	0xFF3
  4693                           indf0	equ	0xFEF
  4694                           postinc0	equ	0xFEE
  4695                           postdec0	equ	0xFED
  4696                           preinc0	equ	0xFEC
  4697                           plusw0	equ	0xFEB
  4698                           fsr0h	equ	0xFEA
  4699                           fsr0l	equ	0xFE9
  4700                           wreg	equ	0xFE8
  4701                           indf1	equ	0xFE7
  4702                           postinc1	equ	0xFE6
  4703                           postdec1	equ	0xFE5
  4704                           preinc1	equ	0xFE4
  4705                           plusw1	equ	0xFE3
  4706                           fsr1h	equ	0xFE2
  4707                           fsr1l	equ	0xFE1
  4708                           bsr	equ	0xFE0
  4709                           indf2	equ	0xFDF
  4710                           postinc2	equ	0xFDE
  4711                           postdec2	equ	0xFDD
  4712                           preinc2	equ	0xFDC
  4713                           plusw2	equ	0xFDB
  4714                           fsr2h	equ	0xFDA
  4715                           fsr2l	equ	0xFD9
  4716                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         446
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      87
    BANK0           160     53      65
    BANK1           256      0     100
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    handleListHead$1755	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    handleListHead$1754	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED(), 

    ?_dequeue.data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    ?_dequeue.func_ptr	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED(), 

    register_timer@data	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    register_timer@callback	PTR FTN()void  size(3) Largest target is 1
		 -> blink_LED(), 

    node.data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    node.func_ptr	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED(), 

    addTask@data	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    addTask@ptr	PTR FTN()void  size(3) Largest target is 1
		 -> blink_LED(), 

    S29$data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    task_list.data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    S29$func_ptr	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED(), 

    task_list.func_ptr	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED(), 

    temp.data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    temp.func_ptr	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED(), 

    enqueue@data	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    enqueue@ptr	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED(), 

    S25$data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    ready_queue.data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    S25$func_ptr	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED(), 

    ready_queue.func_ptr	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED(), 

    blink_LED@data	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _timer_interrupt in COMRAM

    _timer_interrupt->_handleListHead
    _handleListHead->_enqueue
    _enqueue->_isFullQueue
    _isFullQueue->i2_getSizeQueue
    i2_getSizeQueue->i2___awmod

Critical Paths under _main in BANK0

    _main->_register_timer
    _system_initialize->_start_timer
    _start_timer->_initializeTaskList
    _initializeTaskList->_queueInitialize
    _queueInitialize->___wmul
    _register_timer->_addTask
    _addTask->___wmul
    _dispatch->_selectReadyTask
    _selectReadyTask->_dequeue
    _isEmptyQueue->_getSizeQueue
    _getSizeQueue->___awmod

Critical Paths under _timer_interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _timer_interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _timer_interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _timer_interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _timer_interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _timer_interrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _timer_interrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _timer_interrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _timer_interrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _timer_interrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _timer_interrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _timer_interrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _timer_interrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _timer_interrupt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _timer_interrupt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _timer_interrupt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   13275
                                             45 BANK0      8     8      0
                           _dispatch
                     _register_timer
                  _system_initialize
 ---------------------------------------------------------------------------------
 (1) _system_initialize                                    0     0      0    2903
               _interrupt_initialize
                     _osc_initialize
                     _pin_initialize
                        _start_timer
 ---------------------------------------------------------------------------------
 (2) _start_timer                                          3     3      0    2903
                                             10 BANK0      3     3      0
                 _initializeTaskList
 ---------------------------------------------------------------------------------
 (3) _initializeTaskList                                   2     2      0    2841
                                              8 BANK0      2     2      0
                             ___wmul
                    _queueInitialize
 ---------------------------------------------------------------------------------
 (4) _queueInitialize                                      2     2      0    1374
                                              6 BANK0      2     2      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _pin_initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _osc_initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _interrupt_initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _register_timer                                      13     0     13    5717
                                             32 BANK0     13     0     13
                            _addTask
 ---------------------------------------------------------------------------------
 (2) _addTask                                             26    13     13    2713
                                              6 BANK0     26    13     13
                             ___wmul
                         _isFullList
 ---------------------------------------------------------------------------------
 (3) _isFullList                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dispatch                                             0     0      0    4631
                    _selectReadyTask
 ---------------------------------------------------------------------------------
 (2) _selectReadyTask                                      5     5      0    4631
                                             20 BANK0      5     5      0
                          _blink_LED *
                            _dequeue
                       _isEmptyQueue
 ---------------------------------------------------------------------------------
 (3) _dequeue                                             12     7      5    3189
                                              8 BANK0     12     7      5
                            ___awmod
                             ___wmul
                       _isEmptyQueue
 ---------------------------------------------------------------------------------
 (3) _isEmptyQueue                                         0     0      0     903
                       _getSizeQueue
 ---------------------------------------------------------------------------------
 (4) _getSizeQueue                                         2     2      0     903
                                              6 BANK0      2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     903
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1244
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _blink_LED                                            7     5      2     440
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _timer_interrupt                                      6     6      0    2862
                                             39 COMRAM     6     6      0
                     _handleListHead
 ---------------------------------------------------------------------------------
 (8) _handleListHead                                      25    25      0    2862
                                             14 COMRAM    25    25      0
                            _enqueue
                         _removeTask
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) _removeTask                                           6     6      0     332
                                              0 COMRAM     6     6      0
                        _isEmptyList
 ---------------------------------------------------------------------------------
 (10) _isEmptyList                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _enqueue                                              5     0      5    1467
                                              9 COMRAM     5     0      5
                        _isFullQueue
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) i2___wmul                                             6     2      4     471
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) _isFullQueue                                         1     1      0     400
                                              8 COMRAM     1     1      0
                     i2_getSizeQueue
 ---------------------------------------------------------------------------------
 (11) i2_getSizeQueue                                      2     2      0     400
                                              6 COMRAM     2     2      0
                          i2___awmod
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dispatch
     _selectReadyTask
       _blink_LED *
       _dequeue *
         ___awmod
         ___wmul
         _isEmptyQueue
           _getSizeQueue
             ___awmod
       _isEmptyQueue *
         _getSizeQueue
           ___awmod
   _register_timer
     _addTask
       ___wmul
       _isFullList
   _system_initialize
     _interrupt_initialize
     _osc_initialize
     _pin_initialize
     _start_timer
       _initializeTaskList
         ___wmul
         _queueInitialize
           ___wmul

 _timer_interrupt (ROOT)
   _handleListHead
     _enqueue
       _isFullQueue
         i2_getSizeQueue
           i2___awmod
       i2___awmod
       i2___wmul
     _removeTask
       _isEmptyList
     i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0     12C      37        7.6%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      64       7       39.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     35      41       5       40.6%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      57       1       92.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      FC      32        0.0%
DATA                 0      0     228       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Oct 06 19:40:56 2019

             ??i2_getSizeQueue 0007                             l61 0D30                 ??_getSizeQueue 0066  
          ___wmul@multiplicand 0062                            l202 097C                            l122 16DC  
                          l116 16D6                            l125 1696                            l142 1466  
                          l310 1368                            l119 1660                            l152 159A  
                          l160 12EC                            l145 15C6                            l161 134C  
                          l321 1566                            l308 13E2                            l256 14CA  
                          l193 16B0                            l338 16E2                            l198 0FEE  
                          l722 10A0                            l478 15EE                    _start_timer 134E  
                 ___awmod@sign 0065                            prod 000FF3                            tosl 000FFD  
                          wreg 000FE8                   __CFG_LVP$OFF 000000                   __CFG_WDT$OFF 000000  
                         l2401 144A                           l2403 1568                           l2421 0BF0  
                         l2413 0B5E                           l2405 157C                           l2501 1398  
                         l2431 0CB0                           l2423 0C16                           l2415 0B62  
                         l2351 100C                           l2425 0C3E                           l2417 0BAA  
                         l2361 1040                           l2353 1010                           l2345 0FF0  
                         l2409 1582                           l2441 12AC                           l2513 0562  
                         l2601 152E                           l2505 13A0                           l2427 0C62  
                         l2419 0BCC                           l2435 0CD6                           l2371 107A  
                         l2363 1048                           l2355 101E                           l2347 0FF6  
                         l2451 1316                           l2443 12C2                           l2531 05AC  
                         l2515 0576                           l2611 09BC                           l2429 0C88  
                         l2365 1056                           l2373 1080                           l2357 1026  
                         l2349 1004                           l2381 159C                           l2445 12D6  
                         l2605 16DE                           l2533 05BC                           l2525 0582  
                         l2461 0EDE                           l2621 0ADE                           l2613 09F6  
                         l2375 1090                           l2367 106C                           l2359 1038  
                         l2551 0690                           l2543 05F2                           l2535 05D8  
                         l2519 057C                           l2391 13E4                           l2471 0FC2  
                         l2463 0EE2                           l2623 0B18                           l2615 0A30  
                         l2607 097E                           l2385 15C8                           l2377 1098  
                         l2369 1074                           l2449 12F4                           l2457 1698  
                         l2561 0782                           l2553 06E0                           l2545 0666  
                         l2537 05DC                           l2529 05AA                           l2481 165E  
                         l2473 0FC6                           l2625 0B52                           l2617 0A6A  
                         l2609 0982                           l2387 15E6                           l2571 0882  
                         l2563 07CC                           l2555 06F8                           l2547 0668  
                         l2483 16D8                           l2475 0FE2                           l2491 1388  
                         l2619 0AA4                           l2573 089A                           l2565 07FE  
                         l2557 0702                           l2549 067C                           l2477 16D2  
                         l2397 13EE                           l2469 0EEC                           l2493 138C  
                         l2485 1352                           l2591 14B6                           l2583 1468  
                         l2567 0812                           l2559 0776                           l2575 08BA  
                         l2479 163E                           l2399 1446                           l2495 138E  
                         l2585 146C                           l2577 08DE                           l2569 0852  
                         l2497 1390                           l2489 136C                           l2593 167E  
                         l2587 147E                           l2579 097A                           l2499 1394  
                         l2595 1686                           l2589 1494                           l2677 13B4  
                         l2597 168A                           l2679 0CEA                           l2599 1690  
                         _LATA 000F89                           _LATB 000F8A                           _LATC 000F8B  
                         _LATD 000F8C                           u1700 1466                           u1701 1462  
                         u1710 157C                           u1711 1578                           u1640 1004  
                         u1720 1598                           u1800 16B0                           u1641 1000  
                         u1721 1592                           u1650 101E                           u1730 159A  
                         u1810 0FE2                           u1651 101A                           u1811 0FDE  
                         u1740 0B88                           u1660 1038                           u1900 06E0  
                         u1820 1364                           u1741 0B82                           u1661 1034  
                         u1901 06DC                           u1821 1360                           u1750 0B8A  
                         u1670 1056                           u1910 0812                           u1830 0576  
                         u1671 1052                           u1911 080E                           u1831 0572  
                         u1680 106C                           u1760 12D6                           u1920 0852  
                         u1840 05A6                           u1681 1068                           u1761 12D2  
                         u1921 084E                           u1841 05A2                           u1690 1090  
                         u1930 08DE                           u1850 05BC                           u1691 108C  
                         u1771 12E0                           u1931 08DA                           u1851 05B8  
                         u1860 05D8                           u1781 1340                           u1941 1476  
                         u1861 05D4                           u1950 1494                           u1790 16AE  
                         u1870 05EE                           u1951 1490                           u1791 16A8  
                         u1871 05EA                           u1880 067C                           u1881 0678  
                         u1970 14CA                           u1890 0690                           u1971 14C6  
                         u1891 068C                           u1968 14A2                           u1969 14B6  
               ??_isEmptyQueue 0068       __size_of_selectReadyTask 0064                           _head 0095  
                         _main 097E                           _rear 0050                           fsr1h 000FE2  
                         fsr2h 000FDA                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 0058                           prodh 000FF4  
                         prodl 000FF3                           start 000E                  __CFG_IESO$OFF 000000  
                __CFG_MCLRE$ON 000000                   ___param_bank 000000        __end_of_queueInitialize 1468  
                        ?_main 0001                __end_of___awmod 10A2                __end_of_addTask 097E  
                        _T0CON 000FD5                          _T1CON 000FCD                          i2l223 0EDC  
                        i2l224 0E2C                          i2l145 1616                          i2l226 0E48  
                        i2l242 0442                          i2l234 0560                          i2l235 04FE  
                        i2l148 167C                          i2l156 12AA                          i2l236 002C  
                        i2l190 16C8                          i2l335 1136                          i2l722 1200  
                        i2l478 163C                          _TMR1H 000FCF                          _TMR0L 000FD6  
                        _TMR1L 000FCE                          _TRISA 000F92                          _TRISB 000F93  
                        _TRISC 000F94                          _TRISD 000F95                  __CFG_PWRT$OFF 000000  
               __CFG_FCMEN$OFF 000000                __end_of_dequeue 134E                __end_of_enqueue 12AC  
                        _count 004A                          _front 0052    __size_of_initializeTaskList 0112  
                        _value 0098                 __CFG_BOREN$OFF 000000                          pclath 000FFA  
                        tablat 000FF5  __size_of_interrupt_initialize 0006               __end_ofi2___wmul 163E  
                        plusw0 000FEB                          plusw1 000FE3                          plusw2 000FDB  
                        ttemp5 0059                          ttemp6 005C                          ttemp7 0060  
                        status 000FD8        __size_of_osc_initialize 0006                          wtemp8 0059  
           __size_ofi2___awmod 00B0                __initialization 14CC                   __end_of_main 0B5E  
               _pin_initialize 163E       __size_of_timer_interrupt 114A                         ??_main 008D  
                __activetblptr 000003                    enqueue@data 000D                         _ADCON1 000FC1  
               _register_timer 152E                         i2l2021 1618                         i2l2023 1634  
                       i2l2201 0012                         i2l2211 0158                         i2l2221 0214  
                       i2l2213 016E                         i2l2205 0034                         i2l2071 1236  
                       i2l2063 1202                         i2l2151 0D48                         i2l2231 0394  
                       i2l2223 02E4                         i2l2215 0182                         i2l2207 00FE  
                       i2l2073 1256                         i2l2161 0DDA                         i2l2153 0D6C  
                       i2l2233 03F2                         i2l2225 02F0                         i2l2217 01E0  
                       i2l2209 0108                         i2l2075 1282                         i2l2067 121A  
                       i2l2171 0EC2                         i2l2163 0DF8                         i2l2235 0476  
                       i2l2227 0350                         i2l2219 0208                         i2l2069 122E  
                       i2l2165 0E34                         i2l2173 0EDA                         i2l2157 0D72  
                       i2l2149 0D34                         i2l2237 0534                         i2l2229 0380  
                       i2l2167 0E6C                         i2l2159 0DD6                         i2l2271 10CA  
                       i2l2169 0E9A                         i2l2281 10FA                         i2l2273 10D8  
                       i2l2291 111A                         i2l2283 1108                         i2l2275 10DA  
                       i2l1901 1198                         i2l2293 112E                         i2l2285 110A  
                       i2l2277 10DE                         i2l2269 10BC                         i2l1911 11D4  
                       i2l1903 11A0                         i2l2287 1112                         i2l2279 10EC  
                       i2l1913 11DA                         i2l1905 11A8                         i2l2289 1116  
                       i2l1907 11B6                         i2l1915 11E0                         i2l1917 11F0  
                       i2l1909 11CC                         i2l1919 11F8                         i2l1945 15F0  
                       i2l1891 1164                         i2l1893 116C                         i2l1895 1170  
                       i2l1887 1152                         i2l1897 117E                         i2l1889 1156  
                       i2l1977 1662                         i2l1899 1186                         i2l1997 16B2  
          initializeTaskList@i 0068           __end_of_getSizeQueue 15C8                         _OSCCON 000FD3  
               __CFG_XINST$OFF 000000           __size_of_isEmptyList 0018               __end_of_dispatch 16E4  
            ??_selectReadyTask 0074                         ___wmul 15C8         __end_of_pin_initialize 1662  
                    ??___awmod 0064                      ??_addTask 0073           __size_of_isFullQueue 001C  
             ?_queueInitialize 0001                   addTask@delay 006A                         clear_0 14F4  
                       clear_1 1506                         clear_2 1512                         clear_3 151E  
              ___awmod@divisor 0062                ___awmod@counter 0064           __end_of_isEmptyQueue 159C  
                    ??_dequeue 006D                      ??_enqueue 000F                   __pdataCOMRAM 0050  
            __end_ofi2___awmod 1202                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8         __end_of_register_timer 1568                 i2___awmod@sign 0006  
                   __accesstop 0060        __end_of__initialization 1524                  ___rparam_used 000001  
               __pcstackCOMRAM 0001                ?_pin_initialize 0001             __size_of_blink_LED 01D4  
                    ?i2___wmul 0001                   ?_start_timer 0001                __CFG_OSC$INTIO7 000000  
            ??_timer_interrupt 0028                     addTask@idx 007F                     addTask@cur 007D  
                   addTask@ptr 006E                ?_register_timer 0080                     __pbssBANK0 008D  
                   __pbssBANK1 0100                 _osc_initialize 16D2        __size_of_handleListHead 0550  
       start_timer@timer_vaddr 006C                        ?___wmul 0060             register_timer@data 008B  
                   ??i2___wmul 0005                     _isFullList 1698          __size_of_getSizeQueue 002C  
       __end_of_osc_initialize 16D8                      ?_dispatch 0001                     _countRB0_1 008D  
                   _countRA5_1 0042              __end_of_blink_LED 0D32           register_timer@period 0080  
                      __Hparam 0000                        __Lparam 0000          __size_of_isEmptyQueue 0034  
                      ___awmod 0FF0                        _addTask 0562                __size_of___wmul 0028  
 __end_of_interrupt_initialize 16DE                        __pcinit 14CC                        __ramtop 1000  
                 _getSizeQueue 159C                        __ptext0 097E                        __ptext1 167E  
                      __ptext2 134E                        __ptext3 0EDE                        __ptext4 13E4  
                      __ptext5 163E                        __ptext6 16D2                        __ptext7 16D8  
                      __ptext8 152E                        __ptext9 0562                        _dequeue 12AC  
                      _enqueue 1202               ___awmod@dividend 0060        __size_ofi2_getSizeQueue 0028  
                addTask@period 0066     __end_of_initializeTaskList 0FF0                        _time_ms 0091  
                   ??_dispatch 0079                 __pintcode_body 10A2                ?_osc_initialize 0001  
         end_of_initialization 1524                _selectReadyTask 1468                        int_func 10A2  
                    _LED_state 002E            i2___wmul@multiplier 0001                   _isEmptyQueue 1568  
                   _removeTask 0D32             handleListHead@prev 0022                        postdec1 000FE5  
                      postdec2 000FDD                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                      _PORTAbits 000F80                      _PORTBbits 000F81  
                   dequeue@idx 006D                    ?_isFullList 0001                      _TRISAbits 000F92  
                    _TRISCbits 000F94                      _TRISFbits 000F97           __size_of_start_timer 0096  
                    i2___awmod 1152                  ??_isEmptyList 0001               ??_pin_initialize 0060  
               _handleListHead 0012                  ??_isFullQueue 0009                _timer_interrupt 0008  
               __end_of___wmul 15F0         register_timer@callback 0088                  __pidataCOMRAM 16CA  
                 _firstReadRB0 0055                   _firstReadRA5 0057                  _secondReadRB0 0054  
                _secondReadRA5 0056               ??_register_timer 008D               i2___wmul@product 0005  
     __size_of_queueInitialize 0084            start_initialization 14CC        __end_of_selectReadyTask 14CC  
            __size_ofi2___wmul 0026                     ?i2___awmod 0001            selectReadyTask@node 0074  
         _interrupt_initialize 16D8         __end_of_handleListHead 0562                     enqueue@ptr 000A  
                  ?_removeTask 0001            __size_of_isFullList 001A                    addTask@data 0071  
                     ??___wmul 0064            __end_of_isEmptyList 16CA                    addTask@prev 007B  
          __end_of_isFullQueue 167E                  blink_LED@data 0060                    __pbssBIGRAM 0164  
               i2_getSizeQueue 15F0                    __pbssCOMRAM 002E                  __pcstackBANK0 0060  
        ?_interrupt_initialize 0001              __size_of_dispatch 0006                ?_handleListHead 0001  
      __end_of_timer_interrupt 1152                  removeTask@idx 0006                  removeTask@pos 0005  
                    _blink_LED 0B5E                      __pintcode 0008                       ?___awmod 0060  
                     ?_addTask 0066         __end_ofi2_getSizeQueue 1618                       ?_dequeue 0068  
                     ?_enqueue 000A            register_timer@delay 0084               ??_osc_initialize 0060  
             ?_selectReadyTask 0001            __size_of_removeTask 01AC                    ??i2___awmod 0005  
            ??_queueInitialize 0066                 ___wmul@product 0064                       _LATAbits 000F89  
                     _LATCbits 000F8B                       _LATDbits 000F8C                       _LATFbits 000F8E  
           _initializeTaskList 0EDE                       _PIE1bits 000F9D                    _isEmptyList 16B2  
                     i2u110_40 11F0                       i2u110_41 11EC                       i2u105_40 1164  
                     i2u105_41 1160                       i2u106_40 117E                       i2u122_40 16C6  
                     i2u106_41 117A                       i2u122_41 16C0                       i2u107_40 1198  
                     i2u123_40 16C8                       i2u107_41 1194                       i2u108_40 11B6  
                     i2u108_41 11B2                       i2u109_40 11CC                       i2u117_40 167A  
                     i2u141_40 0D48                       i2u109_41 11C8                       i2u117_41 1674  
                     i2u141_41 0D44                       i2u118_40 167C                       i2u142_40 0D6C  
                     i2u150_40 0028                       i2u142_41 0D68                       i2u150_41 0024  
                     i2u143_40 0DF8                       i2u151_40 00FE                       i2u143_41 0DF4  
                     i2u151_41 00FA                       i2u128_40 1216                       i2u144_40 0E6C  
                     i2u152_40 016E                       i2u160_40 10D8                       i2u128_41 1212  
                     i2u144_41 0E68                       i2u152_41 016A                       i2u160_41 10D4  
                     i2u129_40 122E                       i2u145_40 0E9A                       i2u153_40 0182  
                     i2u161_40 10FA                       i2u129_41 122A                       i2u145_41 0E96  
                     i2u153_41 017E                       i2u161_41 10F6                       i2u154_40 01E0  
                     i2u162_40 1108                       i2u154_41 01DC                       i2u162_41 1104  
                     i2u155_40 0394                       i2u163_40 112E                       i2u155_41 0390  
                     i2u163_41 112A                       i2u156_40 03F2                       i2u156_41 03EE  
                     i2u157_40 0476                       i2u157_41 0472                       i2u158_40 0534  
                     i2u158_41 0530                       i2u159_40 10CA                       i2u159_41 10C6  
                     _PIR1bits 000F9E                      _task_list 0164                    _isFullQueue 1662  
            handleListHead@cur 0024                     ?_blink_LED 0060              handleListHead@pos 0026  
          ?_initializeTaskList 0001                ?i2_getSizeQueue 0001              ___wmul@multiplier 0060  
                     i2___wmul 1618                   ??_isFullList 0060              _system_initialize 167E  
         ??_initializeTaskList 0068         ??_interrupt_initialize 0060                      copy_data0 14E0  
           i2___awmod@dividend 0001             ?_system_initialize 0001            ??_system_initialize 006D  
             ?_timer_interrupt 0001                       __Hrparam 0000                       __Lrparam 0000  
                  _RB0_pressed 004E            _handleListHead$1754 001B            _handleListHead$1755 001E  
          _handleListHead$1756 0020             __end_of_isFullList 16B2                   blink_LED@idx 0066  
             __size_of___awmod 00B2               __size_of_addTask 041C          i2___wmul@multiplicand 0003  
                  _RA5_pressed 004F               __size_of_dequeue 00A2                  ??_start_timer 006A  
    __end_of_system_initialize 1698               __size_of_enqueue 00AA                       __ptext10 1698  
                     __ptext11 16DE                       __ptext20 0012                       __ptext12 1468  
                     __ptext21 0D32                       __ptext13 12AC                       __ptext22 16B2  
                     __ptext14 1568                       __ptext23 1202                       __ptext15 159C  
                     __ptext24 1618                       __ptext16 0FF0                       __ptext25 1662  
                     __ptext17 15C8                       __ptext26 15F0                       __ptext18 0B5E  
                     __ptext27 1152                       __ptext28 0000                       _dispatch 16DE  
                     _countRB0 003E                       _countRA5 0046                  __size_of_main 01E0  
                  _ready_queue 0100                   ??_removeTask 0001                    ??_blink_LED 0062  
                     _num_task 0097                       _stateRB0 004C                       int$flags 0058  
                     _stateRA5 004D              i2___awmod@divisor 0003              i2___awmod@counter 0005  
                   _INTCONbits 000FF2             __end_of_removeTask 0EDE               ??_handleListHead 000F  
          __end_of_start_timer 13E4                       intlevel2 0000                  ?_getSizeQueue 0001  
      __size_of_pin_initialize 0024                _queueInitialize 13E4     __size_of_system_initialize 001A  
                 fp__blink_LED 0000        __size_of_register_timer 003A                    dequeue@temp 006F  
                ?_isEmptyQueue 0001               queueInitialize@i 0066                   ?_isEmptyList 0001  
                 ?_isFullQueue 0001  
