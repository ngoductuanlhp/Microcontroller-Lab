

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Oct 06 19:25:00 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           ; Version 2.10
    49                           ; Generated 31/07/2019 GMT
    50                           ; 
    51                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F8722 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	idataCOMRAM
    84  0016CA                     __pidataCOMRAM:
    85                           	opt callstack 0
    86                           
    87                           ;initializer for _rear
    88  0016CA  FFFF               	dw	65535
    89                           
    90                           ;initializer for _front
    91  0016CC  FFFF               	dw	65535
    92                           
    93                           ;initializer for _secondReadRB0
    94  0016CE  01                 	db	1
    95                           
    96                           ;initializer for _firstReadRB0
    97  0016CF  01                 	db	1
    98                           
    99                           ;initializer for _secondReadRA5
   100  0016D0  01                 	db	1
   101                           
   102                           ;initializer for _firstReadRA5
   103  0016D1  01                 	db	1
   104  0000                     _PORTBbits	set	3969
   105  0000                     _PORTAbits	set	3968
   106  0000                     _TMR1L	set	4046
   107  0000                     _TMR1H	set	4047
   108  0000                     _T1CON	set	4045
   109  0000                     _PIR1bits	set	3998
   110  0000                     _PIE1bits	set	3997
   111  0000                     _TMR0L	set	4054
   112  0000                     _T0CON	set	4053
   113  0000                     _INTCONbits	set	4082
   114  0000                     _TRISB	set	3987
   115  0000                     _LATB	set	3978
   116  0000                     _TRISA	set	3986
   117  0000                     _LATA	set	3977
   118  0000                     _TRISD	set	3989
   119  0000                     _LATD	set	3980
   120  0000                     _ADCON1	set	4033
   121  0000                     _TRISC	set	3988
   122  0000                     _LATC	set	3979
   123  0000                     _OSCCON	set	4051
   124  0000                     _LATDbits	set	3980
   125                           
   126                           ; #config settings
   127  0000                     
   128                           	psect	cinit
   129  0014CC                     __pcinit:
   130                           	opt callstack 0
   131  0014CC                     start_initialization:
   132                           	opt callstack 0
   133  0014CC                     __initialization:
   134                           	opt callstack 0
   135                           
   136                           ; Initialize objects allocated to COMRAM (8 bytes)
   137                           ; load TBLPTR registers with __pidataCOMRAM
   138  0014CC  0ECA               	movlw	low __pidataCOMRAM
   139  0014CE  6EF6               	movwf	tblptrl,c
   140  0014D0  0E16               	movlw	high __pidataCOMRAM
   141  0014D2  6EF7               	movwf	tblptrh,c
   142  0014D4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   143  0014D6  6EF8               	movwf	tblptru,c
   144  0014D8  EE00  F050         	lfsr	0,__pdataCOMRAM
   145  0014DC  EE10 F008          	lfsr	1,8
   146  0014E0                     copy_data0:
   147  0014E0  0009               	tblrd		*+
   148  0014E2  CFF5 FFEE          	movff	tablat,postinc0
   149  0014E6  50E5               	movf	postdec1,w,c
   150  0014E8  50E1               	movf	fsr1l,w,c
   151  0014EA  E1FA               	bnz	copy_data0
   152                           
   153                           ; Clear objects allocated to BIGRAM (300 bytes)
   154  0014EC  EE01  F064         	lfsr	0,__pbssBIGRAM
   155  0014F0  EE11 F02C          	lfsr	1,300
   156  0014F4                     clear_0:
   157  0014F4  6AEE               	clrf	postinc0,c
   158  0014F6  50E5               	movf	postdec1,w,c
   159  0014F8  50E1               	movf	fsr1l,w,c
   160  0014FA  E1FC               	bnz	clear_0
   161  0014FC  50E2               	movf	fsr1h,w,c
   162  0014FE  E1FA               	bnz	clear_0
   163                           
   164                           ; Clear objects allocated to BANK1 (100 bytes)
   165  001500  EE01  F000         	lfsr	0,__pbssBANK1
   166  001504  0E64               	movlw	100
   167  001506                     clear_1:
   168  001506  6AEE               	clrf	postinc0,c
   169  001508  06E8               	decf	wreg,f,c
   170  00150A  E1FD               	bnz	clear_1
   171                           
   172                           ; Clear objects allocated to BANK0 (12 bytes)
   173  00150C  EE00  F08D         	lfsr	0,__pbssBANK0
   174  001510  0E0C               	movlw	12
   175  001512                     clear_2:
   176  001512  6AEE               	clrf	postinc0,c
   177  001514  06E8               	decf	wreg,f,c
   178  001516  E1FD               	bnz	clear_2
   179                           
   180                           ; Clear objects allocated to COMRAM (34 bytes)
   181  001518  EE00  F02E         	lfsr	0,__pbssCOMRAM
   182  00151C  0E22               	movlw	34
   183  00151E                     clear_3:
   184  00151E  6AEE               	clrf	postinc0,c
   185  001520  06E8               	decf	wreg,f,c
   186  001522  E1FD               	bnz	clear_3
   187  001524                     end_of_initialization:
   188                           	opt callstack 0
   189  001524                     __end_of__initialization:
   190                           	opt callstack 0
   191  001524  9058               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   192  001526  9258               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   193  001528  0100               	movlb	0
   194  00152A  EFBF  F004         	goto	_main	;jump to C main() function
   195                           
   196                           	psect	bssCOMRAM
   197  00002E                     __pbssCOMRAM:
   198                           	opt callstack 0
   199  00002E                     _LED_state:
   200                           	opt callstack 0
   201  00002E                     	ds	16
   202  00003E                     _countRB0:
   203                           	opt callstack 0
   204  00003E                     	ds	4
   205  000042                     _countRA5_1:
   206                           	opt callstack 0
   207  000042                     	ds	4
   208  000046                     _countRA5:
   209                           	opt callstack 0
   210  000046                     	ds	4
   211  00004A                     _count:
   212                           	opt callstack 0
   213  00004A                     	ds	2
   214  00004C                     _stateRB0:
   215                           	opt callstack 0
   216  00004C                     	ds	1
   217  00004D                     _stateRA5:
   218                           	opt callstack 0
   219  00004D                     	ds	1
   220  00004E                     _RB0_pressed:
   221                           	opt callstack 0
   222  00004E                     	ds	1
   223  00004F                     _RA5_pressed:
   224                           	opt callstack 0
   225  00004F                     	ds	1
   226                           
   227                           	psect	dataCOMRAM
   228  000050                     __pdataCOMRAM:
   229                           	opt callstack 0
   230  000050                     _rear:
   231                           	opt callstack 0
   232  000050                     	ds	2
   233  000052                     _front:
   234                           	opt callstack 0
   235  000052                     	ds	2
   236  000054                     _secondReadRB0:
   237                           	opt callstack 0
   238  000054                     	ds	1
   239  000055                     _firstReadRB0:
   240                           	opt callstack 0
   241  000055                     	ds	1
   242  000056                     _secondReadRA5:
   243                           	opt callstack 0
   244  000056                     	ds	1
   245  000057                     _firstReadRA5:
   246                           	opt callstack 0
   247  000057                     	ds	1
   248                           
   249                           	psect	bssBANK0
   250  00008D                     __pbssBANK0:
   251                           	opt callstack 0
   252  00008D                     _countRB0_1:
   253                           	opt callstack 0
   254  00008D                     	ds	4
   255  000091                     _time_ms:
   256                           	opt callstack 0
   257  000091                     	ds	4
   258  000095                     _head:
   259                           	opt callstack 0
   260  000095                     	ds	2
   261  000097                     _num_task:
   262                           	opt callstack 0
   263  000097                     	ds	1
   264  000098                     _value:
   265                           	opt callstack 0
   266  000098                     	ds	1
   267                           
   268                           	psect	bssBANK1
   269  000100                     __pbssBANK1:
   270                           	opt callstack 0
   271  000100                     _ready_queue:
   272                           	opt callstack 0
   273  000100                     	ds	100
   274                           
   275                           	psect	bssBIGRAM
   276  000164                     __pbssBIGRAM:
   277                           	opt callstack 0
   278  000164                     _task_list:
   279                           	opt callstack 0
   280  000164                     	ds	300
   281                           
   282                           	psect	cstackBANK0
   283  000060                     __pcstackBANK0:
   284                           	opt callstack 0
   285  000060                     ?___wmul:
   286                           	opt callstack 0
   287  000060                     ?___awmod:
   288                           	opt callstack 0
   289  000060                     blink_LED@data:
   290                           	opt callstack 0
   291  000060                     ___wmul@multiplier:
   292                           	opt callstack 0
   293  000060                     ___awmod@dividend:
   294                           	opt callstack 0
   295                           
   296                           ; 2 bytes @ 0x0
   297  000060                     	ds	2
   298  000062                     ??_blink_LED:
   299  000062                     ___wmul@multiplicand:
   300                           	opt callstack 0
   301  000062                     ___awmod@divisor:
   302                           	opt callstack 0
   303                           
   304                           ; 2 bytes @ 0x2
   305  000062                     	ds	2
   306  000064                     ___awmod@counter:
   307                           	opt callstack 0
   308  000064                     ___wmul@product:
   309                           	opt callstack 0
   310                           
   311                           ; 2 bytes @ 0x4
   312  000064                     	ds	1
   313  000065                     ___awmod@sign:
   314                           	opt callstack 0
   315                           
   316                           ; 1 bytes @ 0x5
   317  000065                     	ds	1
   318  000066                     ??_getSizeQueue:
   319  000066                     blink_LED@idx:
   320                           	opt callstack 0
   321  000066                     queueInitialize@i:
   322                           	opt callstack 0
   323  000066                     addTask@period:
   324                           	opt callstack 0
   325                           
   326                           ; 4 bytes @ 0x6
   327  000066                     	ds	2
   328  000068                     ?_dequeue:
   329                           	opt callstack 0
   330  000068                     initializeTaskList@i:
   331                           	opt callstack 0
   332                           
   333                           ; 2 bytes @ 0x8
   334  000068                     	ds	2
   335  00006A                     ??_start_timer:
   336  00006A                     addTask@delay:
   337                           	opt callstack 0
   338                           
   339                           ; 4 bytes @ 0xA
   340  00006A                     	ds	2
   341  00006C                     start_timer@timer_vaddr:
   342                           	opt callstack 0
   343                           
   344                           ; 1 bytes @ 0xC
   345  00006C                     	ds	1
   346  00006D                     dequeue@idx:
   347                           	opt callstack 0
   348                           
   349                           ; 2 bytes @ 0xD
   350  00006D                     	ds	1
   351  00006E                     addTask@ptr:
   352                           	opt callstack 0
   353                           
   354                           ; 3 bytes @ 0xE
   355  00006E                     	ds	1
   356  00006F                     dequeue@temp:
   357                           	opt callstack 0
   358                           
   359                           ; 5 bytes @ 0xF
   360  00006F                     	ds	2
   361  000071                     addTask@data:
   362                           	opt callstack 0
   363                           
   364                           ; 2 bytes @ 0x11
   365  000071                     	ds	2
   366  000073                     ??_addTask:
   367                           
   368                           ; 1 bytes @ 0x13
   369  000073                     	ds	1
   370  000074                     selectReadyTask@node:
   371                           	opt callstack 0
   372                           
   373                           ; 5 bytes @ 0x14
   374  000074                     	ds	5
   375  000079                     
   376                           ; 1 bytes @ 0x19
   377  000079                     	ds	2
   378  00007B                     addTask@prev:
   379                           	opt callstack 0
   380                           
   381                           ; 2 bytes @ 0x1B
   382  00007B                     	ds	2
   383  00007D                     addTask@cur:
   384                           	opt callstack 0
   385                           
   386                           ; 2 bytes @ 0x1D
   387  00007D                     	ds	2
   388  00007F                     addTask@idx:
   389                           	opt callstack 0
   390                           
   391                           ; 1 bytes @ 0x1F
   392  00007F                     	ds	1
   393  000080                     register_timer@period:
   394                           	opt callstack 0
   395                           
   396                           ; 4 bytes @ 0x20
   397  000080                     	ds	4
   398  000084                     register_timer@delay:
   399                           	opt callstack 0
   400                           
   401                           ; 4 bytes @ 0x24
   402  000084                     	ds	4
   403  000088                     register_timer@callback:
   404                           	opt callstack 0
   405                           
   406                           ; 3 bytes @ 0x28
   407  000088                     	ds	3
   408  00008B                     register_timer@data:
   409                           	opt callstack 0
   410                           
   411                           ; 2 bytes @ 0x2B
   412  00008B                     	ds	2
   413  00008D                     
   414                           ; 1 bytes @ 0x2D
   415                           
   416                           	psect	cstackCOMRAM
   417  000001                     __pcstackCOMRAM:
   418                           	opt callstack 0
   419  000001                     ??_removeTask:
   420  000001                     ?i2___wmul:
   421                           	opt callstack 0
   422  000001                     ?i2___awmod:
   423                           	opt callstack 0
   424  000001                     i2___wmul@multiplier:
   425                           	opt callstack 0
   426  000001                     i2___awmod@dividend:
   427                           	opt callstack 0
   428                           
   429                           ; 2 bytes @ 0x0
   430  000001                     	ds	2
   431  000003                     i2___wmul@multiplicand:
   432                           	opt callstack 0
   433  000003                     i2___awmod@divisor:
   434                           	opt callstack 0
   435                           
   436                           ; 2 bytes @ 0x2
   437  000003                     	ds	2
   438  000005                     removeTask@pos:
   439                           	opt callstack 0
   440  000005                     i2___awmod@counter:
   441                           	opt callstack 0
   442  000005                     i2___wmul@product:
   443                           	opt callstack 0
   444                           
   445                           ; 2 bytes @ 0x4
   446  000005                     	ds	1
   447  000006                     removeTask@idx:
   448                           	opt callstack 0
   449  000006                     i2___awmod@sign:
   450                           	opt callstack 0
   451                           
   452                           ; 1 bytes @ 0x5
   453  000006                     	ds	1
   454  000007                     ??i2_getSizeQueue:
   455                           
   456                           ; 1 bytes @ 0x6
   457  000007                     	ds	2
   458  000009                     ??_isFullQueue:
   459                           
   460                           ; 1 bytes @ 0x8
   461  000009                     	ds	1
   462  00000A                     enqueue@ptr:
   463                           	opt callstack 0
   464                           
   465                           ; 3 bytes @ 0x9
   466  00000A                     	ds	3
   467  00000D                     enqueue@data:
   468                           	opt callstack 0
   469                           
   470                           ; 2 bytes @ 0xC
   471  00000D                     	ds	2
   472  00000F                     ??_handleListHead:
   473                           
   474                           ; 1 bytes @ 0xE
   475  00000F                     	ds	12
   476  00001B                     _handleListHead$1389:
   477                           	opt callstack 0
   478                           
   479                           ; 3 bytes @ 0x1A
   480  00001B                     	ds	3
   481  00001E                     _handleListHead$1390:
   482                           	opt callstack 0
   483                           
   484                           ; 2 bytes @ 0x1D
   485  00001E                     	ds	2
   486  000020                     _handleListHead$1391:
   487                           	opt callstack 0
   488                           
   489                           ; 2 bytes @ 0x1F
   490  000020                     	ds	2
   491  000022                     handleListHead@prev:
   492                           	opt callstack 0
   493                           
   494                           ; 2 bytes @ 0x21
   495  000022                     	ds	2
   496  000024                     handleListHead@cur:
   497                           	opt callstack 0
   498                           
   499                           ; 2 bytes @ 0x23
   500  000024                     	ds	2
   501  000026                     handleListHead@pos:
   502                           	opt callstack 0
   503                           
   504                           ; 2 bytes @ 0x25
   505  000026                     	ds	2
   506  000028                     ??_timer_interrupt:
   507                           
   508                           ; 1 bytes @ 0x27
   509  000028                     	ds	6
   510                           
   511 ;;
   512 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   513 ;;
   514 ;; *************** function _main *****************
   515 ;; Defined at:
   516 ;;		line 74 in file "main.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;		None
   519 ;; Auto vars:     Size  Location     Type
   520 ;;  idx7            1    0        unsigned char 
   521 ;;  idx6            1    0        unsigned char 
   522 ;;  idx5            1    0        unsigned char 
   523 ;;  idx4            1    0        unsigned char 
   524 ;;  idx3            1    0        unsigned char 
   525 ;;  idx2            1    0        unsigned char 
   526 ;;  idx1            1    0        unsigned char 
   527 ;;  idx0            1    0        unsigned char 
   528 ;; Return value:  Size  Location     Type
   529 ;;                  1    wreg      void 
   530 ;; Registers used:
   531 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
   532 ;; Tracked objects:
   533 ;;		On entry : 0/0
   534 ;;		On exit  : 0/0
   535 ;;		Unchanged: 0/0
   536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   538 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   540 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   541 ;;Total ram usage:        8 bytes
   542 ;; Hardware stack levels required when called:   12
   543 ;; This function calls:
   544 ;;		_dispatch
   545 ;;		_register_timer
   546 ;;		_system_initialize
   547 ;; This function is called by:
   548 ;;		Startup code after reset
   549 ;; This function uses a non-reentrant model
   550 ;;
   551                           
   552                           	psect	text0
   553  00097E                     __ptext0:
   554                           	opt callstack 0
   555  00097E                     _main:
   556                           	opt callstack 19
   557  00097E                     
   558                           ;main.c: 75:     system_initialize();
   559  00097E  EC3F  F00B         	call	_system_initialize	;wreg free
   560  000982  0EE8               	movlw	232
   561  000984  0100               	movlb	0	; () banked
   562  000986  6F80               	movwf	register_timer@period& (0+255),b
   563  000988  0E03               	movlw	3
   564  00098A  6F81               	movwf	(register_timer@period+1)& (0+255),b
   565  00098C  0E00               	movlw	0
   566  00098E  6F82               	movwf	(register_timer@period+2)& (0+255),b
   567  000990  0E00               	movlw	0
   568  000992  6F83               	movwf	(register_timer@period+3)& (0+255),b
   569  000994  0E00               	movlw	0
   570  000996  6F84               	movwf	register_timer@delay& (0+255),b
   571  000998  0E00               	movlw	0
   572  00099A  6F85               	movwf	(register_timer@delay+1)& (0+255),b
   573  00099C  0E00               	movlw	0
   574  00099E  6F86               	movwf	(register_timer@delay+2)& (0+255),b
   575  0009A0  0E00               	movlw	0
   576  0009A2  6F87               	movwf	(register_timer@delay+3)& (0+255),b
   577  0009A4  0E5E               	movlw	low _blink_LED
   578  0009A6  6F88               	movwf	register_timer@callback& (0+255),b
   579  0009A8  0E0B               	movlw	high _blink_LED
   580  0009AA  6F89               	movwf	(register_timer@callback+1)& (0+255),b
   581  0009AC  0E00               	movlw	low (_blink_LED shr (0+16))
   582  0009AE  6F8A               	movwf	(register_timer@callback+2)& (0+255),b
   583  0009B0  0E00               	movlw	0
   584  0009B2  6F8B               	movwf	register_timer@data& (0+255),b
   585  0009B4  0E00               	movlw	0
   586  0009B6  6F8C               	movwf	(register_timer@data+1)& (0+255),b
   587  0009B8  EC97  F00A         	call	_register_timer	;wreg free
   588  0009BC  0EE8               	movlw	232
   589  0009BE  0100               	movlb	0	; () banked
   590  0009C0  6F80               	movwf	register_timer@period& (0+255),b
   591  0009C2  0E03               	movlw	3
   592  0009C4  6F81               	movwf	(register_timer@period+1)& (0+255),b
   593  0009C6  0E00               	movlw	0
   594  0009C8  6F82               	movwf	(register_timer@period+2)& (0+255),b
   595  0009CA  0E00               	movlw	0
   596  0009CC  6F83               	movwf	(register_timer@period+3)& (0+255),b
   597  0009CE  0EC8               	movlw	200
   598  0009D0  6F84               	movwf	register_timer@delay& (0+255),b
   599  0009D2  0E00               	movlw	0
   600  0009D4  6F85               	movwf	(register_timer@delay+1)& (0+255),b
   601  0009D6  0E00               	movlw	0
   602  0009D8  6F86               	movwf	(register_timer@delay+2)& (0+255),b
   603  0009DA  0E00               	movlw	0
   604  0009DC  6F87               	movwf	(register_timer@delay+3)& (0+255),b
   605  0009DE  0E5E               	movlw	low _blink_LED
   606  0009E0  6F88               	movwf	register_timer@callback& (0+255),b
   607  0009E2  0E0B               	movlw	high _blink_LED
   608  0009E4  6F89               	movwf	(register_timer@callback+1)& (0+255),b
   609  0009E6  0E00               	movlw	low (_blink_LED shr (0+16))
   610  0009E8  6F8A               	movwf	(register_timer@callback+2)& (0+255),b
   611  0009EA  0E01               	movlw	1
   612  0009EC  6F8B               	movwf	register_timer@data& (0+255),b
   613  0009EE  0E00               	movlw	0
   614  0009F0  6F8C               	movwf	(register_timer@data+1)& (0+255),b
   615  0009F2  EC97  F00A         	call	_register_timer	;wreg free
   616  0009F6  0EB8               	movlw	184
   617  0009F8  0100               	movlb	0	; () banked
   618  0009FA  6F80               	movwf	register_timer@period& (0+255),b
   619  0009FC  0E0B               	movlw	11
   620  0009FE  6F81               	movwf	(register_timer@period+1)& (0+255),b
   621  000A00  0E00               	movlw	0
   622  000A02  6F82               	movwf	(register_timer@period+2)& (0+255),b
   623  000A04  0E00               	movlw	0
   624  000A06  6F83               	movwf	(register_timer@period+3)& (0+255),b
   625  000A08  0E90               	movlw	144
   626  000A0A  6F84               	movwf	register_timer@delay& (0+255),b
   627  000A0C  0E01               	movlw	1
   628  000A0E  6F85               	movwf	(register_timer@delay+1)& (0+255),b
   629  000A10  0E00               	movlw	0
   630  000A12  6F86               	movwf	(register_timer@delay+2)& (0+255),b
   631  000A14  0E00               	movlw	0
   632  000A16  6F87               	movwf	(register_timer@delay+3)& (0+255),b
   633  000A18  0E5E               	movlw	low _blink_LED
   634  000A1A  6F88               	movwf	register_timer@callback& (0+255),b
   635  000A1C  0E0B               	movlw	high _blink_LED
   636  000A1E  6F89               	movwf	(register_timer@callback+1)& (0+255),b
   637  000A20  0E00               	movlw	low (_blink_LED shr (0+16))
   638  000A22  6F8A               	movwf	(register_timer@callback+2)& (0+255),b
   639  000A24  0E02               	movlw	2
   640  000A26  6F8B               	movwf	register_timer@data& (0+255),b
   641  000A28  0E00               	movlw	0
   642  000A2A  6F8C               	movwf	(register_timer@data+1)& (0+255),b
   643  000A2C  EC97  F00A         	call	_register_timer	;wreg free
   644  000A30  0E28               	movlw	40
   645  000A32  0100               	movlb	0	; () banked
   646  000A34  6F80               	movwf	register_timer@period& (0+255),b
   647  000A36  0E23               	movlw	35
   648  000A38  6F81               	movwf	(register_timer@period+1)& (0+255),b
   649  000A3A  0E00               	movlw	0
   650  000A3C  6F82               	movwf	(register_timer@period+2)& (0+255),b
   651  000A3E  0E00               	movlw	0
   652  000A40  6F83               	movwf	(register_timer@period+3)& (0+255),b
   653  000A42  0E90               	movlw	144
   654  000A44  6F84               	movwf	register_timer@delay& (0+255),b
   655  000A46  0E01               	movlw	1
   656  000A48  6F85               	movwf	(register_timer@delay+1)& (0+255),b
   657  000A4A  0E00               	movlw	0
   658  000A4C  6F86               	movwf	(register_timer@delay+2)& (0+255),b
   659  000A4E  0E00               	movlw	0
   660  000A50  6F87               	movwf	(register_timer@delay+3)& (0+255),b
   661  000A52  0E5E               	movlw	low _blink_LED
   662  000A54  6F88               	movwf	register_timer@callback& (0+255),b
   663  000A56  0E0B               	movlw	high _blink_LED
   664  000A58  6F89               	movwf	(register_timer@callback+1)& (0+255),b
   665  000A5A  0E00               	movlw	low (_blink_LED shr (0+16))
   666  000A5C  6F8A               	movwf	(register_timer@callback+2)& (0+255),b
   667  000A5E  0E03               	movlw	3
   668  000A60  6F8B               	movwf	register_timer@data& (0+255),b
   669  000A62  0E00               	movlw	0
   670  000A64  6F8C               	movwf	(register_timer@data+1)& (0+255),b
   671  000A66  EC97  F00A         	call	_register_timer	;wreg free
   672  000A6A  0E7C               	movlw	124
   673  000A6C  0100               	movlb	0	; () banked
   674  000A6E  6F80               	movwf	register_timer@period& (0+255),b
   675  000A70  0E15               	movlw	21
   676  000A72  6F81               	movwf	(register_timer@period+1)& (0+255),b
   677  000A74  0E00               	movlw	0
   678  000A76  6F82               	movwf	(register_timer@period+2)& (0+255),b
   679  000A78  0E00               	movlw	0
   680  000A7A  6F83               	movwf	(register_timer@period+3)& (0+255),b
   681  000A7C  0E90               	movlw	144
   682  000A7E  6F84               	movwf	register_timer@delay& (0+255),b
   683  000A80  0E01               	movlw	1
   684  000A82  6F85               	movwf	(register_timer@delay+1)& (0+255),b
   685  000A84  0E00               	movlw	0
   686  000A86  6F86               	movwf	(register_timer@delay+2)& (0+255),b
   687  000A88  0E00               	movlw	0
   688  000A8A  6F87               	movwf	(register_timer@delay+3)& (0+255),b
   689  000A8C  0E5E               	movlw	low _blink_LED
   690  000A8E  6F88               	movwf	register_timer@callback& (0+255),b
   691  000A90  0E0B               	movlw	high _blink_LED
   692  000A92  6F89               	movwf	(register_timer@callback+1)& (0+255),b
   693  000A94  0E00               	movlw	low (_blink_LED shr (0+16))
   694  000A96  6F8A               	movwf	(register_timer@callback+2)& (0+255),b
   695  000A98  0E04               	movlw	4
   696  000A9A  6F8B               	movwf	register_timer@data& (0+255),b
   697  000A9C  0E00               	movlw	0
   698  000A9E  6F8C               	movwf	(register_timer@data+1)& (0+255),b
   699  000AA0  EC97  F00A         	call	_register_timer	;wreg free
   700  000AA4  0EB8               	movlw	184
   701  000AA6  0100               	movlb	0	; () banked
   702  000AA8  6F80               	movwf	register_timer@period& (0+255),b
   703  000AAA  0E0B               	movlw	11
   704  000AAC  6F81               	movwf	(register_timer@period+1)& (0+255),b
   705  000AAE  0E00               	movlw	0
   706  000AB0  6F82               	movwf	(register_timer@period+2)& (0+255),b
   707  000AB2  0E00               	movlw	0
   708  000AB4  6F83               	movwf	(register_timer@period+3)& (0+255),b
   709  000AB6  0E90               	movlw	144
   710  000AB8  6F84               	movwf	register_timer@delay& (0+255),b
   711  000ABA  0E01               	movlw	1
   712  000ABC  6F85               	movwf	(register_timer@delay+1)& (0+255),b
   713  000ABE  0E00               	movlw	0
   714  000AC0  6F86               	movwf	(register_timer@delay+2)& (0+255),b
   715  000AC2  0E00               	movlw	0
   716  000AC4  6F87               	movwf	(register_timer@delay+3)& (0+255),b
   717  000AC6  0E5E               	movlw	low _blink_LED
   718  000AC8  6F88               	movwf	register_timer@callback& (0+255),b
   719  000ACA  0E0B               	movlw	high _blink_LED
   720  000ACC  6F89               	movwf	(register_timer@callback+1)& (0+255),b
   721  000ACE  0E00               	movlw	low (_blink_LED shr (0+16))
   722  000AD0  6F8A               	movwf	(register_timer@callback+2)& (0+255),b
   723  000AD2  0E05               	movlw	5
   724  000AD4  6F8B               	movwf	register_timer@data& (0+255),b
   725  000AD6  0E00               	movlw	0
   726  000AD8  6F8C               	movwf	(register_timer@data+1)& (0+255),b
   727  000ADA  EC97  F00A         	call	_register_timer	;wreg free
   728  000ADE  0ED0               	movlw	208
   729  000AE0  0100               	movlb	0	; () banked
   730  000AE2  6F80               	movwf	register_timer@period& (0+255),b
   731  000AE4  0E07               	movlw	7
   732  000AE6  6F81               	movwf	(register_timer@period+1)& (0+255),b
   733  000AE8  0E00               	movlw	0
   734  000AEA  6F82               	movwf	(register_timer@period+2)& (0+255),b
   735  000AEC  0E00               	movlw	0
   736  000AEE  6F83               	movwf	(register_timer@period+3)& (0+255),b
   737  000AF0  0E90               	movlw	144
   738  000AF2  6F84               	movwf	register_timer@delay& (0+255),b
   739  000AF4  0E01               	movlw	1
   740  000AF6  6F85               	movwf	(register_timer@delay+1)& (0+255),b
   741  000AF8  0E00               	movlw	0
   742  000AFA  6F86               	movwf	(register_timer@delay+2)& (0+255),b
   743  000AFC  0E00               	movlw	0
   744  000AFE  6F87               	movwf	(register_timer@delay+3)& (0+255),b
   745  000B00  0E5E               	movlw	low _blink_LED
   746  000B02  6F88               	movwf	register_timer@callback& (0+255),b
   747  000B04  0E0B               	movlw	high _blink_LED
   748  000B06  6F89               	movwf	(register_timer@callback+1)& (0+255),b
   749  000B08  0E00               	movlw	low (_blink_LED shr (0+16))
   750  000B0A  6F8A               	movwf	(register_timer@callback+2)& (0+255),b
   751  000B0C  0E06               	movlw	6
   752  000B0E  6F8B               	movwf	register_timer@data& (0+255),b
   753  000B10  0E00               	movlw	0
   754  000B12  6F8C               	movwf	(register_timer@data+1)& (0+255),b
   755  000B14  EC97  F00A         	call	_register_timer	;wreg free
   756  000B18  0ED0               	movlw	208
   757  000B1A  0100               	movlb	0	; () banked
   758  000B1C  6F80               	movwf	register_timer@period& (0+255),b
   759  000B1E  0E07               	movlw	7
   760  000B20  6F81               	movwf	(register_timer@period+1)& (0+255),b
   761  000B22  0E00               	movlw	0
   762  000B24  6F82               	movwf	(register_timer@period+2)& (0+255),b
   763  000B26  0E00               	movlw	0
   764  000B28  6F83               	movwf	(register_timer@period+3)& (0+255),b
   765  000B2A  0E90               	movlw	144
   766  000B2C  6F84               	movwf	register_timer@delay& (0+255),b
   767  000B2E  0E01               	movlw	1
   768  000B30  6F85               	movwf	(register_timer@delay+1)& (0+255),b
   769  000B32  0E00               	movlw	0
   770  000B34  6F86               	movwf	(register_timer@delay+2)& (0+255),b
   771  000B36  0E00               	movlw	0
   772  000B38  6F87               	movwf	(register_timer@delay+3)& (0+255),b
   773  000B3A  0E5E               	movlw	low _blink_LED
   774  000B3C  6F88               	movwf	register_timer@callback& (0+255),b
   775  000B3E  0E0B               	movlw	high _blink_LED
   776  000B40  6F89               	movwf	(register_timer@callback+1)& (0+255),b
   777  000B42  0E00               	movlw	low (_blink_LED shr (0+16))
   778  000B44  6F8A               	movwf	(register_timer@callback+2)& (0+255),b
   779  000B46  0E07               	movlw	7
   780  000B48  6F8B               	movwf	register_timer@data& (0+255),b
   781  000B4A  0E00               	movlw	0
   782  000B4C  6F8C               	movwf	(register_timer@data+1)& (0+255),b
   783  000B4E  EC97  F00A         	call	_register_timer	;wreg free
   784  000B52                     l2415:
   785                           
   786                           ;main.c: 92:         dispatch();
   787  000B52  EC6F  F00B         	call	_dispatch	;wreg free
   788  000B56  EFA9  F005         	goto	l2415
   789  000B5A  EF07  F000         	goto	start
   790  000B5E                     __end_of_main:
   791                           	opt callstack 0
   792                           
   793 ;; *************** function _system_initialize *****************
   794 ;; Defined at:
   795 ;;		line 30 in file "mcc.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;		None
   798 ;; Auto vars:     Size  Location     Type
   799 ;;		None
   800 ;; Return value:  Size  Location     Type
   801 ;;                  1    wreg      void 
   802 ;; Registers used:
   803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   804 ;; Tracked objects:
   805 ;;		On entry : 0/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   813 ;;Total ram usage:        0 bytes
   814 ;; Hardware stack levels used:    1
   815 ;; Hardware stack levels required when called:   10
   816 ;; This function calls:
   817 ;;		_interrupt_initialize
   818 ;;		_osc_initialize
   819 ;;		_pin_initialize
   820 ;;		_start_timer
   821 ;; This function is called by:
   822 ;;		_main
   823 ;; This function uses a non-reentrant model
   824 ;;
   825                           
   826                           	psect	text1
   827  00167E                     __ptext1:
   828                           	opt callstack 0
   829  00167E                     _system_initialize:
   830                           	opt callstack 20
   831  00167E                     
   832                           ;mcc.c: 31:     osc_initialize();
   833  00167E  EC69  F00B         	call	_osc_initialize	;wreg free
   834                           
   835                           ;mcc.c: 32:     pin_initialize();
   836  001682  EC1F  F00B         	call	_pin_initialize	;wreg free
   837  001686                     
   838                           ;mcc.c: 33:     interrupt_initialize();
   839  001686  EC6C  F00B         	call	_interrupt_initialize	;wreg free
   840  00168A                     
   841                           ;mcc.c: 34:     start_timer(0);
   842  00168A  0E00               	movlw	0
   843  00168C  ECA7  F009         	call	_start_timer
   844  001690                     
   845                           ;mcc.c: 35:     start_timer(1);
   846  001690  0E01               	movlw	1
   847  001692  ECA7  F009         	call	_start_timer
   848  001696  0012               	return		;funcret
   849  001698                     __end_of_system_initialize:
   850                           	opt callstack 0
   851                           
   852 ;; *************** function _start_timer *****************
   853 ;; Defined at:
   854 ;;		line 5 in file "clock.c"
   855 ;; Parameters:    Size  Location     Type
   856 ;;  timer_vaddr     1    wreg     unsigned char 
   857 ;; Auto vars:     Size  Location     Type
   858 ;;  timer_vaddr     1   12[BANK0 ] unsigned char 
   859 ;; Return value:  Size  Location     Type
   860 ;;                  2   93[None  ] int 
   861 ;; Registers used:
   862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   863 ;; Tracked objects:
   864 ;;		On entry : 0/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   869 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   870 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   871 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   872 ;;Total ram usage:        3 bytes
   873 ;; Hardware stack levels used:    1
   874 ;; Hardware stack levels required when called:    9
   875 ;; This function calls:
   876 ;;		_initializeTaskList
   877 ;; This function is called by:
   878 ;;		_system_initialize
   879 ;; This function uses a non-reentrant model
   880 ;;
   881                           
   882                           	psect	text2
   883  00134E                     __ptext2:
   884                           	opt callstack 0
   885  00134E                     _start_timer:
   886                           	opt callstack 20
   887                           
   888                           ;incstack = 0
   889                           ;start_timer@timer_vaddr stored from wreg
   890  00134E  0100               	movlb	0	; () banked
   891  001350  6F6C               	movwf	start_timer@timer_vaddr& (0+255),b
   892  001352                     
   893                           ;clock.c: 6:     if(timer_vaddr > 4)
   894  001352  0E04               	movlw	4
   895  001354  0100               	movlb	0	; () banked
   896  001356  656C               	cpfsgt	start_timer@timer_vaddr& (0+255),b
   897  001358  EFB0  F009         	goto	u1751
   898  00135C  EFB2  F009         	goto	u1750
   899  001360                     u1751:
   900  001360  EFD0  F009         	goto	l2295
   901  001364                     u1750:
   902  001364  EFF1  F009         	goto	l308
   903  001368                     l310:
   904                           
   905                           ; BSR set to: 0
   906                           ;clock.c: 10:             INTCONbits.TMR0IE = 1;
   907  001368  8AF2               	bsf	242,5,c	;volatile
   908                           
   909                           ;clock.c: 11:             INTCONbits.TMR0IF = 0;
   910  00136A  94F2               	bcf	242,2,c	;volatile
   911  00136C                     
   912                           ; BSR set to: 0
   913                           ;clock.c: 12:             T0CON = 0xC3;
   914  00136C  0EC3               	movlw	195
   915  00136E  6ED5               	movwf	213,c	;volatile
   916                           
   917                           ;clock.c: 13:             TMR0L = 131;
   918  001370  0E83               	movlw	131
   919  001372  6ED6               	movwf	214,c	;volatile
   920                           
   921                           ;clock.c: 14:             time_ms = 0;
   922  001374  0E00               	movlw	0
   923  001376  6F91               	movwf	_time_ms& (0+255),b
   924  001378  0E00               	movlw	0
   925  00137A  6F92               	movwf	(_time_ms+1)& (0+255),b
   926  00137C  0E00               	movlw	0
   927  00137E  6F93               	movwf	(_time_ms+2)& (0+255),b
   928  001380  0E00               	movlw	0
   929  001382  6F94               	movwf	(_time_ms+3)& (0+255),b
   930                           
   931                           ;clock.c: 15:             break;
   932  001384  EFF1  F009         	goto	l308
   933  001388                     l2281:
   934                           
   935                           ; BSR set to: 0
   936                           ;clock.c: 17:             initializeTaskList();
   937  001388  EC6F  F007         	call	_initializeTaskList	;wreg free
   938  00138C                     
   939                           ;clock.c: 18:             PIE1bits.TMR1IE = 1;
   940  00138C  809D               	bsf	157,0,c	;volatile
   941  00138E                     
   942                           ;clock.c: 19:             PIR1bits.TMR1IF = 0;
   943  00138E  909E               	bcf	158,0,c	;volatile
   944  001390                     
   945                           ;clock.c: 20:             T1CON = 0b10000001;
   946  001390  0E81               	movlw	129
   947  001392  6ECD               	movwf	205,c	;volatile
   948  001394                     
   949                           ;clock.c: 21:             TMR1H = 0xB1;
   950  001394  0EB1               	movlw	177
   951  001396  6ECF               	movwf	207,c	;volatile
   952  001398                     
   953                           ;clock.c: 22:             TMR1L = 0xE0;
   954  001398  0EE0               	movlw	224
   955  00139A  6ECE               	movwf	206,c	;volatile
   956                           
   957                           ;clock.c: 23:             break;
   958  00139C  EFF1  F009         	goto	l308
   959  0013A0                     l2295:
   960                           
   961                           ; BSR set to: 0
   962  0013A0  516C               	movf	start_timer@timer_vaddr& (0+255),w,b
   963  0013A2  6F6A               	movwf	??_start_timer& (0+255),b
   964  0013A4  6B6B               	clrf	(??_start_timer+1)& (0+255),b
   965                           
   966                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   967                           ; Switch size 1, requested type "simple"
   968                           ; Number of cases is 1, Range of values is 0 to 0
   969                           ; switch strategies available:
   970                           ; Name         Instructions Cycles
   971                           ; simple_byte            4     3 (average)
   972                           ;	Chosen strategy is simple_byte
   973  0013A6  516B               	movf	(??_start_timer+1)& (0+255),w,b
   974  0013A8  0A00               	xorlw	0	; case 0
   975  0013AA  B4D8               	btfsc	status,2,c
   976  0013AC  EFDA  F009         	goto	l2467
   977  0013B0  EFF1  F009         	goto	l308
   978  0013B4                     l2467:
   979                           
   980                           ; BSR set to: 0
   981                           ; Switch size 1, requested type "simple"
   982                           ; Number of cases is 5, Range of values is 0 to 4
   983                           ; switch strategies available:
   984                           ; Name         Instructions Cycles
   985                           ; simple_byte           16     9 (average)
   986                           ;	Chosen strategy is simple_byte
   987  0013B4  516A               	movf	??_start_timer& (0+255),w,b
   988  0013B6  0A00               	xorlw	0	; case 0
   989  0013B8  B4D8               	btfsc	status,2,c
   990  0013BA  EFB4  F009         	goto	l310
   991  0013BE  0A01               	xorlw	1	; case 1
   992  0013C0  B4D8               	btfsc	status,2,c
   993  0013C2  EFC4  F009         	goto	l2281
   994  0013C6  0A03               	xorlw	3	; case 2
   995  0013C8  B4D8               	btfsc	status,2,c
   996  0013CA  EFF1  F009         	goto	l308
   997  0013CE  0A01               	xorlw	1	; case 3
   998  0013D0  B4D8               	btfsc	status,2,c
   999  0013D2  EFF1  F009         	goto	l308
  1000  0013D6  0A07               	xorlw	7	; case 4
  1001  0013D8  B4D8               	btfsc	status,2,c
  1002  0013DA  EFF1  F009         	goto	l308
  1003  0013DE  EFF1  F009         	goto	l308
  1004  0013E2                     l308:
  1005  0013E2  0012               	return		;funcret
  1006  0013E4                     __end_of_start_timer:
  1007                           	opt callstack 0
  1008                           
  1009 ;; *************** function _initializeTaskList *****************
  1010 ;; Defined at:
  1011 ;;		line 11 in file "task.c"
  1012 ;; Parameters:    Size  Location     Type
  1013 ;;		None
  1014 ;; Auto vars:     Size  Location     Type
  1015 ;;  i               2    8[BANK0 ] int 
  1016 ;; Return value:  Size  Location     Type
  1017 ;;                  1    wreg      void 
  1018 ;; Registers used:
  1019 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1020 ;; Tracked objects:
  1021 ;;		On entry : 0/0
  1022 ;;		On exit  : 0/0
  1023 ;;		Unchanged: 0/0
  1024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1026 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1028 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1029 ;;Total ram usage:        2 bytes
  1030 ;; Hardware stack levels used:    1
  1031 ;; Hardware stack levels required when called:    8
  1032 ;; This function calls:
  1033 ;;		___wmul
  1034 ;;		_queueInitialize
  1035 ;; This function is called by:
  1036 ;;		_start_timer
  1037 ;; This function uses a non-reentrant model
  1038 ;;
  1039                           
  1040                           	psect	text3
  1041  000EDE                     __ptext3:
  1042                           	opt callstack 0
  1043  000EDE                     _initializeTaskList:
  1044                           	opt callstack 20
  1045  000EDE                     
  1046                           ;task.c: 12:     queueInitialize();
  1047  000EDE  ECF2  F009         	call	_queueInitialize	;wreg free
  1048  000EE2                     
  1049                           ;task.c: 13:     for(int i = 0; i < 20; i++) {
  1050  000EE2  0E00               	movlw	0
  1051  000EE4  0100               	movlb	0	; () banked
  1052  000EE6  6F69               	movwf	(initializeTaskList@i+1)& (0+255),b
  1053  000EE8  0E00               	movlw	0
  1054  000EEA  6F68               	movwf	initializeTaskList@i& (0+255),b
  1055  000EEC                     l2259:
  1056                           
  1057                           ; BSR set to: 0
  1058                           ;task.c: 14:         task_list[i].delay_t = 0;
  1059  000EEC  C068  F060         	movff	initializeTaskList@i,___wmul@multiplier
  1060  000EF0  C069  F061         	movff	initializeTaskList@i+1,___wmul@multiplier+1
  1061  000EF4  0E00               	movlw	0
  1062  000EF6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1063  000EF8  0E0F               	movlw	15
  1064  000EFA  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1065  000EFC  ECE4  F00A         	call	___wmul	;wreg free
  1066  000F00  0E64               	movlw	low _task_list
  1067  000F02  0100               	movlb	0	; () banked
  1068  000F04  2560               	addwf	?___wmul& (0+255),w,b
  1069  000F06  6ED9               	movwf	fsr2l,c
  1070  000F08  0E01               	movlw	high _task_list
  1071  000F0A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1072  000F0C  6EDA               	movwf	fsr2h,c
  1073  000F0E  6ADE               	clrf	postinc2,c
  1074  000F10  6ADE               	clrf	postinc2,c
  1075  000F12  6ADE               	clrf	postinc2,c
  1076  000F14  6ADD               	clrf	postdec2,c
  1077                           
  1078                           ;task.c: 15:         task_list[i].period_t = 0;
  1079  000F16  C068  F060         	movff	initializeTaskList@i,___wmul@multiplier
  1080  000F1A  C069  F061         	movff	initializeTaskList@i+1,___wmul@multiplier+1
  1081  000F1E  0E00               	movlw	0
  1082  000F20  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1083  000F22  0E0F               	movlw	15
  1084  000F24  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1085  000F26  ECE4  F00A         	call	___wmul	;wreg free
  1086  000F2A  0E68               	movlw	low (_task_list+4)
  1087  000F2C  0100               	movlb	0	; () banked
  1088  000F2E  2560               	addwf	?___wmul& (0+255),w,b
  1089  000F30  6ED9               	movwf	fsr2l,c
  1090  000F32  0E01               	movlw	high (_task_list+4)
  1091  000F34  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1092  000F36  6EDA               	movwf	fsr2h,c
  1093  000F38  6ADE               	clrf	postinc2,c
  1094  000F3A  6ADE               	clrf	postinc2,c
  1095  000F3C  6ADE               	clrf	postinc2,c
  1096  000F3E  6ADD               	clrf	postdec2,c
  1097                           
  1098                           ;task.c: 16:         task_list[i].func_ptr = ((void*)0);
  1099  000F40  C068  F060         	movff	initializeTaskList@i,___wmul@multiplier
  1100  000F44  C069  F061         	movff	initializeTaskList@i+1,___wmul@multiplier+1
  1101  000F48  0E00               	movlw	0
  1102  000F4A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1103  000F4C  0E0F               	movlw	15
  1104  000F4E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1105  000F50  ECE4  F00A         	call	___wmul	;wreg free
  1106  000F54  0E6C               	movlw	low (_task_list+8)
  1107  000F56  0100               	movlb	0	; () banked
  1108  000F58  2560               	addwf	?___wmul& (0+255),w,b
  1109  000F5A  6ED9               	movwf	fsr2l,c
  1110  000F5C  0E01               	movlw	high (_task_list+8)
  1111  000F5E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1112  000F60  6EDA               	movwf	fsr2h,c
  1113  000F62  0E00               	movlw	0
  1114  000F64  6EDE               	movwf	postinc2,c
  1115  000F66  0E00               	movlw	0
  1116  000F68  6EDE               	movwf	postinc2,c
  1117  000F6A  0E00               	movlw	0
  1118  000F6C  6EDE               	movwf	postinc2,c
  1119                           
  1120                           ;task.c: 17:         task_list[i].data_p = ((void*)0);
  1121  000F6E  C068  F060         	movff	initializeTaskList@i,___wmul@multiplier
  1122  000F72  C069  F061         	movff	initializeTaskList@i+1,___wmul@multiplier+1
  1123  000F76  0E00               	movlw	0
  1124  000F78  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1125  000F7A  0E0F               	movlw	15
  1126  000F7C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1127  000F7E  ECE4  F00A         	call	___wmul	;wreg free
  1128  000F82  0E71               	movlw	low (_task_list+13)
  1129  000F84  0100               	movlb	0	; () banked
  1130  000F86  2560               	addwf	?___wmul& (0+255),w,b
  1131  000F88  6ED9               	movwf	fsr2l,c
  1132  000F8A  0E01               	movlw	high (_task_list+13)
  1133  000F8C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1134  000F8E  6EDA               	movwf	fsr2h,c
  1135  000F90  0E00               	movlw	0
  1136  000F92  6EDE               	movwf	postinc2,c
  1137  000F94  0E00               	movlw	0
  1138  000F96  6EDD               	movwf	postdec2,c
  1139                           
  1140                           ;task.c: 18:         task_list[i].next = 105;
  1141  000F98  C068  F060         	movff	initializeTaskList@i,___wmul@multiplier
  1142  000F9C  C069  F061         	movff	initializeTaskList@i+1,___wmul@multiplier+1
  1143  000FA0  0E00               	movlw	0
  1144  000FA2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1145  000FA4  0E0F               	movlw	15
  1146  000FA6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1147  000FA8  ECE4  F00A         	call	___wmul	;wreg free
  1148  000FAC  0E6F               	movlw	low (_task_list+11)
  1149  000FAE  0100               	movlb	0	; () banked
  1150  000FB0  2560               	addwf	?___wmul& (0+255),w,b
  1151  000FB2  6ED9               	movwf	fsr2l,c
  1152  000FB4  0E01               	movlw	high (_task_list+11)
  1153  000FB6  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1154  000FB8  6EDA               	movwf	fsr2h,c
  1155  000FBA  0E69               	movlw	105
  1156  000FBC  6EDE               	movwf	postinc2,c
  1157  000FBE  0E00               	movlw	0
  1158  000FC0  6EDD               	movwf	postdec2,c
  1159  000FC2                     
  1160                           ; BSR set to: 0
  1161                           ;task.c: 19:     }
  1162  000FC2  4B68               	infsnz	initializeTaskList@i& (0+255),f,b
  1163  000FC4  2B69               	incf	(initializeTaskList@i+1)& (0+255),f,b
  1164  000FC6                     
  1165                           ; BSR set to: 0
  1166  000FC6  BF69               	btfsc	(initializeTaskList@i+1)& (0+255),7,b
  1167  000FC8  EFEF  F007         	goto	u1741
  1168  000FCC  5169               	movf	(initializeTaskList@i+1)& (0+255),w,b
  1169  000FCE  E109               	bnz	u1740
  1170  000FD0  0E14               	movlw	20
  1171  000FD2  5D68               	subwf	initializeTaskList@i& (0+255),w,b
  1172  000FD4  A0D8               	btfss	status,0,c
  1173  000FD6  EFEF  F007         	goto	u1741
  1174  000FDA  EFF1  F007         	goto	u1740
  1175  000FDE                     u1741:
  1176  000FDE  EF76  F007         	goto	l2259
  1177  000FE2                     u1740:
  1178  000FE2                     
  1179                           ; BSR set to: 0
  1180                           ;task.c: 20:     num_task = 0;
  1181  000FE2  0E00               	movlw	0
  1182  000FE4  6F97               	movwf	_num_task& (0+255),b
  1183                           
  1184                           ;task.c: 21:     head = 105;
  1185  000FE6  0E00               	movlw	0
  1186  000FE8  6F96               	movwf	(_head+1)& (0+255),b
  1187  000FEA  0E69               	movlw	105
  1188  000FEC  6F95               	movwf	_head& (0+255),b
  1189  000FEE                     
  1190                           ; BSR set to: 0
  1191  000FEE  0012               	return		;funcret
  1192  000FF0                     __end_of_initializeTaskList:
  1193                           	opt callstack 0
  1194                           
  1195 ;; *************** function _queueInitialize *****************
  1196 ;; Defined at:
  1197 ;;		line 3 in file "ready_queue.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;		None
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;  i               2    6[BANK0 ] int 
  1202 ;; Return value:  Size  Location     Type
  1203 ;;                  1    wreg      void 
  1204 ;; Registers used:
  1205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1206 ;; Tracked objects:
  1207 ;;		On entry : 0/0
  1208 ;;		On exit  : 0/0
  1209 ;;		Unchanged: 0/0
  1210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1212 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1214 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1215 ;;Total ram usage:        2 bytes
  1216 ;; Hardware stack levels used:    1
  1217 ;; Hardware stack levels required when called:    7
  1218 ;; This function calls:
  1219 ;;		___wmul
  1220 ;; This function is called by:
  1221 ;;		_initializeTaskList
  1222 ;; This function uses a non-reentrant model
  1223 ;;
  1224                           
  1225                           	psect	text4
  1226  0013E4                     __ptext4:
  1227                           	opt callstack 0
  1228  0013E4                     _queueInitialize:
  1229                           	opt callstack 20
  1230  0013E4                     
  1231                           ;ready_queue.c: 4:     for(int i = 0; i< 20; i++) {
  1232  0013E4  0E00               	movlw	0
  1233  0013E6  0100               	movlb	0	; () banked
  1234  0013E8  6F67               	movwf	(queueInitialize@i+1)& (0+255),b
  1235  0013EA  0E00               	movlw	0
  1236  0013EC  6F66               	movwf	queueInitialize@i& (0+255),b
  1237  0013EE                     l2187:
  1238                           
  1239                           ; BSR set to: 0
  1240                           ;ready_queue.c: 5:         ready_queue[i].data_p = ((void*)0);
  1241  0013EE  C066  F060         	movff	queueInitialize@i,___wmul@multiplier
  1242  0013F2  C067  F061         	movff	queueInitialize@i+1,___wmul@multiplier+1
  1243  0013F6  0E00               	movlw	0
  1244  0013F8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1245  0013FA  0E05               	movlw	5
  1246  0013FC  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1247  0013FE  ECE4  F00A         	call	___wmul	;wreg free
  1248  001402  0E03               	movlw	low (_ready_queue+3)
  1249  001404  0100               	movlb	0	; () banked
  1250  001406  2560               	addwf	?___wmul& (0+255),w,b
  1251  001408  6ED9               	movwf	fsr2l,c
  1252  00140A  0E01               	movlw	high (_ready_queue+3)
  1253  00140C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1254  00140E  6EDA               	movwf	fsr2h,c
  1255  001410  0E00               	movlw	0
  1256  001412  6EDE               	movwf	postinc2,c
  1257  001414  0E00               	movlw	0
  1258  001416  6EDD               	movwf	postdec2,c
  1259                           
  1260                           ;ready_queue.c: 6:         ready_queue[i].func_ptr = ((void*)0);
  1261  001418  C066  F060         	movff	queueInitialize@i,___wmul@multiplier
  1262  00141C  C067  F061         	movff	queueInitialize@i+1,___wmul@multiplier+1
  1263  001420  0E00               	movlw	0
  1264  001422  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1265  001424  0E05               	movlw	5
  1266  001426  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1267  001428  ECE4  F00A         	call	___wmul	;wreg free
  1268  00142C  0E00               	movlw	low _ready_queue
  1269  00142E  0100               	movlb	0	; () banked
  1270  001430  2560               	addwf	?___wmul& (0+255),w,b
  1271  001432  6ED9               	movwf	fsr2l,c
  1272  001434  0E01               	movlw	high _ready_queue
  1273  001436  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1274  001438  6EDA               	movwf	fsr2h,c
  1275  00143A  0E00               	movlw	0
  1276  00143C  6EDE               	movwf	postinc2,c
  1277  00143E  0E00               	movlw	0
  1278  001440  6EDE               	movwf	postinc2,c
  1279  001442  0E00               	movlw	0
  1280  001444  6EDE               	movwf	postinc2,c
  1281  001446                     
  1282                           ; BSR set to: 0
  1283                           ;ready_queue.c: 7:     }
  1284  001446  4B66               	infsnz	queueInitialize@i& (0+255),f,b
  1285  001448  2B67               	incf	(queueInitialize@i+1)& (0+255),f,b
  1286  00144A                     
  1287                           ; BSR set to: 0
  1288  00144A  BF67               	btfsc	(queueInitialize@i+1)& (0+255),7,b
  1289  00144C  EF31  F00A         	goto	u1631
  1290  001450  5167               	movf	(queueInitialize@i+1)& (0+255),w,b
  1291  001452  E109               	bnz	u1630
  1292  001454  0E14               	movlw	20
  1293  001456  5D66               	subwf	queueInitialize@i& (0+255),w,b
  1294  001458  A0D8               	btfss	status,0,c
  1295  00145A  EF31  F00A         	goto	u1631
  1296  00145E  EF33  F00A         	goto	u1630
  1297  001462                     u1631:
  1298  001462  EFF7  F009         	goto	l2187
  1299  001466                     u1630:
  1300  001466                     
  1301                           ; BSR set to: 0
  1302  001466  0012               	return		;funcret
  1303  001468                     __end_of_queueInitialize:
  1304                           	opt callstack 0
  1305                           
  1306 ;; *************** function _pin_initialize *****************
  1307 ;; Defined at:
  1308 ;;		line 7 in file "mcc.c"
  1309 ;; Parameters:    Size  Location     Type
  1310 ;;		None
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;		None
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  1    wreg      void 
  1315 ;; Registers used:
  1316 ;;		wreg, status,2
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1326 ;;Total ram usage:        0 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    6
  1329 ;; This function calls:
  1330 ;;		Nothing
  1331 ;; This function is called by:
  1332 ;;		_system_initialize
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           	psect	text5
  1337  00163E                     __ptext5:
  1338                           	opt callstack 0
  1339  00163E                     _pin_initialize:
  1340                           	opt callstack 23
  1341  00163E                     
  1342                           ;mcc.c: 8:     LATC = 0x00;
  1343  00163E  0E00               	movlw	0
  1344  001640  6E8B               	movwf	139,c	;volatile
  1345                           
  1346                           ;mcc.c: 9:     TRISC = 0xD7;
  1347  001642  0ED7               	movlw	215
  1348  001644  6E94               	movwf	148,c	;volatile
  1349                           
  1350                           ;mcc.c: 10:     ADCON1 = 0b00001111;
  1351  001646  0E0F               	movlw	15
  1352  001648  6EC1               	movwf	193,c	;volatile
  1353                           
  1354                           ;mcc.c: 13:     LATD = 0x00;
  1355  00164A  0E00               	movlw	0
  1356  00164C  6E8C               	movwf	140,c	;volatile
  1357                           
  1358                           ;mcc.c: 14:     TRISD = 0x00;
  1359  00164E  0E00               	movlw	0
  1360  001650  6E95               	movwf	149,c	;volatile
  1361                           
  1362                           ;mcc.c: 16:     LATA = 0x00;
  1363  001652  0E00               	movlw	0
  1364  001654  6E89               	movwf	137,c	;volatile
  1365                           
  1366                           ;mcc.c: 17:     TRISA = 0xF3;
  1367  001656  0EF3               	movlw	243
  1368  001658  6E92               	movwf	146,c	;volatile
  1369                           
  1370                           ;mcc.c: 20:     LATB = 0x00;
  1371  00165A  0E00               	movlw	0
  1372  00165C  6E8A               	movwf	138,c	;volatile
  1373  00165E                     
  1374                           ;mcc.c: 21:     TRISB = 0xFF;
  1375  00165E  6893               	setf	147,c	;volatile
  1376  001660  0012               	return		;funcret
  1377  001662                     __end_of_pin_initialize:
  1378                           	opt callstack 0
  1379                           
  1380 ;; *************** function _osc_initialize *****************
  1381 ;; Defined at:
  1382 ;;		line 3 in file "mcc.c"
  1383 ;; Parameters:    Size  Location     Type
  1384 ;;		None
  1385 ;; Auto vars:     Size  Location     Type
  1386 ;;		None
  1387 ;; Return value:  Size  Location     Type
  1388 ;;                  1    wreg      void 
  1389 ;; Registers used:
  1390 ;;		wreg, status,2
  1391 ;; Tracked objects:
  1392 ;;		On entry : 0/0
  1393 ;;		On exit  : 0/0
  1394 ;;		Unchanged: 0/0
  1395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1400 ;;Total ram usage:        0 bytes
  1401 ;; Hardware stack levels used:    1
  1402 ;; Hardware stack levels required when called:    6
  1403 ;; This function calls:
  1404 ;;		Nothing
  1405 ;; This function is called by:
  1406 ;;		_system_initialize
  1407 ;; This function uses a non-reentrant model
  1408 ;;
  1409                           
  1410                           	psect	text6
  1411  0016D2                     __ptext6:
  1412                           	opt callstack 0
  1413  0016D2                     _osc_initialize:
  1414                           	opt callstack 23
  1415  0016D2                     
  1416                           ;mcc.c: 4:     OSCCON = 0x70;
  1417  0016D2  0E70               	movlw	112
  1418  0016D4  6ED3               	movwf	211,c	;volatile
  1419  0016D6  0012               	return		;funcret
  1420  0016D8                     __end_of_osc_initialize:
  1421                           	opt callstack 0
  1422                           
  1423 ;; *************** function _interrupt_initialize *****************
  1424 ;; Defined at:
  1425 ;;		line 25 in file "mcc.c"
  1426 ;; Parameters:    Size  Location     Type
  1427 ;;		None
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;		None
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  1    wreg      void 
  1432 ;; Registers used:
  1433 ;;		None
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1443 ;;Total ram usage:        0 bytes
  1444 ;; Hardware stack levels used:    1
  1445 ;; Hardware stack levels required when called:    6
  1446 ;; This function calls:
  1447 ;;		Nothing
  1448 ;; This function is called by:
  1449 ;;		_system_initialize
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452                           
  1453                           	psect	text7
  1454  0016D8                     __ptext7:
  1455                           	opt callstack 0
  1456  0016D8                     _interrupt_initialize:
  1457                           	opt callstack 23
  1458  0016D8                     
  1459                           ;mcc.c: 26:     INTCONbits.GIE = 1;
  1460  0016D8  8EF2               	bsf	242,7,c	;volatile
  1461                           
  1462                           ;mcc.c: 27:     INTCONbits.PEIE = 1;
  1463  0016DA  8CF2               	bsf	242,6,c	;volatile
  1464  0016DC  0012               	return		;funcret
  1465  0016DE                     __end_of_interrupt_initialize:
  1466                           	opt callstack 0
  1467                           
  1468 ;; *************** function _register_timer *****************
  1469 ;; Defined at:
  1470 ;;		line 38 in file "clock.c"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;  period          4   32[BANK0 ] unsigned long 
  1473 ;;  delay           4   36[BANK0 ] unsigned long 
  1474 ;;  callback        3   40[BANK0 ] PTR FTN()void 
  1475 ;;		 -> blink_LED(1), 
  1476 ;;  data            2   43[BANK0 ] PTR void 
  1477 ;;		 -> RAM(3935), NULL(0), 
  1478 ;; Auto vars:     Size  Location     Type
  1479 ;;		None
  1480 ;; Return value:  Size  Location     Type
  1481 ;;                  1    wreg      unsigned char 
  1482 ;; Registers used:
  1483 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1484 ;; Tracked objects:
  1485 ;;		On entry : 0/0
  1486 ;;		On exit  : 0/0
  1487 ;;		Unchanged: 0/0
  1488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1489 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1492 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1493 ;;Total ram usage:       13 bytes
  1494 ;; Hardware stack levels used:    1
  1495 ;; Hardware stack levels required when called:    8
  1496 ;; This function calls:
  1497 ;;		_addTask
  1498 ;; This function is called by:
  1499 ;;		_main
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           	psect	text8
  1504  00152E                     __ptext8:
  1505                           	opt callstack 0
  1506  00152E                     _register_timer:
  1507                           	opt callstack 22
  1508  00152E                     
  1509                           ;clock.c: 39:     return addTask(period, delay, callback, data);
  1510  00152E  C080  F066         	movff	register_timer@period,addTask@period
  1511  001532  C081  F067         	movff	register_timer@period+1,addTask@period+1
  1512  001536  C082  F068         	movff	register_timer@period+2,addTask@period+2
  1513  00153A  C083  F069         	movff	register_timer@period+3,addTask@period+3
  1514  00153E  C084  F06A         	movff	register_timer@delay,addTask@delay
  1515  001542  C085  F06B         	movff	register_timer@delay+1,addTask@delay+1
  1516  001546  C086  F06C         	movff	register_timer@delay+2,addTask@delay+2
  1517  00154A  C087  F06D         	movff	register_timer@delay+3,addTask@delay+3
  1518  00154E  C088  F06E         	movff	register_timer@callback,addTask@ptr
  1519  001552  C089  F06F         	movff	register_timer@callback+1,addTask@ptr+1
  1520  001556  C08A  F070         	movff	register_timer@callback+2,addTask@ptr+2
  1521  00155A  C08B  F071         	movff	register_timer@data,addTask@data
  1522  00155E  C08C  F072         	movff	register_timer@data+1,addTask@data+1
  1523  001562  ECB1  F002         	call	_addTask	;wreg free
  1524  001566  0012               	return		;funcret
  1525  001568                     __end_of_register_timer:
  1526                           	opt callstack 0
  1527                           
  1528 ;; *************** function _addTask *****************
  1529 ;; Defined at:
  1530 ;;		line 24 in file "task.c"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;  period          4    6[BANK0 ] unsigned long 
  1533 ;;  delay           4   10[BANK0 ] unsigned long 
  1534 ;;  ptr             3   14[BANK0 ] PTR FTN()void 
  1535 ;;		 -> blink_LED(1), 
  1536 ;;  data            2   17[BANK0 ] PTR void 
  1537 ;;		 -> RAM(3935), NULL(0), 
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;  cur             2   29[BANK0 ] int 
  1540 ;;  prev            2   27[BANK0 ] int 
  1541 ;;  idx             1   31[BANK0 ] unsigned char 
  1542 ;; Return value:  Size  Location     Type
  1543 ;;                  1    wreg      unsigned char 
  1544 ;; Registers used:
  1545 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1546 ;; Tracked objects:
  1547 ;;		On entry : 0/0
  1548 ;;		On exit  : 0/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1551 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1552 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1553 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1554 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1555 ;;Total ram usage:       26 bytes
  1556 ;; Hardware stack levels used:    1
  1557 ;; Hardware stack levels required when called:    7
  1558 ;; This function calls:
  1559 ;;		___wmul
  1560 ;;		_isFullList
  1561 ;; This function is called by:
  1562 ;;		_register_timer
  1563 ;; This function uses a non-reentrant model
  1564 ;;
  1565                           
  1566                           	psect	text9
  1567  000562                     __ptext9:
  1568                           	opt callstack 0
  1569  000562                     _addTask:
  1570                           	opt callstack 22
  1571  000562                     
  1572                           ;task.c: 25:     if(isFullList()) {
  1573  000562  EC4C  F00B         	call	_isFullList	;wreg free
  1574  000566  0900               	iorlw	0
  1575  000568  B4D8               	btfsc	status,2,c
  1576  00056A  EFB9  F002         	goto	u1761
  1577  00056E  EFBB  F002         	goto	u1760
  1578  000572                     u1761:
  1579  000572  EFBE  F002         	goto	l2309
  1580  000576                     u1760:
  1581  000576                     l2305:
  1582                           
  1583                           ;task.c: 26:         return 109;
  1584  000576  0E6D               	movlw	109
  1585  000578  EFBE  F004         	goto	l202
  1586  00057C                     l2309:
  1587                           
  1588                           ;task.c: 30:     char idx;;task.c: 31:     for(idx = 0; idx < 20; idx++) {
  1589  00057C  0E00               	movlw	0
  1590  00057E  0100               	movlb	0	; () banked
  1591  000580  6F7F               	movwf	addTask@idx& (0+255),b
  1592  000582                     l2315:
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;task.c: 32:         if(task_list[idx].func_ptr == ((void*)0))
  1596  000582  517F               	movf	addTask@idx& (0+255),w,b
  1597  000584  0D0F               	mullw	15
  1598  000586  0E6C               	movlw	low (_task_list+8)
  1599  000588  24F3               	addwf	243,w,c
  1600  00058A  6ED9               	movwf	fsr2l,c
  1601  00058C  0E01               	movlw	high (_task_list+8)
  1602  00058E  20F4               	addwfc	prodh,w,c
  1603  000590  6EDA               	movwf	fsr2h,c
  1604  000592  50DE               	movf	postinc2,w,c
  1605  000594  10DE               	iorwf	postinc2,w,c
  1606  000596  10DE               	iorwf	postinc2,w,c
  1607  000598  A4D8               	btfss	status,2,c
  1608  00059A  EFD1  F002         	goto	u1771
  1609  00059E  EFD3  F002         	goto	u1770
  1610  0005A2                     u1771:
  1611  0005A2  EFD5  F002         	goto	l2319
  1612  0005A6                     u1770:
  1613  0005A6  EFDE  F002         	goto	l2323
  1614  0005AA                     l2319:
  1615                           
  1616                           ; BSR set to: 0
  1617                           ;task.c: 34:     }
  1618  0005AA  2B7F               	incf	addTask@idx& (0+255),f,b
  1619  0005AC                     
  1620                           ; BSR set to: 0
  1621  0005AC  0E13               	movlw	19
  1622  0005AE  657F               	cpfsgt	addTask@idx& (0+255),b
  1623  0005B0  EFDC  F002         	goto	u1781
  1624  0005B4  EFDE  F002         	goto	u1780
  1625  0005B8                     u1781:
  1626  0005B8  EFC1  F002         	goto	l2315
  1627  0005BC                     u1780:
  1628  0005BC                     l2323:
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;task.c: 35:     if(period == 5500)
  1632  0005BC  0E7C               	movlw	124
  1633  0005BE  1966               	xorwf	addTask@period& (0+255),w,b
  1634  0005C0  E109               	bnz	u1791
  1635  0005C2  0E15               	movlw	21
  1636  0005C4  1967               	xorwf	(addTask@period+1)& (0+255),w,b
  1637  0005C6  1168               	iorwf	(addTask@period+2)& (0+255),w,b
  1638  0005C8  1169               	iorwf	(addTask@period+3)& (0+255),w,b
  1639  0005CA  A4D8               	btfss	status,2,c
  1640  0005CC  EFEA  F002         	goto	u1791
  1641  0005D0  EFEC  F002         	goto	u1790
  1642  0005D4                     u1791:
  1643  0005D4  EFEE  F002         	goto	l2327
  1644  0005D8                     u1790:
  1645  0005D8                     
  1646                           ; BSR set to: 0
  1647                           ;task.c: 36:         value = 0xF1;
  1648  0005D8  0EF1               	movlw	241
  1649  0005DA  6F98               	movwf	_value& (0+255),b
  1650  0005DC                     l2327:
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;task.c: 37:     if(idx == 20)
  1654  0005DC  0E14               	movlw	20
  1655  0005DE  197F               	xorwf	addTask@idx& (0+255),w,b
  1656  0005E0  A4D8               	btfss	status,2,c
  1657  0005E2  EFF5  F002         	goto	u1801
  1658  0005E6  EFF7  F002         	goto	u1800
  1659  0005EA                     u1801:
  1660  0005EA  EFF9  F002         	goto	l2333
  1661  0005EE                     u1800:
  1662  0005EE  EFBB  F002         	goto	l2305
  1663  0005F2                     l2333:
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;task.c: 39:     task_list[idx].delay_t = delay;
  1667  0005F2  517F               	movf	addTask@idx& (0+255),w,b
  1668  0005F4  0D0F               	mullw	15
  1669  0005F6  0E64               	movlw	low _task_list
  1670  0005F8  24F3               	addwf	243,w,c
  1671  0005FA  6ED9               	movwf	fsr2l,c
  1672  0005FC  0E01               	movlw	high _task_list
  1673  0005FE  20F4               	addwfc	prodh,w,c
  1674  000600  6EDA               	movwf	fsr2h,c
  1675  000602  C06A  FFDE         	movff	addTask@delay,postinc2
  1676  000606  C06B  FFDE         	movff	addTask@delay+1,postinc2
  1677  00060A  C06C  FFDE         	movff	addTask@delay+2,postinc2
  1678  00060E  C06D  FFDE         	movff	addTask@delay+3,postinc2
  1679                           
  1680                           ;task.c: 40:     task_list[idx].period_t = period;
  1681  000612  517F               	movf	addTask@idx& (0+255),w,b
  1682  000614  0D0F               	mullw	15
  1683  000616  0E68               	movlw	low (_task_list+4)
  1684  000618  24F3               	addwf	243,w,c
  1685  00061A  6ED9               	movwf	fsr2l,c
  1686  00061C  0E01               	movlw	high (_task_list+4)
  1687  00061E  20F4               	addwfc	prodh,w,c
  1688  000620  6EDA               	movwf	fsr2h,c
  1689  000622  C066  FFDE         	movff	addTask@period,postinc2
  1690  000626  C067  FFDE         	movff	addTask@period+1,postinc2
  1691  00062A  C068  FFDE         	movff	addTask@period+2,postinc2
  1692  00062E  C069  FFDE         	movff	addTask@period+3,postinc2
  1693                           
  1694                           ;task.c: 41:     task_list[idx].func_ptr = ptr;
  1695  000632  517F               	movf	addTask@idx& (0+255),w,b
  1696  000634  0D0F               	mullw	15
  1697  000636  0E6C               	movlw	low (_task_list+8)
  1698  000638  24F3               	addwf	243,w,c
  1699  00063A  6ED9               	movwf	fsr2l,c
  1700  00063C  0E01               	movlw	high (_task_list+8)
  1701  00063E  20F4               	addwfc	prodh,w,c
  1702  000640  6EDA               	movwf	fsr2h,c
  1703  000642  C06E  FFDE         	movff	addTask@ptr,postinc2
  1704  000646  C06F  FFDE         	movff	addTask@ptr+1,postinc2
  1705  00064A  C070  FFDE         	movff	addTask@ptr+2,postinc2
  1706                           
  1707                           ;task.c: 42:     task_list[idx].data_p = data;
  1708  00064E  517F               	movf	addTask@idx& (0+255),w,b
  1709  000650  0D0F               	mullw	15
  1710  000652  0E71               	movlw	low (_task_list+13)
  1711  000654  24F3               	addwf	243,w,c
  1712  000656  6ED9               	movwf	fsr2l,c
  1713  000658  0E01               	movlw	high (_task_list+13)
  1714  00065A  20F4               	addwfc	prodh,w,c
  1715  00065C  6EDA               	movwf	fsr2h,c
  1716  00065E  C071  FFDE         	movff	addTask@data,postinc2
  1717  000662  C072  FFDD         	movff	addTask@data+1,postdec2
  1718  000666                     
  1719                           ; BSR set to: 0
  1720                           ;task.c: 43:     num_task++;
  1721  000666  2B97               	incf	_num_task& (0+255),f,b
  1722  000668                     
  1723                           ; BSR set to: 0
  1724                           ;task.c: 45:     if(head == 105 || (head != 105 && task_list[head].delay_t > task_list[i
      +                          dx].delay_t)) {
  1725  000668  0E69               	movlw	105
  1726  00066A  1995               	xorwf	_head& (0+255),w,b
  1727  00066C  1196               	iorwf	(_head+1)& (0+255),w,b
  1728  00066E  B4D8               	btfsc	status,2,c
  1729  000670  EF3C  F003         	goto	u1811
  1730  000674  EF3E  F003         	goto	u1810
  1731  000678                     u1811:
  1732  000678  EF70  F003         	goto	l2343
  1733  00067C                     u1810:
  1734  00067C                     
  1735                           ; BSR set to: 0
  1736  00067C  0E69               	movlw	105
  1737  00067E  1995               	xorwf	_head& (0+255),w,b
  1738  000680  1196               	iorwf	(_head+1)& (0+255),w,b
  1739  000682  B4D8               	btfsc	status,2,c
  1740  000684  EF46  F003         	goto	u1821
  1741  000688  EF48  F003         	goto	u1820
  1742  00068C                     u1821:
  1743  00068C  EF81  F003         	goto	l2347
  1744  000690                     u1820:
  1745  000690                     
  1746                           ; BSR set to: 0
  1747  000690  C095  F060         	movff	_head,___wmul@multiplier
  1748  000694  C096  F061         	movff	_head+1,___wmul@multiplier+1
  1749  000698  0E00               	movlw	0
  1750  00069A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1751  00069C  0E0F               	movlw	15
  1752  00069E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1753  0006A0  ECE4  F00A         	call	___wmul	;wreg free
  1754  0006A4  0E64               	movlw	low _task_list
  1755  0006A6  0100               	movlb	0	; () banked
  1756  0006A8  2560               	addwf	?___wmul& (0+255),w,b
  1757  0006AA  6ED9               	movwf	fsr2l,c
  1758  0006AC  0E01               	movlw	high _task_list
  1759  0006AE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1760  0006B0  6EDA               	movwf	fsr2h,c
  1761  0006B2  517F               	movf	addTask@idx& (0+255),w,b
  1762  0006B4  0D0F               	mullw	15
  1763  0006B6  0E64               	movlw	low _task_list
  1764  0006B8  24F3               	addwf	243,w,c
  1765  0006BA  6EE1               	movwf	fsr1l,c
  1766  0006BC  0E01               	movlw	high _task_list
  1767  0006BE  20F4               	addwfc	prodh,w,c
  1768  0006C0  6EE2               	movwf	fsr1h,c
  1769  0006C2  50DE               	movf	postinc2,w,c
  1770  0006C4  5CE6               	subwf	postinc1,w,c
  1771  0006C6  50DE               	movf	postinc2,w,c
  1772  0006C8  58E6               	subwfb	postinc1,w,c
  1773  0006CA  50DE               	movf	postinc2,w,c
  1774  0006CC  58E6               	subwfb	postinc1,w,c
  1775  0006CE  50DE               	movf	postinc2,w,c
  1776  0006D0  58E6               	subwfb	postinc1,w,c
  1777  0006D2  B0D8               	btfsc	status,0,c
  1778  0006D4  EF6E  F003         	goto	u1831
  1779  0006D8  EF70  F003         	goto	u1830
  1780  0006DC                     u1831:
  1781  0006DC  EF81  F003         	goto	l2347
  1782  0006E0                     u1830:
  1783  0006E0                     l2343:
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;task.c: 46:         task_list[idx].next = head;
  1787  0006E0  517F               	movf	addTask@idx& (0+255),w,b
  1788  0006E2  0D0F               	mullw	15
  1789  0006E4  0E6F               	movlw	low (_task_list+11)
  1790  0006E6  24F3               	addwf	243,w,c
  1791  0006E8  6ED9               	movwf	fsr2l,c
  1792  0006EA  0E01               	movlw	high (_task_list+11)
  1793  0006EC  20F4               	addwfc	prodh,w,c
  1794  0006EE  6EDA               	movwf	fsr2h,c
  1795  0006F0  C095  FFDE         	movff	_head,postinc2
  1796  0006F4  C096  FFDD         	movff	_head+1,postdec2
  1797  0006F8                     
  1798                           ; BSR set to: 0
  1799                           ;task.c: 47:         head = idx;
  1800  0006F8  C07F  F095         	movff	addTask@idx,_head
  1801  0006FC  6B96               	clrf	(_head+1)& (0+255),b
  1802                           
  1803                           ;task.c: 48:     }
  1804  0006FE  EF5D  F004         	goto	l2365
  1805  000702                     l2347:
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;task.c: 50:         delay = delay - task_list[head].delay_t;
  1809  000702  C095  F060         	movff	_head,___wmul@multiplier
  1810  000706  C096  F061         	movff	_head+1,___wmul@multiplier+1
  1811  00070A  0E00               	movlw	0
  1812  00070C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1813  00070E  0E0F               	movlw	15
  1814  000710  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1815  000712  ECE4  F00A         	call	___wmul	;wreg free
  1816  000716  0E64               	movlw	low _task_list
  1817  000718  0100               	movlb	0	; () banked
  1818  00071A  2560               	addwf	?___wmul& (0+255),w,b
  1819  00071C  6ED9               	movwf	fsr2l,c
  1820  00071E  0E01               	movlw	high _task_list
  1821  000720  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1822  000722  6EDA               	movwf	fsr2h,c
  1823  000724  CFDE F073          	movff	postinc2,??_addTask
  1824  000728  CFDE F074          	movff	postinc2,??_addTask+1
  1825  00072C  CFDE F075          	movff	postinc2,??_addTask+2
  1826  000730  CFDE F076          	movff	postinc2,??_addTask+3
  1827  000734  5173               	movf	??_addTask& (0+255),w,b
  1828  000736  5D6A               	subwf	addTask@delay& (0+255),w,b
  1829  000738  6F6A               	movwf	addTask@delay& (0+255),b
  1830  00073A  5174               	movf	(??_addTask+1)& (0+255),w,b
  1831  00073C  596B               	subwfb	(addTask@delay+1)& (0+255),w,b
  1832  00073E  6F6B               	movwf	(addTask@delay+1)& (0+255),b
  1833  000740  5175               	movf	(??_addTask+2)& (0+255),w,b
  1834  000742  596C               	subwfb	(addTask@delay+2)& (0+255),w,b
  1835  000744  6F6C               	movwf	(addTask@delay+2)& (0+255),b
  1836  000746  5176               	movf	(??_addTask+3)& (0+255),w,b
  1837  000748  596D               	subwfb	(addTask@delay+3)& (0+255),w,b
  1838  00074A  6F6D               	movwf	(addTask@delay+3)& (0+255),b
  1839                           
  1840                           ;task.c: 51:         int cur = task_list[head].next;
  1841  00074C  C095  F060         	movff	_head,___wmul@multiplier
  1842  000750  C096  F061         	movff	_head+1,___wmul@multiplier+1
  1843  000754  0E00               	movlw	0
  1844  000756  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1845  000758  0E0F               	movlw	15
  1846  00075A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1847  00075C  ECE4  F00A         	call	___wmul	;wreg free
  1848  000760  0E6F               	movlw	low (_task_list+11)
  1849  000762  0100               	movlb	0	; () banked
  1850  000764  2560               	addwf	?___wmul& (0+255),w,b
  1851  000766  6ED9               	movwf	fsr2l,c
  1852  000768  0E01               	movlw	high (_task_list+11)
  1853  00076A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1854  00076C  6EDA               	movwf	fsr2h,c
  1855  00076E  CFDE F07D          	movff	postinc2,addTask@cur
  1856  000772  CFDD F07E          	movff	postdec2,addTask@cur+1
  1857  000776                     
  1858                           ; BSR set to: 0
  1859                           ;task.c: 52:         int prev = head;
  1860  000776  C095  F07B         	movff	_head,addTask@prev
  1861  00077A  C096  F07C         	movff	_head+1,addTask@prev+1
  1862                           
  1863                           ;task.c: 53:         while(cur != 105 && task_list[cur].delay_t <= delay) {
  1864  00077E  EFFF  F003         	goto	l2355
  1865  000782                     l2351:
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;task.c: 54:             delay = delay - task_list[cur].delay_t;
  1869  000782  C07D  F060         	movff	addTask@cur,___wmul@multiplier
  1870  000786  C07E  F061         	movff	addTask@cur+1,___wmul@multiplier+1
  1871  00078A  0E00               	movlw	0
  1872  00078C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1873  00078E  0E0F               	movlw	15
  1874  000790  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1875  000792  ECE4  F00A         	call	___wmul	;wreg free
  1876  000796  0E64               	movlw	low _task_list
  1877  000798  0100               	movlb	0	; () banked
  1878  00079A  2560               	addwf	?___wmul& (0+255),w,b
  1879  00079C  6ED9               	movwf	fsr2l,c
  1880  00079E  0E01               	movlw	high _task_list
  1881  0007A0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1882  0007A2  6EDA               	movwf	fsr2h,c
  1883  0007A4  CFDE F073          	movff	postinc2,??_addTask
  1884  0007A8  CFDE F074          	movff	postinc2,??_addTask+1
  1885  0007AC  CFDE F075          	movff	postinc2,??_addTask+2
  1886  0007B0  CFDE F076          	movff	postinc2,??_addTask+3
  1887  0007B4  5173               	movf	??_addTask& (0+255),w,b
  1888  0007B6  5D6A               	subwf	addTask@delay& (0+255),w,b
  1889  0007B8  6F6A               	movwf	addTask@delay& (0+255),b
  1890  0007BA  5174               	movf	(??_addTask+1)& (0+255),w,b
  1891  0007BC  596B               	subwfb	(addTask@delay+1)& (0+255),w,b
  1892  0007BE  6F6B               	movwf	(addTask@delay+1)& (0+255),b
  1893  0007C0  5175               	movf	(??_addTask+2)& (0+255),w,b
  1894  0007C2  596C               	subwfb	(addTask@delay+2)& (0+255),w,b
  1895  0007C4  6F6C               	movwf	(addTask@delay+2)& (0+255),b
  1896  0007C6  5176               	movf	(??_addTask+3)& (0+255),w,b
  1897  0007C8  596D               	subwfb	(addTask@delay+3)& (0+255),w,b
  1898  0007CA  6F6D               	movwf	(addTask@delay+3)& (0+255),b
  1899  0007CC                     
  1900                           ; BSR set to: 0
  1901                           ;task.c: 55:             prev = cur;
  1902  0007CC  C07D  F07B         	movff	addTask@cur,addTask@prev
  1903  0007D0  C07E  F07C         	movff	addTask@cur+1,addTask@prev+1
  1904                           
  1905                           ;task.c: 56:             cur = task_list[cur].next;
  1906  0007D4  C07D  F060         	movff	addTask@cur,___wmul@multiplier
  1907  0007D8  C07E  F061         	movff	addTask@cur+1,___wmul@multiplier+1
  1908  0007DC  0E00               	movlw	0
  1909  0007DE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1910  0007E0  0E0F               	movlw	15
  1911  0007E2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1912  0007E4  ECE4  F00A         	call	___wmul	;wreg free
  1913  0007E8  0E6F               	movlw	low (_task_list+11)
  1914  0007EA  0100               	movlb	0	; () banked
  1915  0007EC  2560               	addwf	?___wmul& (0+255),w,b
  1916  0007EE  6ED9               	movwf	fsr2l,c
  1917  0007F0  0E01               	movlw	high (_task_list+11)
  1918  0007F2  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1919  0007F4  6EDA               	movwf	fsr2h,c
  1920  0007F6  CFDE F07D          	movff	postinc2,addTask@cur
  1921  0007FA  CFDD F07E          	movff	postdec2,addTask@cur+1
  1922  0007FE                     l2355:
  1923                           
  1924                           ; BSR set to: 0
  1925                           ;task.c: 53:         while(cur != 105 && task_list[cur].delay_t <= delay) {
  1926  0007FE  0E69               	movlw	105
  1927  000800  197D               	xorwf	addTask@cur& (0+255),w,b
  1928  000802  117E               	iorwf	(addTask@cur+1)& (0+255),w,b
  1929  000804  B4D8               	btfsc	status,2,c
  1930  000806  EF07  F004         	goto	u1841
  1931  00080A  EF09  F004         	goto	u1840
  1932  00080E                     u1841:
  1933  00080E  EF29  F004         	goto	l2359
  1934  000812                     u1840:
  1935  000812                     
  1936                           ; BSR set to: 0
  1937  000812  C07D  F060         	movff	addTask@cur,___wmul@multiplier
  1938  000816  C07E  F061         	movff	addTask@cur+1,___wmul@multiplier+1
  1939  00081A  0E00               	movlw	0
  1940  00081C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1941  00081E  0E0F               	movlw	15
  1942  000820  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1943  000822  ECE4  F00A         	call	___wmul	;wreg free
  1944  000826  0E64               	movlw	low _task_list
  1945  000828  0100               	movlb	0	; () banked
  1946  00082A  2560               	addwf	?___wmul& (0+255),w,b
  1947  00082C  6ED9               	movwf	fsr2l,c
  1948  00082E  0E01               	movlw	high _task_list
  1949  000830  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1950  000832  6EDA               	movwf	fsr2h,c
  1951  000834  50DE               	movf	postinc2,w,c
  1952  000836  5D6A               	subwf	addTask@delay& (0+255),w,b
  1953  000838  50DE               	movf	postinc2,w,c
  1954  00083A  596B               	subwfb	(addTask@delay+1)& (0+255),w,b
  1955  00083C  50DE               	movf	postinc2,w,c
  1956  00083E  596C               	subwfb	(addTask@delay+2)& (0+255),w,b
  1957  000840  50DE               	movf	postinc2,w,c
  1958  000842  596D               	subwfb	(addTask@delay+3)& (0+255),w,b
  1959  000844  B0D8               	btfsc	status,0,c
  1960  000846  EF27  F004         	goto	u1851
  1961  00084A  EF29  F004         	goto	u1850
  1962  00084E                     u1851:
  1963  00084E  EFC1  F003         	goto	l2351
  1964  000852                     u1850:
  1965  000852                     l2359:
  1966                           
  1967                           ; BSR set to: 0
  1968                           ;task.c: 58:         task_list[prev].next = idx;
  1969  000852  517F               	movf	addTask@idx& (0+255),w,b
  1970  000854  6F73               	movwf	??_addTask& (0+255),b
  1971  000856  6B74               	clrf	(??_addTask+1)& (0+255),b
  1972  000858  C07B  F060         	movff	addTask@prev,___wmul@multiplier
  1973  00085C  C07C  F061         	movff	addTask@prev+1,___wmul@multiplier+1
  1974  000860  0E00               	movlw	0
  1975  000862  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1976  000864  0E0F               	movlw	15
  1977  000866  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1978  000868  ECE4  F00A         	call	___wmul	;wreg free
  1979  00086C  0E6F               	movlw	low (_task_list+11)
  1980  00086E  0100               	movlb	0	; () banked
  1981  000870  2560               	addwf	?___wmul& (0+255),w,b
  1982  000872  6ED9               	movwf	fsr2l,c
  1983  000874  0E01               	movlw	high (_task_list+11)
  1984  000876  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1985  000878  6EDA               	movwf	fsr2h,c
  1986  00087A  C073  FFDE         	movff	??_addTask,postinc2
  1987  00087E  C074  FFDD         	movff	??_addTask+1,postdec2
  1988  000882                     
  1989                           ; BSR set to: 0
  1990                           ;task.c: 59:         task_list[idx].next = cur;
  1991  000882  517F               	movf	addTask@idx& (0+255),w,b
  1992  000884  0D0F               	mullw	15
  1993  000886  0E6F               	movlw	low (_task_list+11)
  1994  000888  24F3               	addwf	243,w,c
  1995  00088A  6ED9               	movwf	fsr2l,c
  1996  00088C  0E01               	movlw	high (_task_list+11)
  1997  00088E  20F4               	addwfc	prodh,w,c
  1998  000890  6EDA               	movwf	fsr2h,c
  1999  000892  C07D  FFDE         	movff	addTask@cur,postinc2
  2000  000896  C07E  FFDD         	movff	addTask@cur+1,postdec2
  2001  00089A                     
  2002                           ; BSR set to: 0
  2003                           ;task.c: 60:         task_list[idx].delay_t = delay;
  2004  00089A  517F               	movf	addTask@idx& (0+255),w,b
  2005  00089C  0D0F               	mullw	15
  2006  00089E  0E64               	movlw	low _task_list
  2007  0008A0  24F3               	addwf	243,w,c
  2008  0008A2  6ED9               	movwf	fsr2l,c
  2009  0008A4  0E01               	movlw	high _task_list
  2010  0008A6  20F4               	addwfc	prodh,w,c
  2011  0008A8  6EDA               	movwf	fsr2h,c
  2012  0008AA  C06A  FFDE         	movff	addTask@delay,postinc2
  2013  0008AE  C06B  FFDE         	movff	addTask@delay+1,postinc2
  2014  0008B2  C06C  FFDE         	movff	addTask@delay+2,postinc2
  2015  0008B6  C06D  FFDE         	movff	addTask@delay+3,postinc2
  2016  0008BA                     l2365:
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;task.c: 62:     if(task_list[idx].next != 105)
  2020  0008BA  517F               	movf	addTask@idx& (0+255),w,b
  2021  0008BC  0D0F               	mullw	15
  2022  0008BE  0E6F               	movlw	low (_task_list+11)
  2023  0008C0  24F3               	addwf	243,w,c
  2024  0008C2  6ED9               	movwf	fsr2l,c
  2025  0008C4  0E01               	movlw	high (_task_list+11)
  2026  0008C6  20F4               	addwfc	prodh,w,c
  2027  0008C8  6EDA               	movwf	fsr2h,c
  2028  0008CA  0E69               	movlw	105
  2029  0008CC  18DE               	xorwf	postinc2,w,c
  2030  0008CE  10DE               	iorwf	postinc2,w,c
  2031  0008D0  B4D8               	btfsc	status,2,c
  2032  0008D2  EF6D  F004         	goto	u1861
  2033  0008D6  EF6F  F004         	goto	u1860
  2034  0008DA                     u1861:
  2035  0008DA  EFBD  F004         	goto	l2369
  2036  0008DE                     u1860:
  2037  0008DE                     
  2038                           ; BSR set to: 0
  2039                           ;task.c: 63:         task_list[task_list[idx].next].delay_t = task_list[task_list[idx].n
      +                          ext].delay_t - delay;
  2040  0008DE  517F               	movf	addTask@idx& (0+255),w,b
  2041  0008E0  0D0F               	mullw	15
  2042  0008E2  0E6F               	movlw	low (_task_list+11)
  2043  0008E4  24F3               	addwf	243,w,c
  2044  0008E6  6ED9               	movwf	fsr2l,c
  2045  0008E8  0E01               	movlw	high (_task_list+11)
  2046  0008EA  20F4               	addwfc	prodh,w,c
  2047  0008EC  6EDA               	movwf	fsr2h,c
  2048  0008EE  CFDE F060          	movff	postinc2,___wmul@multiplier
  2049  0008F2  CFDD F061          	movff	postdec2,___wmul@multiplier+1
  2050  0008F6  0E00               	movlw	0
  2051  0008F8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2052  0008FA  0E0F               	movlw	15
  2053  0008FC  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2054  0008FE  ECE4  F00A         	call	___wmul	;wreg free
  2055  000902  0E64               	movlw	low _task_list
  2056  000904  0100               	movlb	0	; () banked
  2057  000906  2560               	addwf	?___wmul& (0+255),w,b
  2058  000908  6ED9               	movwf	fsr2l,c
  2059  00090A  0E01               	movlw	high _task_list
  2060  00090C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  2061  00090E  6EDA               	movwf	fsr2h,c
  2062  000910  CFDE F073          	movff	postinc2,??_addTask
  2063  000914  CFDE F074          	movff	postinc2,??_addTask+1
  2064  000918  CFDE F075          	movff	postinc2,??_addTask+2
  2065  00091C  CFDE F076          	movff	postinc2,??_addTask+3
  2066  000920  516A               	movf	addTask@delay& (0+255),w,b
  2067  000922  5D73               	subwf	??_addTask& (0+255),w,b
  2068  000924  6F77               	movwf	(??_addTask+4)& (0+255),b
  2069  000926  516B               	movf	(addTask@delay+1)& (0+255),w,b
  2070  000928  5974               	subwfb	(??_addTask+1)& (0+255),w,b
  2071  00092A  6F78               	movwf	(??_addTask+5)& (0+255),b
  2072  00092C  516C               	movf	(addTask@delay+2)& (0+255),w,b
  2073  00092E  5975               	subwfb	(??_addTask+2)& (0+255),w,b
  2074  000930  6F79               	movwf	(??_addTask+6)& (0+255),b
  2075  000932  516D               	movf	(addTask@delay+3)& (0+255),w,b
  2076  000934  5976               	subwfb	(??_addTask+3)& (0+255),w,b
  2077  000936  6F7A               	movwf	(??_addTask+7)& (0+255),b
  2078  000938  517F               	movf	addTask@idx& (0+255),w,b
  2079  00093A  0D0F               	mullw	15
  2080  00093C  0E6F               	movlw	low (_task_list+11)
  2081  00093E  24F3               	addwf	243,w,c
  2082  000940  6ED9               	movwf	fsr2l,c
  2083  000942  0E01               	movlw	high (_task_list+11)
  2084  000944  20F4               	addwfc	prodh,w,c
  2085  000946  6EDA               	movwf	fsr2h,c
  2086  000948  CFDE F060          	movff	postinc2,___wmul@multiplier
  2087  00094C  CFDD F061          	movff	postdec2,___wmul@multiplier+1
  2088  000950  0E00               	movlw	0
  2089  000952  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2090  000954  0E0F               	movlw	15
  2091  000956  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2092  000958  ECE4  F00A         	call	___wmul	;wreg free
  2093  00095C  0E64               	movlw	low _task_list
  2094  00095E  0100               	movlb	0	; () banked
  2095  000960  2560               	addwf	?___wmul& (0+255),w,b
  2096  000962  6ED9               	movwf	fsr2l,c
  2097  000964  0E01               	movlw	high _task_list
  2098  000966  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  2099  000968  6EDA               	movwf	fsr2h,c
  2100  00096A  C077  FFDE         	movff	??_addTask+4,postinc2
  2101  00096E  C078  FFDE         	movff	??_addTask+5,postinc2
  2102  000972  C079  FFDE         	movff	??_addTask+6,postinc2
  2103  000976  C07A  FFDE         	movff	??_addTask+7,postinc2
  2104  00097A                     l2369:
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;task.c: 64:     return idx;
  2108  00097A  517F               	movf	addTask@idx& (0+255),w,b
  2109  00097C                     l202:
  2110  00097C  0012               	return		;funcret
  2111  00097E                     __end_of_addTask:
  2112                           	opt callstack 0
  2113                           
  2114 ;; *************** function _isFullList *****************
  2115 ;; Defined at:
  2116 ;;		line 7 in file "task.c"
  2117 ;; Parameters:    Size  Location     Type
  2118 ;;		None
  2119 ;; Auto vars:     Size  Location     Type
  2120 ;;		None
  2121 ;; Return value:  Size  Location     Type
  2122 ;;                  1    wreg      unsigned char 
  2123 ;; Registers used:
  2124 ;;		wreg, status,2, status,0
  2125 ;; Tracked objects:
  2126 ;;		On entry : 0/0
  2127 ;;		On exit  : 0/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2134 ;;Total ram usage:        0 bytes
  2135 ;; Hardware stack levels used:    1
  2136 ;; Hardware stack levels required when called:    6
  2137 ;; This function calls:
  2138 ;;		Nothing
  2139 ;; This function is called by:
  2140 ;;		_addTask
  2141 ;; This function uses a non-reentrant model
  2142 ;;
  2143                           
  2144                           	psect	text10
  2145  001698                     __ptext10:
  2146                           	opt callstack 0
  2147  001698                     _isFullList:
  2148                           	opt callstack 22
  2149  001698                     
  2150                           ;task.c: 8:     return num_task == 20 ? 1 : 0;
  2151  001698  0E14               	movlw	20
  2152  00169A  0100               	movlb	0	; () banked
  2153  00169C  1997               	xorwf	_num_task& (0+255),w,b
  2154  00169E  B4D8               	btfsc	status,2,c
  2155  0016A0  EF54  F00B         	goto	u1721
  2156  0016A4  EF57  F00B         	goto	u1720
  2157  0016A8                     u1721:
  2158  0016A8  0E01               	movlw	1
  2159  0016AA  EF58  F00B         	goto	u1730
  2160  0016AE                     u1720:
  2161  0016AE  0E00               	movlw	0
  2162  0016B0                     u1730:
  2163  0016B0                     
  2164                           ; BSR set to: 0
  2165  0016B0  0012               	return		;funcret
  2166  0016B2                     __end_of_isFullList:
  2167                           	opt callstack 0
  2168                           
  2169 ;; *************** function _dispatch *****************
  2170 ;; Defined at:
  2171 ;;		line 72 in file "clock.c"
  2172 ;; Parameters:    Size  Location     Type
  2173 ;;		None
  2174 ;; Auto vars:     Size  Location     Type
  2175 ;;		None
  2176 ;; Return value:  Size  Location     Type
  2177 ;;                  1    wreg      void 
  2178 ;; Registers used:
  2179 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2189 ;;Total ram usage:        0 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:   11
  2192 ;; This function calls:
  2193 ;;		_selectReadyTask
  2194 ;; This function is called by:
  2195 ;;		_main
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           	psect	text11
  2200  0016DE                     __ptext11:
  2201                           	opt callstack 0
  2202  0016DE                     _dispatch:
  2203                           	opt callstack 19
  2204  0016DE                     
  2205                           ;clock.c: 73:     selectReadyTask();
  2206  0016DE  EC34  F00A         	call	_selectReadyTask	;wreg free
  2207  0016E2  0012               	return		;funcret
  2208  0016E4                     __end_of_dispatch:
  2209                           	opt callstack 0
  2210                           
  2211 ;; *************** function _selectReadyTask *****************
  2212 ;; Defined at:
  2213 ;;		line 125 in file "task.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;		None
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;  node            5   20[BANK0 ] struct .
  2218 ;; Return value:  Size  Location     Type
  2219 ;;                  1    wreg      void 
  2220 ;; Registers used:
  2221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : 0/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2228 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2230 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2231 ;;Total ram usage:        5 bytes
  2232 ;; Hardware stack levels used:    1
  2233 ;; Hardware stack levels required when called:   10
  2234 ;; This function calls:
  2235 ;;		_blink_LED
  2236 ;;		_dequeue
  2237 ;;		_isEmptyQueue
  2238 ;; This function is called by:
  2239 ;;		_dispatch
  2240 ;; This function uses a non-reentrant model
  2241 ;;
  2242                           
  2243                           	psect	text12
  2244  001468                     __ptext12:
  2245                           	opt callstack 0
  2246  001468                     _selectReadyTask:
  2247                           	opt callstack 19
  2248  001468                     
  2249                           ;task.c: 126:     while(!isEmptyQueue()) {
  2250  001468  EF5B  F00A         	goto	l2381
  2251  00146C                     l2375:
  2252                           
  2253                           ;task.c: 127:         queue_node node = dequeue();
  2254  00146C  EC56  F009         	call	_dequeue	;wreg free
  2255  001470  EE20  F074         	lfsr	2,selectReadyTask@node
  2256  001474  0E04               	movlw	4
  2257  001476                     u1871:
  2258  001476  CFEB FFDB          	movff	plusw0,plusw2
  2259  00147A  06E8               	decf	wreg,f,c
  2260  00147C  E2FC               	bc	u1871
  2261  00147E                     
  2262                           ;task.c: 128:         if(node.func_ptr != ((void*)0))
  2263  00147E  0100               	movlb	0	; () banked
  2264  001480  5174               	movf	selectReadyTask@node& (0+255),w,b
  2265  001482  1175               	iorwf	(selectReadyTask@node+1)& (0+255),w,b
  2266  001484  1176               	iorwf	(selectReadyTask@node+2)& (0+255),w,b
  2267  001486  B4D8               	btfsc	status,2,c
  2268  001488  EF48  F00A         	goto	u1881
  2269  00148C  EF4A  F00A         	goto	u1880
  2270  001490                     u1881:
  2271  001490  EF5B  F00A         	goto	l2381
  2272  001494                     u1880:
  2273  001494                     
  2274                           ; BSR set to: 0
  2275                           ;task.c: 129:             (node.func_ptr)(node.data_p);
  2276  001494  C077  F060         	movff	selectReadyTask@node+3,blink_LED@data
  2277  001498  C078  F061         	movff	selectReadyTask@node+4,blink_LED@data+1
  2278  00149C  D802               	call	u1898
  2279  00149E  EF5B  F00A         	goto	u1899
  2280  0014A2                     u1898:
  2281  0014A2  0005               	push	
  2282  0014A4  6EFA               	movwf	pclath,c
  2283  0014A6  5174               	movf	selectReadyTask@node& (0+255),w,b
  2284  0014A8  6EFD               	movwf	tosl,c
  2285  0014AA  5175               	movf	(selectReadyTask@node+1)& (0+255),w,b
  2286  0014AC  6EFE               	movwf	tosh,c
  2287  0014AE  5176               	movf	(selectReadyTask@node+2)& (0+255),w,b
  2288  0014B0  6EFF               	movwf	tosu,c
  2289  0014B2  50FA               	movf	pclath,w,c
  2290  0014B4  0012               	return		;indir
  2291  0014B6                     u1899:
  2292  0014B6                     l2381:
  2293                           
  2294                           ;task.c: 126:     while(!isEmptyQueue()) {
  2295  0014B6  ECB4  F00A         	call	_isEmptyQueue	;wreg free
  2296  0014BA  0900               	iorlw	0
  2297  0014BC  B4D8               	btfsc	status,2,c
  2298  0014BE  EF63  F00A         	goto	u1901
  2299  0014C2  EF65  F00A         	goto	u1900
  2300  0014C6                     u1901:
  2301  0014C6  EF36  F00A         	goto	l2375
  2302  0014CA                     u1900:
  2303  0014CA  0012               	return		;funcret
  2304  0014CC                     __end_of_selectReadyTask:
  2305                           	opt callstack 0
  2306                           
  2307 ;; *************** function _dequeue *****************
  2308 ;; Defined at:
  2309 ;;		line 35 in file "ready_queue.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;		None
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;  temp            5   15[BANK0 ] struct .
  2314 ;;  idx             2   13[BANK0 ] int 
  2315 ;; Return value:  Size  Location     Type
  2316 ;;                  5    8[BANK0 ] struct .
  2317 ;; Registers used:
  2318 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2319 ;; Tracked objects:
  2320 ;;		On entry : 0/0
  2321 ;;		On exit  : 0/0
  2322 ;;		Unchanged: 0/0
  2323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2324 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2325 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2327 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2328 ;;Total ram usage:       12 bytes
  2329 ;; Hardware stack levels used:    1
  2330 ;; Hardware stack levels required when called:    9
  2331 ;; This function calls:
  2332 ;;		___awmod
  2333 ;;		___wmul
  2334 ;;		_isEmptyQueue
  2335 ;; This function is called by:
  2336 ;;		_selectReadyTask
  2337 ;; This function uses a non-reentrant model
  2338 ;;
  2339                           
  2340                           	psect	text13
  2341  0012AC                     __ptext13:
  2342                           	opt callstack 0
  2343  0012AC                     _dequeue:
  2344                           	opt callstack 19
  2345  0012AC                     
  2346                           ;ready_queue.c: 36:     queue_node temp;;ready_queue.c: 37:     temp.func_ptr = ((void*)
      +                          0);
  2347  0012AC  0E00               	movlw	0
  2348  0012AE  0100               	movlb	0	; () banked
  2349  0012B0  6F6F               	movwf	dequeue@temp& (0+255),b
  2350  0012B2  0E00               	movlw	0
  2351  0012B4  6F70               	movwf	(dequeue@temp+1)& (0+255),b
  2352  0012B6  0E00               	movlw	0
  2353  0012B8  6F71               	movwf	(dequeue@temp+2)& (0+255),b
  2354                           
  2355                           ;ready_queue.c: 38:     temp.data_p = ((void*)0);
  2356  0012BA  0E00               	movlw	0
  2357  0012BC  6F72               	movwf	(dequeue@temp+3)& (0+255),b
  2358  0012BE  0E00               	movlw	0
  2359  0012C0  6F73               	movwf	(dequeue@temp+4)& (0+255),b
  2360  0012C2                     
  2361                           ; BSR set to: 0
  2362                           ;ready_queue.c: 39:     if(isEmptyQueue())
  2363  0012C2  ECB4  F00A         	call	_isEmptyQueue	;wreg free
  2364  0012C6  0900               	iorlw	0
  2365  0012C8  B4D8               	btfsc	status,2,c
  2366  0012CA  EF69  F009         	goto	u1691
  2367  0012CE  EF6B  F009         	goto	u1690
  2368  0012D2                     u1691:
  2369  0012D2  EF76  F009         	goto	l160
  2370  0012D6                     u1690:
  2371  0012D6                     l2235:
  2372                           
  2373                           ;ready_queue.c: 40:         return temp;
  2374  0012D6  EE20  F06F         	lfsr	2,dequeue@temp
  2375  0012DA  EE00  F068         	lfsr	0,?_dequeue
  2376  0012DE  0E04               	movlw	4
  2377  0012E0                     u1701:
  2378  0012E0  CFDB FFEB          	movff	plusw2,plusw0
  2379  0012E4  06E8               	decf	wreg,f,c
  2380  0012E6  E2FC               	bc	u1701
  2381  0012E8  EFA6  F009         	goto	l161
  2382  0012EC                     l160:
  2383                           
  2384                           ;ready_queue.c: 41:     int idx = front;
  2385  0012EC  C052  F06D         	movff	_front,dequeue@idx
  2386  0012F0  C053  F06E         	movff	_front+1,dequeue@idx+1
  2387  0012F4                     
  2388                           ;ready_queue.c: 42:     front = (front + 1) % 20;
  2389  0012F4  0E01               	movlw	1
  2390  0012F6  2452               	addwf	_front^0,w,c
  2391  0012F8  0100               	movlb	0	; () banked
  2392  0012FA  6F60               	movwf	___awmod@dividend& (0+255),b
  2393  0012FC  0E00               	movlw	0
  2394  0012FE  2053               	addwfc	(_front+1)^0,w,c
  2395  001300  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  2396  001302  0E00               	movlw	0
  2397  001304  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2398  001306  0E14               	movlw	20
  2399  001308  6F62               	movwf	___awmod@divisor& (0+255),b
  2400  00130A  ECF8  F007         	call	___awmod	;wreg free
  2401  00130E  C060  F052         	movff	?___awmod,_front
  2402  001312  C061  F053         	movff	?___awmod+1,_front+1
  2403  001316                     
  2404                           ;ready_queue.c: 43:     temp = ready_queue[idx];
  2405  001316  C06D  F060         	movff	dequeue@idx,___wmul@multiplier
  2406  00131A  C06E  F061         	movff	dequeue@idx+1,___wmul@multiplier+1
  2407  00131E  0E00               	movlw	0
  2408  001320  0100               	movlb	0	; () banked
  2409  001322  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2410  001324  0E05               	movlw	5
  2411  001326  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2412  001328  ECE4  F00A         	call	___wmul	;wreg free
  2413  00132C  0E00               	movlw	low _ready_queue
  2414  00132E  0100               	movlb	0	; () banked
  2415  001330  2560               	addwf	?___wmul& (0+255),w,b
  2416  001332  6ED9               	movwf	fsr2l,c
  2417  001334  0E01               	movlw	high _ready_queue
  2418  001336  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  2419  001338  6EDA               	movwf	fsr2h,c
  2420  00133A  EE10  F06F         	lfsr	1,dequeue@temp
  2421  00133E  0E04               	movlw	4
  2422  001340                     u1711:
  2423  001340  CFDB FFE3          	movff	plusw2,plusw1
  2424  001344  06E8               	decf	wreg,f,c
  2425  001346  E2FC               	bc	u1711
  2426  001348  EF6B  F009         	goto	l2235
  2427  00134C                     l161:
  2428  00134C  0012               	return		;funcret
  2429  00134E                     __end_of_dequeue:
  2430                           	opt callstack 0
  2431                           
  2432 ;; *************** function _isEmptyQueue *****************
  2433 ;; Defined at:
  2434 ;;		line 18 in file "ready_queue.c"
  2435 ;; Parameters:    Size  Location     Type
  2436 ;;		None
  2437 ;; Auto vars:     Size  Location     Type
  2438 ;;		None
  2439 ;; Return value:  Size  Location     Type
  2440 ;;                  1    wreg      unsigned char 
  2441 ;; Registers used:
  2442 ;;		wreg, status,2, status,0, cstack
  2443 ;; Tracked objects:
  2444 ;;		On entry : 0/0
  2445 ;;		On exit  : 0/0
  2446 ;;		Unchanged: 0/0
  2447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2452 ;;Total ram usage:        0 bytes
  2453 ;; Hardware stack levels used:    1
  2454 ;; Hardware stack levels required when called:    8
  2455 ;; This function calls:
  2456 ;;		_getSizeQueue
  2457 ;; This function is called by:
  2458 ;;		_dequeue
  2459 ;;		_selectReadyTask
  2460 ;; This function uses a non-reentrant model
  2461 ;;
  2462                           
  2463                           	psect	text14
  2464  001568                     __ptext14:
  2465                           	opt callstack 0
  2466  001568                     _isEmptyQueue:
  2467                           	opt callstack 20
  2468  001568                     
  2469                           ;ready_queue.c: 19:     if(front == -1)
  2470  001568  2852               	incf	_front^0,w,c
  2471  00156A  E106               	bnz	u1641
  2472  00156C  2853               	incf	(_front+1)^0,w,c
  2473  00156E  A4D8               	btfss	status,2,c
  2474  001570  EFBC  F00A         	goto	u1641
  2475  001574  EFBE  F00A         	goto	u1640
  2476  001578                     u1641:
  2477  001578  EFC1  F00A         	goto	l2199
  2478  00157C                     u1640:
  2479  00157C                     
  2480                           ;ready_queue.c: 20:         return 0;
  2481  00157C  0E00               	movlw	0
  2482  00157E  EFCD  F00A         	goto	l152
  2483  001582                     l2199:
  2484                           
  2485                           ;ready_queue.c: 21:     return getSizeQueue() == 0 ? 1 : 0;
  2486  001582  ECCE  F00A         	call	_getSizeQueue	;wreg free
  2487  001586  0900               	iorlw	0
  2488  001588  B4D8               	btfsc	status,2,c
  2489  00158A  EFC9  F00A         	goto	u1651
  2490  00158E  EFCC  F00A         	goto	u1650
  2491  001592                     u1651:
  2492  001592  0E01               	movlw	1
  2493  001594  EFCD  F00A         	goto	u1660
  2494  001598                     u1650:
  2495  001598  0E00               	movlw	0
  2496  00159A                     u1660:
  2497  00159A                     l152:
  2498  00159A  0012               	return		;funcret
  2499  00159C                     __end_of_isEmptyQueue:
  2500                           	opt callstack 0
  2501                           
  2502 ;; *************** function _getSizeQueue *****************
  2503 ;; Defined at:
  2504 ;;		line 10 in file "ready_queue.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;		None
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;		None
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  1    wreg      unsigned char 
  2511 ;; Registers used:
  2512 ;;		wreg, status,2, status,0, cstack
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2520 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;Total ram usage:        2 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    7
  2525 ;; This function calls:
  2526 ;;		___awmod
  2527 ;; This function is called by:
  2528 ;;		_isEmptyQueue
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text15
  2533  00159C                     __ptext15:
  2534                           	opt callstack 0
  2535  00159C                     _getSizeQueue:
  2536                           	opt callstack 20
  2537  00159C                     
  2538                           ;ready_queue.c: 11:     return (rear - front + 1 + 20) % 20;
  2539  00159C  5052               	movf	_front^0,w,c
  2540  00159E  5C50               	subwf	_rear^0,w,c
  2541  0015A0  0100               	movlb	0	; () banked
  2542  0015A2  6F66               	movwf	??_getSizeQueue& (0+255),b
  2543  0015A4  5053               	movf	(_front+1)^0,w,c
  2544  0015A6  5851               	subwfb	(_rear+1)^0,w,c
  2545  0015A8  6F67               	movwf	(??_getSizeQueue+1)& (0+255),b
  2546  0015AA  0E15               	movlw	21
  2547  0015AC  2566               	addwf	??_getSizeQueue& (0+255),w,b
  2548  0015AE  6F60               	movwf	___awmod@dividend& (0+255),b
  2549  0015B0  0E00               	movlw	0
  2550  0015B2  2167               	addwfc	(??_getSizeQueue+1)& (0+255),w,b
  2551  0015B4  6F61               	movwf	(___awmod@dividend+1)& (0+255),b
  2552  0015B6  0E00               	movlw	0
  2553  0015B8  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2554  0015BA  0E14               	movlw	20
  2555  0015BC  6F62               	movwf	___awmod@divisor& (0+255),b
  2556  0015BE  ECF8  F007         	call	___awmod	;wreg free
  2557  0015C2  0100               	movlb	0	; () banked
  2558  0015C4  5160               	movf	?___awmod& (0+255),w,b
  2559  0015C6                     
  2560                           ; BSR set to: 0
  2561  0015C6  0012               	return		;funcret
  2562  0015C8                     __end_of_getSizeQueue:
  2563                           	opt callstack 0
  2564                           
  2565 ;; *************** function ___awmod *****************
  2566 ;; Defined at:
  2567 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
  2568 ;; Parameters:    Size  Location     Type
  2569 ;;  dividend        2    0[BANK0 ] int 
  2570 ;;  divisor         2    2[BANK0 ] int 
  2571 ;; Auto vars:     Size  Location     Type
  2572 ;;  sign            1    5[BANK0 ] unsigned char 
  2573 ;;  counter         1    4[BANK0 ] unsigned char 
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  2    0[BANK0 ] int 
  2576 ;; Registers used:
  2577 ;;		wreg, status,2, status,0
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2583 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2584 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2586 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2587 ;;Total ram usage:        6 bytes
  2588 ;; Hardware stack levels used:    1
  2589 ;; Hardware stack levels required when called:    6
  2590 ;; This function calls:
  2591 ;;		Nothing
  2592 ;; This function is called by:
  2593 ;;		_getSizeQueue
  2594 ;;		_dequeue
  2595 ;; This function uses a non-reentrant model
  2596 ;;
  2597                           
  2598                           	psect	text16
  2599  000FF0                     __ptext16:
  2600                           	opt callstack 0
  2601  000FF0                     ___awmod:
  2602                           	opt callstack 20
  2603  000FF0  0E00               	movlw	0
  2604  000FF2  0100               	movlb	0	; () banked
  2605  000FF4  6F65               	movwf	___awmod@sign& (0+255),b
  2606  000FF6                     
  2607                           ; BSR set to: 0
  2608  000FF6  BF61               	btfsc	(___awmod@dividend+1)& (0+255),7,b
  2609  000FF8  EF02  F008         	goto	u1570
  2610  000FFC  EF00  F008         	goto	u1571
  2611  001000                     u1571:
  2612  001000  EF08  F008         	goto	l2143
  2613  001004                     u1570:
  2614  001004                     
  2615                           ; BSR set to: 0
  2616  001004  6D60               	negf	___awmod@dividend& (0+255),b
  2617  001006  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  2618  001008  B0D8               	btfsc	status,0,c
  2619  00100A  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  2620  00100C                     
  2621                           ; BSR set to: 0
  2622  00100C  0E01               	movlw	1
  2623  00100E  6F65               	movwf	___awmod@sign& (0+255),b
  2624  001010                     l2143:
  2625                           
  2626                           ; BSR set to: 0
  2627  001010  BF63               	btfsc	(___awmod@divisor+1)& (0+255),7,b
  2628  001012  EF0F  F008         	goto	u1580
  2629  001016  EF0D  F008         	goto	u1581
  2630  00101A                     u1581:
  2631  00101A  EF13  F008         	goto	l2147
  2632  00101E                     u1580:
  2633  00101E                     
  2634                           ; BSR set to: 0
  2635  00101E  6D62               	negf	___awmod@divisor& (0+255),b
  2636  001020  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  2637  001022  B0D8               	btfsc	status,0,c
  2638  001024  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  2639  001026                     l2147:
  2640                           
  2641                           ; BSR set to: 0
  2642  001026  5162               	movf	___awmod@divisor& (0+255),w,b
  2643  001028  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  2644  00102A  B4D8               	btfsc	status,2,c
  2645  00102C  EF1A  F008         	goto	u1591
  2646  001030  EF1C  F008         	goto	u1590
  2647  001034                     u1591:
  2648  001034  EF40  F008         	goto	l2163
  2649  001038                     u1590:
  2650  001038                     
  2651                           ; BSR set to: 0
  2652  001038  0E01               	movlw	1
  2653  00103A  6F64               	movwf	___awmod@counter& (0+255),b
  2654  00103C  EF24  F008         	goto	l2153
  2655  001040                     l2151:
  2656                           
  2657                           ; BSR set to: 0
  2658  001040  90D8               	bcf	status,0,c
  2659  001042  3762               	rlcf	___awmod@divisor& (0+255),f,b
  2660  001044  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  2661  001046  2B64               	incf	___awmod@counter& (0+255),f,b
  2662  001048                     l2153:
  2663                           
  2664                           ; BSR set to: 0
  2665  001048  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  2666  00104A  EF29  F008         	goto	u1601
  2667  00104E  EF2B  F008         	goto	u1600
  2668  001052                     u1601:
  2669  001052  EF20  F008         	goto	l2151
  2670  001056                     u1600:
  2671  001056                     l2155:
  2672                           
  2673                           ; BSR set to: 0
  2674  001056  5162               	movf	___awmod@divisor& (0+255),w,b
  2675  001058  5D60               	subwf	___awmod@dividend& (0+255),w,b
  2676  00105A  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  2677  00105C  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  2678  00105E  A0D8               	btfss	status,0,c
  2679  001060  EF34  F008         	goto	u1611
  2680  001064  EF36  F008         	goto	u1610
  2681  001068                     u1611:
  2682  001068  EF3A  F008         	goto	l2159
  2683  00106C                     u1610:
  2684  00106C                     
  2685                           ; BSR set to: 0
  2686  00106C  5162               	movf	___awmod@divisor& (0+255),w,b
  2687  00106E  5F60               	subwf	___awmod@dividend& (0+255),f,b
  2688  001070  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  2689  001072  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  2690  001074                     l2159:
  2691                           
  2692                           ; BSR set to: 0
  2693  001074  90D8               	bcf	status,0,c
  2694  001076  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  2695  001078  3362               	rrcf	___awmod@divisor& (0+255),f,b
  2696  00107A                     
  2697                           ; BSR set to: 0
  2698  00107A  2F64               	decfsz	___awmod@counter& (0+255),f,b
  2699  00107C  EF2B  F008         	goto	l2155
  2700  001080                     l2163:
  2701                           
  2702                           ; BSR set to: 0
  2703  001080  5165               	movf	___awmod@sign& (0+255),w,b
  2704  001082  B4D8               	btfsc	status,2,c
  2705  001084  EF46  F008         	goto	u1621
  2706  001088  EF48  F008         	goto	u1620
  2707  00108C                     u1621:
  2708  00108C  EF4C  F008         	goto	l2167
  2709  001090                     u1620:
  2710  001090                     
  2711                           ; BSR set to: 0
  2712  001090  6D60               	negf	___awmod@dividend& (0+255),b
  2713  001092  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  2714  001094  B0D8               	btfsc	status,0,c
  2715  001096  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  2716  001098                     l2167:
  2717                           
  2718                           ; BSR set to: 0
  2719  001098  C060  F060         	movff	___awmod@dividend,?___awmod
  2720  00109C  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  2721  0010A0                     
  2722                           ; BSR set to: 0
  2723  0010A0  0012               	return		;funcret
  2724  0010A2                     __end_of___awmod:
  2725                           	opt callstack 0
  2726                           
  2727 ;; *************** function ___wmul *****************
  2728 ;; Defined at:
  2729 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2732 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;  product         2    4[BANK0 ] unsigned int 
  2735 ;; Return value:  Size  Location     Type
  2736 ;;                  2    0[BANK0 ] unsigned int 
  2737 ;; Registers used:
  2738 ;;		wreg, status,2, status,0, prodl, prodh
  2739 ;; Tracked objects:
  2740 ;;		On entry : 0/0
  2741 ;;		On exit  : 0/0
  2742 ;;		Unchanged: 0/0
  2743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2744 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2745 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2747 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2748 ;;Total ram usage:        6 bytes
  2749 ;; Hardware stack levels used:    1
  2750 ;; Hardware stack levels required when called:    6
  2751 ;; This function calls:
  2752 ;;		Nothing
  2753 ;; This function is called by:
  2754 ;;		_queueInitialize
  2755 ;;		_dequeue
  2756 ;;		_initializeTaskList
  2757 ;;		_addTask
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           	psect	text17
  2762  0015C8                     __ptext17:
  2763                           	opt callstack 0
  2764  0015C8                     ___wmul:
  2765                           	opt callstack 20
  2766  0015C8  0100               	movlb	0	; () banked
  2767  0015CA  5160               	movf	___wmul@multiplier& (0+255),w,b
  2768  0015CC  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2769  0015CE  CFF3 F064          	movff	prodl,___wmul@product
  2770  0015D2  CFF4 F065          	movff	prodh,___wmul@product+1
  2771  0015D6  5160               	movf	___wmul@multiplier& (0+255),w,b
  2772  0015D8  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2773  0015DA  50F3               	movf	243,w,c
  2774  0015DC  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2775  0015DE  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2776  0015E0  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2777  0015E2  50F3               	movf	243,w,c
  2778  0015E4  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2779  0015E6                     
  2780                           ; BSR set to: 0
  2781  0015E6  C064  F060         	movff	___wmul@product,?___wmul
  2782  0015EA  C065  F061         	movff	___wmul@product+1,?___wmul+1
  2783  0015EE                     
  2784                           ; BSR set to: 0
  2785  0015EE  0012               	return		;funcret
  2786  0015F0                     __end_of___wmul:
  2787                           	opt callstack 0
  2788                           
  2789 ;; *************** function _blink_LED *****************
  2790 ;; Defined at:
  2791 ;;		line 51 in file "main.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  data            2    0[BANK0 ] PTR void 
  2794 ;;		 -> RAM(3935), NULL(0), 
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;  idx             1    6[BANK0 ] unsigned char 
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  1    wreg      void 
  2799 ;; Registers used:
  2800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2806 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2807 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2808 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2809 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2810 ;;Total ram usage:        7 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:    6
  2813 ;; This function calls:
  2814 ;;		Nothing
  2815 ;; This function is called by:
  2816 ;;		_main
  2817 ;;		_selectReadyTask
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           	psect	text18
  2822  000B5E                     __ptext18:
  2823                           	opt callstack 0
  2824  000B5E                     _blink_LED:
  2825                           	opt callstack 22
  2826  000B5E                     
  2827                           ;main.c: 52:     char idx = (char)data;
  2828  000B5E  C060  F066         	movff	blink_LED@data,blink_LED@idx
  2829  000B62                     
  2830                           ;main.c: 53:     LED_state[idx] = !LED_state[idx];
  2831  000B62  0100               	movlb	0	; () banked
  2832  000B64  5166               	movf	blink_LED@idx& (0+255),w,b
  2833  000B66  0D02               	mullw	2
  2834  000B68  0E2E               	movlw	low _LED_state
  2835  000B6A  24F3               	addwf	243,w,c
  2836  000B6C  6ED9               	movwf	fsr2l,c
  2837  000B6E  0E00               	movlw	high _LED_state
  2838  000B70  20F4               	addwfc	prodh,w,c
  2839  000B72  6EDA               	movwf	fsr2h,c
  2840  000B74  50DE               	movf	postinc2,w,c
  2841  000B76  10DE               	iorwf	postinc2,w,c
  2842  000B78  B4D8               	btfsc	status,2,c
  2843  000B7A  EFC1  F005         	goto	u1671
  2844  000B7E  EFC4  F005         	goto	u1670
  2845  000B82                     u1671:
  2846  000B82  0E01               	movlw	1
  2847  000B84  EFC5  F005         	goto	u1680
  2848  000B88                     u1670:
  2849  000B88  0E00               	movlw	0
  2850  000B8A                     u1680:
  2851  000B8A  6F64               	movwf	(??_blink_LED+2)& (0+255),b
  2852  000B8C  6B65               	clrf	(??_blink_LED+3)& (0+255),b
  2853  000B8E  5166               	movf	blink_LED@idx& (0+255),w,b
  2854  000B90  0D02               	mullw	2
  2855  000B92  0E2E               	movlw	low _LED_state
  2856  000B94  24F3               	addwf	243,w,c
  2857  000B96  6ED9               	movwf	fsr2l,c
  2858  000B98  0E00               	movlw	high _LED_state
  2859  000B9A  20F4               	addwfc	prodh,w,c
  2860  000B9C  6EDA               	movwf	fsr2h,c
  2861  000B9E  C064  FFDE         	movff	??_blink_LED+2,postinc2
  2862  000BA2  C065  FFDD         	movff	??_blink_LED+3,postdec2
  2863                           
  2864                           ;main.c: 54:     switch(idx) {
  2865  000BA6  EF6B  F006         	goto	l2225
  2866  000BAA                     l2207:
  2867                           
  2868                           ; BSR set to: 0
  2869  000BAA  5166               	movf	blink_LED@idx& (0+255),w,b
  2870  000BAC  0D02               	mullw	2
  2871  000BAE  0E2E               	movlw	low _LED_state
  2872  000BB0  24F3               	addwf	243,w,c
  2873  000BB2  6ED9               	movwf	fsr2l,c
  2874  000BB4  0E00               	movlw	high _LED_state
  2875  000BB6  20F4               	addwfc	prodh,w,c
  2876  000BB8  6EDA               	movwf	fsr2h,c
  2877  000BBA  50DF               	movf	indf2,w,c
  2878  000BBC  6F62               	movwf	??_blink_LED& (0+255),b
  2879  000BBE  508C               	movf	140,w,c	;volatile
  2880  000BC0  1962               	xorwf	??_blink_LED& (0+255),w,b
  2881  000BC2  0BFE               	andlw	-2
  2882  000BC4  1962               	xorwf	??_blink_LED& (0+255),w,b
  2883  000BC6  6E8C               	movwf	140,c	;volatile
  2884                           
  2885                           ;main.c: 56:             break;
  2886  000BC8  EF98  F006         	goto	l61
  2887  000BCC                     l2209:
  2888                           
  2889                           ; BSR set to: 0
  2890  000BCC  5166               	movf	blink_LED@idx& (0+255),w,b
  2891  000BCE  0D02               	mullw	2
  2892  000BD0  0E2E               	movlw	low _LED_state
  2893  000BD2  24F3               	addwf	243,w,c
  2894  000BD4  6ED9               	movwf	fsr2l,c
  2895  000BD6  0E00               	movlw	high _LED_state
  2896  000BD8  20F4               	addwfc	prodh,w,c
  2897  000BDA  6EDA               	movwf	fsr2h,c
  2898  000BDC  50DF               	movf	indf2,w,c
  2899  000BDE  6F62               	movwf	??_blink_LED& (0+255),b
  2900  000BE0  4762               	rlncf	??_blink_LED& (0+255),f,b
  2901  000BE2  508C               	movf	140,w,c	;volatile
  2902  000BE4  1962               	xorwf	??_blink_LED& (0+255),w,b
  2903  000BE6  0BFD               	andlw	-3
  2904  000BE8  1962               	xorwf	??_blink_LED& (0+255),w,b
  2905  000BEA  6E8C               	movwf	140,c	;volatile
  2906                           
  2907                           ;main.c: 58:             break;
  2908  000BEC  EF98  F006         	goto	l61
  2909  000BF0                     l2211:
  2910                           
  2911                           ; BSR set to: 0
  2912  000BF0  5166               	movf	blink_LED@idx& (0+255),w,b
  2913  000BF2  0D02               	mullw	2
  2914  000BF4  0E2E               	movlw	low _LED_state
  2915  000BF6  24F3               	addwf	243,w,c
  2916  000BF8  6ED9               	movwf	fsr2l,c
  2917  000BFA  0E00               	movlw	high _LED_state
  2918  000BFC  20F4               	addwfc	prodh,w,c
  2919  000BFE  6EDA               	movwf	fsr2h,c
  2920  000C00  50DF               	movf	indf2,w,c
  2921  000C02  6F62               	movwf	??_blink_LED& (0+255),b
  2922  000C04  4762               	rlncf	??_blink_LED& (0+255),f,b
  2923  000C06  4762               	rlncf	??_blink_LED& (0+255),f,b
  2924  000C08  508C               	movf	140,w,c	;volatile
  2925  000C0A  1962               	xorwf	??_blink_LED& (0+255),w,b
  2926  000C0C  0BFB               	andlw	-5
  2927  000C0E  1962               	xorwf	??_blink_LED& (0+255),w,b
  2928  000C10  6E8C               	movwf	140,c	;volatile
  2929                           
  2930                           ;main.c: 60:             break;
  2931  000C12  EF98  F006         	goto	l61
  2932  000C16                     l2213:
  2933                           
  2934                           ; BSR set to: 0
  2935  000C16  5166               	movf	blink_LED@idx& (0+255),w,b
  2936  000C18  0D02               	mullw	2
  2937  000C1A  0E2E               	movlw	low _LED_state
  2938  000C1C  24F3               	addwf	243,w,c
  2939  000C1E  6ED9               	movwf	fsr2l,c
  2940  000C20  0E00               	movlw	high _LED_state
  2941  000C22  20F4               	addwfc	prodh,w,c
  2942  000C24  6EDA               	movwf	fsr2h,c
  2943  000C26  50DF               	movf	indf2,w,c
  2944  000C28  6F62               	movwf	??_blink_LED& (0+255),b
  2945  000C2A  4762               	rlncf	??_blink_LED& (0+255),f,b
  2946  000C2C  4762               	rlncf	??_blink_LED& (0+255),f,b
  2947  000C2E  4762               	rlncf	??_blink_LED& (0+255),f,b
  2948  000C30  508C               	movf	140,w,c	;volatile
  2949  000C32  1962               	xorwf	??_blink_LED& (0+255),w,b
  2950  000C34  0BF7               	andlw	-9
  2951  000C36  1962               	xorwf	??_blink_LED& (0+255),w,b
  2952  000C38  6E8C               	movwf	140,c	;volatile
  2953                           
  2954                           ;main.c: 62:             break;
  2955  000C3A  EF98  F006         	goto	l61
  2956  000C3E                     l2215:
  2957                           
  2958                           ; BSR set to: 0
  2959  000C3E  5166               	movf	blink_LED@idx& (0+255),w,b
  2960  000C40  0D02               	mullw	2
  2961  000C42  0E2E               	movlw	low _LED_state
  2962  000C44  24F3               	addwf	243,w,c
  2963  000C46  6ED9               	movwf	fsr2l,c
  2964  000C48  0E00               	movlw	high _LED_state
  2965  000C4A  20F4               	addwfc	prodh,w,c
  2966  000C4C  6EDA               	movwf	fsr2h,c
  2967  000C4E  50DF               	movf	indf2,w,c
  2968  000C50  6F62               	movwf	??_blink_LED& (0+255),b
  2969  000C52  3B62               	swapf	??_blink_LED& (0+255),f,b
  2970  000C54  508C               	movf	140,w,c	;volatile
  2971  000C56  1962               	xorwf	??_blink_LED& (0+255),w,b
  2972  000C58  0BEF               	andlw	-17
  2973  000C5A  1962               	xorwf	??_blink_LED& (0+255),w,b
  2974  000C5C  6E8C               	movwf	140,c	;volatile
  2975                           
  2976                           ;main.c: 64:             break;
  2977  000C5E  EF98  F006         	goto	l61
  2978  000C62                     l2217:
  2979                           
  2980                           ; BSR set to: 0
  2981  000C62  5166               	movf	blink_LED@idx& (0+255),w,b
  2982  000C64  0D02               	mullw	2
  2983  000C66  0E2E               	movlw	low _LED_state
  2984  000C68  24F3               	addwf	243,w,c
  2985  000C6A  6ED9               	movwf	fsr2l,c
  2986  000C6C  0E00               	movlw	high _LED_state
  2987  000C6E  20F4               	addwfc	prodh,w,c
  2988  000C70  6EDA               	movwf	fsr2h,c
  2989  000C72  50DF               	movf	indf2,w,c
  2990  000C74  6F62               	movwf	??_blink_LED& (0+255),b
  2991  000C76  3B62               	swapf	??_blink_LED& (0+255),f,b
  2992  000C78  4762               	rlncf	??_blink_LED& (0+255),f,b
  2993  000C7A  508C               	movf	140,w,c	;volatile
  2994  000C7C  1962               	xorwf	??_blink_LED& (0+255),w,b
  2995  000C7E  0BDF               	andlw	-33
  2996  000C80  1962               	xorwf	??_blink_LED& (0+255),w,b
  2997  000C82  6E8C               	movwf	140,c	;volatile
  2998                           
  2999                           ;main.c: 66:             break;
  3000  000C84  EF98  F006         	goto	l61
  3001  000C88                     l2219:
  3002                           
  3003                           ; BSR set to: 0
  3004  000C88  5166               	movf	blink_LED@idx& (0+255),w,b
  3005  000C8A  0D02               	mullw	2
  3006  000C8C  0E2E               	movlw	low _LED_state
  3007  000C8E  24F3               	addwf	243,w,c
  3008  000C90  6ED9               	movwf	fsr2l,c
  3009  000C92  0E00               	movlw	high _LED_state
  3010  000C94  20F4               	addwfc	prodh,w,c
  3011  000C96  6EDA               	movwf	fsr2h,c
  3012  000C98  50DF               	movf	indf2,w,c
  3013  000C9A  6F62               	movwf	??_blink_LED& (0+255),b
  3014  000C9C  3B62               	swapf	??_blink_LED& (0+255),f,b
  3015  000C9E  4762               	rlncf	??_blink_LED& (0+255),f,b
  3016  000CA0  4762               	rlncf	??_blink_LED& (0+255),f,b
  3017  000CA2  508C               	movf	140,w,c	;volatile
  3018  000CA4  1962               	xorwf	??_blink_LED& (0+255),w,b
  3019  000CA6  0BBF               	andlw	-65
  3020  000CA8  1962               	xorwf	??_blink_LED& (0+255),w,b
  3021  000CAA  6E8C               	movwf	140,c	;volatile
  3022                           
  3023                           ;main.c: 68:             break;
  3024  000CAC  EF98  F006         	goto	l61
  3025  000CB0                     l2221:
  3026                           
  3027                           ; BSR set to: 0
  3028  000CB0  5166               	movf	blink_LED@idx& (0+255),w,b
  3029  000CB2  0D02               	mullw	2
  3030  000CB4  0E2E               	movlw	low _LED_state
  3031  000CB6  24F3               	addwf	243,w,c
  3032  000CB8  6ED9               	movwf	fsr2l,c
  3033  000CBA  0E00               	movlw	high _LED_state
  3034  000CBC  20F4               	addwfc	prodh,w,c
  3035  000CBE  6EDA               	movwf	fsr2h,c
  3036  000CC0  50DF               	movf	indf2,w,c
  3037  000CC2  6F62               	movwf	??_blink_LED& (0+255),b
  3038  000CC4  3362               	rrcf	??_blink_LED& (0+255),f,b
  3039  000CC6  3362               	rrcf	??_blink_LED& (0+255),f,b
  3040  000CC8  508C               	movf	140,w,c	;volatile
  3041  000CCA  1962               	xorwf	??_blink_LED& (0+255),w,b
  3042  000CCC  0B7F               	andlw	-129
  3043  000CCE  1962               	xorwf	??_blink_LED& (0+255),w,b
  3044  000CD0  6E8C               	movwf	140,c	;volatile
  3045                           
  3046                           ;main.c: 70:             break;
  3047  000CD2  EF98  F006         	goto	l61
  3048  000CD6                     l2225:
  3049                           
  3050                           ; BSR set to: 0
  3051  000CD6  5166               	movf	blink_LED@idx& (0+255),w,b
  3052  000CD8  6F62               	movwf	??_blink_LED& (0+255),b
  3053  000CDA  6B63               	clrf	(??_blink_LED+1)& (0+255),b
  3054                           
  3055                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3056                           ; Switch size 1, requested type "simple"
  3057                           ; Number of cases is 1, Range of values is 0 to 0
  3058                           ; switch strategies available:
  3059                           ; Name         Instructions Cycles
  3060                           ; simple_byte            4     3 (average)
  3061                           ;	Chosen strategy is simple_byte
  3062  000CDC  5163               	movf	(??_blink_LED+1)& (0+255),w,b
  3063  000CDE  0A00               	xorlw	0	; case 0
  3064  000CE0  B4D8               	btfsc	status,2,c
  3065  000CE2  EF75  F006         	goto	l2469
  3066  000CE6  EF98  F006         	goto	l61
  3067  000CEA                     l2469:
  3068                           
  3069                           ; BSR set to: 0
  3070                           ; Switch size 1, requested type "simple"
  3071                           ; Number of cases is 8, Range of values is 0 to 7
  3072                           ; switch strategies available:
  3073                           ; Name         Instructions Cycles
  3074                           ; simple_byte           25    13 (average)
  3075                           ;	Chosen strategy is simple_byte
  3076  000CEA  5162               	movf	??_blink_LED& (0+255),w,b
  3077  000CEC  0A00               	xorlw	0	; case 0
  3078  000CEE  B4D8               	btfsc	status,2,c
  3079  000CF0  EFD5  F005         	goto	l2207
  3080  000CF4  0A01               	xorlw	1	; case 1
  3081  000CF6  B4D8               	btfsc	status,2,c
  3082  000CF8  EFE6  F005         	goto	l2209
  3083  000CFC  0A03               	xorlw	3	; case 2
  3084  000CFE  B4D8               	btfsc	status,2,c
  3085  000D00  EFF8  F005         	goto	l2211
  3086  000D04  0A01               	xorlw	1	; case 3
  3087  000D06  B4D8               	btfsc	status,2,c
  3088  000D08  EF0B  F006         	goto	l2213
  3089  000D0C  0A07               	xorlw	7	; case 4
  3090  000D0E  B4D8               	btfsc	status,2,c
  3091  000D10  EF1F  F006         	goto	l2215
  3092  000D14  0A01               	xorlw	1	; case 5
  3093  000D16  B4D8               	btfsc	status,2,c
  3094  000D18  EF31  F006         	goto	l2217
  3095  000D1C  0A03               	xorlw	3	; case 6
  3096  000D1E  B4D8               	btfsc	status,2,c
  3097  000D20  EF44  F006         	goto	l2219
  3098  000D24  0A01               	xorlw	1	; case 7
  3099  000D26  B4D8               	btfsc	status,2,c
  3100  000D28  EF58  F006         	goto	l2221
  3101  000D2C  EF98  F006         	goto	l61
  3102  000D30                     l61:
  3103                           
  3104                           ; BSR set to: 0
  3105  000D30  0012               	return		;funcret
  3106  000D32                     __end_of_blink_LED:
  3107                           	opt callstack 0
  3108                           
  3109 ;; *************** function _timer_interrupt *****************
  3110 ;; Defined at:
  3111 ;;		line 53 in file "clock.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;		None
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;		None
  3116 ;; Return value:  Size  Location     Type
  3117 ;;                  1    wreg      void 
  3118 ;; Registers used:
  3119 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3127 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;Total ram usage:        6 bytes
  3130 ;; Hardware stack levels used:    1
  3131 ;; Hardware stack levels required when called:    5
  3132 ;; This function calls:
  3133 ;;		_handleListHead
  3134 ;; This function is called by:
  3135 ;;		Interrupt level 2
  3136 ;; This function uses a non-reentrant model
  3137 ;;
  3138                           
  3139                           	psect	intcode
  3140  000008                     __pintcode:
  3141                           	opt callstack 0
  3142  000008                     _timer_interrupt:
  3143                           	opt callstack 19
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;incstack = 0
  3147  000008  8258               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3148  00000A  ED51  F008         	call	int_func,f	;refresh shadow registers
  3149                           
  3150                           	psect	intcode_body
  3151  0010A2                     __pintcode_body:
  3152                           	opt callstack 19
  3153  0010A2                     int_func:
  3154                           	opt callstack 19
  3155  0010A2  0006               	pop		; remove dummy address from shadow register refresh
  3156  0010A4  CFE1 F028          	movff	fsr1l,??_timer_interrupt
  3157  0010A8  CFE2 F029          	movff	fsr1h,??_timer_interrupt+1
  3158  0010AC  CFD9 F02A          	movff	fsr2l,??_timer_interrupt+2
  3159  0010B0  CFDA F02B          	movff	fsr2h,??_timer_interrupt+3
  3160  0010B4  CFF3 F02C          	movff	prodl,??_timer_interrupt+4
  3161  0010B8  CFF4 F02D          	movff	prodh,??_timer_interrupt+5
  3162  0010BC                     
  3163                           ;clock.c: 54:     if(INTCONbits.TMR0IE && INTCONbits.TMR0IF) {
  3164  0010BC  AAF2               	btfss	242,5,c	;volatile
  3165  0010BE  EF63  F008         	goto	i2u152_41
  3166  0010C2  EF65  F008         	goto	i2u152_40
  3167  0010C6                     i2u152_41:
  3168  0010C6  EF76  F008         	goto	i2l2069
  3169  0010CA                     i2u152_40:
  3170  0010CA  A4F2               	btfss	242,2,c	;volatile
  3171  0010CC  EF6A  F008         	goto	i2u153_41
  3172  0010D0  EF6C  F008         	goto	i2u153_40
  3173  0010D4                     i2u153_41:
  3174  0010D4  EF76  F008         	goto	i2l2069
  3175  0010D8                     i2u153_40:
  3176  0010D8                     
  3177                           ;clock.c: 55:         INTCONbits.TMR0IF = 0;
  3178  0010D8  94F2               	bcf	242,2,c	;volatile
  3179  0010DA                     
  3180                           ;clock.c: 56:         TMR0L = 131;
  3181  0010DA  0E83               	movlw	131
  3182  0010DC  6ED6               	movwf	214,c	;volatile
  3183  0010DE                     
  3184                           ;clock.c: 57:         time_ms++;
  3185  0010DE  0E01               	movlw	1
  3186  0010E0  0100               	movlb	0	; () banked
  3187  0010E2  2791               	addwf	_time_ms& (0+255),f,b
  3188  0010E4  0E00               	movlw	0
  3189  0010E6  2392               	addwfc	(_time_ms+1)& (0+255),f,b
  3190  0010E8  2393               	addwfc	(_time_ms+2)& (0+255),f,b
  3191  0010EA  2394               	addwfc	(_time_ms+3)& (0+255),f,b
  3192  0010EC                     i2l2069:
  3193                           
  3194                           ;clock.c: 59:     if(PIE1bits.TMR1IE && PIR1bits.TMR1IF) {
  3195  0010EC  A09D               	btfss	157,0,c	;volatile
  3196  0010EE  EF7B  F008         	goto	i2u154_41
  3197  0010F2  EF7D  F008         	goto	i2u154_40
  3198  0010F6                     i2u154_41:
  3199  0010F6  EF9B  F008         	goto	i2l335
  3200  0010FA                     i2u154_40:
  3201  0010FA  A09E               	btfss	158,0,c	;volatile
  3202  0010FC  EF82  F008         	goto	i2u155_41
  3203  001100  EF84  F008         	goto	i2u155_40
  3204  001104                     i2u155_41:
  3205  001104  EF9B  F008         	goto	i2l335
  3206  001108                     i2u155_40:
  3207  001108                     
  3208                           ;clock.c: 60:         PIR1bits.TMR1IF = 0;
  3209  001108  909E               	bcf	158,0,c	;volatile
  3210  00110A                     
  3211                           ;clock.c: 61:         TMR1H = 0xB1;
  3212  00110A  0EB1               	movlw	177
  3213  00110C  6ECF               	movwf	207,c	;volatile
  3214                           
  3215                           ;clock.c: 62:         TMR1L = 0xE0;
  3216  00110E  0EE0               	movlw	224
  3217  001110  6ECE               	movwf	206,c	;volatile
  3218  001112                     
  3219                           ;clock.c: 63:         handleListHead();
  3220  001112  EC09  F000         	call	_handleListHead	;wreg free
  3221  001116                     
  3222                           ;clock.c: 64:         count++;
  3223  001116  4A4A               	infsnz	_count^0,f,c
  3224  001118  2A4B               	incf	(_count+1)^0,f,c
  3225  00111A                     
  3226                           ;clock.c: 65:         if(count == 100) {
  3227  00111A  0E64               	movlw	100
  3228  00111C  184A               	xorwf	_count^0,w,c
  3229  00111E  104B               	iorwf	(_count+1)^0,w,c
  3230  001120  A4D8               	btfss	status,2,c
  3231  001122  EF95  F008         	goto	i2u156_41
  3232  001126  EF97  F008         	goto	i2u156_40
  3233  00112A                     i2u156_41:
  3234  00112A  EF9B  F008         	goto	i2l335
  3235  00112E                     i2u156_40:
  3236  00112E                     
  3237                           ;clock.c: 66:             count = 0;
  3238  00112E  0E00               	movlw	0
  3239  001130  6E4B               	movwf	(_count+1)^0,c
  3240  001132  0E00               	movlw	0
  3241  001134  6E4A               	movwf	_count^0,c
  3242  001136                     i2l335:
  3243  001136  C02D  FFF4         	movff	??_timer_interrupt+5,prodh
  3244  00113A  C02C  FFF3         	movff	??_timer_interrupt+4,prodl
  3245  00113E  C02B  FFDA         	movff	??_timer_interrupt+3,fsr2h
  3246  001142  C02A  FFD9         	movff	??_timer_interrupt+2,fsr2l
  3247  001146  C029  FFE2         	movff	??_timer_interrupt+1,fsr1h
  3248  00114A  C028  FFE1         	movff	??_timer_interrupt,fsr1l
  3249  00114E  9258               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3250  001150  0011               	retfie		f
  3251  001152                     __end_of_timer_interrupt:
  3252                           	opt callstack 0
  3253                           
  3254 ;; *************** function _handleListHead *****************
  3255 ;; Defined at:
  3256 ;;		line 91 in file "task.c"
  3257 ;; Parameters:    Size  Location     Type
  3258 ;;		None
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;  cur             2   35[COMRAM] int 
  3261 ;;  prev            2   33[COMRAM] int 
  3262 ;;  pos             2   37[COMRAM] int 
  3263 ;; Return value:  Size  Location     Type
  3264 ;;                  1    wreg      void 
  3265 ;; Registers used:
  3266 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3267 ;; Tracked objects:
  3268 ;;		On entry : 0/0
  3269 ;;		On exit  : 0/0
  3270 ;;		Unchanged: 0/0
  3271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3273 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3274 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3275 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3276 ;;Total ram usage:       25 bytes
  3277 ;; Hardware stack levels used:    1
  3278 ;; Hardware stack levels required when called:    4
  3279 ;; This function calls:
  3280 ;;		_enqueue
  3281 ;;		_removeTask
  3282 ;;		i2___wmul
  3283 ;; This function is called by:
  3284 ;;		_timer_interrupt
  3285 ;; This function uses a non-reentrant model
  3286 ;;
  3287                           
  3288                           	psect	text20
  3289  000012                     __ptext20:
  3290                           	opt callstack 0
  3291  000012                     _handleListHead:
  3292                           	opt callstack 19
  3293  000012                     
  3294                           ;task.c: 92:     if(head == 105)
  3295  000012  0E69               	movlw	105
  3296  000014  0100               	movlb	0	; () banked
  3297  000016  1995               	xorwf	_head& (0+255),w,b
  3298  000018  1196               	iorwf	(_head+1)& (0+255),w,b
  3299  00001A  A4D8               	btfss	status,2,c
  3300  00001C  EF12  F000         	goto	i2u143_41
  3301  000020  EF14  F000         	goto	i2u143_40
  3302  000024                     i2u143_41:
  3303  000024  EF7F  F002         	goto	i2l235
  3304  000028                     i2u143_40:
  3305  000028  EFB0  F002         	goto	i2l234
  3306  00002C                     i2l236:
  3307                           
  3308                           ;task.c: 95:         int pos = head;
  3309  00002C  C095  F026         	movff	_head,handleListHead@pos
  3310  000030  C096  F027         	movff	_head+1,handleListHead@pos+1
  3311  000034                     
  3312                           ;task.c: 96:         enqueue(task_list[pos].func_ptr, task_list[pos].data_p);
  3313  000034  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3314  000038  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3315  00003C  0E00               	movlw	0
  3316  00003E  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3317  000040  0E0F               	movlw	15
  3318  000042  6E03               	movwf	i2___wmul@multiplicand^0,c
  3319  000044  EC0C  F00B         	call	i2___wmul	;wreg free
  3320  000048  0E6C               	movlw	low (_task_list+8)
  3321  00004A  2401               	addwf	?i2___wmul^0,w,c
  3322  00004C  6ED9               	movwf	fsr2l,c
  3323  00004E  0E01               	movlw	high (_task_list+8)
  3324  000050  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3325  000052  6EDA               	movwf	fsr2h,c
  3326  000054  CFDE F01B          	movff	postinc2,_handleListHead$1389
  3327  000058  CFDE F01C          	movff	postinc2,_handleListHead$1389+1
  3328  00005C  CFDD F01D          	movff	postdec2,_handleListHead$1389+2
  3329                           
  3330                           ;task.c: 96:         enqueue(task_list[pos].func_ptr, task_list[pos].data_p);
  3331  000060  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3332  000064  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3333  000068  0E00               	movlw	0
  3334  00006A  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3335  00006C  0E0F               	movlw	15
  3336  00006E  6E03               	movwf	i2___wmul@multiplicand^0,c
  3337  000070  EC0C  F00B         	call	i2___wmul	;wreg free
  3338  000074  0E71               	movlw	low (_task_list+13)
  3339  000076  2401               	addwf	?i2___wmul^0,w,c
  3340  000078  6ED9               	movwf	fsr2l,c
  3341  00007A  0E01               	movlw	high (_task_list+13)
  3342  00007C  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3343  00007E  6EDA               	movwf	fsr2h,c
  3344  000080  CFDE F01E          	movff	postinc2,_handleListHead$1390
  3345  000084  CFDD F01F          	movff	postdec2,_handleListHead$1390+1
  3346                           
  3347                           ;task.c: 96:         enqueue(task_list[pos].func_ptr, task_list[pos].data_p);
  3348  000088  C01B  F00A         	movff	_handleListHead$1389,enqueue@ptr
  3349  00008C  C01C  F00B         	movff	_handleListHead$1389+1,enqueue@ptr+1
  3350  000090  C01D  F00C         	movff	_handleListHead$1389+2,enqueue@ptr+2
  3351  000094  C01E  F00D         	movff	_handleListHead$1390,enqueue@data
  3352  000098  C01F  F00E         	movff	_handleListHead$1390+1,enqueue@data+1
  3353  00009C  EC01  F009         	call	_enqueue	;wreg free
  3354                           
  3355                           ;task.c: 97:         head = task_list[pos].next;
  3356  0000A0  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3357  0000A4  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3358  0000A8  0E00               	movlw	0
  3359  0000AA  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3360  0000AC  0E0F               	movlw	15
  3361  0000AE  6E03               	movwf	i2___wmul@multiplicand^0,c
  3362  0000B0  EC0C  F00B         	call	i2___wmul	;wreg free
  3363  0000B4  0E6F               	movlw	low (_task_list+11)
  3364  0000B6  2401               	addwf	?i2___wmul^0,w,c
  3365  0000B8  6ED9               	movwf	fsr2l,c
  3366  0000BA  0E01               	movlw	high (_task_list+11)
  3367  0000BC  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3368  0000BE  6EDA               	movwf	fsr2h,c
  3369  0000C0  CFDE F095          	movff	postinc2,_head
  3370  0000C4  CFDD F096          	movff	postdec2,_head+1
  3371                           
  3372                           ;task.c: 98:         if(task_list[pos].period_t == 0) {
  3373  0000C8  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3374  0000CC  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3375  0000D0  0E00               	movlw	0
  3376  0000D2  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3377  0000D4  0E0F               	movlw	15
  3378  0000D6  6E03               	movwf	i2___wmul@multiplicand^0,c
  3379  0000D8  EC0C  F00B         	call	i2___wmul	;wreg free
  3380  0000DC  0E68               	movlw	low (_task_list+4)
  3381  0000DE  2401               	addwf	?i2___wmul^0,w,c
  3382  0000E0  6ED9               	movwf	fsr2l,c
  3383  0000E2  0E01               	movlw	high (_task_list+4)
  3384  0000E4  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3385  0000E6  6EDA               	movwf	fsr2h,c
  3386  0000E8  50DE               	movf	postinc2,w,c
  3387  0000EA  10DE               	iorwf	postinc2,w,c
  3388  0000EC  10DE               	iorwf	postinc2,w,c
  3389  0000EE  10DE               	iorwf	postinc2,w,c
  3390  0000F0  A4D8               	btfss	status,2,c
  3391  0000F2  EF7D  F000         	goto	i2u144_41
  3392  0000F6  EF7F  F000         	goto	i2u144_40
  3393  0000FA                     i2u144_41:
  3394  0000FA  EF84  F000         	goto	i2l1999
  3395  0000FE                     i2u144_40:
  3396  0000FE                     
  3397                           ;task.c: 99:             removeTask(pos);
  3398  0000FE  5026               	movf	handleListHead@pos^0,w,c
  3399  000100  EC99  F006         	call	_removeTask
  3400                           
  3401                           ;task.c: 100:         }
  3402  000104  EF7F  F002         	goto	i2l235
  3403  000108                     i2l1999:
  3404                           
  3405                           ;task.c: 102:             task_list[pos].delay_t = task_list[pos].period_t;
  3406  000108  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3407  00010C  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3408  000110  0E00               	movlw	0
  3409  000112  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3410  000114  0E0F               	movlw	15
  3411  000116  6E03               	movwf	i2___wmul@multiplicand^0,c
  3412  000118  EC0C  F00B         	call	i2___wmul	;wreg free
  3413  00011C  0E68               	movlw	low (_task_list+4)
  3414  00011E  2401               	addwf	?i2___wmul^0,w,c
  3415  000120  6ED9               	movwf	fsr2l,c
  3416  000122  0E01               	movlw	high (_task_list+4)
  3417  000124  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3418  000126  6EDA               	movwf	fsr2h,c
  3419  000128  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3420  00012C  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3421  000130  0E00               	movlw	0
  3422  000132  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3423  000134  0E0F               	movlw	15
  3424  000136  6E03               	movwf	i2___wmul@multiplicand^0,c
  3425  000138  EC0C  F00B         	call	i2___wmul	;wreg free
  3426  00013C  0E64               	movlw	low _task_list
  3427  00013E  2401               	addwf	?i2___wmul^0,w,c
  3428  000140  6EE1               	movwf	fsr1l,c
  3429  000142  0E01               	movlw	high _task_list
  3430  000144  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3431  000146  6EE2               	movwf	fsr1h,c
  3432  000148  CFDE FFE6          	movff	postinc2,postinc1
  3433  00014C  CFDE FFE6          	movff	postinc2,postinc1
  3434  000150  CFDE FFE6          	movff	postinc2,postinc1
  3435  000154  CFDE FFE6          	movff	postinc2,postinc1
  3436  000158                     
  3437                           ;task.c: 103:             if(head == 105 || (head != 105 && task_list[head].delay_t > ta
      +                          sk_list[pos].delay_t)) {
  3438  000158  0E69               	movlw	105
  3439  00015A  0100               	movlb	0	; () banked
  3440  00015C  1995               	xorwf	_head& (0+255),w,b
  3441  00015E  1196               	iorwf	(_head+1)& (0+255),w,b
  3442  000160  B4D8               	btfsc	status,2,c
  3443  000162  EFB5  F000         	goto	i2u145_41
  3444  000166  EFB7  F000         	goto	i2u145_40
  3445  00016A                     i2u145_41:
  3446  00016A  EFF0  F000         	goto	i2l2007
  3447  00016E                     i2u145_40:
  3448  00016E                     
  3449                           ; BSR set to: 0
  3450  00016E  0E69               	movlw	105
  3451  000170  1995               	xorwf	_head& (0+255),w,b
  3452  000172  1196               	iorwf	(_head+1)& (0+255),w,b
  3453  000174  B4D8               	btfsc	status,2,c
  3454  000176  EFBF  F000         	goto	i2u146_41
  3455  00017A  EFC1  F000         	goto	i2u146_40
  3456  00017E                     i2u146_41:
  3457  00017E  EF0A  F001         	goto	i2l2011
  3458  000182                     i2u146_40:
  3459  000182                     
  3460                           ; BSR set to: 0
  3461  000182  C095  F001         	movff	_head,i2___wmul@multiplier
  3462  000186  C096  F002         	movff	_head+1,i2___wmul@multiplier+1
  3463  00018A  0E00               	movlw	0
  3464  00018C  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3465  00018E  0E0F               	movlw	15
  3466  000190  6E03               	movwf	i2___wmul@multiplicand^0,c
  3467  000192  EC0C  F00B         	call	i2___wmul	;wreg free
  3468  000196  0E64               	movlw	low _task_list
  3469  000198  2401               	addwf	?i2___wmul^0,w,c
  3470  00019A  6ED9               	movwf	fsr2l,c
  3471  00019C  0E01               	movlw	high _task_list
  3472  00019E  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3473  0001A0  6EDA               	movwf	fsr2h,c
  3474  0001A2  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3475  0001A6  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3476  0001AA  0E00               	movlw	0
  3477  0001AC  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3478  0001AE  0E0F               	movlw	15
  3479  0001B0  6E03               	movwf	i2___wmul@multiplicand^0,c
  3480  0001B2  EC0C  F00B         	call	i2___wmul	;wreg free
  3481  0001B6  0E64               	movlw	low _task_list
  3482  0001B8  2401               	addwf	?i2___wmul^0,w,c
  3483  0001BA  6EE1               	movwf	fsr1l,c
  3484  0001BC  0E01               	movlw	high _task_list
  3485  0001BE  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3486  0001C0  6EE2               	movwf	fsr1h,c
  3487  0001C2  50DE               	movf	postinc2,w,c
  3488  0001C4  5CE6               	subwf	postinc1,w,c
  3489  0001C6  50DE               	movf	postinc2,w,c
  3490  0001C8  58E6               	subwfb	postinc1,w,c
  3491  0001CA  50DE               	movf	postinc2,w,c
  3492  0001CC  58E6               	subwfb	postinc1,w,c
  3493  0001CE  50DE               	movf	postinc2,w,c
  3494  0001D0  58E6               	subwfb	postinc1,w,c
  3495  0001D2  B0D8               	btfsc	status,0,c
  3496  0001D4  EFEE  F000         	goto	i2u147_41
  3497  0001D8  EFF0  F000         	goto	i2u147_40
  3498  0001DC                     i2u147_41:
  3499  0001DC  EF0A  F001         	goto	i2l2011
  3500  0001E0                     i2u147_40:
  3501  0001E0                     i2l2007:
  3502                           
  3503                           ;task.c: 104:                 task_list[pos].next = head;
  3504  0001E0  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3505  0001E4  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3506  0001E8  0E00               	movlw	0
  3507  0001EA  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3508  0001EC  0E0F               	movlw	15
  3509  0001EE  6E03               	movwf	i2___wmul@multiplicand^0,c
  3510  0001F0  EC0C  F00B         	call	i2___wmul	;wreg free
  3511  0001F4  0E6F               	movlw	low (_task_list+11)
  3512  0001F6  2401               	addwf	?i2___wmul^0,w,c
  3513  0001F8  6ED9               	movwf	fsr2l,c
  3514  0001FA  0E01               	movlw	high (_task_list+11)
  3515  0001FC  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3516  0001FE  6EDA               	movwf	fsr2h,c
  3517  000200  C095  FFDE         	movff	_head,postinc2
  3518  000204  C096  FFDD         	movff	_head+1,postdec2
  3519  000208                     
  3520                           ;task.c: 105:                 head = pos;
  3521  000208  C026  F095         	movff	handleListHead@pos,_head
  3522  00020C  C027  F096         	movff	handleListHead@pos+1,_head+1
  3523                           
  3524                           ;task.c: 106:             } else {
  3525  000210  EF21  F002         	goto	i2l242
  3526  000214                     i2l2011:
  3527                           
  3528                           ;task.c: 107:                 task_list[pos].delay_t = task_list[pos].delay_t - task_lis
      +                          t[head].delay_t;
  3529  000214  C095  F001         	movff	_head,i2___wmul@multiplier
  3530  000218  C096  F002         	movff	_head+1,i2___wmul@multiplier+1
  3531  00021C  0E00               	movlw	0
  3532  00021E  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3533  000220  0E0F               	movlw	15
  3534  000222  6E03               	movwf	i2___wmul@multiplicand^0,c
  3535  000224  EC0C  F00B         	call	i2___wmul	;wreg free
  3536  000228  0E64               	movlw	low _task_list
  3537  00022A  2401               	addwf	?i2___wmul^0,w,c
  3538  00022C  6ED9               	movwf	fsr2l,c
  3539  00022E  0E01               	movlw	high _task_list
  3540  000230  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3541  000232  6EDA               	movwf	fsr2h,c
  3542  000234  CFDE F00F          	movff	postinc2,??_handleListHead
  3543  000238  CFDE F010          	movff	postinc2,??_handleListHead+1
  3544  00023C  CFDE F011          	movff	postinc2,??_handleListHead+2
  3545  000240  CFDE F012          	movff	postinc2,??_handleListHead+3
  3546  000244  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3547  000248  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3548  00024C  0E00               	movlw	0
  3549  00024E  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3550  000250  0E0F               	movlw	15
  3551  000252  6E03               	movwf	i2___wmul@multiplicand^0,c
  3552  000254  EC0C  F00B         	call	i2___wmul	;wreg free
  3553  000258  0E64               	movlw	low _task_list
  3554  00025A  2401               	addwf	?i2___wmul^0,w,c
  3555  00025C  6ED9               	movwf	fsr2l,c
  3556  00025E  0E01               	movlw	high _task_list
  3557  000260  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3558  000262  6EDA               	movwf	fsr2h,c
  3559  000264  CFDE F013          	movff	postinc2,??_handleListHead+4
  3560  000268  CFDE F014          	movff	postinc2,??_handleListHead+5
  3561  00026C  CFDE F015          	movff	postinc2,??_handleListHead+6
  3562  000270  CFDE F016          	movff	postinc2,??_handleListHead+7
  3563  000274  500F               	movf	??_handleListHead^0,w,c
  3564  000276  5C13               	subwf	(??_handleListHead+4)^0,w,c
  3565  000278  6E17               	movwf	(??_handleListHead+8)^0,c
  3566  00027A  5010               	movf	(??_handleListHead+1)^0,w,c
  3567  00027C  5814               	subwfb	(??_handleListHead+5)^0,w,c
  3568  00027E  6E18               	movwf	(??_handleListHead+9)^0,c
  3569  000280  5011               	movf	(??_handleListHead+2)^0,w,c
  3570  000282  5815               	subwfb	(??_handleListHead+6)^0,w,c
  3571  000284  6E19               	movwf	(??_handleListHead+10)^0,c
  3572  000286  5012               	movf	(??_handleListHead+3)^0,w,c
  3573  000288  5816               	subwfb	(??_handleListHead+7)^0,w,c
  3574  00028A  6E1A               	movwf	(??_handleListHead+11)^0,c
  3575  00028C  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3576  000290  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3577  000294  0E00               	movlw	0
  3578  000296  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3579  000298  0E0F               	movlw	15
  3580  00029A  6E03               	movwf	i2___wmul@multiplicand^0,c
  3581  00029C  EC0C  F00B         	call	i2___wmul	;wreg free
  3582  0002A0  0E64               	movlw	low _task_list
  3583  0002A2  2401               	addwf	?i2___wmul^0,w,c
  3584  0002A4  6ED9               	movwf	fsr2l,c
  3585  0002A6  0E01               	movlw	high _task_list
  3586  0002A8  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3587  0002AA  6EDA               	movwf	fsr2h,c
  3588  0002AC  C017  FFDE         	movff	??_handleListHead+8,postinc2
  3589  0002B0  C018  FFDE         	movff	??_handleListHead+9,postinc2
  3590  0002B4  C019  FFDE         	movff	??_handleListHead+10,postinc2
  3591  0002B8  C01A  FFDE         	movff	??_handleListHead+11,postinc2
  3592                           
  3593                           ;task.c: 108:                 int cur = task_list[head].next;
  3594  0002BC  C095  F001         	movff	_head,i2___wmul@multiplier
  3595  0002C0  C096  F002         	movff	_head+1,i2___wmul@multiplier+1
  3596  0002C4  0E00               	movlw	0
  3597  0002C6  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3598  0002C8  0E0F               	movlw	15
  3599  0002CA  6E03               	movwf	i2___wmul@multiplicand^0,c
  3600  0002CC  EC0C  F00B         	call	i2___wmul	;wreg free
  3601  0002D0  0E6F               	movlw	low (_task_list+11)
  3602  0002D2  2401               	addwf	?i2___wmul^0,w,c
  3603  0002D4  6ED9               	movwf	fsr2l,c
  3604  0002D6  0E01               	movlw	high (_task_list+11)
  3605  0002D8  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3606  0002DA  6EDA               	movwf	fsr2h,c
  3607  0002DC  CFDE F024          	movff	postinc2,handleListHead@cur
  3608  0002E0  CFDD F025          	movff	postdec2,handleListHead@cur+1
  3609  0002E4                     
  3610                           ;task.c: 109:                 int prev = head;
  3611  0002E4  C095  F022         	movff	_head,handleListHead@prev
  3612  0002E8  C096  F023         	movff	_head+1,handleListHead@prev+1
  3613                           
  3614                           ;task.c: 110:                 while(cur != 105 && task_list[cur].delay_t <= task_list[po
      +                          s].delay_t) {
  3615  0002EC  EFC0  F001         	goto	i2l2019
  3616  0002F0                     i2l2015:
  3617                           
  3618                           ;task.c: 111:                     task_list[pos].delay_t -= task_list[cur].delay_t;
  3619  0002F0  C024  F001         	movff	handleListHead@cur,i2___wmul@multiplier
  3620  0002F4  C025  F002         	movff	handleListHead@cur+1,i2___wmul@multiplier+1
  3621  0002F8  0E00               	movlw	0
  3622  0002FA  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3623  0002FC  0E0F               	movlw	15
  3624  0002FE  6E03               	movwf	i2___wmul@multiplicand^0,c
  3625  000300  EC0C  F00B         	call	i2___wmul	;wreg free
  3626  000304  0E64               	movlw	low _task_list
  3627  000306  2401               	addwf	?i2___wmul^0,w,c
  3628  000308  6ED9               	movwf	fsr2l,c
  3629  00030A  0E01               	movlw	high _task_list
  3630  00030C  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3631  00030E  6EDA               	movwf	fsr2h,c
  3632  000310  CFDE F00F          	movff	postinc2,??_handleListHead
  3633  000314  CFDE F010          	movff	postinc2,??_handleListHead+1
  3634  000318  CFDE F011          	movff	postinc2,??_handleListHead+2
  3635  00031C  CFDE F012          	movff	postinc2,??_handleListHead+3
  3636  000320  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3637  000324  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3638  000328  0E00               	movlw	0
  3639  00032A  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3640  00032C  0E0F               	movlw	15
  3641  00032E  6E03               	movwf	i2___wmul@multiplicand^0,c
  3642  000330  EC0C  F00B         	call	i2___wmul	;wreg free
  3643  000334  0E64               	movlw	low _task_list
  3644  000336  2401               	addwf	?i2___wmul^0,w,c
  3645  000338  6ED9               	movwf	fsr2l,c
  3646  00033A  0E01               	movlw	high _task_list
  3647  00033C  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3648  00033E  6EDA               	movwf	fsr2h,c
  3649  000340  500F               	movf	??_handleListHead^0,w,c
  3650  000342  5EDE               	subwf	postinc2,f,c
  3651  000344  5010               	movf	(??_handleListHead+1)^0,w,c
  3652  000346  5ADE               	subwfb	postinc2,f,c
  3653  000348  5011               	movf	(??_handleListHead+2)^0,w,c
  3654  00034A  5ADE               	subwfb	postinc2,f,c
  3655  00034C  5012               	movf	(??_handleListHead+3)^0,w,c
  3656  00034E  5ADE               	subwfb	postinc2,f,c
  3657  000350                     
  3658                           ;task.c: 112:                     prev = cur;
  3659  000350  C024  F022         	movff	handleListHead@cur,handleListHead@prev
  3660  000354  C025  F023         	movff	handleListHead@cur+1,handleListHead@prev+1
  3661                           
  3662                           ;task.c: 113:                     cur = task_list[cur].next;
  3663  000358  C024  F001         	movff	handleListHead@cur,i2___wmul@multiplier
  3664  00035C  C025  F002         	movff	handleListHead@cur+1,i2___wmul@multiplier+1
  3665  000360  0E00               	movlw	0
  3666  000362  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3667  000364  0E0F               	movlw	15
  3668  000366  6E03               	movwf	i2___wmul@multiplicand^0,c
  3669  000368  EC0C  F00B         	call	i2___wmul	;wreg free
  3670  00036C  0E6F               	movlw	low (_task_list+11)
  3671  00036E  2401               	addwf	?i2___wmul^0,w,c
  3672  000370  6ED9               	movwf	fsr2l,c
  3673  000372  0E01               	movlw	high (_task_list+11)
  3674  000374  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3675  000376  6EDA               	movwf	fsr2h,c
  3676  000378  CFDE F024          	movff	postinc2,handleListHead@cur
  3677  00037C  CFDD F025          	movff	postdec2,handleListHead@cur+1
  3678  000380                     i2l2019:
  3679                           
  3680                           ;task.c: 110:                 while(cur != 105 && task_list[cur].delay_t <= task_list[po
      +                          s].delay_t) {
  3681  000380  0E69               	movlw	105
  3682  000382  1824               	xorwf	handleListHead@cur^0,w,c
  3683  000384  1025               	iorwf	(handleListHead@cur+1)^0,w,c
  3684  000386  B4D8               	btfsc	status,2,c
  3685  000388  EFC8  F001         	goto	i2u148_41
  3686  00038C  EFCA  F001         	goto	i2u148_40
  3687  000390                     i2u148_41:
  3688  000390  EFF9  F001         	goto	i2l2023
  3689  000394                     i2u148_40:
  3690  000394  C024  F001         	movff	handleListHead@cur,i2___wmul@multiplier
  3691  000398  C025  F002         	movff	handleListHead@cur+1,i2___wmul@multiplier+1
  3692  00039C  0E00               	movlw	0
  3693  00039E  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3694  0003A0  0E0F               	movlw	15
  3695  0003A2  6E03               	movwf	i2___wmul@multiplicand^0,c
  3696  0003A4  EC0C  F00B         	call	i2___wmul	;wreg free
  3697  0003A8  0E64               	movlw	low _task_list
  3698  0003AA  2401               	addwf	?i2___wmul^0,w,c
  3699  0003AC  6ED9               	movwf	fsr2l,c
  3700  0003AE  0E01               	movlw	high _task_list
  3701  0003B0  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3702  0003B2  6EDA               	movwf	fsr2h,c
  3703  0003B4  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3704  0003B8  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3705  0003BC  0E00               	movlw	0
  3706  0003BE  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3707  0003C0  0E0F               	movlw	15
  3708  0003C2  6E03               	movwf	i2___wmul@multiplicand^0,c
  3709  0003C4  EC0C  F00B         	call	i2___wmul	;wreg free
  3710  0003C8  0E64               	movlw	low _task_list
  3711  0003CA  2401               	addwf	?i2___wmul^0,w,c
  3712  0003CC  6EE1               	movwf	fsr1l,c
  3713  0003CE  0E01               	movlw	high _task_list
  3714  0003D0  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3715  0003D2  6EE2               	movwf	fsr1h,c
  3716  0003D4  50DE               	movf	postinc2,w,c
  3717  0003D6  5CE6               	subwf	postinc1,w,c
  3718  0003D8  50DE               	movf	postinc2,w,c
  3719  0003DA  58E6               	subwfb	postinc1,w,c
  3720  0003DC  50DE               	movf	postinc2,w,c
  3721  0003DE  58E6               	subwfb	postinc1,w,c
  3722  0003E0  50DE               	movf	postinc2,w,c
  3723  0003E2  58E6               	subwfb	postinc1,w,c
  3724  0003E4  B0D8               	btfsc	status,0,c
  3725  0003E6  EFF7  F001         	goto	i2u149_41
  3726  0003EA  EFF9  F001         	goto	i2u149_40
  3727  0003EE                     i2u149_41:
  3728  0003EE  EF78  F001         	goto	i2l2015
  3729  0003F2                     i2u149_40:
  3730  0003F2                     i2l2023:
  3731                           
  3732                           ;task.c: 115:                 task_list[prev].next = pos;
  3733  0003F2  C022  F001         	movff	handleListHead@prev,i2___wmul@multiplier
  3734  0003F6  C023  F002         	movff	handleListHead@prev+1,i2___wmul@multiplier+1
  3735  0003FA  0E00               	movlw	0
  3736  0003FC  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3737  0003FE  0E0F               	movlw	15
  3738  000400  6E03               	movwf	i2___wmul@multiplicand^0,c
  3739  000402  EC0C  F00B         	call	i2___wmul	;wreg free
  3740  000406  0E6F               	movlw	low (_task_list+11)
  3741  000408  2401               	addwf	?i2___wmul^0,w,c
  3742  00040A  6ED9               	movwf	fsr2l,c
  3743  00040C  0E01               	movlw	high (_task_list+11)
  3744  00040E  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3745  000410  6EDA               	movwf	fsr2h,c
  3746  000412  C026  FFDE         	movff	handleListHead@pos,postinc2
  3747  000416  C027  FFDD         	movff	handleListHead@pos+1,postdec2
  3748                           
  3749                           ;task.c: 116:                 task_list[pos].next = cur;
  3750  00041A  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3751  00041E  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3752  000422  0E00               	movlw	0
  3753  000424  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3754  000426  0E0F               	movlw	15
  3755  000428  6E03               	movwf	i2___wmul@multiplicand^0,c
  3756  00042A  EC0C  F00B         	call	i2___wmul	;wreg free
  3757  00042E  0E6F               	movlw	low (_task_list+11)
  3758  000430  2401               	addwf	?i2___wmul^0,w,c
  3759  000432  6ED9               	movwf	fsr2l,c
  3760  000434  0E01               	movlw	high (_task_list+11)
  3761  000436  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3762  000438  6EDA               	movwf	fsr2h,c
  3763  00043A  C024  FFDE         	movff	handleListHead@cur,postinc2
  3764  00043E  C025  FFDD         	movff	handleListHead@cur+1,postdec2
  3765  000442                     i2l242:
  3766                           
  3767                           ;task.c: 118:             if(task_list[pos].next != 105)
  3768  000442  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3769  000446  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3770  00044A  0E00               	movlw	0
  3771  00044C  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3772  00044E  0E0F               	movlw	15
  3773  000450  6E03               	movwf	i2___wmul@multiplicand^0,c
  3774  000452  EC0C  F00B         	call	i2___wmul	;wreg free
  3775  000456  0E6F               	movlw	low (_task_list+11)
  3776  000458  2401               	addwf	?i2___wmul^0,w,c
  3777  00045A  6ED9               	movwf	fsr2l,c
  3778  00045C  0E01               	movlw	high (_task_list+11)
  3779  00045E  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3780  000460  6EDA               	movwf	fsr2h,c
  3781  000462  0E69               	movlw	105
  3782  000464  18DE               	xorwf	postinc2,w,c
  3783  000466  10DE               	iorwf	postinc2,w,c
  3784  000468  B4D8               	btfsc	status,2,c
  3785  00046A  EF39  F002         	goto	i2u150_41
  3786  00046E  EF3B  F002         	goto	i2u150_40
  3787  000472                     i2u150_41:
  3788  000472  EF7F  F002         	goto	i2l235
  3789  000476                     i2u150_40:
  3790  000476                     
  3791                           ;task.c: 119:                 task_list[task_list[pos].next].delay_t -= task_list[pos].d
      +                          elay_t;
  3792  000476  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3793  00047A  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3794  00047E  0E00               	movlw	0
  3795  000480  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3796  000482  0E0F               	movlw	15
  3797  000484  6E03               	movwf	i2___wmul@multiplicand^0,c
  3798  000486  EC0C  F00B         	call	i2___wmul	;wreg free
  3799  00048A  0E6F               	movlw	low (_task_list+11)
  3800  00048C  2401               	addwf	?i2___wmul^0,w,c
  3801  00048E  6ED9               	movwf	fsr2l,c
  3802  000490  0E01               	movlw	high (_task_list+11)
  3803  000492  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3804  000494  6EDA               	movwf	fsr2h,c
  3805  000496  CFDE F020          	movff	postinc2,_handleListHead$1391
  3806  00049A  CFDD F021          	movff	postdec2,_handleListHead$1391+1
  3807                           
  3808                           ;task.c: 119:                 task_list[task_list[pos].next].delay_t -= task_list[pos].d
      +                          elay_t;
  3809  00049E  C026  F001         	movff	handleListHead@pos,i2___wmul@multiplier
  3810  0004A2  C027  F002         	movff	handleListHead@pos+1,i2___wmul@multiplier+1
  3811  0004A6  0E00               	movlw	0
  3812  0004A8  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3813  0004AA  0E0F               	movlw	15
  3814  0004AC  6E03               	movwf	i2___wmul@multiplicand^0,c
  3815  0004AE  EC0C  F00B         	call	i2___wmul	;wreg free
  3816  0004B2  0E64               	movlw	low _task_list
  3817  0004B4  2401               	addwf	?i2___wmul^0,w,c
  3818  0004B6  6ED9               	movwf	fsr2l,c
  3819  0004B8  0E01               	movlw	high _task_list
  3820  0004BA  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3821  0004BC  6EDA               	movwf	fsr2h,c
  3822  0004BE  CFDE F00F          	movff	postinc2,??_handleListHead
  3823  0004C2  CFDE F010          	movff	postinc2,??_handleListHead+1
  3824  0004C6  CFDE F011          	movff	postinc2,??_handleListHead+2
  3825  0004CA  CFDE F012          	movff	postinc2,??_handleListHead+3
  3826  0004CE  C020  F001         	movff	_handleListHead$1391,i2___wmul@multiplier
  3827  0004D2  C021  F002         	movff	_handleListHead$1391+1,i2___wmul@multiplier+1
  3828  0004D6  0E00               	movlw	0
  3829  0004D8  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3830  0004DA  0E0F               	movlw	15
  3831  0004DC  6E03               	movwf	i2___wmul@multiplicand^0,c
  3832  0004DE  EC0C  F00B         	call	i2___wmul	;wreg free
  3833  0004E2  0E64               	movlw	low _task_list
  3834  0004E4  2401               	addwf	?i2___wmul^0,w,c
  3835  0004E6  6ED9               	movwf	fsr2l,c
  3836  0004E8  0E01               	movlw	high _task_list
  3837  0004EA  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3838  0004EC  6EDA               	movwf	fsr2h,c
  3839  0004EE  500F               	movf	??_handleListHead^0,w,c
  3840  0004F0  5EDE               	subwf	postinc2,f,c
  3841  0004F2  5010               	movf	(??_handleListHead+1)^0,w,c
  3842  0004F4  5ADE               	subwfb	postinc2,f,c
  3843  0004F6  5011               	movf	(??_handleListHead+2)^0,w,c
  3844  0004F8  5ADE               	subwfb	postinc2,f,c
  3845  0004FA  5012               	movf	(??_handleListHead+3)^0,w,c
  3846  0004FC  5ADE               	subwfb	postinc2,f,c
  3847  0004FE                     i2l235:
  3848                           
  3849                           ;task.c: 94:     while(task_list[head].delay_t == 0) {
  3850  0004FE  C095  F001         	movff	_head,i2___wmul@multiplier
  3851  000502  C096  F002         	movff	_head+1,i2___wmul@multiplier+1
  3852  000506  0E00               	movlw	0
  3853  000508  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3854  00050A  0E0F               	movlw	15
  3855  00050C  6E03               	movwf	i2___wmul@multiplicand^0,c
  3856  00050E  EC0C  F00B         	call	i2___wmul	;wreg free
  3857  000512  0E64               	movlw	low _task_list
  3858  000514  2401               	addwf	?i2___wmul^0,w,c
  3859  000516  6ED9               	movwf	fsr2l,c
  3860  000518  0E01               	movlw	high _task_list
  3861  00051A  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3862  00051C  6EDA               	movwf	fsr2h,c
  3863  00051E  50DE               	movf	postinc2,w,c
  3864  000520  10DE               	iorwf	postinc2,w,c
  3865  000522  10DE               	iorwf	postinc2,w,c
  3866  000524  10DE               	iorwf	postinc2,w,c
  3867  000526  B4D8               	btfsc	status,2,c
  3868  000528  EF98  F002         	goto	i2u151_41
  3869  00052C  EF9A  F002         	goto	i2u151_40
  3870  000530                     i2u151_41:
  3871  000530  EF16  F000         	goto	i2l236
  3872  000534                     i2u151_40:
  3873  000534                     
  3874                           ;task.c: 122:     task_list[head].delay_t-= 10;
  3875  000534  C095  F001         	movff	_head,i2___wmul@multiplier
  3876  000538  C096  F002         	movff	_head+1,i2___wmul@multiplier+1
  3877  00053C  0E00               	movlw	0
  3878  00053E  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3879  000540  0E0F               	movlw	15
  3880  000542  6E03               	movwf	i2___wmul@multiplicand^0,c
  3881  000544  EC0C  F00B         	call	i2___wmul	;wreg free
  3882  000548  0E64               	movlw	low _task_list
  3883  00054A  2401               	addwf	?i2___wmul^0,w,c
  3884  00054C  6ED9               	movwf	fsr2l,c
  3885  00054E  0E01               	movlw	high _task_list
  3886  000550  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3887  000552  6EDA               	movwf	fsr2h,c
  3888  000554  0E0A               	movlw	10
  3889  000556  5EDE               	subwf	postinc2,f,c
  3890  000558  0E00               	movlw	0
  3891  00055A  5ADE               	subwfb	postinc2,f,c
  3892  00055C  5ADE               	subwfb	postinc2,f,c
  3893  00055E  5ADE               	subwfb	postinc2,f,c
  3894  000560                     i2l234:
  3895  000560  0012               	return		;funcret
  3896  000562                     __end_of_handleListHead:
  3897                           	opt callstack 0
  3898                           
  3899 ;; *************** function _removeTask *****************
  3900 ;; Defined at:
  3901 ;;		line 67 in file "task.c"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;  idx             1    wreg     unsigned char 
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;  idx             1    5[COMRAM] unsigned char 
  3906 ;;  pos             1    4[COMRAM] unsigned char 
  3907 ;; Return value:  Size  Location     Type
  3908 ;;                  1    wreg      unsigned char 
  3909 ;; Registers used:
  3910 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3917 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3918 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3919 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3920 ;;Total ram usage:        6 bytes
  3921 ;; Hardware stack levels used:    1
  3922 ;; Hardware stack levels required when called:    1
  3923 ;; This function calls:
  3924 ;;		_isEmptyList
  3925 ;; This function is called by:
  3926 ;;		_handleListHead
  3927 ;;		_remove_timer
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           	psect	text21
  3932  000D32                     __ptext21:
  3933                           	opt callstack 0
  3934  000D32                     _removeTask:
  3935                           	opt callstack 21
  3936                           
  3937                           ;incstack = 0
  3938                           ;removeTask@idx stored from wreg
  3939  000D32  6E06               	movwf	removeTask@idx^0,c
  3940  000D34                     
  3941                           ;task.c: 68:     if(isEmptyList() || task_list[idx].func_ptr == ((void*)0))
  3942  000D34  EC59  F00B         	call	_isEmptyList	;wreg free
  3943  000D38  0900               	iorlw	0
  3944  000D3A  A4D8               	btfss	status,2,c
  3945  000D3C  EFA2  F006         	goto	i2u134_41
  3946  000D40  EFA4  F006         	goto	i2u134_40
  3947  000D44                     i2u134_41:
  3948  000D44  EFB6  F006         	goto	i2l1943
  3949  000D48                     i2u134_40:
  3950  000D48  5006               	movf	removeTask@idx^0,w,c
  3951  000D4A  0D0F               	mullw	15
  3952  000D4C  0E6C               	movlw	low (_task_list+8)
  3953  000D4E  24F3               	addwf	243,w,c
  3954  000D50  6ED9               	movwf	fsr2l,c
  3955  000D52  0E01               	movlw	high (_task_list+8)
  3956  000D54  20F4               	addwfc	prodh,w,c
  3957  000D56  6EDA               	movwf	fsr2h,c
  3958  000D58  50DE               	movf	postinc2,w,c
  3959  000D5A  10DE               	iorwf	postinc2,w,c
  3960  000D5C  10DE               	iorwf	postinc2,w,c
  3961  000D5E  A4D8               	btfss	status,2,c
  3962  000D60  EFB4  F006         	goto	i2u135_41
  3963  000D64  EFB6  F006         	goto	i2u135_40
  3964  000D68                     i2u135_41:
  3965  000D68  EFB9  F006         	goto	i2l1947
  3966  000D6C                     i2u135_40:
  3967  000D6C                     i2l1943:
  3968                           
  3969                           ;task.c: 69:         return 0;
  3970  000D6C  0E00               	movlw	0
  3971  000D6E  EF6E  F007         	goto	i2l223
  3972  000D72                     i2l1947:
  3973                           
  3974                           ;task.c: 70:     task_list[idx].delay_t = 0;
  3975  000D72  5006               	movf	removeTask@idx^0,w,c
  3976  000D74  0D0F               	mullw	15
  3977  000D76  0E64               	movlw	low _task_list
  3978  000D78  24F3               	addwf	243,w,c
  3979  000D7A  6ED9               	movwf	fsr2l,c
  3980  000D7C  0E01               	movlw	high _task_list
  3981  000D7E  20F4               	addwfc	prodh,w,c
  3982  000D80  6EDA               	movwf	fsr2h,c
  3983  000D82  6ADE               	clrf	postinc2,c
  3984  000D84  6ADE               	clrf	postinc2,c
  3985  000D86  6ADE               	clrf	postinc2,c
  3986  000D88  6ADD               	clrf	postdec2,c
  3987                           
  3988                           ;task.c: 71:     task_list[idx].period_t = 0;
  3989  000D8A  5006               	movf	removeTask@idx^0,w,c
  3990  000D8C  0D0F               	mullw	15
  3991  000D8E  0E68               	movlw	low (_task_list+4)
  3992  000D90  24F3               	addwf	243,w,c
  3993  000D92  6ED9               	movwf	fsr2l,c
  3994  000D94  0E01               	movlw	high (_task_list+4)
  3995  000D96  20F4               	addwfc	prodh,w,c
  3996  000D98  6EDA               	movwf	fsr2h,c
  3997  000D9A  6ADE               	clrf	postinc2,c
  3998  000D9C  6ADE               	clrf	postinc2,c
  3999  000D9E  6ADE               	clrf	postinc2,c
  4000  000DA0  6ADD               	clrf	postdec2,c
  4001                           
  4002                           ;task.c: 72:     task_list[idx].func_ptr = ((void*)0);
  4003  000DA2  5006               	movf	removeTask@idx^0,w,c
  4004  000DA4  0D0F               	mullw	15
  4005  000DA6  0E6C               	movlw	low (_task_list+8)
  4006  000DA8  24F3               	addwf	243,w,c
  4007  000DAA  6ED9               	movwf	fsr2l,c
  4008  000DAC  0E01               	movlw	high (_task_list+8)
  4009  000DAE  20F4               	addwfc	prodh,w,c
  4010  000DB0  6EDA               	movwf	fsr2h,c
  4011  000DB2  0E00               	movlw	0
  4012  000DB4  6EDE               	movwf	postinc2,c
  4013  000DB6  0E00               	movlw	0
  4014  000DB8  6EDE               	movwf	postinc2,c
  4015  000DBA  0E00               	movlw	0
  4016  000DBC  6EDE               	movwf	postinc2,c
  4017                           
  4018                           ;task.c: 73:     task_list[idx].data_p = ((void*)0);
  4019  000DBE  5006               	movf	removeTask@idx^0,w,c
  4020  000DC0  0D0F               	mullw	15
  4021  000DC2  0E71               	movlw	low (_task_list+13)
  4022  000DC4  24F3               	addwf	243,w,c
  4023  000DC6  6ED9               	movwf	fsr2l,c
  4024  000DC8  0E01               	movlw	high (_task_list+13)
  4025  000DCA  20F4               	addwfc	prodh,w,c
  4026  000DCC  6EDA               	movwf	fsr2h,c
  4027  000DCE  0E00               	movlw	0
  4028  000DD0  6EDE               	movwf	postinc2,c
  4029  000DD2  0E00               	movlw	0
  4030  000DD4  6EDD               	movwf	postdec2,c
  4031  000DD6                     
  4032                           ;task.c: 74:     num_task--;
  4033  000DD6  0100               	movlb	0	; () banked
  4034  000DD8  0797               	decf	_num_task& (0+255),f,b
  4035  000DDA                     
  4036                           ; BSR set to: 0
  4037                           ;task.c: 75:     if(idx == head) {
  4038  000DDA  5006               	movf	removeTask@idx^0,w,c
  4039  000DDC  6E01               	movwf	??_removeTask^0,c
  4040  000DDE  6A02               	clrf	(??_removeTask+1)^0,c
  4041  000DE0  5195               	movf	_head& (0+255),w,b
  4042  000DE2  1801               	xorwf	??_removeTask^0,w,c
  4043  000DE4  E107               	bnz	i2u136_41
  4044  000DE6  5196               	movf	(_head+1)& (0+255),w,b
  4045  000DE8  1802               	xorwf	(??_removeTask+1)^0,w,c
  4046  000DEA  A4D8               	btfss	status,2,c
  4047  000DEC  EFFA  F006         	goto	i2u136_41
  4048  000DF0  EFFC  F006         	goto	i2u136_40
  4049  000DF4                     i2u136_41:
  4050  000DF4  EF16  F007         	goto	i2l224
  4051  000DF8                     i2u136_40:
  4052  000DF8                     
  4053                           ; BSR set to: 0
  4054                           ;task.c: 76:         head = task_list[idx].next;
  4055  000DF8  5006               	movf	removeTask@idx^0,w,c
  4056  000DFA  0D0F               	mullw	15
  4057  000DFC  0E6F               	movlw	low (_task_list+11)
  4058  000DFE  24F3               	addwf	243,w,c
  4059  000E00  6ED9               	movwf	fsr2l,c
  4060  000E02  0E01               	movlw	high (_task_list+11)
  4061  000E04  20F4               	addwfc	prodh,w,c
  4062  000E06  6EDA               	movwf	fsr2h,c
  4063  000E08  CFDE F095          	movff	postinc2,_head
  4064  000E0C  CFDD F096          	movff	postdec2,_head+1
  4065                           
  4066                           ;task.c: 77:         task_list[idx].next = 105;
  4067  000E10  5006               	movf	removeTask@idx^0,w,c
  4068  000E12  0D0F               	mullw	15
  4069  000E14  0E6F               	movlw	low (_task_list+11)
  4070  000E16  24F3               	addwf	243,w,c
  4071  000E18  6ED9               	movwf	fsr2l,c
  4072  000E1A  0E01               	movlw	high (_task_list+11)
  4073  000E1C  20F4               	addwfc	prodh,w,c
  4074  000E1E  6EDA               	movwf	fsr2h,c
  4075  000E20  0E69               	movlw	105
  4076  000E22  6EDE               	movwf	postinc2,c
  4077  000E24  0E00               	movlw	0
  4078  000E26  6EDD               	movwf	postdec2,c
  4079                           
  4080                           ;task.c: 78:     }
  4081  000E28  EF6D  F007         	goto	i2l1963
  4082  000E2C                     i2l224:
  4083                           
  4084                           ; BSR set to: 0
  4085                           ;task.c: 80:         char pos = head;
  4086  000E2C  C095  F005         	movff	_head,removeTask@pos
  4087                           
  4088                           ;task.c: 81:         while(task_list[pos].next != 105 && task_list[pos].next != idx) {
  4089  000E30  EF24  F007         	goto	i2l226
  4090  000E34                     i2l1955:
  4091                           
  4092                           ;task.c: 82:             pos = task_list[pos].next;
  4093  000E34  5005               	movf	removeTask@pos^0,w,c
  4094  000E36  0D0F               	mullw	15
  4095  000E38  0E6F               	movlw	low (_task_list+11)
  4096  000E3A  24F3               	addwf	243,w,c
  4097  000E3C  6ED9               	movwf	fsr2l,c
  4098  000E3E  0E01               	movlw	high (_task_list+11)
  4099  000E40  20F4               	addwfc	prodh,w,c
  4100  000E42  6EDA               	movwf	fsr2h,c
  4101  000E44  50DF               	movf	indf2,w,c
  4102  000E46  6E05               	movwf	removeTask@pos^0,c
  4103  000E48                     i2l226:
  4104                           
  4105                           ;task.c: 81:         while(task_list[pos].next != 105 && task_list[pos].next != idx) {
  4106  000E48  5005               	movf	removeTask@pos^0,w,c
  4107  000E4A  0D0F               	mullw	15
  4108  000E4C  0E6F               	movlw	low (_task_list+11)
  4109  000E4E  24F3               	addwf	243,w,c
  4110  000E50  6ED9               	movwf	fsr2l,c
  4111  000E52  0E01               	movlw	high (_task_list+11)
  4112  000E54  20F4               	addwfc	prodh,w,c
  4113  000E56  6EDA               	movwf	fsr2h,c
  4114  000E58  0E69               	movlw	105
  4115  000E5A  18DE               	xorwf	postinc2,w,c
  4116  000E5C  10DE               	iorwf	postinc2,w,c
  4117  000E5E  B4D8               	btfsc	status,2,c
  4118  000E60  EF34  F007         	goto	i2u137_41
  4119  000E64  EF36  F007         	goto	i2u137_40
  4120  000E68                     i2u137_41:
  4121  000E68  EF4D  F007         	goto	i2l1959
  4122  000E6C                     i2u137_40:
  4123  000E6C  5005               	movf	removeTask@pos^0,w,c
  4124  000E6E  0D0F               	mullw	15
  4125  000E70  0E6F               	movlw	low (_task_list+11)
  4126  000E72  24F3               	addwf	243,w,c
  4127  000E74  6ED9               	movwf	fsr2l,c
  4128  000E76  0E01               	movlw	high (_task_list+11)
  4129  000E78  20F4               	addwfc	prodh,w,c
  4130  000E7A  6EDA               	movwf	fsr2h,c
  4131  000E7C  5006               	movf	removeTask@idx^0,w,c
  4132  000E7E  6E03               	movwf	(??_removeTask+2)^0,c
  4133  000E80  6A04               	clrf	(??_removeTask+3)^0,c
  4134  000E82  50DE               	movf	postinc2,w,c
  4135  000E84  1803               	xorwf	(??_removeTask+2)^0,w,c
  4136  000E86  E107               	bnz	i2u138_41
  4137  000E88  50DE               	movf	postinc2,w,c
  4138  000E8A  1804               	xorwf	(??_removeTask+3)^0,w,c
  4139  000E8C  A4D8               	btfss	status,2,c
  4140  000E8E  EF4B  F007         	goto	i2u138_41
  4141  000E92  EF4D  F007         	goto	i2u138_40
  4142  000E96                     i2u138_41:
  4143  000E96  EF1A  F007         	goto	i2l1955
  4144  000E9A                     i2u138_40:
  4145  000E9A                     i2l1959:
  4146                           
  4147                           ;task.c: 84:         task_list[pos].next = task_list[idx].next;
  4148  000E9A  5006               	movf	removeTask@idx^0,w,c
  4149  000E9C  0D0F               	mullw	15
  4150  000E9E  0E6F               	movlw	low (_task_list+11)
  4151  000EA0  24F3               	addwf	243,w,c
  4152  000EA2  6ED9               	movwf	fsr2l,c
  4153  000EA4  0E01               	movlw	high (_task_list+11)
  4154  000EA6  20F4               	addwfc	prodh,w,c
  4155  000EA8  6EDA               	movwf	fsr2h,c
  4156  000EAA  5005               	movf	removeTask@pos^0,w,c
  4157  000EAC  0D0F               	mullw	15
  4158  000EAE  0E6F               	movlw	low (_task_list+11)
  4159  000EB0  24F3               	addwf	243,w,c
  4160  000EB2  6EE1               	movwf	fsr1l,c
  4161  000EB4  0E01               	movlw	high (_task_list+11)
  4162  000EB6  20F4               	addwfc	prodh,w,c
  4163  000EB8  6EE2               	movwf	fsr1h,c
  4164  000EBA  CFDE FFE6          	movff	postinc2,postinc1
  4165  000EBE  CFDD FFE5          	movff	postdec2,postdec1
  4166  000EC2                     
  4167                           ;task.c: 85:         task_list[idx].next = 105;
  4168  000EC2  5006               	movf	removeTask@idx^0,w,c
  4169  000EC4  0D0F               	mullw	15
  4170  000EC6  0E6F               	movlw	low (_task_list+11)
  4171  000EC8  24F3               	addwf	243,w,c
  4172  000ECA  6ED9               	movwf	fsr2l,c
  4173  000ECC  0E01               	movlw	high (_task_list+11)
  4174  000ECE  20F4               	addwfc	prodh,w,c
  4175  000ED0  6EDA               	movwf	fsr2h,c
  4176  000ED2  0E69               	movlw	105
  4177  000ED4  6EDE               	movwf	postinc2,c
  4178  000ED6  0E00               	movlw	0
  4179  000ED8  6EDD               	movwf	postdec2,c
  4180  000EDA                     i2l1963:
  4181                           
  4182                           ;task.c: 88:     return 1;
  4183  000EDA  0E01               	movlw	1
  4184  000EDC                     i2l223:
  4185  000EDC  0012               	return		;funcret
  4186  000EDE                     __end_of_removeTask:
  4187                           	opt callstack 0
  4188                           
  4189 ;; *************** function _isEmptyList *****************
  4190 ;; Defined at:
  4191 ;;		line 3 in file "task.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;		None
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;		None
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  1    wreg      unsigned char 
  4198 ;; Registers used:
  4199 ;;		wreg, status,2
  4200 ;; Tracked objects:
  4201 ;;		On entry : 0/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;Total ram usage:        0 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; This function calls:
  4212 ;;		Nothing
  4213 ;; This function is called by:
  4214 ;;		_removeTask
  4215 ;; This function uses a non-reentrant model
  4216 ;;
  4217                           
  4218                           	psect	text22
  4219  0016B2                     __ptext22:
  4220                           	opt callstack 0
  4221  0016B2                     _isEmptyList:
  4222                           	opt callstack 21
  4223  0016B2                     
  4224                           ;task.c: 4:     return num_task == 0 ? 1 : 0;
  4225  0016B2  0100               	movlb	0	; () banked
  4226  0016B4  5197               	movf	_num_task& (0+255),w,b
  4227  0016B6  B4D8               	btfsc	status,2,c
  4228  0016B8  EF60  F00B         	goto	i2u115_41
  4229  0016BC  EF63  F00B         	goto	i2u115_40
  4230  0016C0                     i2u115_41:
  4231  0016C0  0E01               	movlw	1
  4232  0016C2  EF64  F00B         	goto	i2u116_40
  4233  0016C6                     i2u115_40:
  4234  0016C6  0E00               	movlw	0
  4235  0016C8                     i2u116_40:
  4236  0016C8                     
  4237                           ; BSR set to: 0
  4238  0016C8  0012               	return		;funcret
  4239  0016CA                     __end_of_isEmptyList:
  4240                           	opt callstack 0
  4241                           
  4242 ;; *************** function _enqueue *****************
  4243 ;; Defined at:
  4244 ;;		line 24 in file "ready_queue.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;  ptr             3    9[COMRAM] PTR FTN()void 
  4247 ;;		 -> NULL(0), blink_LED(1), 
  4248 ;;  data            2   12[COMRAM] PTR void 
  4249 ;;		 -> RAM(3935), NULL(0), 
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;		None
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  1    wreg      unsigned char 
  4254 ;; Registers used:
  4255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4256 ;; Tracked objects:
  4257 ;;		On entry : 0/0
  4258 ;;		On exit  : 0/0
  4259 ;;		Unchanged: 0/0
  4260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4261 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4264 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4265 ;;Total ram usage:        5 bytes
  4266 ;; Hardware stack levels used:    1
  4267 ;; Hardware stack levels required when called:    3
  4268 ;; This function calls:
  4269 ;;		_isFullQueue
  4270 ;;		i2___awmod
  4271 ;;		i2___wmul
  4272 ;; This function is called by:
  4273 ;;		_handleListHead
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277                           	psect	text23
  4278  001202                     __ptext23:
  4279                           	opt callstack 0
  4280  001202                     _enqueue:
  4281                           	opt callstack 19
  4282  001202                     
  4283                           ;ready_queue.c: 25:     if(isFullQueue())
  4284  001202  EC31  F00B         	call	_isFullQueue	;wreg free
  4285  001206  0900               	iorlw	0
  4286  001208  B4D8               	btfsc	status,2,c
  4287  00120A  EF09  F009         	goto	i2u121_41
  4288  00120E  EF0B  F009         	goto	i2u121_40
  4289  001212                     i2u121_41:
  4290  001212  EF0D  F009         	goto	i2l1857
  4291  001216                     i2u121_40:
  4292  001216  EF55  F009         	goto	i2l156
  4293  00121A                     i2l1857:
  4294                           
  4295                           ;ready_queue.c: 27:     if(front == -1)
  4296  00121A  2852               	incf	_front^0,w,c
  4297  00121C  E106               	bnz	i2u122_41
  4298  00121E  2853               	incf	(_front+1)^0,w,c
  4299  001220  A4D8               	btfss	status,2,c
  4300  001222  EF15  F009         	goto	i2u122_41
  4301  001226  EF17  F009         	goto	i2u122_40
  4302  00122A                     i2u122_41:
  4303  00122A  EF1B  F009         	goto	i2l1861
  4304  00122E                     i2u122_40:
  4305  00122E                     
  4306                           ;ready_queue.c: 28:         front = 0;
  4307  00122E  0E00               	movlw	0
  4308  001230  6E53               	movwf	(_front+1)^0,c
  4309  001232  0E00               	movlw	0
  4310  001234  6E52               	movwf	_front^0,c
  4311  001236                     i2l1861:
  4312                           
  4313                           ;ready_queue.c: 29:     rear = (rear + 1) % 20;
  4314  001236  0E01               	movlw	1
  4315  001238  2450               	addwf	_rear^0,w,c
  4316  00123A  6E01               	movwf	i2___awmod@dividend^0,c
  4317  00123C  0E00               	movlw	0
  4318  00123E  2051               	addwfc	(_rear+1)^0,w,c
  4319  001240  6E02               	movwf	(i2___awmod@dividend+1)^0,c
  4320  001242  0E00               	movlw	0
  4321  001244  6E04               	movwf	(i2___awmod@divisor+1)^0,c
  4322  001246  0E14               	movlw	20
  4323  001248  6E03               	movwf	i2___awmod@divisor^0,c
  4324  00124A  ECA9  F008         	call	i2___awmod	;wreg free
  4325  00124E  C001  F050         	movff	?i2___awmod,_rear
  4326  001252  C002  F051         	movff	?i2___awmod+1,_rear+1
  4327  001256                     
  4328                           ;ready_queue.c: 30:     ready_queue[rear].func_ptr = ptr;
  4329  001256  C050  F001         	movff	_rear,i2___wmul@multiplier
  4330  00125A  C051  F002         	movff	_rear+1,i2___wmul@multiplier+1
  4331  00125E  0E00               	movlw	0
  4332  001260  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  4333  001262  0E05               	movlw	5
  4334  001264  6E03               	movwf	i2___wmul@multiplicand^0,c
  4335  001266  EC0C  F00B         	call	i2___wmul	;wreg free
  4336  00126A  0E00               	movlw	low _ready_queue
  4337  00126C  2401               	addwf	?i2___wmul^0,w,c
  4338  00126E  6ED9               	movwf	fsr2l,c
  4339  001270  0E01               	movlw	high _ready_queue
  4340  001272  2002               	addwfc	(?i2___wmul+1)^0,w,c
  4341  001274  6EDA               	movwf	fsr2h,c
  4342  001276  C00A  FFDE         	movff	enqueue@ptr,postinc2
  4343  00127A  C00B  FFDE         	movff	enqueue@ptr+1,postinc2
  4344  00127E  C00C  FFDE         	movff	enqueue@ptr+2,postinc2
  4345  001282                     
  4346                           ;ready_queue.c: 31:     ready_queue[rear].data_p = data;
  4347  001282  C050  F001         	movff	_rear,i2___wmul@multiplier
  4348  001286  C051  F002         	movff	_rear+1,i2___wmul@multiplier+1
  4349  00128A  0E00               	movlw	0
  4350  00128C  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  4351  00128E  0E05               	movlw	5
  4352  001290  6E03               	movwf	i2___wmul@multiplicand^0,c
  4353  001292  EC0C  F00B         	call	i2___wmul	;wreg free
  4354  001296  0E03               	movlw	low (_ready_queue+3)
  4355  001298  2401               	addwf	?i2___wmul^0,w,c
  4356  00129A  6ED9               	movwf	fsr2l,c
  4357  00129C  0E01               	movlw	high (_ready_queue+3)
  4358  00129E  2002               	addwfc	(?i2___wmul+1)^0,w,c
  4359  0012A0  6EDA               	movwf	fsr2h,c
  4360  0012A2  C00D  FFDE         	movff	enqueue@data,postinc2
  4361  0012A6  C00E  FFDD         	movff	enqueue@data+1,postdec2
  4362  0012AA                     i2l156:
  4363  0012AA  0012               	return		;funcret
  4364  0012AC                     __end_of_enqueue:
  4365                           	opt callstack 0
  4366                           
  4367 ;; *************** function i2___wmul *****************
  4368 ;; Defined at:
  4369 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  4370 ;; Parameters:    Size  Location     Type
  4371 ;;  multiplier      2    0[COMRAM] unsigned int 
  4372 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;  __wmul          2    4[COMRAM] unsigned int 
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  2    0[COMRAM] unsigned int 
  4377 ;; Registers used:
  4378 ;;		wreg, status,2, status,0, prodl, prodh
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4384 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4385 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4387 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4388 ;;Total ram usage:        6 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; This function calls:
  4391 ;;		Nothing
  4392 ;; This function is called by:
  4393 ;;		_enqueue
  4394 ;;		_handleListHead
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           	psect	text24
  4399  001618                     __ptext24:
  4400                           	opt callstack 0
  4401  001618                     i2___wmul:
  4402                           	opt callstack 22
  4403  001618  5001               	movf	i2___wmul@multiplier^0,w,c
  4404  00161A  0203               	mulwf	i2___wmul@multiplicand^0,c
  4405  00161C  CFF3 F005          	movff	prodl,i2___wmul@product
  4406  001620  CFF4 F006          	movff	prodh,i2___wmul@product+1
  4407  001624  5001               	movf	i2___wmul@multiplier^0,w,c
  4408  001626  0204               	mulwf	(i2___wmul@multiplicand+1)^0,c
  4409  001628  50F3               	movf	243,w,c
  4410  00162A  2606               	addwf	(i2___wmul@product+1)^0,f,c
  4411  00162C  5002               	movf	(i2___wmul@multiplier+1)^0,w,c
  4412  00162E  0203               	mulwf	i2___wmul@multiplicand^0,c
  4413  001630  50F3               	movf	243,w,c
  4414  001632  2606               	addwf	(i2___wmul@product+1)^0,f,c
  4415  001634  C005  F001         	movff	i2___wmul@product,?i2___wmul
  4416  001638  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  4417  00163C  0012               	return		;funcret
  4418  00163E                     __end_ofi2___wmul:
  4419                           	opt callstack 0
  4420                           
  4421 ;; *************** function _isFullQueue *****************
  4422 ;; Defined at:
  4423 ;;		line 14 in file "ready_queue.c"
  4424 ;; Parameters:    Size  Location     Type
  4425 ;;		None
  4426 ;; Auto vars:     Size  Location     Type
  4427 ;;		None
  4428 ;; Return value:  Size  Location     Type
  4429 ;;                  1    wreg      unsigned char 
  4430 ;; Registers used:
  4431 ;;		wreg, status,2, status,0, cstack
  4432 ;; Tracked objects:
  4433 ;;		On entry : 0/0
  4434 ;;		On exit  : 0/0
  4435 ;;		Unchanged: 0/0
  4436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4439 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4440 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4441 ;;Total ram usage:        1 bytes
  4442 ;; Hardware stack levels used:    1
  4443 ;; Hardware stack levels required when called:    2
  4444 ;; This function calls:
  4445 ;;		i2_getSizeQueue
  4446 ;; This function is called by:
  4447 ;;		_enqueue
  4448 ;; This function uses a non-reentrant model
  4449 ;;
  4450                           
  4451                           	psect	text25
  4452  001662                     __ptext25:
  4453                           	opt callstack 0
  4454  001662                     _isFullQueue:
  4455                           	opt callstack 19
  4456  001662                     
  4457                           ;ready_queue.c: 15:     return getSizeQueue() >= 20 ? 1 : 0;
  4458  001662  ECF8  F00A         	call	i2_getSizeQueue	;wreg free
  4459  001666  6E09               	movwf	??_isFullQueue^0,c
  4460  001668  0E14               	movlw	20
  4461  00166A  6009               	cpfslt	??_isFullQueue^0,c
  4462  00166C  EF3A  F00B         	goto	i2u110_41
  4463  001670  EF3D  F00B         	goto	i2u110_40
  4464  001674                     i2u110_41:
  4465  001674  0E01               	movlw	1
  4466  001676  EF3E  F00B         	goto	i2u111_40
  4467  00167A                     i2u110_40:
  4468  00167A  0E00               	movlw	0
  4469  00167C                     i2u111_40:
  4470  00167C  0012               	return		;funcret
  4471  00167E                     __end_of_isFullQueue:
  4472                           	opt callstack 0
  4473                           
  4474 ;; *************** function i2_getSizeQueue *****************
  4475 ;; Defined at:
  4476 ;;		line 10 in file "ready_queue.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;		None
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;		None
  4481 ;; Return value:  Size  Location     Type
  4482 ;;                  1    wreg      unsigned char 
  4483 ;; Registers used:
  4484 ;;		wreg, status,2, status,0, cstack
  4485 ;; Tracked objects:
  4486 ;;		On entry : 0/0
  4487 ;;		On exit  : 0/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4492 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4493 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4494 ;;Total ram usage:        2 bytes
  4495 ;; Hardware stack levels used:    1
  4496 ;; Hardware stack levels required when called:    1
  4497 ;; This function calls:
  4498 ;;		i2___awmod
  4499 ;; This function is called by:
  4500 ;;		_isFullQueue
  4501 ;; This function uses a non-reentrant model
  4502 ;;
  4503                           
  4504                           	psect	text26
  4505  0015F0                     __ptext26:
  4506                           	opt callstack 0
  4507  0015F0                     i2_getSizeQueue:
  4508                           	opt callstack 19
  4509  0015F0                     
  4510                           ;ready_queue.c: 11:     return (rear - front + 1 + 20) % 20;
  4511  0015F0  5052               	movf	_front^0,w,c
  4512  0015F2  5C50               	subwf	_rear^0,w,c
  4513  0015F4  6E07               	movwf	??i2_getSizeQueue^0,c
  4514  0015F6  5053               	movf	(_front+1)^0,w,c
  4515  0015F8  5851               	subwfb	(_rear+1)^0,w,c
  4516  0015FA  6E08               	movwf	(??i2_getSizeQueue+1)^0,c
  4517  0015FC  0E15               	movlw	21
  4518  0015FE  2407               	addwf	??i2_getSizeQueue^0,w,c
  4519  001600  6E01               	movwf	i2___awmod@dividend^0,c
  4520  001602  0E00               	movlw	0
  4521  001604  2008               	addwfc	(??i2_getSizeQueue+1)^0,w,c
  4522  001606  6E02               	movwf	(i2___awmod@dividend+1)^0,c
  4523  001608  0E00               	movlw	0
  4524  00160A  6E04               	movwf	(i2___awmod@divisor+1)^0,c
  4525  00160C  0E14               	movlw	20
  4526  00160E  6E03               	movwf	i2___awmod@divisor^0,c
  4527  001610  ECA9  F008         	call	i2___awmod	;wreg free
  4528  001614  5001               	movf	?i2___awmod^0,w,c
  4529  001616  0012               	return		;funcret
  4530  001618                     __end_ofi2_getSizeQueue:
  4531                           	opt callstack 0
  4532                           
  4533 ;; *************** function i2___awmod *****************
  4534 ;; Defined at:
  4535 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;  dividend        2    0[COMRAM] int 
  4538 ;;  divisor         2    2[COMRAM] int 
  4539 ;; Auto vars:     Size  Location     Type
  4540 ;;  __awmod         1    5[COMRAM] unsigned char 
  4541 ;;  __awmod         1    4[COMRAM] unsigned char 
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  2    0[COMRAM] int 
  4544 ;; Registers used:
  4545 ;;		wreg, status,2, status,0
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4551 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;Total ram usage:        6 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; This function calls:
  4558 ;;		Nothing
  4559 ;; This function is called by:
  4560 ;;		_enqueue
  4561 ;;		i2_getSizeQueue
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text27
  4566  001152                     __ptext27:
  4567                           	opt callstack 0
  4568  001152                     i2___awmod:
  4569                           	opt callstack 21
  4570  001152  0E00               	movlw	0
  4571  001154  6E06               	movwf	i2___awmod@sign^0,c
  4572  001156  BE02               	btfsc	(i2___awmod@dividend+1)^0,7,c
  4573  001158  EFB2  F008         	goto	i2u98_40
  4574  00115C  EFB0  F008         	goto	i2u98_41
  4575  001160                     i2u98_41:
  4576  001160  EFB8  F008         	goto	i2l1685
  4577  001164                     i2u98_40:
  4578  001164  6C01               	negf	i2___awmod@dividend^0,c
  4579  001166  1E02               	comf	(i2___awmod@dividend+1)^0,f,c
  4580  001168  B0D8               	btfsc	status,0,c
  4581  00116A  2A02               	incf	(i2___awmod@dividend+1)^0,f,c
  4582  00116C  0E01               	movlw	1
  4583  00116E  6E06               	movwf	i2___awmod@sign^0,c
  4584  001170                     i2l1685:
  4585  001170  BE04               	btfsc	(i2___awmod@divisor+1)^0,7,c
  4586  001172  EFBF  F008         	goto	i2u99_40
  4587  001176  EFBD  F008         	goto	i2u99_41
  4588  00117A                     i2u99_41:
  4589  00117A  EFC3  F008         	goto	i2l1689
  4590  00117E                     i2u99_40:
  4591  00117E  6C03               	negf	i2___awmod@divisor^0,c
  4592  001180  1E04               	comf	(i2___awmod@divisor+1)^0,f,c
  4593  001182  B0D8               	btfsc	status,0,c
  4594  001184  2A04               	incf	(i2___awmod@divisor+1)^0,f,c
  4595  001186                     i2l1689:
  4596  001186  5003               	movf	i2___awmod@divisor^0,w,c
  4597  001188  1004               	iorwf	(i2___awmod@divisor+1)^0,w,c
  4598  00118A  B4D8               	btfsc	status,2,c
  4599  00118C  EFCA  F008         	goto	i2u100_41
  4600  001190  EFCC  F008         	goto	i2u100_40
  4601  001194                     i2u100_41:
  4602  001194  EFF0  F008         	goto	i2l1705
  4603  001198                     i2u100_40:
  4604  001198  0E01               	movlw	1
  4605  00119A  6E05               	movwf	i2___awmod@counter^0,c
  4606  00119C  EFD4  F008         	goto	i2l1695
  4607  0011A0                     i2l1693:
  4608  0011A0  90D8               	bcf	status,0,c
  4609  0011A2  3603               	rlcf	i2___awmod@divisor^0,f,c
  4610  0011A4  3604               	rlcf	(i2___awmod@divisor+1)^0,f,c
  4611  0011A6  2A05               	incf	i2___awmod@counter^0,f,c
  4612  0011A8                     i2l1695:
  4613  0011A8  AE04               	btfss	(i2___awmod@divisor+1)^0,7,c
  4614  0011AA  EFD9  F008         	goto	i2u101_41
  4615  0011AE  EFDB  F008         	goto	i2u101_40
  4616  0011B2                     i2u101_41:
  4617  0011B2  EFD0  F008         	goto	i2l1693
  4618  0011B6                     i2u101_40:
  4619  0011B6                     i2l1697:
  4620  0011B6  5003               	movf	i2___awmod@divisor^0,w,c
  4621  0011B8  5C01               	subwf	i2___awmod@dividend^0,w,c
  4622  0011BA  5004               	movf	(i2___awmod@divisor+1)^0,w,c
  4623  0011BC  5802               	subwfb	(i2___awmod@dividend+1)^0,w,c
  4624  0011BE  A0D8               	btfss	status,0,c
  4625  0011C0  EFE4  F008         	goto	i2u102_41
  4626  0011C4  EFE6  F008         	goto	i2u102_40
  4627  0011C8                     i2u102_41:
  4628  0011C8  EFEA  F008         	goto	i2l1701
  4629  0011CC                     i2u102_40:
  4630  0011CC  5003               	movf	i2___awmod@divisor^0,w,c
  4631  0011CE  5E01               	subwf	i2___awmod@dividend^0,f,c
  4632  0011D0  5004               	movf	(i2___awmod@divisor+1)^0,w,c
  4633  0011D2  5A02               	subwfb	(i2___awmod@dividend+1)^0,f,c
  4634  0011D4                     i2l1701:
  4635  0011D4  90D8               	bcf	status,0,c
  4636  0011D6  3204               	rrcf	(i2___awmod@divisor+1)^0,f,c
  4637  0011D8  3203               	rrcf	i2___awmod@divisor^0,f,c
  4638  0011DA  2E05               	decfsz	i2___awmod@counter^0,f,c
  4639  0011DC  EFDB  F008         	goto	i2l1697
  4640  0011E0                     i2l1705:
  4641  0011E0  5006               	movf	i2___awmod@sign^0,w,c
  4642  0011E2  B4D8               	btfsc	status,2,c
  4643  0011E4  EFF6  F008         	goto	i2u103_41
  4644  0011E8  EFF8  F008         	goto	i2u103_40
  4645  0011EC                     i2u103_41:
  4646  0011EC  EFFC  F008         	goto	i2l1709
  4647  0011F0                     i2u103_40:
  4648  0011F0  6C01               	negf	i2___awmod@dividend^0,c
  4649  0011F2  1E02               	comf	(i2___awmod@dividend+1)^0,f,c
  4650  0011F4  B0D8               	btfsc	status,0,c
  4651  0011F6  2A02               	incf	(i2___awmod@dividend+1)^0,f,c
  4652  0011F8                     i2l1709:
  4653  0011F8  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  4654  0011FC  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  4655  001200  0012               	return		;funcret
  4656  001202                     __end_ofi2___awmod:
  4657                           	opt callstack 0
  4658  0000                     
  4659                           	psect	text28
  4660  000000                     __ptext28:
  4661                           	opt callstack 0
  4662  000000                     
  4663                           	psect	rparam
  4664  0000                     
  4665                           	psect	temp
  4666  000058                     btemp:
  4667                           	opt callstack 0
  4668  000058                     	ds	1
  4669  0000                     int$flags	set	btemp
  4670  0000                     wtemp8	set	btemp+1
  4671  0000                     ttemp5	set	btemp+1
  4672  0000                     ttemp6	set	btemp+4
  4673  0000                     ttemp7	set	btemp+8
  4674                           tosu	equ	0xFFF
  4675                           tosh	equ	0xFFE
  4676                           tosl	equ	0xFFD
  4677                           stkptr	equ	0xFFC
  4678                           pclatu	equ	0xFFB
  4679                           pclath	equ	0xFFA
  4680                           pcl	equ	0xFF9
  4681                           tblptru	equ	0xFF8
  4682                           tblptrh	equ	0xFF7
  4683                           tblptrl	equ	0xFF6
  4684                           tablat	equ	0xFF5
  4685                           prodh	equ	0xFF4
  4686                           prodl	equ	0xFF3
  4687                           indf0	equ	0xFEF
  4688                           postinc0	equ	0xFEE
  4689                           postdec0	equ	0xFED
  4690                           preinc0	equ	0xFEC
  4691                           plusw0	equ	0xFEB
  4692                           fsr0h	equ	0xFEA
  4693                           fsr0l	equ	0xFE9
  4694                           wreg	equ	0xFE8
  4695                           indf1	equ	0xFE7
  4696                           postinc1	equ	0xFE6
  4697                           postdec1	equ	0xFE5
  4698                           preinc1	equ	0xFE4
  4699                           plusw1	equ	0xFE3
  4700                           fsr1h	equ	0xFE2
  4701                           fsr1l	equ	0xFE1
  4702                           bsr	equ	0xFE0
  4703                           indf2	equ	0xFDF
  4704                           postinc2	equ	0xFDE
  4705                           postdec2	equ	0xFDD
  4706                           preinc2	equ	0xFDC
  4707                           plusw2	equ	0xFDB
  4708                           fsr2h	equ	0xFDA
  4709                           fsr2l	equ	0xFD9
  4710                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        8
    BSS         446
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      87
    BANK0           160     53      65
    BANK1           256      0     100
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    handleListHead$1390	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    handleListHead$1389	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED(), 

    ?_dequeue.data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    ?_dequeue.func_ptr	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED(), 

    register_timer@data	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    register_timer@callback	PTR FTN()void  size(3) Largest target is 1
		 -> blink_LED(), 

    node.data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    node.func_ptr	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED(), 

    addTask@data	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    addTask@ptr	PTR FTN()void  size(3) Largest target is 1
		 -> blink_LED(), 

    S29$data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    task_list.data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    S29$func_ptr	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED(), 

    task_list.func_ptr	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED(), 

    temp.data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    temp.func_ptr	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED(), 

    enqueue@data	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    enqueue@ptr	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED(), 

    S25$data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    ready_queue.data_p	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    S25$func_ptr	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED(), 

    ready_queue.func_ptr	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED(), 

    blink_LED@data	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _timer_interrupt in COMRAM

    _timer_interrupt->_handleListHead
    _handleListHead->_enqueue
    _enqueue->_isFullQueue
    _isFullQueue->i2_getSizeQueue
    i2_getSizeQueue->i2___awmod

Critical Paths under _main in BANK0

    _main->_register_timer
    _system_initialize->_start_timer
    _start_timer->_initializeTaskList
    _initializeTaskList->_queueInitialize
    _queueInitialize->___wmul
    _register_timer->_addTask
    _addTask->___wmul
    _dispatch->_selectReadyTask
    _selectReadyTask->_dequeue
    _isEmptyQueue->_getSizeQueue
    _getSizeQueue->___awmod

Critical Paths under _timer_interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _timer_interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _timer_interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _timer_interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _timer_interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _timer_interrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _timer_interrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _timer_interrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _timer_interrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _timer_interrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _timer_interrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _timer_interrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _timer_interrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _timer_interrupt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _timer_interrupt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _timer_interrupt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   13275
                                             45 BANK0      8     8      0
                           _dispatch
                     _register_timer
                  _system_initialize
 ---------------------------------------------------------------------------------
 (1) _system_initialize                                    0     0      0    2903
               _interrupt_initialize
                     _osc_initialize
                     _pin_initialize
                        _start_timer
 ---------------------------------------------------------------------------------
 (2) _start_timer                                          3     3      0    2903
                                             10 BANK0      3     3      0
                 _initializeTaskList
 ---------------------------------------------------------------------------------
 (3) _initializeTaskList                                   2     2      0    2841
                                              8 BANK0      2     2      0
                             ___wmul
                    _queueInitialize
 ---------------------------------------------------------------------------------
 (4) _queueInitialize                                      2     2      0    1374
                                              6 BANK0      2     2      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _pin_initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _osc_initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _interrupt_initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _register_timer                                      13     0     13    5717
                                             32 BANK0     13     0     13
                            _addTask
 ---------------------------------------------------------------------------------
 (2) _addTask                                             26    13     13    2713
                                              6 BANK0     26    13     13
                             ___wmul
                         _isFullList
 ---------------------------------------------------------------------------------
 (3) _isFullList                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dispatch                                             0     0      0    4631
                    _selectReadyTask
 ---------------------------------------------------------------------------------
 (2) _selectReadyTask                                      5     5      0    4631
                                             20 BANK0      5     5      0
                          _blink_LED *
                            _dequeue
                       _isEmptyQueue
 ---------------------------------------------------------------------------------
 (3) _dequeue                                             12     7      5    3189
                                              8 BANK0     12     7      5
                            ___awmod
                             ___wmul
                       _isEmptyQueue
 ---------------------------------------------------------------------------------
 (3) _isEmptyQueue                                         0     0      0     903
                       _getSizeQueue
 ---------------------------------------------------------------------------------
 (4) _getSizeQueue                                         2     2      0     903
                                              6 BANK0      2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     903
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1244
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _blink_LED                                            7     5      2     440
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _timer_interrupt                                      6     6      0    2862
                                             39 COMRAM     6     6      0
                     _handleListHead
 ---------------------------------------------------------------------------------
 (8) _handleListHead                                      25    25      0    2862
                                             14 COMRAM    25    25      0
                            _enqueue
                         _removeTask
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) _removeTask                                           6     6      0     332
                                              0 COMRAM     6     6      0
                        _isEmptyList
 ---------------------------------------------------------------------------------
 (10) _isEmptyList                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _enqueue                                              5     0      5    1467
                                              9 COMRAM     5     0      5
                        _isFullQueue
                          i2___awmod
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) i2___wmul                                             6     2      4     471
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) _isFullQueue                                         1     1      0     400
                                              8 COMRAM     1     1      0
                     i2_getSizeQueue
 ---------------------------------------------------------------------------------
 (11) i2_getSizeQueue                                      2     2      0     400
                                              6 COMRAM     2     2      0
                          i2___awmod
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dispatch
     _selectReadyTask
       _blink_LED *
       _dequeue *
         ___awmod
         ___wmul
         _isEmptyQueue
           _getSizeQueue
             ___awmod
       _isEmptyQueue *
         _getSizeQueue
           ___awmod
   _register_timer
     _addTask
       ___wmul
       _isFullList
   _system_initialize
     _interrupt_initialize
     _osc_initialize
     _pin_initialize
     _start_timer
       _initializeTaskList
         ___wmul
         _queueInitialize
           ___wmul

 _timer_interrupt (ROOT)
   _handleListHead
     _enqueue
       _isFullQueue
         i2_getSizeQueue
           i2___awmod
       i2___awmod
       i2___wmul
     _removeTask
       _isEmptyList
     i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0     12C      37        7.6%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      64       7       39.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     35      41       5       40.6%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      57       1       92.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      FC      32        0.0%
DATA                 0      0     228       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Oct 06 19:25:00 2019

             ??i2_getSizeQueue 0007                             l61 0D30                 ??_getSizeQueue 0066  
          ___wmul@multiplicand 0062                            l202 097C                            l122 16DC  
                          l116 16D6                            l125 1696                            l142 1466  
                          l310 1368                            l119 1660                            l152 159A  
                          l160 12EC                            l145 15C6                            l161 134C  
                          l321 1566                            l402 15EE                            l308 13E2  
                          l256 14CA                            l193 16B0                            l338 16E2  
                          l198 0FEE                            l646 10A0                    _start_timer 134E  
                 ___awmod@sign 0065                            prod 000FF3                            tosl 000FFD  
                          wreg 000FE8                   __CFG_LVP$OFF 000000                   __CFG_WDT$OFF 000000  
                         l2211 0BF0                           l2203 0B5E                           l2221 0CB0  
                         l2213 0C16                           l2205 0B62                           l2141 100C  
                         l2215 0C3E                           l2207 0BAA                           l2151 1040  
                         l2143 1010                           l2135 0FF0                           l2231 12AC  
                         l2303 0562                           l2217 0C62                           l2209 0BCC  
                         l2225 0CD6                           l2161 107A                           l2153 1048  
                         l2145 101E                           l2137 0FF6                           l2241 1316  
                         l2233 12C2                           l2321 05AC                           l2305 0576  
                         l2401 09BC                           l2219 0C88                           l2155 1056  
                         l2163 1080                           l2147 1026                           l2139 1004  
                         l2171 159C                           l2235 12D6                           l2323 05BC  
                         l2315 0582                           l2251 0EDE                           l2411 0ADE  
                         l2403 09F6                           l2165 1090                           l2157 106C  
                         l2149 1038                           l2341 0690                           l2333 05F2  
                         l2325 05D8                           l2309 057C                           l2181 13E4  
                         l2261 0FC2                           l2253 0EE2                           l2413 0B18  
                         l2405 0A30                           l2175 15C8                           l2167 1098  
                         l2159 1074                           l2239 12F4                           l2247 1698  
                         l2351 0782                           l2343 06E0                           l2335 0666  
                         l2327 05DC                           l2319 05AA                           l2271 165E  
                         l2191 144A                           l2263 0FC6                           l2415 0B52  
                         l2407 0A6A                           l2177 15E6                           l2193 1568  
                         l2361 0882                           l2353 07CC                           l2345 06F8  
                         l2337 0668                           l2273 16D8                           l2265 0FE2  
                         l2281 1388                           l2409 0AA4                           l2195 157C  
                         l2363 089A                           l2355 07FE                           l2347 0702  
                         l2339 067C                           l2267 16D2                           l2187 13EE  
                         l2259 0EEC                           l2291 1398                           l2283 138C  
                         l2275 1352                           l2381 14B6                           l2373 1468  
                         l2357 0812                           l2349 0776                           l2365 08BA  
                         l2269 163E                           l2189 1446                           l2285 138E  
                         l2199 1582                           l2375 146C                           l2367 08DE  
                         l2359 0852                           l2391 152E                           l2287 1390  
                         l2279 136C                           l2295 13A0                           l2383 167E  
                         l2377 147E                           l2369 097A                           l2289 1394  
                         l2385 1686                           l2379 1494                           l2395 16DE  
                         l2467 13B4                           l2387 168A                           l2469 0CEA  
                         l2389 1690                           l2397 097E                           l2399 0982  
                         _LATA 000F89                           _LATB 000F8A                           _LATC 000F8B  
                         u1600 1056                           _LATD 000F8C                           u1601 1052  
                         u1610 106C                           u1611 1068                           u1620 1090  
                         u1621 108C                           u1701 12E0                           u1630 1466  
                         u1711 1340                           u1631 1462                           u1640 157C  
                         u1720 16AE                           u1800 05EE                           u1641 1578  
                         u1721 16A8                           u1801 05EA                           u1570 1004  
                         u1650 1598                           u1730 16B0                           u1810 067C  
                         u1571 1000                           u1651 1592                           u1811 0678  
                         u1580 101E                           u1660 159A                           u1900 14CA  
                         u1820 0690                           u1740 0FE2                           u1581 101A  
                         u1901 14C6                           u1821 068C                           u1741 0FDE  
                         u1670 0B88                           u1590 1038                           u1830 06E0  
                         u1750 1364                           u1671 0B82                           u1591 1034  
                         u1831 06DC                           u1751 1360                           u1680 0B8A  
                         u1840 0812                           u1760 0576                           u1841 080E  
                         u1761 0572                           u1690 12D6                           u1850 0852  
                         u1770 05A6                           u1691 12D2                           u1851 084E  
                         u1771 05A2                           u1860 08DE                           u1780 05BC  
                         u1861 08DA                           u1781 05B8                           u1790 05D8  
                         u1871 1476                           u1791 05D4                           u1880 1494  
                         u1881 1490                           u1898 14A2                           u1899 14B6  
               ??_isEmptyQueue 0068       __size_of_selectReadyTask 0064                           _head 0095  
                         _main 097E                           _rear 0050                           fsr1h 000FE2  
                         fsr2h 000FDA                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 0058                           prodh 000FF4  
                         prodl 000FF3                           start 000E                  __CFG_IESO$OFF 000000  
                __CFG_MCLRE$ON 000000                   ___param_bank 000000        __end_of_queueInitialize 1468  
                        ?_main 0001                __end_of___awmod 10A2                __end_of_addTask 097E  
                        _T0CON 000FD5                          _T1CON 000FCD                          i2l223 0EDC  
                        i2l224 0E2C                          i2l145 1616                          i2l402 163C  
                        i2l226 0E48                          i2l242 0442                          i2l234 0560  
                        i2l235 04FE                          i2l148 167C                          i2l156 12AA  
                        i2l236 002C                          i2l190 16C8                          i2l335 1136  
                        i2l646 1200                          _TMR1H 000FCF                          _TMR0L 000FD6  
                        _TMR1L 000FCE                          _TRISA 000F92                          _TRISB 000F93  
                        _TRISC 000F94                          _TRISD 000F95                  __CFG_PWRT$OFF 000000  
               __CFG_FCMEN$OFF 000000                __end_of_dequeue 134E                __end_of_enqueue 12AC  
                        _count 004A                          _front 0052    __size_of_initializeTaskList 0112  
                        _value 0098                 __CFG_BOREN$OFF 000000                          pclath 000FFA  
                        tablat 000FF5  __size_of_interrupt_initialize 0006               __end_ofi2___wmul 163E  
                        plusw0 000FEB                          plusw1 000FE3                          plusw2 000FDB  
                        ttemp5 0059                          ttemp6 005C                          ttemp7 0060  
                        status 000FD8        __size_of_osc_initialize 0006                          wtemp8 0059  
           __size_ofi2___awmod 00B0                __initialization 14CC                   __end_of_main 0B5E  
               _pin_initialize 163E       __size_of_timer_interrupt 114A                         ??_main 008D  
                __activetblptr 000003                    enqueue@data 000D                         _ADCON1 000FC1  
               _register_timer 152E                         i2l2001 0158                         i2l2011 0214  
                       i2l2003 016E                         i2l2021 0394                         i2l2013 02E4  
                       i2l2005 0182                         i2l2023 03F2                         i2l2015 02F0  
                       i2l2007 01E0                         i2l2025 0476                         i2l2017 0350  
                       i2l2009 0208                         i2l2027 0534                         i2l2019 0380  
                       i2l2061 10CA                         i2l2071 10FA                         i2l2063 10D8  
                       i2l2081 111A                         i2l2073 1108                         i2l2065 10DA  
                       i2l2083 112E                         i2l2075 110A                         i2l2067 10DE  
                       i2l2059 10BC                         i2l1701 11D4                         i2l2077 1112  
                       i2l2069 10EC                         i2l1703 11DA                         i2l2079 1116  
                       i2l1705 11E0                         i2l1707 11F0                         i2l1811 1618  
                       i2l1709 11F8                         i2l1813 1634                         i2l1735 15F0  
                       i2l1681 1164                         i2l1691 1198                         i2l1683 116C  
                       i2l1693 11A0                         i2l1685 1170                         i2l1677 1152  
                       i2l1861 1236                         i2l1853 1202                         i2l1941 0D48  
                       i2l1695 11A8                         i2l1687 117E                         i2l1679 1156  
                       i2l1767 1662                         i2l1863 1256                         i2l1951 0DDA  
                       i2l1943 0D6C                         i2l1697 11B6                         i2l1689 1186  
                       i2l1865 1282                         i2l1857 121A                         i2l1961 0EC2  
                       i2l1953 0DF8                         i2l1699 11CC                         i2l1859 122E  
                       i2l1787 16B2                         i2l1955 0E34                         i2l1963 0EDA  
                       i2l1947 0D72                         i2l1939 0D34                         i2l1957 0E6C  
                       i2l1949 0DD6                         i2l1959 0E9A                         i2l1991 0012  
                       i2l1995 0034                         i2l1997 00FE                         i2l1999 0108  
          initializeTaskList@i 0068           __end_of_getSizeQueue 15C8                         _OSCCON 000FD3  
               __CFG_XINST$OFF 000000           __size_of_isEmptyList 0018               __end_of_dispatch 16E4  
            ??_selectReadyTask 0074                         ___wmul 15C8         __end_of_pin_initialize 1662  
                    ??___awmod 0064                      ??_addTask 0073           __size_of_isFullQueue 001C  
             ?_queueInitialize 0001                   addTask@delay 006A                         clear_0 14F4  
                       clear_1 1506                         clear_2 1512                         clear_3 151E  
              ___awmod@divisor 0062                ___awmod@counter 0064           __end_of_isEmptyQueue 159C  
                    ??_dequeue 006D                      ??_enqueue 000F                   __pdataCOMRAM 0050  
            __end_ofi2___awmod 1202                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8         __end_of_register_timer 1568                 i2___awmod@sign 0006  
                   __accesstop 0060        __end_of__initialization 1524                  ___rparam_used 000001  
               __pcstackCOMRAM 0001                ?_pin_initialize 0001             __size_of_blink_LED 01D4  
                    ?i2___wmul 0001                   ?_start_timer 0001                __CFG_OSC$INTIO7 000000  
            ??_timer_interrupt 0028                     addTask@idx 007F                     addTask@cur 007D  
                   addTask@ptr 006E                ?_register_timer 0080                     __pbssBANK0 008D  
                   __pbssBANK1 0100                 _osc_initialize 16D2        __size_of_handleListHead 0550  
       start_timer@timer_vaddr 006C                        ?___wmul 0060             register_timer@data 008B  
                   ??i2___wmul 0005                     _isFullList 1698          __size_of_getSizeQueue 002C  
                      i2u98_40 1164                        i2u98_41 1160                        i2u99_40 117E  
                      i2u99_41 117A         __end_of_osc_initialize 16D8                      ?_dispatch 0001  
                   _countRB0_1 008D                     _countRA5_1 0042              __end_of_blink_LED 0D32  
         register_timer@period 0080                        __Hparam 0000                        __Lparam 0000  
        __size_of_isEmptyQueue 0034                        ___awmod 0FF0                        _addTask 0562  
              __size_of___wmul 0028   __end_of_interrupt_initialize 16DE                        __pcinit 14CC  
                      __ramtop 1000                   _getSizeQueue 159C                        __ptext0 097E  
                      __ptext1 167E                        __ptext2 134E                        __ptext3 0EDE  
                      __ptext4 13E4                        __ptext5 163E                        __ptext6 16D2  
                      __ptext7 16D8                        __ptext8 152E                        __ptext9 0562  
                      _dequeue 12AC                        _enqueue 1202               ___awmod@dividend 0060  
      __size_ofi2_getSizeQueue 0028                  addTask@period 0066     __end_of_initializeTaskList 0FF0  
                      _time_ms 0091                     ??_dispatch 0079                 __pintcode_body 10A2  
              ?_osc_initialize 0001           end_of_initialization 1524                _selectReadyTask 1468  
                      int_func 10A2                      _LED_state 002E            i2___wmul@multiplier 0001  
                 _isEmptyQueue 1568                     _removeTask 0D32             handleListHead@prev 0022  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc1 000FE6                        postinc2 000FDE                      _PORTAbits 000F80  
                    _PORTBbits 000F81                     dequeue@idx 006D                    ?_isFullList 0001  
         __size_of_start_timer 0096                      i2___awmod 1152                  ??_isEmptyList 0001  
             ??_pin_initialize 0060                 _handleListHead 0012                  ??_isFullQueue 0009  
              _timer_interrupt 0008                 __end_of___wmul 15F0         register_timer@callback 0088  
                __pidataCOMRAM 16CA                   _firstReadRB0 0055                   _firstReadRA5 0057  
                _secondReadRB0 0054                  _secondReadRA5 0056               ??_register_timer 008D  
             i2___wmul@product 0005       __size_of_queueInitialize 0084            start_initialization 14CC  
      __end_of_selectReadyTask 14CC              __size_ofi2___wmul 0026                     ?i2___awmod 0001  
          selectReadyTask@node 0074           _interrupt_initialize 16D8         __end_of_handleListHead 0562  
                   enqueue@ptr 000A                    ?_removeTask 0001            __size_of_isFullList 001A  
                  addTask@data 0071                       ??___wmul 0064            __end_of_isEmptyList 16CA  
                  addTask@prev 007B            __end_of_isFullQueue 167E                  blink_LED@data 0060  
                  __pbssBIGRAM 0164                 i2_getSizeQueue 15F0                    __pbssCOMRAM 002E  
                __pcstackBANK0 0060          ?_interrupt_initialize 0001              __size_of_dispatch 0006  
              ?_handleListHead 0001        __end_of_timer_interrupt 1152                  removeTask@idx 0006  
                removeTask@pos 0005                      _blink_LED 0B5E                      __pintcode 0008  
                     ?___awmod 0060                       ?_addTask 0066         __end_ofi2_getSizeQueue 1618  
                     ?_dequeue 0068                       ?_enqueue 000A            register_timer@delay 0084  
             ??_osc_initialize 0060               ?_selectReadyTask 0001            __size_of_removeTask 01AC  
                  ??i2___awmod 0005              ??_queueInitialize 0066                 ___wmul@product 0064  
                     _LATDbits 000F8C             _initializeTaskList 0EDE                       _PIE1bits 000F9D  
                  _isEmptyList 16B2                       i2u100_40 1198                       i2u100_41 1194  
                     i2u101_40 11B6                       i2u101_41 11B2                       i2u102_40 11CC  
                     i2u110_40 167A                       i2u102_41 11C8                       i2u110_41 1674  
                     i2u103_40 11F0                       i2u111_40 167C                       i2u103_41 11EC  
                     i2u121_40 1216                       i2u121_41 1212                       i2u122_40 122E  
                     i2u122_41 122A                       i2u115_40 16C6                       i2u115_41 16C0  
                     i2u116_40 16C8                       i2u134_40 0D48                       i2u150_40 0476  
                     i2u134_41 0D44                       i2u150_41 0472                       i2u135_40 0D6C  
                     i2u151_40 0534                       i2u143_40 0028                       i2u135_41 0D68  
                     i2u151_41 0530                       i2u143_41 0024                       i2u136_40 0DF8  
                     i2u144_40 00FE                       i2u152_40 10CA                       i2u136_41 0DF4  
                     i2u144_41 00FA                       i2u152_41 10C6                       i2u137_40 0E6C  
                     i2u145_40 016E                       i2u153_40 10D8                       i2u137_41 0E68  
                     i2u145_41 016A                       i2u153_41 10D4                       i2u138_40 0E9A  
                     i2u146_40 0182                       i2u154_40 10FA                       i2u138_41 0E96  
                     i2u146_41 017E                       i2u154_41 10F6                       i2u147_40 01E0  
                     i2u155_40 1108                       i2u147_41 01DC                       i2u155_41 1104  
                     i2u148_40 0394                       i2u156_40 112E                       i2u148_41 0390  
                     i2u156_41 112A                       i2u149_40 03F2                       i2u149_41 03EE  
                     _PIR1bits 000F9E                      _task_list 0164                    _isFullQueue 1662  
            handleListHead@cur 0024                     ?_blink_LED 0060              handleListHead@pos 0026  
          ?_initializeTaskList 0001                ?i2_getSizeQueue 0001              ___wmul@multiplier 0060  
                     i2___wmul 1618                   ??_isFullList 0060              _system_initialize 167E  
         ??_initializeTaskList 0068         ??_interrupt_initialize 0060                      copy_data0 14E0  
           i2___awmod@dividend 0001             ?_system_initialize 0001            ??_system_initialize 006D  
             ?_timer_interrupt 0001                       __Hrparam 0000                       __Lrparam 0000  
                  _RB0_pressed 004E            _handleListHead$1390 001E            _handleListHead$1391 0020  
          _handleListHead$1389 001B             __end_of_isFullList 16B2                   blink_LED@idx 0066  
             __size_of___awmod 00B2               __size_of_addTask 041C          i2___wmul@multiplicand 0003  
                  _RA5_pressed 004F               __size_of_dequeue 00A2                  ??_start_timer 006A  
    __end_of_system_initialize 1698               __size_of_enqueue 00AA                       __ptext10 1698  
                     __ptext11 16DE                       __ptext20 0012                       __ptext12 1468  
                     __ptext21 0D32                       __ptext13 12AC                       __ptext22 16B2  
                     __ptext14 1568                       __ptext23 1202                       __ptext15 159C  
                     __ptext24 1618                       __ptext16 0FF0                       __ptext25 1662  
                     __ptext17 15C8                       __ptext26 15F0                       __ptext18 0B5E  
                     __ptext27 1152                       __ptext28 0000                       _dispatch 16DE  
                     _countRB0 003E                       _countRA5 0046                  __size_of_main 01E0  
                  _ready_queue 0100                   ??_removeTask 0001                    ??_blink_LED 0062  
                     _num_task 0097                       _stateRB0 004C                       int$flags 0058  
                     _stateRA5 004D              i2___awmod@divisor 0003              i2___awmod@counter 0005  
                   _INTCONbits 000FF2             __end_of_removeTask 0EDE               ??_handleListHead 000F  
          __end_of_start_timer 13E4                       intlevel2 0000                  ?_getSizeQueue 0001  
      __size_of_pin_initialize 0024                _queueInitialize 13E4     __size_of_system_initialize 001A  
                 fp__blink_LED 0000        __size_of_register_timer 003A                    dequeue@temp 006F  
                ?_isEmptyQueue 0001               queueInitialize@i 0066                   ?_isEmptyList 0001  
                 ?_isFullQueue 0001  
