

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Sep 14 15:26:07 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           ; Version 2.10
    52                           ; Generated 31/07/2019 GMT
    53                           ; 
    54                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F8722 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	idataCOMRAM
    87  0025AE                     __pidataCOMRAM:
    88                           	opt callstack 0
    89                           
    90                           ;initializer for _secondReadRA5
    91  0025AE  01                 	db	1
    92                           
    93                           ;initializer for _firstReadRA5
    94  0025AF  01                 	db	1
    95  0000                     _LATCbits	set	3979
    96  0000                     _LATAbits	set	3977
    97  0000                     _TRISCbits	set	3988
    98  0000                     _TRISAbits	set	3986
    99  0000                     _LATFbits	set	3982
   100  0000                     _TRISFbits	set	3991
   101  0000                     _PORTAbits	set	3968
   102  0000                     _OSCTUNE	set	3995
   103  0000                     _OSCCON	set	4051
   104  0000                     _INTCON2bits	set	4081
   105  0000                     _TRISE	set	3990
   106  0000                     _LATE	set	3981
   107  0000                     _TRISD	set	3989
   108  0000                     _LATD	set	3980
   109  0000                     _TRISC	set	3988
   110  0000                     _LATC	set	3979
   111  0000                     _TRISB	set	3987
   112  0000                     _LATB	set	3978
   113  0000                     _TRISA	set	3986
   114  0000                     _LATA	set	3977
   115  0000                     _TMR0L	set	4054
   116  0000                     _T0CON	set	4053
   117  0000                     _INTCONbits	set	4082
   118                           
   119                           	psect	smallconst
   120  001000                     __psmallconst:
   121                           	opt callstack 0
   122  001000  00                 	db	0
   123  001001                     STR_6:
   124  001001  52                 	db	82	;'R'
   125  001002  41                 	db	65	;'A'
   126  001003  35                 	db	53	;'5'
   127  001004  3D                 	db	61	;'='
   128  001005  4D                 	db	77	;'M'
   129  001006  4F                 	db	79	;'O'
   130  001007  44                 	db	68	;'D'
   131  001008  49                 	db	73	;'I'
   132  001009  46                 	db	70	;'F'
   133  00100A  59                 	db	89	;'Y'
   134  00100B  5F                 	db	95	;'_'
   135  00100C  48                 	db	72	;'H'
   136  00100D  4F                 	db	79	;'O'
   137  00100E  55                 	db	85	;'U'
   138  00100F  52                 	db	82	;'R'
   139  001010  0A                 	db	10
   140  001011  0D                 	db	13
   141  001012  00                 	db	0
   142  001013                     STR_5:
   143  001013  52                 	db	82	;'R'
   144  001014  41                 	db	65	;'A'
   145  001015  35                 	db	53	;'5'
   146  001016  3D                 	db	61	;'='
   147  001017  4D                 	db	77	;'M'
   148  001018  4F                 	db	79	;'O'
   149  001019  44                 	db	68	;'D'
   150  00101A  49                 	db	73	;'I'
   151  00101B  46                 	db	70	;'F'
   152  00101C  59                 	db	89	;'Y'
   153  00101D  5F                 	db	95	;'_'
   154  00101E  48                 	db	72	;'H'
   155  00101F  4F                 	db	79	;'O'
   156  001020  55                 	db	85	;'U'
   157  001021  52                 	db	82	;'R'
   158  001022  00                 	db	0
   159  001023                     STR_1:
   160  001023  20                 	db	32
   161  001024  20                 	db	32
   162  001025  20                 	db	32
   163  001026  20                 	db	32
   164  001027  20                 	db	32
   165  001028  20                 	db	32
   166  001029  20                 	db	32
   167  00102A  20                 	db	32
   168  00102B  00                 	db	0
   169  00102C                     STR_4:
   170  00102C  25                 	db	37
   171  00102D  30                 	db	48	;'0'
   172  00102E  32                 	db	50	;'2'
   173  00102F  64                 	db	100	;'d'
   174  001030  20                 	db	32
   175  001031  09                 	db	9
   176  001032  00                 	db	0
   177  001033                     STR_2:
   178  001033  25                 	db	37
   179  001034  30                 	db	48	;'0'
   180  001035  32                 	db	50	;'2'
   181  001036  64                 	db	100	;'d'
   182  001037  3A                 	db	58	;':'
   183  001038  00                 	db	0
   184  0000                     
   185                           ; #config settings
   186  001039  00                 	db	0	; dummy byte at the end
   187  0000                     
   188                           	psect	cinit
   189  00245C                     __pcinit:
   190                           	opt callstack 0
   191  00245C                     start_initialization:
   192                           	opt callstack 0
   193  00245C                     __initialization:
   194                           	opt callstack 0
   195                           
   196                           ; Initialize objects allocated to COMRAM (2 bytes)
   197                           ; load TBLPTR registers with __pidataCOMRAM
   198  00245C  0EAE               	movlw	low __pidataCOMRAM
   199  00245E  6EF6               	movwf	tblptrl,c
   200  002460  0E25               	movlw	high __pidataCOMRAM
   201  002462  6EF7               	movwf	tblptrh,c
   202  002464  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   203  002466  6EF8               	movwf	tblptru,c
   204  002468  0009               	tblrd		*+	;fetch initializer
   205  00246A  CFF5 F055          	movff	tablat,__pdataCOMRAM
   206  00246E  0009               	tblrd		*+	;fetch initializer
   207  002470  CFF5 F056          	movff	tablat,__pdataCOMRAM+1
   208                           
   209                           ; Clear objects allocated to BANK0 (52 bytes)
   210  002474  EE00  F060         	lfsr	0,__pbssBANK0
   211  002478  0E34               	movlw	52
   212  00247A                     clear_0:
   213  00247A  6AEE               	clrf	postinc0,c
   214  00247C  06E8               	decf	wreg,f,c
   215  00247E  E1FD               	bnz	clear_0
   216                           
   217                           ; Clear objects allocated to COMRAM (6 bytes)
   218  002480  6A54               	clrf	(__pbssCOMRAM+5)& (0+255),c
   219  002482  6A53               	clrf	(__pbssCOMRAM+4)& (0+255),c
   220  002484  6A52               	clrf	(__pbssCOMRAM+3)& (0+255),c
   221  002486  6A51               	clrf	(__pbssCOMRAM+2)& (0+255),c
   222  002488  6A50               	clrf	(__pbssCOMRAM+1)& (0+255),c
   223  00248A  6A4F               	clrf	__pbssCOMRAM& (0+255),c
   224  00248C                     end_of_initialization:
   225                           	opt callstack 0
   226  00248C                     __end_of__initialization:
   227                           	opt callstack 0
   228  00248C  9057               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   229  00248E  9257               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   230  002490  0100               	movlb	0
   231  002492  EF4B  F011         	goto	_main	;jump to C main() function
   232                           
   233                           	psect	bssCOMRAM
   234  00004F                     __pbssCOMRAM:
   235                           	opt callstack 0
   236  00004F                     _prec:
   237                           	opt callstack 0
   238  00004F                     	ds	2
   239  000051                     _flags:
   240                           	opt callstack 0
   241  000051                     	ds	2
   242  000053                     _state_buttonRA5:
   243                           	opt callstack 0
   244  000053                     	ds	1
   245  000054                     _timerflag_10ms:
   246                           	opt callstack 0
   247  000054                     	ds	1
   248                           
   249                           	psect	dataCOMRAM
   250  000055                     __pdataCOMRAM:
   251                           	opt callstack 0
   252  000055                     _secondReadRA5:
   253                           	opt callstack 0
   254  000055                     	ds	1
   255  000056                     _firstReadRA5:
   256                           	opt callstack 0
   257  000056                     	ds	1
   258                           
   259                           	psect	bssBANK0
   260  000060                     __pbssBANK0:
   261                           	opt callstack 0
   262  000060                     _nout:
   263                           	opt callstack 0
   264  000060                     	ds	2
   265  000062                     _width:
   266                           	opt callstack 0
   267  000062                     	ds	2
   268  000064                     _checkRA5:
   269                           	opt callstack 0
   270  000064                     	ds	2
   271  000066                     _countRA5_1:
   272                           	opt callstack 0
   273  000066                     	ds	2
   274  000068                     _countRA5:
   275                           	opt callstack 0
   276  000068                     	ds	2
   277  00006A                     _count:
   278                           	opt callstack 0
   279  00006A                     	ds	2
   280  00006C                     _state_buttonRB0:
   281                           	opt callstack 0
   282  00006C                     	ds	1
   283  00006D                     _buttonRA5_1s_pressed:
   284                           	opt callstack 0
   285  00006D                     	ds	1
   286  00006E                     _buttonRA5:
   287                           	opt callstack 0
   288  00006E                     	ds	1
   289  00006F                     _timerflag_1s:
   290                           	opt callstack 0
   291  00006F                     	ds	1
   292  000070                     _sec:
   293                           	opt callstack 0
   294  000070                     	ds	1
   295  000071                     _min:
   296                           	opt callstack 0
   297  000071                     	ds	1
   298  000072                     _hour:
   299                           	opt callstack 0
   300  000072                     	ds	1
   301  000073                     _state:
   302                           	opt callstack 0
   303  000073                     	ds	1
   304  000074                     _dbuf:
   305                           	opt callstack 0
   306  000074                     	ds	32
   307                           
   308                           	psect	cstackBANK0
   309  000094                     __pcstackBANK0:
   310                           	opt callstack 0
   311  000094                     ??_vfpfcnvrt:
   312                           
   313                           ; 1 bytes @ 0x0
   314  000094                     	ds	4
   315  000098                     vfpfcnvrt@ll:
   316                           	opt callstack 0
   317                           
   318                           ; 8 bytes @ 0x4
   319  000098                     	ds	8
   320  0000A0                     vfpfcnvrt@done:
   321                           	opt callstack 0
   322                           
   323                           ; 2 bytes @ 0xC
   324  0000A0                     	ds	2
   325  0000A2                     _vfpfcnvrt$736:
   326                           	opt callstack 0
   327                           
   328                           ; 2 bytes @ 0xE
   329  0000A2                     	ds	2
   330  0000A4                     ?_vfprintf:
   331                           	opt callstack 0
   332  0000A4                     vfprintf@fp:
   333                           	opt callstack 0
   334                           
   335                           ; 2 bytes @ 0x10
   336  0000A4                     	ds	2
   337  0000A6                     vfprintf@fmt:
   338                           	opt callstack 0
   339                           
   340                           ; 2 bytes @ 0x12
   341  0000A6                     	ds	2
   342  0000A8                     vfprintf@ap:
   343                           	opt callstack 0
   344                           
   345                           ; 2 bytes @ 0x14
   346  0000A8                     	ds	2
   347  0000AA                     ?_printf:
   348                           	opt callstack 0
   349  0000AA                     printf@fmt:
   350                           	opt callstack 0
   351                           
   352                           ; 2 bytes @ 0x16
   353  0000AA                     	ds	6
   354  0000B0                     printf@ap:
   355                           	opt callstack 0
   356                           
   357                           ; 2 bytes @ 0x1C
   358  0000B0                     	ds	2
   359  0000B2                     ??_main:
   360                           
   361                           ; 1 bytes @ 0x1E
   362  0000B2                     	ds	2
   363                           
   364                           	psect	cstackCOMRAM
   365  000001                     __pcstackCOMRAM:
   366                           	opt callstack 0
   367  000001                     ?___lwmod:
   368                           	opt callstack 0
   369  000001                     ___lwmod@dividend:
   370                           	opt callstack 0
   371                           
   372                           ; 2 bytes @ 0x0
   373  000001                     	ds	2
   374  000003                     ___lwmod@divisor:
   375                           	opt callstack 0
   376                           
   377                           ; 2 bytes @ 0x2
   378  000003                     	ds	2
   379  000005                     ___lwmod@counter:
   380                           	opt callstack 0
   381                           
   382                           ; 1 bytes @ 0x4
   383  000005                     	ds	1
   384  000006                     ??_readButtonRA5:
   385                           
   386                           ; 1 bytes @ 0x5
   387  000006                     	ds	2
   388  000008                     ?_strlen:
   389                           	opt callstack 0
   390  000008                     ?_isdigit:
   391                           	opt callstack 0
   392  000008                     ?_isspace:
   393                           	opt callstack 0
   394  000008                     ?___wmul:
   395                           	opt callstack 0
   396  000008                     ?___awdiv:
   397                           	opt callstack 0
   398  000008                     ?___awmod:
   399                           	opt callstack 0
   400  000008                     ?___aodiv:
   401                           	opt callstack 0
   402  000008                     ?___aomod:
   403                           	opt callstack 0
   404  000008                     SendByteBBSPI@output:
   405                           	opt callstack 0
   406  000008                     ___wmul@multiplier:
   407                           	opt callstack 0
   408  000008                     ___awdiv@dividend:
   409                           	opt callstack 0
   410  000008                     ___awmod@dividend:
   411                           	opt callstack 0
   412  000008                     isdigit@c:
   413                           	opt callstack 0
   414  000008                     isspace@c:
   415                           	opt callstack 0
   416  000008                     fputc@c:
   417                           	opt callstack 0
   418  000008                     strlen@s:
   419                           	opt callstack 0
   420  000008                     ___aodiv@dividend:
   421                           	opt callstack 0
   422  000008                     ___aomod@dividend:
   423                           	opt callstack 0
   424                           
   425                           ; 8 bytes @ 0x7
   426  000008                     	ds	1
   427  000009                     SendByteBBSPI@bitcount:
   428                           	opt callstack 0
   429                           
   430                           ; 1 bytes @ 0x8
   431  000009                     	ds	1
   432  00000A                     ??_isdigit:
   433  00000A                     ??_isspace:
   434  00000A                     SendByteBBSPI@input:
   435                           	opt callstack 0
   436  00000A                     ___wmul@multiplicand:
   437                           	opt callstack 0
   438  00000A                     ___awdiv@divisor:
   439                           	opt callstack 0
   440  00000A                     ___awmod@divisor:
   441                           	opt callstack 0
   442  00000A                     fputc@fp:
   443                           	opt callstack 0
   444  00000A                     strlen@a:
   445                           	opt callstack 0
   446                           
   447                           ; 2 bytes @ 0x9
   448  00000A                     	ds	1
   449  00000B                     WritePort_BBSPI@a:
   450                           	opt callstack 0
   451                           
   452                           ; 1 bytes @ 0xA
   453  00000B                     	ds	1
   454  00000C                     ??_fputc:
   455  00000C                     WritePort_BBSPI@port_add:
   456                           	opt callstack 0
   457  00000C                     ___awdiv@counter:
   458                           	opt callstack 0
   459  00000C                     ___awmod@counter:
   460                           	opt callstack 0
   461  00000C                     ___wmul@product:
   462                           	opt callstack 0
   463                           
   464                           ; 2 bytes @ 0xB
   465  00000C                     	ds	1
   466  00000D                     ??_LCDPutInst:
   467  00000D                     ??_LCDPutChar:
   468  00000D                     ___awdiv@sign:
   469                           	opt callstack 0
   470  00000D                     ___awmod@sign:
   471                           	opt callstack 0
   472                           
   473                           ; 1 bytes @ 0xC
   474  00000D                     	ds	1
   475  00000E                     LCDPutChar@ch:
   476                           	opt callstack 0
   477  00000E                     LCDPutInst@ch:
   478                           	opt callstack 0
   479  00000E                     _isspace$1211:
   480                           	opt callstack 0
   481  00000E                     ___awdiv@quotient:
   482                           	opt callstack 0
   483                           
   484                           ; 2 bytes @ 0xD
   485  00000E                     	ds	1
   486  00000F                     ?_atoi:
   487                           	opt callstack 0
   488  00000F                     LCDPutStr@ptr:
   489                           	opt callstack 0
   490  00000F                     atoi@s:
   491                           	opt callstack 0
   492                           
   493                           ; 2 bytes @ 0xE
   494  00000F                     	ds	1
   495  000010                     ___aodiv@divisor:
   496                           	opt callstack 0
   497  000010                     ___aomod@divisor:
   498                           	opt callstack 0
   499                           
   500                           ; 8 bytes @ 0xF
   501  000010                     	ds	1
   502  000011                     ??_atoi:
   503  000011                     fputs@s:
   504                           	opt callstack 0
   505                           
   506                           ; 2 bytes @ 0x10
   507  000011                     	ds	2
   508  000013                     fputs@fp:
   509                           	opt callstack 0
   510                           
   511                           ; 2 bytes @ 0x12
   512  000013                     	ds	2
   513  000015                     fputs@c:
   514                           	opt callstack 0
   515  000015                     atoi@neg:
   516                           	opt callstack 0
   517                           
   518                           ; 2 bytes @ 0x14
   519  000015                     	ds	1
   520  000016                     fputs@i:
   521                           	opt callstack 0
   522                           
   523                           ; 2 bytes @ 0x15
   524  000016                     	ds	1
   525  000017                     _atoi$1193:
   526                           	opt callstack 0
   527                           
   528                           ; 2 bytes @ 0x16
   529  000017                     	ds	1
   530  000018                     ?_pad:
   531                           	opt callstack 0
   532  000018                     ___aodiv@counter:
   533                           	opt callstack 0
   534  000018                     ___aomod@counter:
   535                           	opt callstack 0
   536  000018                     pad@fp:
   537                           	opt callstack 0
   538                           
   539                           ; 2 bytes @ 0x17
   540  000018                     	ds	1
   541  000019                     ___aodiv@sign:
   542                           	opt callstack 0
   543  000019                     ___aomod@sign:
   544                           	opt callstack 0
   545  000019                     _atoi$1195:
   546                           	opt callstack 0
   547                           
   548                           ; 2 bytes @ 0x18
   549  000019                     	ds	1
   550  00001A                     ?_abs:
   551                           	opt callstack 0
   552  00001A                     pad@buf:
   553                           	opt callstack 0
   554  00001A                     abs@a:
   555                           	opt callstack 0
   556  00001A                     ___aodiv@quotient:
   557                           	opt callstack 0
   558                           
   559                           ; 8 bytes @ 0x19
   560  00001A                     	ds	1
   561  00001B                     _atoi$1194:
   562                           	opt callstack 0
   563                           
   564                           ; 1 bytes @ 0x1A
   565  00001B                     	ds	1
   566  00001C                     ??_abs:
   567  00001C                     pad@p:
   568                           	opt callstack 0
   569  00001C                     atoi@n:
   570                           	opt callstack 0
   571                           
   572                           ; 2 bytes @ 0x1B
   573  00001C                     	ds	2
   574  00001E                     ??_pad:
   575                           
   576                           ; 1 bytes @ 0x1D
   577  00001E                     	ds	1
   578  00001F                     pad@i:
   579                           	opt callstack 0
   580                           
   581                           ; 2 bytes @ 0x1E
   582  00001F                     	ds	2
   583  000021                     pad@w:
   584                           	opt callstack 0
   585                           
   586                           ; 2 bytes @ 0x20
   587  000021                     	ds	2
   588  000023                     ?_dtoa:
   589                           	opt callstack 0
   590  000023                     dtoa@fp:
   591                           	opt callstack 0
   592                           
   593                           ; 2 bytes @ 0x22
   594  000023                     	ds	2
   595  000025                     dtoa@d:
   596                           	opt callstack 0
   597                           
   598                           ; 8 bytes @ 0x24
   599  000025                     	ds	8
   600  00002D                     ??_dtoa:
   601                           
   602                           ; 1 bytes @ 0x2C
   603  00002D                     	ds	8
   604  000035                     _dtoa$721:
   605                           	opt callstack 0
   606                           
   607                           ; 2 bytes @ 0x34
   608  000035                     	ds	2
   609  000037                     dtoa@p:
   610                           	opt callstack 0
   611                           
   612                           ; 2 bytes @ 0x36
   613  000037                     	ds	2
   614  000039                     dtoa@w:
   615                           	opt callstack 0
   616                           
   617                           ; 2 bytes @ 0x38
   618  000039                     	ds	2
   619  00003B                     dtoa@s:
   620                           	opt callstack 0
   621                           
   622                           ; 2 bytes @ 0x3A
   623  00003B                     	ds	2
   624  00003D                     dtoa@n:
   625                           	opt callstack 0
   626                           
   627                           ; 8 bytes @ 0x3C
   628  00003D                     	ds	8
   629  000045                     dtoa@i:
   630                           	opt callstack 0
   631                           
   632                           ; 2 bytes @ 0x44
   633  000045                     	ds	2
   634  000047                     ?_vfpfcnvrt:
   635                           	opt callstack 0
   636  000047                     vfpfcnvrt@fp:
   637                           	opt callstack 0
   638                           
   639                           ; 2 bytes @ 0x46
   640  000047                     	ds	2
   641  000049                     vfpfcnvrt@fmt:
   642                           	opt callstack 0
   643                           
   644                           ; 2 bytes @ 0x48
   645  000049                     	ds	2
   646  00004B                     vfpfcnvrt@ap:
   647                           	opt callstack 0
   648                           
   649                           ; 2 bytes @ 0x4A
   650  00004B                     	ds	2
   651  00004D                     vfprintf@cfmt:
   652                           	opt callstack 0
   653                           
   654                           ; 2 bytes @ 0x4C
   655  00004D                     	ds	2
   656  00004F                     
   657                           ; 1 bytes @ 0x4E
   658 ;;
   659 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   660 ;;
   661 ;; *************** function _main *****************
   662 ;; Defined at:
   663 ;;		line 102 in file "main.c"
   664 ;; Parameters:    Size  Location     Type
   665 ;;		None
   666 ;; Auto vars:     Size  Location     Type
   667 ;;		None
   668 ;; Return value:  Size  Location     Type
   669 ;;                  1    wreg      void 
   670 ;; Registers used:
   671 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   672 ;; Tracked objects:
   673 ;;		On entry : 0/0
   674 ;;		On exit  : 0/0
   675 ;;		Unchanged: 0/0
   676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   679 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   680 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   681 ;;Total ram usage:        2 bytes
   682 ;; Hardware stack levels required when called:   13
   683 ;; This function calls:
   684 ;;		_clock
   685 ;;		_interrupt_init
   686 ;;		_osc_init
   687 ;;		_pin_init
   688 ;;		_timer0_init
   689 ;; This function is called by:
   690 ;;		Startup code after reset
   691 ;; This function uses a non-reentrant model
   692 ;;
   693                           
   694                           	psect	text0
   695  002296                     __ptext0:
   696                           	opt callstack 0
   697  002296                     _main:
   698                           	opt callstack 18
   699  002296                     
   700                           ;main.c: 103:     pin_init();
   701  002296  EC82  F012         	call	_pin_init	;wreg free
   702                           
   703                           ;main.c: 104:     timer0_init();
   704  00229A  ECCA  F012         	call	_timer0_init	;wreg free
   705  00229E                     
   706                           ;main.c: 105:     interrupt_init();
   707  00229E  ECD4  F012         	call	_interrupt_init	;wreg free
   708  0022A2                     
   709                           ;main.c: 106:     osc_init();
   710  0022A2  ECCF  F012         	call	_osc_init	;wreg free
   711  0022A6                     
   712                           ;main.c: 107:     state = CLOCK;
   713  0022A6  0E00               	movlw	0
   714  0022A8  0100               	movlb	0	; () banked
   715  0022AA  6F73               	movwf	_state& (0+255),b	;volatile
   716  0022AC  EF5C  F011         	goto	l3203
   717  0022B0                     l3197:
   718                           
   719                           ; BSR set to: 0
   720  0022B0  EC4C  F00F         	call	_clock	;wreg free
   721                           
   722                           ;main.c: 111:                 break;
   723  0022B4  EF5C  F011         	goto	l3203
   724  0022B8                     l105:
   725  0022B8                     l3203:
   726  0022B8  0100               	movlb	0	; () banked
   727  0022BA  5173               	movf	_state& (0+255),w,b	;volatile
   728  0022BC  6FB2               	movwf	??_main& (0+255),b
   729  0022BE  6BB3               	clrf	(??_main+1)& (0+255),b
   730                           
   731                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   732                           ; Switch size 1, requested type "simple"
   733                           ; Number of cases is 1, Range of values is 0 to 0
   734                           ; switch strategies available:
   735                           ; Name         Instructions Cycles
   736                           ; simple_byte            4     3 (average)
   737                           ;	Chosen strategy is simple_byte
   738  0022C0  51B3               	movf	(??_main+1)& (0+255),w,b
   739  0022C2  0A00               	xorlw	0	; case 0
   740  0022C4  B4D8               	btfsc	status,2,c
   741  0022C6  EF67  F011         	goto	l3321
   742  0022CA  EF5C  F011         	goto	l3203
   743  0022CE                     l3321:
   744                           
   745                           ; BSR set to: 0
   746                           ; Switch size 1, requested type "simple"
   747                           ; Number of cases is 3, Range of values is 0 to 2
   748                           ; switch strategies available:
   749                           ; Name         Instructions Cycles
   750                           ; simple_byte           10     6 (average)
   751                           ;	Chosen strategy is simple_byte
   752  0022CE  51B2               	movf	??_main& (0+255),w,b
   753  0022D0  0A00               	xorlw	0	; case 0
   754  0022D2  B4D8               	btfsc	status,2,c
   755  0022D4  EF58  F011         	goto	l3197
   756  0022D8  0A01               	xorlw	1	; case 1
   757  0022DA  B4D8               	btfsc	status,2,c
   758  0022DC  EF58  F011         	goto	l3197
   759  0022E0  0A03               	xorlw	3	; case 2
   760  0022E2  B4D8               	btfsc	status,2,c
   761  0022E4  EF5C  F011         	goto	l105
   762  0022E8  EF5C  F011         	goto	l3203
   763  0022EC  EF07  F000         	goto	start
   764  0022F0                     __end_of_main:
   765                           	opt callstack 0
   766                           
   767 ;; *************** function _timer0_init *****************
   768 ;; Defined at:
   769 ;;		line 19 in file "main.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;		None
   772 ;; Auto vars:     Size  Location     Type
   773 ;;		None
   774 ;; Return value:  Size  Location     Type
   775 ;;                  1    wreg      void 
   776 ;; Registers used:
   777 ;;		wreg, status,2
   778 ;; Tracked objects:
   779 ;;		On entry : 0/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   787 ;;Total ram usage:        0 bytes
   788 ;; Hardware stack levels used:    1
   789 ;; Hardware stack levels required when called:    3
   790 ;; This function calls:
   791 ;;		Nothing
   792 ;; This function is called by:
   793 ;;		_main
   794 ;; This function uses a non-reentrant model
   795 ;;
   796                           
   797                           	psect	text1
   798  002594                     __ptext1:
   799                           	opt callstack 0
   800  002594                     _timer0_init:
   801                           	opt callstack 27
   802  002594                     
   803                           ;main.c: 20:     T0CON = 0b11000111;
   804  002594  0EC7               	movlw	199
   805  002596  6ED5               	movwf	213,c	;volatile
   806                           
   807                           ;main.c: 21:     TMR0L = 177;
   808  002598  0EB1               	movlw	177
   809  00259A  6ED6               	movwf	214,c	;volatile
   810  00259C  0012               	return		;funcret
   811  00259E                     __end_of_timer0_init:
   812                           	opt callstack 0
   813                           
   814 ;; *************** function _pin_init *****************
   815 ;; Defined at:
   816 ;;		line 24 in file "main.c"
   817 ;; Parameters:    Size  Location     Type
   818 ;;		None
   819 ;; Auto vars:     Size  Location     Type
   820 ;;		None
   821 ;; Return value:  Size  Location     Type
   822 ;;                  1    wreg      void 
   823 ;; Registers used:
   824 ;;		wreg, status,2
   825 ;; Tracked objects:
   826 ;;		On entry : 0/0
   827 ;;		On exit  : 0/0
   828 ;;		Unchanged: 0/0
   829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   834 ;;Total ram usage:        0 bytes
   835 ;; Hardware stack levels used:    1
   836 ;; Hardware stack levels required when called:    3
   837 ;; This function calls:
   838 ;;		Nothing
   839 ;; This function is called by:
   840 ;;		_main
   841 ;; This function uses a non-reentrant model
   842 ;;
   843                           
   844                           	psect	text2
   845  002504                     __ptext2:
   846                           	opt callstack 0
   847  002504                     _pin_init:
   848                           	opt callstack 27
   849  002504                     
   850                           ;main.c: 25:     LATA = 0x00;
   851  002504  0E00               	movlw	0
   852  002506  6E89               	movwf	137,c	;volatile
   853                           
   854                           ;main.c: 26:     TRISA = 0xF3;
   855  002508  0EF3               	movlw	243
   856  00250A  6E92               	movwf	146,c	;volatile
   857                           
   858                           ;main.c: 29:     LATB = 0x00;
   859  00250C  0E00               	movlw	0
   860  00250E  6E8A               	movwf	138,c	;volatile
   861  002510                     
   862                           ;main.c: 30:     TRISB = 0xFF;
   863  002510  6893               	setf	147,c	;volatile
   864                           
   865                           ;main.c: 34:     LATC = 0x00;
   866  002512  0E00               	movlw	0
   867  002514  6E8B               	movwf	139,c	;volatile
   868                           
   869                           ;main.c: 35:     TRISC = 0xD7;
   870  002516  0ED7               	movlw	215
   871  002518  6E94               	movwf	148,c	;volatile
   872                           
   873                           ;main.c: 38:     LATD = 0x00;
   874  00251A  0E00               	movlw	0
   875  00251C  6E8C               	movwf	140,c	;volatile
   876  00251E                     
   877                           ;main.c: 39:     TRISD = 0xFF;
   878  00251E  6895               	setf	149,c	;volatile
   879                           
   880                           ;main.c: 42:     LATE = 0x00;
   881  002520  0E00               	movlw	0
   882  002522  6E8D               	movwf	141,c	;volatile
   883                           
   884                           ;main.c: 43:     TRISE = 0x07;
   885  002524  0E07               	movlw	7
   886  002526  6E96               	movwf	150,c	;volatile
   887  002528                     
   888                           ;main.c: 46:     INTCON2bits.nRBPU = 0x01;
   889  002528  8EF1               	bsf	241,7,c	;volatile
   890  00252A  0012               	return		;funcret
   891  00252C                     __end_of_pin_init:
   892                           	opt callstack 0
   893                           
   894 ;; *************** function _osc_init *****************
   895 ;; Defined at:
   896 ;;		line 55 in file "main.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;		None
   899 ;; Auto vars:     Size  Location     Type
   900 ;;		None
   901 ;; Return value:  Size  Location     Type
   902 ;;                  1    wreg      void 
   903 ;; Registers used:
   904 ;;		wreg, status,2
   905 ;; Tracked objects:
   906 ;;		On entry : 0/0
   907 ;;		On exit  : 0/0
   908 ;;		Unchanged: 0/0
   909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   914 ;;Total ram usage:        0 bytes
   915 ;; Hardware stack levels used:    1
   916 ;; Hardware stack levels required when called:    3
   917 ;; This function calls:
   918 ;;		Nothing
   919 ;; This function is called by:
   920 ;;		_main
   921 ;; This function uses a non-reentrant model
   922 ;;
   923                           
   924                           	psect	text3
   925  00259E                     __ptext3:
   926                           	opt callstack 0
   927  00259E                     _osc_init:
   928                           	opt callstack 27
   929  00259E                     
   930                           ;main.c: 56:     OSCCON = 0b01110111;
   931  00259E  0E77               	movlw	119
   932  0025A0  6ED3               	movwf	211,c	;volatile
   933                           
   934                           ;main.c: 57:     OSCTUNE = 0b00001111;
   935  0025A2  0E0F               	movlw	15
   936  0025A4  6E9B               	movwf	155,c	;volatile
   937  0025A6  0012               	return		;funcret
   938  0025A8                     __end_of_osc_init:
   939                           	opt callstack 0
   940                           
   941 ;; *************** function _interrupt_init *****************
   942 ;; Defined at:
   943 ;;		line 14 in file "main.c"
   944 ;; Parameters:    Size  Location     Type
   945 ;;		None
   946 ;; Auto vars:     Size  Location     Type
   947 ;;		None
   948 ;; Return value:  Size  Location     Type
   949 ;;                  1    wreg      void 
   950 ;; Registers used:
   951 ;;		None
   952 ;; Tracked objects:
   953 ;;		On entry : 0/0
   954 ;;		On exit  : 0/0
   955 ;;		Unchanged: 0/0
   956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   961 ;;Total ram usage:        0 bytes
   962 ;; Hardware stack levels used:    1
   963 ;; Hardware stack levels required when called:    3
   964 ;; This function calls:
   965 ;;		Nothing
   966 ;; This function is called by:
   967 ;;		_main
   968 ;; This function uses a non-reentrant model
   969 ;;
   970                           
   971                           	psect	text4
   972  0025A8                     __ptext4:
   973                           	opt callstack 0
   974  0025A8                     _interrupt_init:
   975                           	opt callstack 27
   976  0025A8                     
   977                           ;main.c: 15:     INTCONbits.TMR0IE = 1;
   978  0025A8  8AF2               	bsf	242,5,c	;volatile
   979                           
   980                           ;main.c: 16:     INTCONbits.GIE = 1;
   981  0025AA  8EF2               	bsf	242,7,c	;volatile
   982  0025AC  0012               	return		;funcret
   983  0025AE                     __end_of_interrupt_init:
   984                           	opt callstack 0
   985                           
   986 ;; *************** function _clock *****************
   987 ;; Defined at:
   988 ;;		line 20 in file "state_clock.c"
   989 ;; Parameters:    Size  Location     Type
   990 ;;		None
   991 ;; Auto vars:     Size  Location     Type
   992 ;;		None
   993 ;; Return value:  Size  Location     Type
   994 ;;                  1    wreg      void 
   995 ;; Registers used:
   996 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1006 ;;Total ram usage:        0 bytes
  1007 ;; Hardware stack levels used:    1
  1008 ;; Hardware stack levels required when called:   12
  1009 ;; This function calls:
  1010 ;;		_LCDPutInst
  1011 ;;		_LCDPutStr
  1012 ;;		_display_clock
  1013 ;;		_printf
  1014 ;; This function is called by:
  1015 ;;		_main
  1016 ;; This function uses a non-reentrant model
  1017 ;;
  1018                           
  1019                           	psect	text5
  1020  001E98                     __ptext5:
  1021                           	opt callstack 0
  1022  001E98                     _clock:
  1023                           	opt callstack 18
  1024  001E98                     
  1025                           ;state_clock.c: 21:     LCDPutInst(0xC0);
  1026  001E98  0EC0               	movlw	192
  1027  001E9A  ECE6  F010         	call	_LCDPutInst
  1028  001E9E                     
  1029                           ;state_clock.c: 22:     LCDPutStr("RA5=MODIFY_HOUR");
  1030  001E9E  0E13               	movlw	low STR_5
  1031  001EA0  6E0F               	movwf	LCDPutStr@ptr^0,c
  1032  001EA2  0E10               	movlw	high STR_5
  1033  001EA4  6E10               	movwf	(LCDPutStr@ptr+1)^0,c
  1034  001EA6  EC0F  F012         	call	_LCDPutStr	;wreg free
  1035  001EAA                     
  1036                           ;state_clock.c: 23:     printf("RA5=MODIFY_HOUR\n\r");
  1037  001EAA  0E01               	movlw	low STR_6
  1038  001EAC  0100               	movlb	0	; () banked
  1039  001EAE  6FAA               	movwf	printf@fmt& (0+255),b
  1040  001EB0  0E10               	movlw	high STR_6
  1041  001EB2  6FAB               	movwf	(printf@fmt+1)& (0+255),b
  1042  001EB4  EC96  F012         	call	_printf	;wreg free
  1043                           
  1044                           ;state_clock.c: 24:     while(state == CLOCK) {
  1045  001EB8  EF9B  F00F         	goto	l239
  1046  001EBC                     l3161:
  1047                           
  1048                           ; BSR set to: 0
  1049                           ;state_clock.c: 25:         if(timerflag_1s == 1) {
  1050  001EBC  056F               	decf	_timerflag_1s& (0+255),w,b
  1051  001EBE  A4D8               	btfss	status,2,c
  1052  001EC0  EF64  F00F         	goto	u2531
  1053  001EC4  EF66  F00F         	goto	u2530
  1054  001EC8                     u2531:
  1055  001EC8  EF8C  F00F         	goto	l3185
  1056  001ECC                     u2530:
  1057  001ECC                     
  1058                           ; BSR set to: 0
  1059                           ;state_clock.c: 26:             sec++;
  1060  001ECC  2B70               	incf	_sec& (0+255),f,b	;volatile
  1061  001ECE                     
  1062                           ; BSR set to: 0
  1063                           ;state_clock.c: 27:             if(sec > 59) {
  1064  001ECE  0E3B               	movlw	59
  1065  001ED0  6570               	cpfsgt	_sec& (0+255),b	;volatile
  1066  001ED2  EF6D  F00F         	goto	u2541
  1067  001ED6  EF6F  F00F         	goto	u2540
  1068  001EDA                     u2541:
  1069  001EDA  EF72  F00F         	goto	l3171
  1070  001EDE                     u2540:
  1071  001EDE                     
  1072                           ; BSR set to: 0
  1073                           ;state_clock.c: 28:                 sec = 0;
  1074  001EDE  0E00               	movlw	0
  1075  001EE0  6F70               	movwf	_sec& (0+255),b	;volatile
  1076  001EE2                     
  1077                           ; BSR set to: 0
  1078                           ;state_clock.c: 29:                 min++;
  1079  001EE2  2B71               	incf	_min& (0+255),f,b	;volatile
  1080  001EE4                     l3171:
  1081                           
  1082                           ; BSR set to: 0
  1083                           ;state_clock.c: 31:             if(min > 59) {
  1084  001EE4  0E3B               	movlw	59
  1085  001EE6  6571               	cpfsgt	_min& (0+255),b	;volatile
  1086  001EE8  EF78  F00F         	goto	u2551
  1087  001EEC  EF7A  F00F         	goto	u2550
  1088  001EF0                     u2551:
  1089  001EF0  EF7D  F00F         	goto	l3177
  1090  001EF4                     u2550:
  1091  001EF4                     
  1092                           ; BSR set to: 0
  1093                           ;state_clock.c: 32:                 min = 0;
  1094  001EF4  0E00               	movlw	0
  1095  001EF6  6F71               	movwf	_min& (0+255),b	;volatile
  1096  001EF8                     
  1097                           ; BSR set to: 0
  1098                           ;state_clock.c: 33:                 hour++;
  1099  001EF8  2B72               	incf	_hour& (0+255),f,b	;volatile
  1100  001EFA                     l3177:
  1101                           
  1102                           ; BSR set to: 0
  1103                           ;state_clock.c: 35:             if(hour > 23) {
  1104  001EFA  0E17               	movlw	23
  1105  001EFC  6572               	cpfsgt	_hour& (0+255),b	;volatile
  1106  001EFE  EF83  F00F         	goto	u2561
  1107  001F02  EF85  F00F         	goto	u2560
  1108  001F06                     u2561:
  1109  001F06  EF87  F00F         	goto	l3181
  1110  001F0A                     u2560:
  1111  001F0A                     
  1112                           ; BSR set to: 0
  1113                           ;state_clock.c: 36:                 hour = 0;
  1114  001F0A  0E00               	movlw	0
  1115  001F0C  6F72               	movwf	_hour& (0+255),b	;volatile
  1116  001F0E                     l3181:
  1117                           
  1118                           ; BSR set to: 0
  1119                           ;state_clock.c: 38:             display_clock();
  1120  001F0E  EC9A  F00D         	call	_display_clock	;wreg free
  1121  001F12                     
  1122                           ;state_clock.c: 39:             timerflag_1s = 0;
  1123  001F12  0E00               	movlw	0
  1124  001F14  0100               	movlb	0	; () banked
  1125  001F16  6F6F               	movwf	_timerflag_1s& (0+255),b
  1126  001F18                     l3185:
  1127                           
  1128                           ; BSR set to: 0
  1129                           ;state_clock.c: 41:         if(checkRA5 == 1) {
  1130  001F18  0564               	decf	_checkRA5& (0+255),w,b
  1131  001F1A  1165               	iorwf	(_checkRA5+1)& (0+255),w,b
  1132  001F1C  A4D8               	btfss	status,2,c
  1133  001F1E  EF93  F00F         	goto	u2571
  1134  001F22  EF95  F00F         	goto	u2570
  1135  001F26                     u2571:
  1136  001F26  EF9B  F00F         	goto	l239
  1137  001F2A                     u2570:
  1138  001F2A                     
  1139                           ; BSR set to: 0
  1140                           ;state_clock.c: 42:             checkRA5 = 0;
  1141  001F2A  0E00               	movlw	0
  1142  001F2C  6F65               	movwf	(_checkRA5+1)& (0+255),b
  1143  001F2E  0E00               	movlw	0
  1144  001F30  6F64               	movwf	_checkRA5& (0+255),b
  1145                           
  1146                           ;state_clock.c: 43:             state = MODIFY;
  1147  001F32  0E01               	movlw	1
  1148  001F34  6F73               	movwf	_state& (0+255),b	;volatile
  1149  001F36                     l239:
  1150                           
  1151                           ;state_clock.c: 24:     while(state == CLOCK) {
  1152  001F36  0100               	movlb	0	; () banked
  1153  001F38  5173               	movf	_state& (0+255),w,b	;volatile
  1154  001F3A  B4D8               	btfsc	status,2,c
  1155  001F3C  EFA2  F00F         	goto	u2581
  1156  001F40  EFA4  F00F         	goto	u2580
  1157  001F44                     u2581:
  1158  001F44  EF5E  F00F         	goto	l3161
  1159  001F48                     u2580:
  1160  001F48                     
  1161                           ; BSR set to: 0
  1162  001F48  0012               	return		;funcret
  1163  001F4A                     __end_of_clock:
  1164                           	opt callstack 0
  1165                           
  1166 ;; *************** function _display_clock *****************
  1167 ;; Defined at:
  1168 ;;		line 3 in file "state_clock.c"
  1169 ;; Parameters:    Size  Location     Type
  1170 ;;		None
  1171 ;; Auto vars:     Size  Location     Type
  1172 ;;		None
  1173 ;; Return value:  Size  Location     Type
  1174 ;;                  1    wreg      void 
  1175 ;; Registers used:
  1176 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1177 ;; Tracked objects:
  1178 ;;		On entry : 0/0
  1179 ;;		On exit  : 0/0
  1180 ;;		Unchanged: 0/0
  1181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1186 ;;Total ram usage:        0 bytes
  1187 ;; Hardware stack levels used:    1
  1188 ;; Hardware stack levels required when called:   11
  1189 ;; This function calls:
  1190 ;;		_LCDPutChar
  1191 ;;		_LCDPutInst
  1192 ;;		_LCDPutStr
  1193 ;;		___awdiv
  1194 ;;		___awmod
  1195 ;;		_printf
  1196 ;; This function is called by:
  1197 ;;		_clock
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           
  1201                           	psect	text6
  1202  001B34                     __ptext6:
  1203                           	opt callstack 0
  1204  001B34                     _display_clock:
  1205                           	opt callstack 18
  1206  001B34                     
  1207                           ;state_clock.c: 4:    LCDPutInst(0x80);
  1208  001B34  0E80               	movlw	128
  1209  001B36  ECE6  F010         	call	_LCDPutInst
  1210                           
  1211                           ;state_clock.c: 5:    LCDPutChar(hour/10+'0');
  1212  001B3A  C072  F008         	movff	_hour,___awdiv@dividend	;volatile
  1213  001B3E  6A09               	clrf	(___awdiv@dividend+1)^0,c
  1214  001B40  0E00               	movlw	0
  1215  001B42  6E0B               	movwf	(___awdiv@divisor+1)^0,c
  1216  001B44  0E0A               	movlw	10
  1217  001B46  6E0A               	movwf	___awdiv@divisor^0,c
  1218  001B48  EC89  F00E         	call	___awdiv	;wreg free
  1219  001B4C  5008               	movf	?___awdiv^0,w,c
  1220  001B4E  0F30               	addlw	48
  1221  001B50  ECB3  F010         	call	_LCDPutChar
  1222                           
  1223                           ;state_clock.c: 6:    LCDPutChar(hour%10+'0');
  1224  001B54  C072  F008         	movff	_hour,___awmod@dividend	;volatile
  1225  001B58  6A09               	clrf	(___awmod@dividend+1)^0,c
  1226  001B5A  0E00               	movlw	0
  1227  001B5C  6E0B               	movwf	(___awmod@divisor+1)^0,c
  1228  001B5E  0E0A               	movlw	10
  1229  001B60  6E0A               	movwf	___awmod@divisor^0,c
  1230  001B62  ECA5  F00F         	call	___awmod	;wreg free
  1231  001B66  5008               	movf	?___awmod^0,w,c
  1232  001B68  0F30               	addlw	48
  1233  001B6A  ECB3  F010         	call	_LCDPutChar
  1234                           
  1235                           ;state_clock.c: 7:    LCDPutChar(':');
  1236  001B6E  0E3A               	movlw	58
  1237  001B70  ECB3  F010         	call	_LCDPutChar
  1238                           
  1239                           ;state_clock.c: 8:    LCDPutChar(min/10+'0');
  1240  001B74  C071  F008         	movff	_min,___awdiv@dividend	;volatile
  1241  001B78  6A09               	clrf	(___awdiv@dividend+1)^0,c
  1242  001B7A  0E00               	movlw	0
  1243  001B7C  6E0B               	movwf	(___awdiv@divisor+1)^0,c
  1244  001B7E  0E0A               	movlw	10
  1245  001B80  6E0A               	movwf	___awdiv@divisor^0,c
  1246  001B82  EC89  F00E         	call	___awdiv	;wreg free
  1247  001B86  5008               	movf	?___awdiv^0,w,c
  1248  001B88  0F30               	addlw	48
  1249  001B8A  ECB3  F010         	call	_LCDPutChar
  1250                           
  1251                           ;state_clock.c: 9:    LCDPutChar(min%10+'0');
  1252  001B8E  C071  F008         	movff	_min,___awmod@dividend	;volatile
  1253  001B92  6A09               	clrf	(___awmod@dividend+1)^0,c
  1254  001B94  0E00               	movlw	0
  1255  001B96  6E0B               	movwf	(___awmod@divisor+1)^0,c
  1256  001B98  0E0A               	movlw	10
  1257  001B9A  6E0A               	movwf	___awmod@divisor^0,c
  1258  001B9C  ECA5  F00F         	call	___awmod	;wreg free
  1259  001BA0  5008               	movf	?___awmod^0,w,c
  1260  001BA2  0F30               	addlw	48
  1261  001BA4  ECB3  F010         	call	_LCDPutChar
  1262                           
  1263                           ;state_clock.c: 10:    LCDPutChar(':');
  1264  001BA8  0E3A               	movlw	58
  1265  001BAA  ECB3  F010         	call	_LCDPutChar
  1266                           
  1267                           ;state_clock.c: 11:    LCDPutChar(sec/10+'0');
  1268  001BAE  C070  F008         	movff	_sec,___awdiv@dividend	;volatile
  1269  001BB2  6A09               	clrf	(___awdiv@dividend+1)^0,c
  1270  001BB4  0E00               	movlw	0
  1271  001BB6  6E0B               	movwf	(___awdiv@divisor+1)^0,c
  1272  001BB8  0E0A               	movlw	10
  1273  001BBA  6E0A               	movwf	___awdiv@divisor^0,c
  1274  001BBC  EC89  F00E         	call	___awdiv	;wreg free
  1275  001BC0  5008               	movf	?___awdiv^0,w,c
  1276  001BC2  0F30               	addlw	48
  1277  001BC4  ECB3  F010         	call	_LCDPutChar
  1278                           
  1279                           ;state_clock.c: 12:    LCDPutChar(sec%10+'0');
  1280  001BC8  C070  F008         	movff	_sec,___awmod@dividend	;volatile
  1281  001BCC  6A09               	clrf	(___awmod@dividend+1)^0,c
  1282  001BCE  0E00               	movlw	0
  1283  001BD0  6E0B               	movwf	(___awmod@divisor+1)^0,c
  1284  001BD2  0E0A               	movlw	10
  1285  001BD4  6E0A               	movwf	___awmod@divisor^0,c
  1286  001BD6  ECA5  F00F         	call	___awmod	;wreg free
  1287  001BDA  5008               	movf	?___awmod^0,w,c
  1288  001BDC  0F30               	addlw	48
  1289  001BDE  ECB3  F010         	call	_LCDPutChar
  1290  001BE2                     
  1291                           ;state_clock.c: 13:    LCDPutStr("        ");
  1292  001BE2  0E23               	movlw	low STR_1
  1293  001BE4  6E0F               	movwf	LCDPutStr@ptr^0,c
  1294  001BE6  0E10               	movlw	high STR_1
  1295  001BE8  6E10               	movwf	(LCDPutStr@ptr+1)^0,c
  1296  001BEA  EC0F  F012         	call	_LCDPutStr	;wreg free
  1297  001BEE                     
  1298                           ;state_clock.c: 15:    printf("%02d:", hour);
  1299  001BEE  0E33               	movlw	low STR_2
  1300  001BF0  0100               	movlb	0	; () banked
  1301  001BF2  6FAA               	movwf	printf@fmt& (0+255),b
  1302  001BF4  0E10               	movlw	high STR_2
  1303  001BF6  6FAB               	movwf	(printf@fmt+1)& (0+255),b
  1304  001BF8  C072  F0AC         	movff	_hour,?_printf+2	;volatile
  1305  001BFC  6BAD               	clrf	(?_printf+3)& (0+255),b
  1306  001BFE  EC96  F012         	call	_printf	;wreg free
  1307  001C02                     
  1308                           ;state_clock.c: 16:    printf("%02d:", min);
  1309  001C02  0E33               	movlw	low STR_2
  1310  001C04  0100               	movlb	0	; () banked
  1311  001C06  6FAA               	movwf	printf@fmt& (0+255),b
  1312  001C08  0E10               	movlw	high STR_2
  1313  001C0A  6FAB               	movwf	(printf@fmt+1)& (0+255),b
  1314  001C0C  C071  F0AC         	movff	_min,?_printf+2	;volatile
  1315  001C10  6BAD               	clrf	(?_printf+3)& (0+255),b
  1316  001C12  EC96  F012         	call	_printf	;wreg free
  1317  001C16                     
  1318                           ;state_clock.c: 17:    printf("%02d \t", sec);
  1319  001C16  0E2C               	movlw	low STR_4
  1320  001C18  0100               	movlb	0	; () banked
  1321  001C1A  6FAA               	movwf	printf@fmt& (0+255),b
  1322  001C1C  0E10               	movlw	high STR_4
  1323  001C1E  6FAB               	movwf	(printf@fmt+1)& (0+255),b
  1324  001C20  C070  F0AC         	movff	_sec,?_printf+2	;volatile
  1325  001C24  6BAD               	clrf	(?_printf+3)& (0+255),b
  1326  001C26  EC96  F012         	call	_printf	;wreg free
  1327  001C2A  0012               	return		;funcret
  1328  001C2C                     __end_of_display_clock:
  1329                           	opt callstack 0
  1330                           
  1331 ;; *************** function _printf *****************
  1332 ;; Defined at:
  1333 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\printf.c"
  1334 ;; Parameters:    Size  Location     Type
  1335 ;;  fmt             2   22[BANK0 ] PTR const unsigned char 
  1336 ;;		 -> STR_6(18), STR_4(7), STR_3(6), STR_2(6), 
  1337 ;; Auto vars:     Size  Location     Type
  1338 ;;  ap              2   28[BANK0 ] PTR void [1]
  1339 ;;		 -> ?_printf(2), 
  1340 ;;  ret             2    0        int 
  1341 ;; Return value:  Size  Location     Type
  1342 ;;                  2   22[BANK0 ] int 
  1343 ;; Registers used:
  1344 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1345 ;; Tracked objects:
  1346 ;;		On entry : 0/0
  1347 ;;		On exit  : 0/0
  1348 ;;		Unchanged: 0/0
  1349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1350 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1351 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1353 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1354 ;;Total ram usage:        8 bytes
  1355 ;; Hardware stack levels used:    1
  1356 ;; Hardware stack levels required when called:   10
  1357 ;; This function calls:
  1358 ;;		_vfprintf
  1359 ;; This function is called by:
  1360 ;;		_display_clock
  1361 ;;		_clock
  1362 ;; This function uses a non-reentrant model
  1363 ;;
  1364                           
  1365                           	psect	text7
  1366  00252C                     __ptext7:
  1367                           	opt callstack 0
  1368  00252C                     _printf:
  1369                           	opt callstack 19
  1370  00252C  0EAC               	movlw	low (?_printf+2)
  1371  00252E  0100               	movlb	0	; () banked
  1372  002530  6FB0               	movwf	printf@ap& (0+255),b
  1373  002532  0E00               	movlw	high (?_printf+2)
  1374  002534  6FB1               	movwf	(printf@ap+1)& (0+255),b
  1375  002536                     
  1376                           ; BSR set to: 0
  1377  002536  0E00               	movlw	0
  1378  002538  6FA4               	movwf	vfprintf@fp& (0+255),b
  1379  00253A  0E00               	movlw	0
  1380  00253C  6FA5               	movwf	(vfprintf@fp+1)& (0+255),b
  1381  00253E  C0AA  F0A6         	movff	printf@fmt,vfprintf@fmt
  1382  002542  C0AB  F0A7         	movff	printf@fmt+1,vfprintf@fmt+1
  1383  002546  0EB0               	movlw	low printf@ap
  1384  002548  6FA8               	movwf	vfprintf@ap& (0+255),b
  1385  00254A  0E00               	movlw	high printf@ap
  1386  00254C  6FA9               	movwf	(vfprintf@ap+1)& (0+255),b
  1387  00254E  EC80  F010         	call	_vfprintf	;wreg free
  1388  002552  0012               	return		;funcret
  1389  002554                     __end_of_printf:
  1390                           	opt callstack 0
  1391                           
  1392 ;; *************** function _vfprintf *****************
  1393 ;; Defined at:
  1394 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1395 ;; Parameters:    Size  Location     Type
  1396 ;;  fp              2   16[BANK0 ] PTR struct _IO_FILE
  1397 ;;		 -> NULL(0), 
  1398 ;;  fmt             2   18[BANK0 ] PTR const unsigned char 
  1399 ;;		 -> STR_6(18), STR_4(7), STR_3(6), STR_2(6), 
  1400 ;;  ap              2   20[BANK0 ] PTR PTR void 
  1401 ;;		 -> printf@ap(2), 
  1402 ;; Auto vars:     Size  Location     Type
  1403 ;;  cfmt            2   76[COMRAM] PTR unsigned char 
  1404 ;;		 -> STR_6(18), STR_4(7), STR_3(6), STR_2(6), 
  1405 ;; Return value:  Size  Location     Type
  1406 ;;                  2   16[BANK0 ] int 
  1407 ;; Registers used:
  1408 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1409 ;; Tracked objects:
  1410 ;;		On entry : 0/0
  1411 ;;		On exit  : 0/0
  1412 ;;		Unchanged: 0/0
  1413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1414 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1415 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1417 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1418 ;;Total ram usage:        8 bytes
  1419 ;; Hardware stack levels used:    1
  1420 ;; Hardware stack levels required when called:    9
  1421 ;; This function calls:
  1422 ;;		_vfpfcnvrt
  1423 ;; This function is called by:
  1424 ;;		_printf
  1425 ;; This function uses a non-reentrant model
  1426 ;;
  1427                           
  1428                           	psect	text8
  1429  002100                     __ptext8:
  1430                           	opt callstack 0
  1431  002100                     _vfprintf:
  1432                           	opt callstack 19
  1433  002100                     
  1434                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.10\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1435  002100  C0A6  F04D         	movff	vfprintf@fmt,vfprintf@cfmt
  1436  002104  C0A7  F04E         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1437  002108                     
  1438                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1439  002108  0E00               	movlw	0
  1440  00210A  0100               	movlb	0	; () banked
  1441  00210C  6F61               	movwf	(_nout+1)& (0+255),b
  1442  00210E  0E00               	movlw	0
  1443  002110  6F60               	movwf	_nout& (0+255),b
  1444                           
  1445                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1446  002112  EF9E  F010         	goto	l3137
  1447  002116                     l3135:
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1451  002116  C0A4  F047         	movff	vfprintf@fp,vfpfcnvrt@fp
  1452  00211A  C0A5  F048         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1453  00211E  0E4D               	movlw	low vfprintf@cfmt
  1454  002120  6E49               	movwf	vfpfcnvrt@fmt^0,c
  1455  002122  0E00               	movlw	high vfprintf@cfmt
  1456  002124  6E4A               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1457  002126  C0A8  F04B         	movff	vfprintf@ap,vfpfcnvrt@ap
  1458  00212A  C0A9  F04C         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1459  00212E  EC1D  F008         	call	_vfpfcnvrt	;wreg free
  1460  002132  5047               	movf	?_vfpfcnvrt^0,w,c
  1461  002134  0100               	movlb	0	; () banked
  1462  002136  2760               	addwf	_nout& (0+255),f,b
  1463  002138  5048               	movf	(?_vfpfcnvrt+1)^0,w,c
  1464  00213A  2361               	addwfc	(_nout+1)& (0+255),f,b
  1465  00213C                     l3137:
  1466                           
  1467                           ; BSR set to: 0
  1468                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1469  00213C  C04D  FFF6         	movff	vfprintf@cfmt,tblptrl
  1470  002140  C04E  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1471  002144                     	if	0	;tblptru may be non-zero
  1472  002144                     	endif
  1473  002144                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1474  002144  0E00               	movlw	low (__mediumconst shr (0+16))
  1475  002146  6EF8               	movwf	tblptru,c
  1476  002148                     	endif
  1477  002148  0008               	tblrd		*
  1478  00214A  50F5               	movf	tablat,w,c
  1479  00214C  0900               	iorlw	0
  1480  00214E  A4D8               	btfss	status,2,c
  1481  002150  EFAC  F010         	goto	u2521
  1482  002154  EFAE  F010         	goto	u2520
  1483  002158                     u2521:
  1484  002158  EF8B  F010         	goto	l3135
  1485  00215C                     u2520:
  1486  00215C                     
  1487                           ; BSR set to: 0
  1488                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1489  00215C  C060  F0A4         	movff	_nout,?_vfprintf
  1490  002160  C061  F0A5         	movff	_nout+1,?_vfprintf+1
  1491  002164                     
  1492                           ; BSR set to: 0
  1493  002164  0012               	return		;funcret
  1494  002166                     __end_of_vfprintf:
  1495                           	opt callstack 0
  1496                           
  1497 ;; *************** function _vfpfcnvrt *****************
  1498 ;; Defined at:
  1499 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1500 ;; Parameters:    Size  Location     Type
  1501 ;;  fp              2   70[COMRAM] PTR struct _IO_FILE
  1502 ;;		 -> NULL(0), 
  1503 ;;  fmt             2   72[COMRAM] PTR PTR unsigned char 
  1504 ;;		 -> vfprintf@cfmt(2), 
  1505 ;;  ap              2   74[COMRAM] PTR PTR void 
  1506 ;;		 -> printf@ap(2), 
  1507 ;; Auto vars:     Size  Location     Type
  1508 ;;  ll              8    4[BANK0 ] long long 
  1509 ;;  llu             8    0        unsigned long long 
  1510 ;;  f               4    0        unsigned long long 
  1511 ;;  vp              3    0        PTR void 
  1512 ;;  ct              3    0        unsigned char [3]
  1513 ;;  cp              3    0        PTR unsigned char 
  1514 ;;  done            2   12[BANK0 ] int 
  1515 ;;  i               2    0        int 
  1516 ;;  c               1    0        unsigned char 
  1517 ;; Return value:  Size  Location     Type
  1518 ;;                  2   70[COMRAM] int 
  1519 ;; Registers used:
  1520 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1521 ;; Tracked objects:
  1522 ;;		On entry : 0/0
  1523 ;;		On exit  : 0/0
  1524 ;;		Unchanged: 0/0
  1525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1526 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1527 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1528 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1529 ;;      Totals:         6      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1530 ;;Total ram usage:       22 bytes
  1531 ;; Hardware stack levels used:    1
  1532 ;; Hardware stack levels required when called:    8
  1533 ;; This function calls:
  1534 ;;		_atoi
  1535 ;;		_dtoa
  1536 ;;		_fputc
  1537 ;;		_isdigit
  1538 ;; This function is called by:
  1539 ;;		_vfprintf
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           	psect	text9
  1544  00103A                     __ptext9:
  1545                           	opt callstack 0
  1546  00103A                     _vfpfcnvrt:
  1547                           	opt callstack 19
  1548  00103A                     
  1549                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1550  00103A  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1551  00103E  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1552  001042  CFDE FFF6          	movff	postinc2,tblptrl
  1553  001046  CFDD FFF7          	movff	postdec2,tblptrh
  1554  00104A                     	if	0	;tblptru may be non-zero
  1555  00104A                     	endif
  1556  00104A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1557  00104A  0E00               	movlw	low (__mediumconst shr (0+16))
  1558  00104C  6EF8               	movwf	tblptru,c
  1559  00104E                     	endif
  1560  00104E  0008               	tblrd		*
  1561  001050  50F5               	movf	tablat,w,c
  1562  001052  0A25               	xorlw	37
  1563  001054  A4D8               	btfss	status,2,c
  1564  001056  EF2F  F008         	goto	u2411
  1565  00105A  EF31  F008         	goto	u2410
  1566  00105E                     u2411:
  1567  00105E  EFC5  F009         	goto	l3115
  1568  001062                     u2410:
  1569  001062                     
  1570                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1571  001062  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1572  001066  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1573  00106A  2ADE               	incf	postinc2,f,c
  1574  00106C  0E00               	movlw	0
  1575  00106E  22DD               	addwfc	postdec2,f,c
  1576  001070                     
  1577                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1578  001070  0E00               	movlw	0
  1579  001072  0100               	movlb	0	; () banked
  1580  001074  6F63               	movwf	(_width+1)& (0+255),b
  1581  001076  0E00               	movlw	0
  1582  001078  6F62               	movwf	_width& (0+255),b
  1583  00107A  C062  F051         	movff	_width,_flags
  1584  00107E  C063  F052         	movff	_width+1,_flags+1
  1585  001082                     
  1586                           ; BSR set to: 0
  1587                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1588  001082  684F               	setf	_prec^0,c
  1589  001084  6850               	setf	(_prec+1)^0,c
  1590  001086                     
  1591                           ; BSR set to: 0
  1592                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
  1593  001086  0E00               	movlw	0
  1594  001088  6FA1               	movwf	(vfpfcnvrt@done+1)& (0+255),b
  1595  00108A  0E00               	movlw	0
  1596  00108C  6FA0               	movwf	vfpfcnvrt@done& (0+255),b
  1597                           
  1598                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1599  00108E  EF91  F008         	goto	l3067
  1600  001092                     l3041:
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
  1604  001092  8051               	bsf	_flags^0,0,c
  1605  001094                     l3043:
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
  1609  001094  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1610  001098  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1611  00109C  2ADE               	incf	postinc2,f,c
  1612  00109E  0E00               	movlw	0
  1613  0010A0  22DD               	addwfc	postdec2,f,c
  1614                           
  1615                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
  1616  0010A2  EF91  F008         	goto	l3067
  1617  0010A6                     l3045:
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
  1621  0010A6  8251               	bsf	_flags^0,1,c
  1622  0010A8  EF4A  F008         	goto	l3043
  1623  0010AC                     l3049:
  1624                           
  1625                           ; BSR set to: 0
  1626                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
  1627  0010AC  8451               	bsf	_flags^0,2,c
  1628  0010AE  EF4A  F008         	goto	l3043
  1629  0010B2                     l3053:
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
  1633  0010B2  8651               	bsf	_flags^0,3,c
  1634  0010B4  EF4A  F008         	goto	l3043
  1635  0010B8                     l3057:
  1636                           
  1637                           ; BSR set to: 0
  1638                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
  1639  0010B8  8851               	bsf	_flags^0,4,c
  1640  0010BA  EF4A  F008         	goto	l3043
  1641  0010BE                     l3061:
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
  1645  0010BE  0E00               	movlw	0
  1646  0010C0  6FA1               	movwf	(vfpfcnvrt@done+1)& (0+255),b
  1647  0010C2  0E01               	movlw	1
  1648  0010C4  6FA0               	movwf	vfpfcnvrt@done& (0+255),b
  1649                           
  1650                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
  1651  0010C6  EF91  F008         	goto	l3067
  1652  0010CA                     l3065:
  1653                           
  1654                           ; BSR set to: 0
  1655  0010CA  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1656  0010CE  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1657  0010D2  CFDE FFF6          	movff	postinc2,tblptrl
  1658  0010D6  CFDD FFF7          	movff	postdec2,tblptrh
  1659  0010DA                     	if	0	;tblptru may be non-zero
  1660  0010DA                     	endif
  1661  0010DA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1662  0010DA  0E00               	movlw	low (__mediumconst shr (0+16))
  1663  0010DC  6EF8               	movwf	tblptru,c
  1664  0010DE                     	endif
  1665  0010DE  0008               	tblrd		*
  1666  0010E0  50F5               	movf	tablat,w,c
  1667  0010E2  6F94               	movwf	??_vfpfcnvrt& (0+255),b
  1668  0010E4  6B95               	clrf	(??_vfpfcnvrt+1)& (0+255),b
  1669                           
  1670                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1671                           ; Switch size 1, requested type "simple"
  1672                           ; Number of cases is 1, Range of values is 0 to 0
  1673                           ; switch strategies available:
  1674                           ; Name         Instructions Cycles
  1675                           ; simple_byte            4     3 (average)
  1676                           ;	Chosen strategy is simple_byte
  1677  0010E6  5195               	movf	(??_vfpfcnvrt+1)& (0+255),w,b
  1678  0010E8  0A00               	xorlw	0	; case 0
  1679  0010EA  B4D8               	btfsc	status,2,c
  1680  0010EC  EF7A  F008         	goto	l3323
  1681  0010F0  EF5F  F008         	goto	l3061
  1682  0010F4                     l3323:
  1683                           
  1684                           ; BSR set to: 0
  1685                           ; Switch size 1, requested type "simple"
  1686                           ; Number of cases is 5, Range of values is 32 to 48
  1687                           ; switch strategies available:
  1688                           ; Name         Instructions Cycles
  1689                           ; simple_byte           16     9 (average)
  1690                           ;	Chosen strategy is simple_byte
  1691  0010F4  5194               	movf	??_vfpfcnvrt& (0+255),w,b
  1692  0010F6  0A20               	xorlw	32	; case 32
  1693  0010F8  B4D8               	btfsc	status,2,c
  1694  0010FA  EF59  F008         	goto	l3053
  1695  0010FE  0A03               	xorlw	3	; case 35
  1696  001100  B4D8               	btfsc	status,2,c
  1697  001102  EF5C  F008         	goto	l3057
  1698  001106  0A08               	xorlw	8	; case 43
  1699  001108  B4D8               	btfsc	status,2,c
  1700  00110A  EF56  F008         	goto	l3049
  1701  00110E  0A06               	xorlw	6	; case 45
  1702  001110  B4D8               	btfsc	status,2,c
  1703  001112  EF49  F008         	goto	l3041
  1704  001116  0A1D               	xorlw	29	; case 48
  1705  001118  B4D8               	btfsc	status,2,c
  1706  00111A  EF53  F008         	goto	l3045
  1707  00111E  EF5F  F008         	goto	l3061
  1708  001122                     l3067:
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  1712  001122  51A0               	movf	vfpfcnvrt@done& (0+255),w,b
  1713  001124  11A1               	iorwf	(vfpfcnvrt@done+1)& (0+255),w,b
  1714  001126  B4D8               	btfsc	status,2,c
  1715  001128  EF98  F008         	goto	u2421
  1716  00112C  EF9A  F008         	goto	u2420
  1717  001130                     u2421:
  1718  001130  EF65  F008         	goto	l3065
  1719  001134                     u2420:
  1720  001134                     
  1721                           ; BSR set to: 0
  1722                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  1723  001134  A051               	btfss	_flags^0,0,c
  1724  001136  EF9F  F008         	goto	u2431
  1725  00113A  EFA1  F008         	goto	u2430
  1726  00113E                     u2431:
  1727  00113E  EFA2  F008         	goto	l3071
  1728  001142                     u2430:
  1729  001142                     
  1730                           ; BSR set to: 0
  1731                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  1732  001142  9251               	bcf	_flags^0,1,c
  1733  001144                     l3071:
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1737  001144  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1738  001148  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1739  00114C  CFDE FFF6          	movff	postinc2,tblptrl
  1740  001150  CFDD FFF7          	movff	postdec2,tblptrh
  1741  001154                     	if	0	;tblptru may be non-zero
  1742  001154                     	endif
  1743  001154                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1744  001154  0E00               	movlw	low (__mediumconst shr (0+16))
  1745  001156  6EF8               	movwf	tblptru,c
  1746  001158                     	endif
  1747  001158  0008               	tblrd		*
  1748  00115A  50F5               	movf	tablat,w,c
  1749  00115C  0A2A               	xorlw	42
  1750  00115E  A4D8               	btfss	status,2,c
  1751  001160  EFB4  F008         	goto	u2441
  1752  001164  EFB6  F008         	goto	u2440
  1753  001168                     u2441:
  1754  001168  EFDF  F008         	goto	l3079
  1755  00116C                     u2440:
  1756  00116C                     
  1757                           ; BSR set to: 0
  1758                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1759  00116C  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1760  001170  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1761  001174  2ADE               	incf	postinc2,f,c
  1762  001176  0E00               	movlw	0
  1763  001178  22DD               	addwfc	postdec2,f,c
  1764                           
  1765                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1766  00117A  C04B  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1767  00117E  C04C  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1768  001182  CFDF F094          	movff	indf2,??_vfpfcnvrt
  1769  001186  0E02               	movlw	2
  1770  001188  26DE               	addwf	postinc2,f,c
  1771  00118A  CFDF F095          	movff	indf2,??_vfpfcnvrt+1
  1772  00118E  0E00               	movlw	0
  1773  001190  22DD               	addwfc	postdec2,f,c
  1774  001192  C094  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1775  001196  C095  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1776  00119A  CFDE F062          	movff	postinc2,_width
  1777  00119E  CFDD F063          	movff	postdec2,_width+1
  1778  0011A2                     
  1779                           ; BSR set to: 0
  1780                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1781  0011A2  BF63               	btfsc	(_width+1)& (0+255),7,b
  1782  0011A4  EFD8  F008         	goto	u2450
  1783  0011A8  EFD6  F008         	goto	u2451
  1784  0011AC                     u2451:
  1785  0011AC  EF25  F009         	goto	l3089
  1786  0011B0                     u2450:
  1787  0011B0                     
  1788                           ; BSR set to: 0
  1789                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1790  0011B0  8051               	bsf	_flags^0,0,c
  1791                           
  1792                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1793  0011B2  6D62               	negf	_width& (0+255),b
  1794  0011B4  1F63               	comf	(_width+1)& (0+255),f,b
  1795  0011B6  B0D8               	btfsc	status,0,c
  1796  0011B8  2B63               	incf	(_width+1)& (0+255),f,b
  1797  0011BA  EF25  F009         	goto	l3089
  1798  0011BE                     l3079:
  1799                           
  1800                           ; BSR set to: 0
  1801                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1802  0011BE  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1803  0011C2  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1804  0011C6  CFDE F00F          	movff	postinc2,atoi@s
  1805  0011CA  CFDD F010          	movff	postdec2,atoi@s+1
  1806  0011CE  EC52  F00B         	call	_atoi	;wreg free
  1807  0011D2  C00F  F062         	movff	?_atoi,_width
  1808  0011D6  C010  F063         	movff	?_atoi+1,_width+1
  1809                           
  1810                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1811  0011DA  EFF6  F008         	goto	l3083
  1812  0011DE                     l3081:
  1813                           
  1814                           ; BSR set to: 0
  1815                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1816  0011DE  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1817  0011E2  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1818  0011E6  2ADE               	incf	postinc2,f,c
  1819  0011E8  0E00               	movlw	0
  1820  0011EA  22DD               	addwfc	postdec2,f,c
  1821  0011EC                     l3083:
  1822  0011EC  0ED0               	movlw	208
  1823  0011EE  0100               	movlb	0	; () banked
  1824  0011F0  6F94               	movwf	??_vfpfcnvrt& (0+255),b
  1825  0011F2  0EFF               	movlw	255
  1826  0011F4  6F95               	movwf	(??_vfpfcnvrt+1)& (0+255),b
  1827  0011F6  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1828  0011FA  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1829  0011FE  CFDE FFF6          	movff	postinc2,tblptrl
  1830  001202  CFDD FFF7          	movff	postdec2,tblptrh
  1831  001206                     	if	0	;tblptru may be non-zero
  1832  001206                     	endif
  1833  001206                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1834  001206  0E00               	movlw	low (__mediumconst shr (0+16))
  1835  001208  6EF8               	movwf	tblptru,c
  1836  00120A                     	endif
  1837  00120A  0008               	tblrd		*
  1838  00120C  50F5               	movf	tablat,w,c
  1839  00120E  6F96               	movwf	(??_vfpfcnvrt+2)& (0+255),b
  1840  001210  6B97               	clrf	(??_vfpfcnvrt+3)& (0+255),b
  1841  001212  5194               	movf	??_vfpfcnvrt& (0+255),w,b
  1842  001214  2796               	addwf	(??_vfpfcnvrt+2)& (0+255),f,b
  1843  001216  5195               	movf	(??_vfpfcnvrt+1)& (0+255),w,b
  1844  001218  2397               	addwfc	(??_vfpfcnvrt+3)& (0+255),f,b
  1845  00121A  5197               	movf	(??_vfpfcnvrt+3)& (0+255),w,b
  1846  00121C  E10A               	bnz	u2460
  1847  00121E  0E0A               	movlw	10
  1848  001220  5D96               	subwf	(??_vfpfcnvrt+2)& (0+255),w,b
  1849  001222  A0D8               	btfss	status,0,c
  1850  001224  EF16  F009         	goto	u2461
  1851  001228  EF19  F009         	goto	u2460
  1852  00122C                     u2461:
  1853  00122C  0E01               	movlw	1
  1854  00122E  EF1A  F009         	goto	u2470
  1855  001232                     u2460:
  1856  001232  0E00               	movlw	0
  1857  001234                     u2470:
  1858  001234  6FA2               	movwf	_vfpfcnvrt$736& (0+255),b
  1859  001236  6BA3               	clrf	(_vfpfcnvrt$736+1)& (0+255),b
  1860  001238                     
  1861                           ; BSR set to: 0
  1862  001238  51A2               	movf	_vfpfcnvrt$736& (0+255),w,b
  1863  00123A  11A3               	iorwf	(_vfpfcnvrt$736+1)& (0+255),w,b
  1864  00123C  A4D8               	btfss	status,2,c
  1865  00123E  EF23  F009         	goto	u2481
  1866  001242  EF25  F009         	goto	u2480
  1867  001246                     u2481:
  1868  001246  EFEF  F008         	goto	l3081
  1869  00124A                     u2480:
  1870  00124A                     l3089:
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1874  00124A  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1875  00124E  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1876  001252  CFDE FFF6          	movff	postinc2,tblptrl
  1877  001256  CFDD FFF7          	movff	postdec2,tblptrh
  1878  00125A                     	if	0	;tblptru may be non-zero
  1879  00125A                     	endif
  1880  00125A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1881  00125A  0E00               	movlw	low (__mediumconst shr (0+16))
  1882  00125C  6EF8               	movwf	tblptru,c
  1883  00125E                     	endif
  1884  00125E  0008               	tblrd		*
  1885  001260  50F5               	movf	tablat,w,c
  1886  001262  0A64               	xorlw	100
  1887  001264  B4D8               	btfsc	status,2,c
  1888  001266  EF37  F009         	goto	u2491
  1889  00126A  EF39  F009         	goto	u2490
  1890  00126E                     u2491:
  1891  00126E  EF4D  F009         	goto	l3093
  1892  001272                     u2490:
  1893  001272                     
  1894                           ; BSR set to: 0
  1895  001272  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1896  001276  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1897  00127A  CFDE FFF6          	movff	postinc2,tblptrl
  1898  00127E  CFDD FFF7          	movff	postdec2,tblptrh
  1899  001282                     	if	0	;tblptru may be non-zero
  1900  001282                     	endif
  1901  001282                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1902  001282  0E00               	movlw	low (__mediumconst shr (0+16))
  1903  001284  6EF8               	movwf	tblptru,c
  1904  001286                     	endif
  1905  001286  0008               	tblrd		*
  1906  001288  50F5               	movf	tablat,w,c
  1907  00128A  0A69               	xorlw	105
  1908  00128C  A4D8               	btfss	status,2,c
  1909  00128E  EF4B  F009         	goto	u2501
  1910  001292  EF4D  F009         	goto	u2500
  1911  001296                     u2501:
  1912  001296  EF8D  F009         	goto	l3099
  1913  00129A                     u2500:
  1914  00129A                     l3093:
  1915                           
  1916                           ; BSR set to: 0
  1917                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1918  00129A  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1919  00129E  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1920  0012A2  2ADE               	incf	postinc2,f,c
  1921  0012A4  0E00               	movlw	0
  1922  0012A6  22DD               	addwfc	postdec2,f,c
  1923                           
  1924                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1925  0012A8  C04B  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1926  0012AC  C04C  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1927  0012B0  CFDF F094          	movff	indf2,??_vfpfcnvrt
  1928  0012B4  0E02               	movlw	2
  1929  0012B6  26DE               	addwf	postinc2,f,c
  1930  0012B8  CFDF F095          	movff	indf2,??_vfpfcnvrt+1
  1931  0012BC  0E00               	movlw	0
  1932  0012BE  22DD               	addwfc	postdec2,f,c
  1933  0012C0  C094  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1934  0012C4  C095  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1935  0012C8  CFDE F098          	movff	postinc2,vfpfcnvrt@ll
  1936  0012CC  CFDD F099          	movff	postdec2,vfpfcnvrt@ll+1
  1937  0012D0  0E00               	movlw	0
  1938  0012D2  BF99               	btfsc	(vfpfcnvrt@ll+1)& (0+255),7,b
  1939  0012D4  0EFF               	movlw	-1
  1940  0012D6  6F9A               	movwf	(vfpfcnvrt@ll+2)& (0+255),b
  1941  0012D8  6F9B               	movwf	(vfpfcnvrt@ll+3)& (0+255),b
  1942  0012DA  6F9C               	movwf	(vfpfcnvrt@ll+4)& (0+255),b
  1943  0012DC  6F9D               	movwf	(vfpfcnvrt@ll+5)& (0+255),b
  1944  0012DE  6F9E               	movwf	(vfpfcnvrt@ll+6)& (0+255),b
  1945  0012E0  6F9F               	movwf	(vfpfcnvrt@ll+7)& (0+255),b
  1946  0012E2                     
  1947                           ; BSR set to: 0
  1948                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1949  0012E2  C047  F023         	movff	vfpfcnvrt@fp,dtoa@fp
  1950  0012E6  C048  F024         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1951  0012EA  C098  F025         	movff	vfpfcnvrt@ll,dtoa@d
  1952  0012EE  C099  F026         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1953  0012F2  C09A  F027         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1954  0012F6  C09B  F028         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1955  0012FA  C09C  F029         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1956  0012FE  C09D  F02A         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1957  001302  C09E  F02B         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1958  001306  C09F  F02C         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1959  00130A  ECE3  F009         	call	_dtoa	;wreg free
  1960  00130E  C023  F047         	movff	?_dtoa,?_vfpfcnvrt
  1961  001312  C024  F048         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1962  001316  EFE2  F009         	goto	l338
  1963  00131A                     l3099:
  1964                           
  1965                           ; BSR set to: 0
  1966                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1967  00131A  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1968  00131E  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1969  001322  CFDE FFF6          	movff	postinc2,tblptrl
  1970  001326  CFDD FFF7          	movff	postdec2,tblptrh
  1971  00132A                     	if	0	;tblptru may be non-zero
  1972  00132A                     	endif
  1973  00132A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1974  00132A  0E00               	movlw	low (__mediumconst shr (0+16))
  1975  00132C  6EF8               	movwf	tblptru,c
  1976  00132E                     	endif
  1977  00132E  0008               	tblrd		*
  1978  001330  50F5               	movf	tablat,w,c
  1979  001332  0A25               	xorlw	37
  1980  001334  A4D8               	btfss	status,2,c
  1981  001336  EF9F  F009         	goto	u2511
  1982  00133A  EFA1  F009         	goto	u2510
  1983  00133E                     u2511:
  1984  00133E  EFB8  F009         	goto	l3109
  1985  001342                     u2510:
  1986  001342                     
  1987                           ; BSR set to: 0
  1988                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1989  001342  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1990  001346  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1991  00134A  2ADE               	incf	postinc2,f,c
  1992  00134C  0E00               	movlw	0
  1993  00134E  22DD               	addwfc	postdec2,f,c
  1994  001350                     
  1995                           ; BSR set to: 0
  1996                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1997  001350  0E00               	movlw	0
  1998  001352  6E09               	movwf	(fputc@c+1)^0,c
  1999  001354  0E25               	movlw	37
  2000  001356  6E08               	movwf	fputc@c^0,c
  2001  001358  C047  F00A         	movff	vfpfcnvrt@fp,fputc@fp
  2002  00135C  C048  F00B         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2003  001360  ECFD  F00F         	call	_fputc	;wreg free
  2004  001364                     l3105:
  2005                           
  2006                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  2007  001364  0E00               	movlw	0
  2008  001366  6E48               	movwf	(?_vfpfcnvrt+1)^0,c
  2009  001368  0E01               	movlw	1
  2010  00136A  6E47               	movwf	?_vfpfcnvrt^0,c
  2011  00136C  EFE2  F009         	goto	l338
  2012  001370                     l3109:
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  2016  001370  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2017  001374  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2018  001378  2ADE               	incf	postinc2,f,c
  2019  00137A  0E00               	movlw	0
  2020  00137C  22DD               	addwfc	postdec2,f,c
  2021  00137E                     
  2022                           ; BSR set to: 0
  2023                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  2024  00137E  0E00               	movlw	0
  2025  001380  6E48               	movwf	(?_vfpfcnvrt+1)^0,c
  2026  001382  0E00               	movlw	0
  2027  001384  6E47               	movwf	?_vfpfcnvrt^0,c
  2028  001386  EFE2  F009         	goto	l338
  2029  00138A                     l3115:
  2030                           
  2031                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  2032  00138A  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2033  00138E  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2034  001392  CFDE FFF6          	movff	postinc2,tblptrl
  2035  001396  CFDD FFF7          	movff	postdec2,tblptrh
  2036  00139A                     	if	0	;tblptru may be non-zero
  2037  00139A                     	endif
  2038  00139A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2039  00139A  0E00               	movlw	low (__mediumconst shr (0+16))
  2040  00139C  6EF8               	movwf	tblptru,c
  2041  00139E                     	endif
  2042  00139E  0008               	tblrd		*
  2043  0013A0  50F5               	movf	tablat,w,c
  2044  0013A2  6E08               	movwf	fputc@c^0,c
  2045  0013A4  6A09               	clrf	(fputc@c+1)^0,c
  2046  0013A6  C047  F00A         	movff	vfpfcnvrt@fp,fputc@fp
  2047  0013AA  C048  F00B         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2048  0013AE  ECFD  F00F         	call	_fputc	;wreg free
  2049  0013B2                     
  2050                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  2051  0013B2  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2052  0013B6  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2053  0013BA  2ADE               	incf	postinc2,f,c
  2054  0013BC  0E00               	movlw	0
  2055  0013BE  22DD               	addwfc	postdec2,f,c
  2056  0013C0  EFB2  F009         	goto	l3105
  2057  0013C4                     l338:
  2058  0013C4  0012               	return		;funcret
  2059  0013C6                     __end_of_vfpfcnvrt:
  2060                           	opt callstack 0
  2061                           
  2062 ;; *************** function _dtoa *****************
  2063 ;; Defined at:
  2064 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  2065 ;; Parameters:    Size  Location     Type
  2066 ;;  fp              2   34[COMRAM] PTR struct _IO_FILE
  2067 ;;		 -> NULL(0), 
  2068 ;;  d               8   36[COMRAM] long long 
  2069 ;; Auto vars:     Size  Location     Type
  2070 ;;  n               8   60[COMRAM] long long 
  2071 ;;  i               2   68[COMRAM] int 
  2072 ;;  s               2   58[COMRAM] int 
  2073 ;;  w               2   56[COMRAM] int 
  2074 ;;  p               2   54[COMRAM] int 
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  2   34[COMRAM] int 
  2077 ;; Registers used:
  2078 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2079 ;; Tracked objects:
  2080 ;;		On entry : 0/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2084 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2085 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2086 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2088 ;;Total ram usage:       36 bytes
  2089 ;; Hardware stack levels used:    1
  2090 ;; Hardware stack levels required when called:    7
  2091 ;; This function calls:
  2092 ;;		___aodiv
  2093 ;;		___aomod
  2094 ;;		_abs
  2095 ;;		_pad
  2096 ;; This function is called by:
  2097 ;;		_vfpfcnvrt
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           	psect	text10
  2102  0013C6                     __ptext10:
  2103                           	opt callstack 0
  2104  0013C6                     _dtoa:
  2105                           	opt callstack 19
  2106  0013C6                     
  2107                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.10\pic\sources\c99\common\doprnt.c: 280:     n = d;
  2108  0013C6  C025  F03D         	movff	dtoa@d,dtoa@n
  2109  0013CA  C026  F03E         	movff	dtoa@d+1,dtoa@n+1
  2110  0013CE  C027  F03F         	movff	dtoa@d+2,dtoa@n+2
  2111  0013D2  C028  F040         	movff	dtoa@d+3,dtoa@n+3
  2112  0013D6  C029  F041         	movff	dtoa@d+4,dtoa@n+4
  2113  0013DA  C02A  F042         	movff	dtoa@d+5,dtoa@n+5
  2114  0013DE  C02B  F043         	movff	dtoa@d+6,dtoa@n+6
  2115  0013E2  C02C  F044         	movff	dtoa@d+7,dtoa@n+7
  2116  0013E6                     
  2117                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  2118  0013E6  BE44               	btfsc	(dtoa@n+7)^0,7,c
  2119  0013E8  EFF8  F009         	goto	u2191
  2120  0013EC  EFFB  F009         	goto	u2190
  2121  0013F0                     u2191:
  2122  0013F0  0E01               	movlw	1
  2123  0013F2  EFFC  F009         	goto	u2200
  2124  0013F6                     u2190:
  2125  0013F6  0E00               	movlw	0
  2126  0013F8                     u2200:
  2127  0013F8  6E3B               	movwf	dtoa@s^0,c
  2128  0013FA  6A3C               	clrf	(dtoa@s+1)^0,c
  2129                           
  2130                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  2131  0013FC  503B               	movf	dtoa@s^0,w,c
  2132  0013FE  103C               	iorwf	(dtoa@s+1)^0,w,c
  2133  001400  B4D8               	btfsc	status,2,c
  2134  001402  EF05  F00A         	goto	u2211
  2135  001406  EF07  F00A         	goto	u2210
  2136  00140A                     u2211:
  2137  00140A  EF17  F00A         	goto	l2933
  2138  00140E                     u2210:
  2139  00140E                     
  2140                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  2141  00140E  1E44               	comf	(dtoa@n+7)^0,f,c
  2142  001410  1E43               	comf	(dtoa@n+6)^0,f,c
  2143  001412  1E42               	comf	(dtoa@n+5)^0,f,c
  2144  001414  1E41               	comf	(dtoa@n+4)^0,f,c
  2145  001416  1E40               	comf	(dtoa@n+3)^0,f,c
  2146  001418  1E3F               	comf	(dtoa@n+2)^0,f,c
  2147  00141A  1E3E               	comf	(dtoa@n+1)^0,f,c
  2148  00141C  6C3D               	negf	dtoa@n^0,c
  2149  00141E  0E00               	movlw	0
  2150  001420  223E               	addwfc	(dtoa@n+1)^0,f,c
  2151  001422  223F               	addwfc	(dtoa@n+2)^0,f,c
  2152  001424  2240               	addwfc	(dtoa@n+3)^0,f,c
  2153  001426  2241               	addwfc	(dtoa@n+4)^0,f,c
  2154  001428  2242               	addwfc	(dtoa@n+5)^0,f,c
  2155  00142A  2243               	addwfc	(dtoa@n+6)^0,f,c
  2156  00142C  2244               	addwfc	(dtoa@n+7)^0,f,c
  2157  00142E                     l2933:
  2158                           
  2159                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  2160  00142E  BE50               	btfsc	(_prec+1)^0,7,c
  2161  001430  EF1C  F00A         	goto	u2221
  2162  001434  EF1E  F00A         	goto	u2220
  2163  001438                     u2221:
  2164  001438  EF1F  F00A         	goto	l2937
  2165  00143C                     u2220:
  2166  00143C                     
  2167                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  2168  00143C  9251               	bcf	_flags^0,1,c
  2169  00143E                     l2937:
  2170                           
  2171                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  2172  00143E  BE50               	btfsc	(_prec+1)^0,7,c
  2173  001440  EF2C  F00A         	goto	u2230
  2174  001444  5050               	movf	(_prec+1)^0,w,c
  2175  001446  E106               	bnz	u2231
  2176  001448  044F               	decf	_prec^0,w,c
  2177  00144A  B0D8               	btfsc	status,0,c
  2178  00144C  EF2A  F00A         	goto	u2231
  2179  001450  EF2C  F00A         	goto	u2230
  2180  001454                     u2231:
  2181  001454  EF32  F00A         	goto	l289
  2182  001458                     u2230:
  2183  001458  0E00               	movlw	0
  2184  00145A  6E38               	movwf	(dtoa@p+1)^0,c
  2185  00145C  0E01               	movlw	1
  2186  00145E  6E37               	movwf	dtoa@p^0,c
  2187  001460  EF36  F00A         	goto	l291
  2188  001464                     l289:
  2189  001464  C04F  F037         	movff	_prec,dtoa@p
  2190  001468  C050  F038         	movff	_prec+1,dtoa@p+1
  2191  00146C                     l291:
  2192                           
  2193                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  2194  00146C  C062  F039         	movff	_width,dtoa@w
  2195  001470  C063  F03A         	movff	_width+1,dtoa@w+1
  2196  001474                     
  2197                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  2198  001474  503B               	movf	dtoa@s^0,w,c
  2199  001476  103C               	iorwf	(dtoa@s+1)^0,w,c
  2200  001478  A4D8               	btfss	status,2,c
  2201  00147A  EF41  F00A         	goto	u2241
  2202  00147E  EF43  F00A         	goto	u2240
  2203  001482                     u2241:
  2204  001482  EF4A  F00A         	goto	l2945
  2205  001486                     u2240:
  2206  001486  A451               	btfss	_flags^0,2,c
  2207  001488  EF48  F00A         	goto	u2251
  2208  00148C  EF4A  F00A         	goto	u2250
  2209  001490                     u2251:
  2210  001490  EF4D  F00A         	goto	l2947
  2211  001494                     u2250:
  2212  001494                     l2945:
  2213                           
  2214                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  2215  001494  0639               	decf	dtoa@w^0,f,c
  2216  001496  A0D8               	btfss	status,0,c
  2217  001498  063A               	decf	(dtoa@w+1)^0,f,c
  2218  00149A                     l2947:
  2219                           
  2220                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  2221  00149A  0E00               	movlw	0
  2222  00149C  6E46               	movwf	(dtoa@i+1)^0,c
  2223  00149E  0E1F               	movlw	31
  2224  0014A0  6E45               	movwf	dtoa@i^0,c
  2225  0014A2                     
  2226                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  2227  0014A2  0E00               	movlw	0
  2228  0014A4  0100               	movlb	0	; () banked
  2229  0014A6  6F93               	movwf	(_dbuf+31)& (0+255),b
  2230                           
  2231                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2232  0014A8  EFD2  F00A         	goto	l2961
  2233  0014AC                     l2951:
  2234                           
  2235                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  2236  0014AC  0645               	decf	dtoa@i^0,f,c
  2237  0014AE  A0D8               	btfss	status,0,c
  2238  0014B0  0646               	decf	(dtoa@i+1)^0,f,c
  2239  0014B2                     
  2240                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  2241  0014B2  0E74               	movlw	low _dbuf
  2242  0014B4  2445               	addwf	dtoa@i^0,w,c
  2243  0014B6  6ED9               	movwf	fsr2l,c
  2244  0014B8  0E00               	movlw	high _dbuf
  2245  0014BA  2046               	addwfc	(dtoa@i+1)^0,w,c
  2246  0014BC  6EDA               	movwf	fsr2h,c
  2247  0014BE  C03D  F008         	movff	dtoa@n,___aomod@dividend
  2248  0014C2  C03E  F009         	movff	dtoa@n+1,___aomod@dividend+1
  2249  0014C6  C03F  F00A         	movff	dtoa@n+2,___aomod@dividend+2
  2250  0014CA  C040  F00B         	movff	dtoa@n+3,___aomod@dividend+3
  2251  0014CE  C041  F00C         	movff	dtoa@n+4,___aomod@dividend+4
  2252  0014D2  C042  F00D         	movff	dtoa@n+5,___aomod@dividend+5
  2253  0014D6  C043  F00E         	movff	dtoa@n+6,___aomod@dividend+6
  2254  0014DA  C044  F00F         	movff	dtoa@n+7,___aomod@dividend+7
  2255  0014DE  0E0A               	movlw	10
  2256  0014E0  6E10               	movwf	___aomod@divisor^0,c
  2257  0014E2  0E00               	movlw	0
  2258  0014E4  6E11               	movwf	(___aomod@divisor+1)^0,c
  2259  0014E6  0E00               	movlw	0
  2260  0014E8  6E12               	movwf	(___aomod@divisor+2)^0,c
  2261  0014EA  0E00               	movlw	0
  2262  0014EC  6E13               	movwf	(___aomod@divisor+3)^0,c
  2263  0014EE  0E00               	movlw	0
  2264  0014F0  6E14               	movwf	(___aomod@divisor+4)^0,c
  2265  0014F2  0E00               	movlw	0
  2266  0014F4  6E15               	movwf	(___aomod@divisor+5)^0,c
  2267  0014F6  0E00               	movlw	0
  2268  0014F8  6E16               	movwf	(___aomod@divisor+6)^0,c
  2269  0014FA  0E00               	movlw	0
  2270  0014FC  6E17               	movwf	(___aomod@divisor+7)^0,c
  2271  0014FE  ECE8  F00C         	call	___aomod	;wreg free
  2272  001502  C008  F02D         	movff	?___aomod,??_dtoa
  2273  001506  C009  F02E         	movff	?___aomod+1,??_dtoa+1
  2274  00150A  C00A  F02F         	movff	?___aomod+2,??_dtoa+2
  2275  00150E  C00B  F030         	movff	?___aomod+3,??_dtoa+3
  2276  001512  C00C  F031         	movff	?___aomod+4,??_dtoa+4
  2277  001516  C00D  F032         	movff	?___aomod+5,??_dtoa+5
  2278  00151A  C00E  F033         	movff	?___aomod+6,??_dtoa+6
  2279  00151E  C00F  F034         	movff	?___aomod+7,??_dtoa+7
  2280  001522  C02D  F01A         	movff	??_dtoa,abs@a
  2281  001526  C02F  F01B         	movff	??_dtoa+2,abs@a+1
  2282  00152A  ECEF  F011         	call	_abs	;wreg free
  2283  00152E  501A               	movf	?_abs^0,w,c
  2284  001530  0F30               	addlw	48
  2285  001532  6EDF               	movwf	indf2,c
  2286  001534                     
  2287                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  2288  001534  0637               	decf	dtoa@p^0,f,c
  2289  001536  A0D8               	btfss	status,0,c
  2290  001538  0638               	decf	(dtoa@p+1)^0,f,c
  2291  00153A                     
  2292                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  2293  00153A  0639               	decf	dtoa@w^0,f,c
  2294  00153C  A0D8               	btfss	status,0,c
  2295  00153E  063A               	decf	(dtoa@w+1)^0,f,c
  2296  001540                     
  2297                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  2298  001540  C03D  F008         	movff	dtoa@n,___aodiv@dividend
  2299  001544  C03E  F009         	movff	dtoa@n+1,___aodiv@dividend+1
  2300  001548  C03F  F00A         	movff	dtoa@n+2,___aodiv@dividend+2
  2301  00154C  C040  F00B         	movff	dtoa@n+3,___aodiv@dividend+3
  2302  001550  C041  F00C         	movff	dtoa@n+4,___aodiv@dividend+4
  2303  001554  C042  F00D         	movff	dtoa@n+5,___aodiv@dividend+5
  2304  001558  C043  F00E         	movff	dtoa@n+6,___aodiv@dividend+6
  2305  00155C  C044  F00F         	movff	dtoa@n+7,___aodiv@dividend+7
  2306  001560  0E0A               	movlw	10
  2307  001562  6E10               	movwf	___aodiv@divisor^0,c
  2308  001564  0E00               	movlw	0
  2309  001566  6E11               	movwf	(___aodiv@divisor+1)^0,c
  2310  001568  0E00               	movlw	0
  2311  00156A  6E12               	movwf	(___aodiv@divisor+2)^0,c
  2312  00156C  0E00               	movlw	0
  2313  00156E  6E13               	movwf	(___aodiv@divisor+3)^0,c
  2314  001570  0E00               	movlw	0
  2315  001572  6E14               	movwf	(___aodiv@divisor+4)^0,c
  2316  001574  0E00               	movlw	0
  2317  001576  6E15               	movwf	(___aodiv@divisor+5)^0,c
  2318  001578  0E00               	movlw	0
  2319  00157A  6E16               	movwf	(___aodiv@divisor+6)^0,c
  2320  00157C  0E00               	movlw	0
  2321  00157E  6E17               	movwf	(___aodiv@divisor+7)^0,c
  2322  001580  EC24  F00C         	call	___aodiv	;wreg free
  2323  001584  C008  F03D         	movff	?___aodiv,dtoa@n
  2324  001588  C009  F03E         	movff	?___aodiv+1,dtoa@n+1
  2325  00158C  C00A  F03F         	movff	?___aodiv+2,dtoa@n+2
  2326  001590  C00B  F040         	movff	?___aodiv+3,dtoa@n+3
  2327  001594  C00C  F041         	movff	?___aodiv+4,dtoa@n+4
  2328  001598  C00D  F042         	movff	?___aodiv+5,dtoa@n+5
  2329  00159C  C00E  F043         	movff	?___aodiv+6,dtoa@n+6
  2330  0015A0  C00F  F044         	movff	?___aodiv+7,dtoa@n+7
  2331  0015A4                     l2961:
  2332                           
  2333                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2334  0015A4  BE46               	btfsc	(dtoa@i+1)^0,7,c
  2335  0015A6  EFDD  F00A         	goto	u2261
  2336  0015AA  5046               	movf	(dtoa@i+1)^0,w,c
  2337  0015AC  E108               	bnz	u2260
  2338  0015AE  0445               	decf	dtoa@i^0,w,c
  2339  0015B0  A0D8               	btfss	status,0,c
  2340  0015B2  EFDD  F00A         	goto	u2261
  2341  0015B6  EFDF  F00A         	goto	u2260
  2342  0015BA                     u2261:
  2343  0015BA  EF0F  F00B         	goto	l2971
  2344  0015BE                     u2260:
  2345  0015BE  503D               	movf	dtoa@n^0,w,c
  2346  0015C0  103E               	iorwf	(dtoa@n+1)^0,w,c
  2347  0015C2  103F               	iorwf	(dtoa@n+2)^0,w,c
  2348  0015C4  1040               	iorwf	(dtoa@n+3)^0,w,c
  2349  0015C6  1041               	iorwf	(dtoa@n+4)^0,w,c
  2350  0015C8  1042               	iorwf	(dtoa@n+5)^0,w,c
  2351  0015CA  1043               	iorwf	(dtoa@n+6)^0,w,c
  2352  0015CC  1044               	iorwf	(dtoa@n+7)^0,w,c
  2353  0015CE  A4D8               	btfss	status,2,c
  2354  0015D0  EFEC  F00A         	goto	u2271
  2355  0015D4  EFEE  F00A         	goto	u2270
  2356  0015D8                     u2271:
  2357  0015D8  EF56  F00A         	goto	l2951
  2358  0015DC                     u2270:
  2359  0015DC  BE38               	btfsc	(dtoa@p+1)^0,7,c
  2360  0015DE  EFFB  F00A         	goto	u2280
  2361  0015E2  5038               	movf	(dtoa@p+1)^0,w,c
  2362  0015E4  E106               	bnz	u2281
  2363  0015E6  0437               	decf	dtoa@p^0,w,c
  2364  0015E8  B0D8               	btfsc	status,0,c
  2365  0015EA  EFF9  F00A         	goto	u2281
  2366  0015EE  EFFB  F00A         	goto	u2280
  2367  0015F2                     u2281:
  2368  0015F2  EF56  F00A         	goto	l2951
  2369  0015F6                     u2280:
  2370  0015F6  BE3A               	btfsc	(dtoa@w+1)^0,7,c
  2371  0015F8  EF06  F00B         	goto	u2291
  2372  0015FC  503A               	movf	(dtoa@w+1)^0,w,c
  2373  0015FE  E108               	bnz	u2290
  2374  001600  0439               	decf	dtoa@w^0,w,c
  2375  001602  A0D8               	btfss	status,0,c
  2376  001604  EF06  F00B         	goto	u2291
  2377  001608  EF08  F00B         	goto	u2290
  2378  00160C                     u2291:
  2379  00160C  EF0F  F00B         	goto	l2971
  2380  001610                     u2290:
  2381  001610  B251               	btfsc	_flags^0,1,c
  2382  001612  EF0D  F00B         	goto	u2301
  2383  001616  EF0F  F00B         	goto	u2300
  2384  00161A                     u2301:
  2385  00161A  EF56  F00A         	goto	l2951
  2386  00161E                     u2300:
  2387  00161E                     l2971:
  2388                           
  2389                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  2390  00161E  503B               	movf	dtoa@s^0,w,c
  2391  001620  103C               	iorwf	(dtoa@s+1)^0,w,c
  2392  001622  A4D8               	btfss	status,2,c
  2393  001624  EF16  F00B         	goto	u2311
  2394  001628  EF18  F00B         	goto	u2310
  2395  00162C                     u2311:
  2396  00162C  EF1F  F00B         	goto	l2975
  2397  001630                     u2310:
  2398  001630  A451               	btfss	_flags^0,2,c
  2399  001632  EF1D  F00B         	goto	u2321
  2400  001636  EF1F  F00B         	goto	u2320
  2401  00163A                     u2321:
  2402  00163A  EF3D  F00B         	goto	l2985
  2403  00163E                     u2320:
  2404  00163E                     l2975:
  2405                           
  2406                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  2407  00163E  0645               	decf	dtoa@i^0,f,c
  2408  001640  A0D8               	btfss	status,0,c
  2409  001642  0646               	decf	(dtoa@i+1)^0,f,c
  2410  001644                     
  2411                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  2412  001644  503B               	movf	dtoa@s^0,w,c
  2413  001646  103C               	iorwf	(dtoa@s+1)^0,w,c
  2414  001648  A4D8               	btfss	status,2,c
  2415  00164A  EF29  F00B         	goto	u2331
  2416  00164E  EF2B  F00B         	goto	u2330
  2417  001652                     u2331:
  2418  001652  EF31  F00B         	goto	l2981
  2419  001656                     u2330:
  2420  001656  0E00               	movlw	0
  2421  001658  6E36               	movwf	(_dtoa$721+1)^0,c
  2422  00165A  0E2B               	movlw	43
  2423  00165C  6E35               	movwf	_dtoa$721^0,c
  2424  00165E  EF35  F00B         	goto	l2983
  2425  001662                     l2981:
  2426  001662  0E00               	movlw	0
  2427  001664  6E36               	movwf	(_dtoa$721+1)^0,c
  2428  001666  0E2D               	movlw	45
  2429  001668  6E35               	movwf	_dtoa$721^0,c
  2430  00166A                     l2983:
  2431  00166A  0E74               	movlw	low _dbuf
  2432  00166C  2445               	addwf	dtoa@i^0,w,c
  2433  00166E  6ED9               	movwf	fsr2l,c
  2434  001670  0E00               	movlw	high _dbuf
  2435  001672  2046               	addwfc	(dtoa@i+1)^0,w,c
  2436  001674  6EDA               	movwf	fsr2h,c
  2437  001676  C035  FFDF         	movff	_dtoa$721,indf2
  2438  00167A                     l2985:
  2439                           
  2440                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  2441  00167A  C023  F018         	movff	dtoa@fp,pad@fp
  2442  00167E  C024  F019         	movff	dtoa@fp+1,pad@fp+1
  2443  001682  0E74               	movlw	low _dbuf
  2444  001684  2445               	addwf	dtoa@i^0,w,c
  2445  001686  6E1A               	movwf	pad@buf^0,c
  2446  001688  0E00               	movlw	high _dbuf
  2447  00168A  2046               	addwfc	(dtoa@i+1)^0,w,c
  2448  00168C  6E1B               	movwf	(pad@buf+1)^0,c
  2449  00168E  C039  F01C         	movff	dtoa@w,pad@p
  2450  001692  C03A  F01D         	movff	dtoa@w+1,pad@p+1
  2451  001696  ECEB  F00E         	call	_pad	;wreg free
  2452  00169A  C018  F023         	movff	?_pad,?_dtoa
  2453  00169E  C019  F024         	movff	?_pad+1,?_dtoa+1
  2454  0016A2  0012               	return		;funcret
  2455  0016A4                     __end_of_dtoa:
  2456                           	opt callstack 0
  2457                           
  2458 ;; *************** function _pad *****************
  2459 ;; Defined at:
  2460 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  2461 ;; Parameters:    Size  Location     Type
  2462 ;;  fp              2   23[COMRAM] PTR struct _IO_FILE
  2463 ;;		 -> NULL(0), 
  2464 ;;  buf             2   25[COMRAM] PTR unsigned char 
  2465 ;;		 -> dbuf(32), 
  2466 ;;  p               2   27[COMRAM] int 
  2467 ;; Auto vars:     Size  Location     Type
  2468 ;;  w               2   32[COMRAM] int 
  2469 ;;  i               2   30[COMRAM] int 
  2470 ;; Return value:  Size  Location     Type
  2471 ;;                  2   23[COMRAM] int 
  2472 ;; Registers used:
  2473 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2474 ;; Tracked objects:
  2475 ;;		On entry : 0/0
  2476 ;;		On exit  : 0/0
  2477 ;;		Unchanged: 0/0
  2478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2479 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2480 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2481 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2482 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2483 ;;Total ram usage:       11 bytes
  2484 ;; Hardware stack levels used:    1
  2485 ;; Hardware stack levels required when called:    6
  2486 ;; This function calls:
  2487 ;;		_fputc
  2488 ;;		_fputs
  2489 ;;		_strlen
  2490 ;; This function is called by:
  2491 ;;		_dtoa
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495                           	psect	text11
  2496  001DD6                     __ptext11:
  2497                           	opt callstack 0
  2498  001DD6                     _pad:
  2499                           	opt callstack 19
  2500  001DD6                     
  2501                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  2502  001DD6  A051               	btfss	_flags^0,0,c
  2503  001DD8  EFF0  F00E         	goto	u1971
  2504  001DDC  EFF2  F00E         	goto	u1970
  2505  001DE0                     u1971:
  2506  001DE0  EFFC  F00E         	goto	l2803
  2507  001DE4                     u1970:
  2508  001DE4                     
  2509                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  2510  001DE4  C01A  F011         	movff	pad@buf,fputs@s
  2511  001DE8  C01B  F012         	movff	pad@buf+1,fputs@s+1
  2512  001DEC  C018  F013         	movff	pad@fp,fputs@fp
  2513  001DF0  C019  F014         	movff	pad@fp+1,fputs@fp+1
  2514  001DF4  ECCD  F011         	call	_fputs	;wreg free
  2515  001DF8                     l2803:
  2516                           
  2517                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  2518  001DF8  BE1D               	btfsc	(pad@p+1)^0,7,c
  2519  001DFA  EF01  F00F         	goto	u1981
  2520  001DFE  EF03  F00F         	goto	u1980
  2521  001E02                     u1981:
  2522  001E02  EF09  F00F         	goto	l2807
  2523  001E06                     u1980:
  2524  001E06  C01C  F021         	movff	pad@p,pad@w
  2525  001E0A  C01D  F022         	movff	pad@p+1,pad@w+1
  2526  001E0E  EF0D  F00F         	goto	l278
  2527  001E12                     l2807:
  2528  001E12  0E00               	movlw	0
  2529  001E14  6E22               	movwf	(pad@w+1)^0,c
  2530  001E16  0E00               	movlw	0
  2531  001E18  6E21               	movwf	pad@w^0,c
  2532  001E1A                     l278:
  2533                           
  2534                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  2535  001E1A  0E00               	movlw	0
  2536  001E1C  6E20               	movwf	(pad@i+1)^0,c
  2537  001E1E  0E00               	movlw	0
  2538  001E20  6E1F               	movwf	pad@i^0,c
  2539                           
  2540                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2541  001E22  EF1F  F00F         	goto	l2813
  2542  001E26                     l2809:
  2543                           
  2544                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  2545  001E26  0E00               	movlw	0
  2546  001E28  6E09               	movwf	(fputc@c+1)^0,c
  2547  001E2A  0E20               	movlw	32
  2548  001E2C  6E08               	movwf	fputc@c^0,c
  2549  001E2E  C018  F00A         	movff	pad@fp,fputc@fp
  2550  001E32  C019  F00B         	movff	pad@fp+1,fputc@fp+1
  2551  001E36  ECFD  F00F         	call	_fputc	;wreg free
  2552  001E3A                     
  2553                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  2554  001E3A  4A1F               	infsnz	pad@i^0,f,c
  2555  001E3C  2A20               	incf	(pad@i+1)^0,f,c
  2556  001E3E                     l2813:
  2557                           
  2558                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2559  001E3E  5021               	movf	pad@w^0,w,c
  2560  001E40  5C1F               	subwf	pad@i^0,w,c
  2561  001E42  5020               	movf	(pad@i+1)^0,w,c
  2562  001E44  0A80               	xorlw	128
  2563  001E46  6E1E               	movwf	??_pad^0,c
  2564  001E48  5022               	movf	(pad@w+1)^0,w,c
  2565  001E4A  0A80               	xorlw	128
  2566  001E4C  581E               	subwfb	??_pad^0,w,c
  2567  001E4E  A0D8               	btfss	status,0,c
  2568  001E50  EF2C  F00F         	goto	u1991
  2569  001E54  EF2E  F00F         	goto	u1990
  2570  001E58                     u1991:
  2571  001E58  EF13  F00F         	goto	l2809
  2572  001E5C                     u1990:
  2573  001E5C                     
  2574                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  2575  001E5C  B051               	btfsc	_flags^0,0,c
  2576  001E5E  EF33  F00F         	goto	u2001
  2577  001E62  EF35  F00F         	goto	u2000
  2578  001E66                     u2001:
  2579  001E66  EF3F  F00F         	goto	l2817
  2580  001E6A                     u2000:
  2581  001E6A                     
  2582                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  2583  001E6A  C01A  F011         	movff	pad@buf,fputs@s
  2584  001E6E  C01B  F012         	movff	pad@buf+1,fputs@s+1
  2585  001E72  C018  F013         	movff	pad@fp,fputs@fp
  2586  001E76  C019  F014         	movff	pad@fp+1,fputs@fp+1
  2587  001E7A  ECCD  F011         	call	_fputs	;wreg free
  2588  001E7E                     l2817:
  2589                           
  2590                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  2591  001E7E  C01A  F008         	movff	pad@buf,strlen@s
  2592  001E82  C01B  F009         	movff	pad@buf+1,strlen@s+1
  2593  001E86  EC67  F012         	call	_strlen	;wreg free
  2594  001E8A  5021               	movf	pad@w^0,w,c
  2595  001E8C  2408               	addwf	?_strlen^0,w,c
  2596  001E8E  6E18               	movwf	?_pad^0,c
  2597  001E90  5022               	movf	(pad@w+1)^0,w,c
  2598  001E92  2009               	addwfc	(?_strlen+1)^0,w,c
  2599  001E94  6E19               	movwf	(?_pad+1)^0,c
  2600  001E96  0012               	return		;funcret
  2601  001E98                     __end_of_pad:
  2602                           	opt callstack 0
  2603                           
  2604 ;; *************** function _strlen *****************
  2605 ;; Defined at:
  2606 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;  s               2    7[COMRAM] PTR const unsigned char 
  2609 ;;		 -> dbuf(32), 
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;  a               2    9[COMRAM] PTR const unsigned char 
  2612 ;;		 -> dbuf(32), 
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  2    7[COMRAM] unsigned int 
  2615 ;; Registers used:
  2616 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2622 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2623 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2625 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2626 ;;Total ram usage:        4 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    3
  2629 ;; This function calls:
  2630 ;;		Nothing
  2631 ;; This function is called by:
  2632 ;;		_pad
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           	psect	text12
  2637  0024CE                     __ptext12:
  2638                           	opt callstack 0
  2639  0024CE                     _strlen:
  2640                           	opt callstack 21
  2641  0024CE  C008  F00A         	movff	strlen@s,strlen@a
  2642  0024D2  C009  F00B         	movff	strlen@s+1,strlen@a+1
  2643  0024D6  EF6F  F012         	goto	l2793
  2644  0024DA                     l2791:
  2645  0024DA  4A08               	infsnz	strlen@s^0,f,c
  2646  0024DC  2A09               	incf	(strlen@s+1)^0,f,c
  2647  0024DE                     l2793:
  2648  0024DE  C008  FFD9         	movff	strlen@s,fsr2l
  2649  0024E2  C009  FFDA         	movff	strlen@s+1,fsr2h
  2650  0024E6  50DF               	movf	indf2,w,c
  2651  0024E8  A4D8               	btfss	status,2,c
  2652  0024EA  EF79  F012         	goto	u1961
  2653  0024EE  EF7B  F012         	goto	u1960
  2654  0024F2                     u1961:
  2655  0024F2  EF6D  F012         	goto	l2791
  2656  0024F6                     u1960:
  2657  0024F6  500A               	movf	strlen@a^0,w,c
  2658  0024F8  5C08               	subwf	strlen@s^0,w,c
  2659  0024FA  6E08               	movwf	?_strlen^0,c
  2660  0024FC  500B               	movf	(strlen@a+1)^0,w,c
  2661  0024FE  5809               	subwfb	(strlen@s+1)^0,w,c
  2662  002500  6E09               	movwf	(?_strlen+1)^0,c
  2663  002502  0012               	return		;funcret
  2664  002504                     __end_of_strlen:
  2665                           	opt callstack 0
  2666                           
  2667 ;; *************** function _fputs *****************
  2668 ;; Defined at:
  2669 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputs.c"
  2670 ;; Parameters:    Size  Location     Type
  2671 ;;  s               2   16[COMRAM] PTR const unsigned char 
  2672 ;;		 -> dbuf(32), 
  2673 ;;  fp              2   18[COMRAM] PTR struct _IO_FILE
  2674 ;;		 -> NULL(0), 
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;  i               2   21[COMRAM] int 
  2677 ;;  c               1   20[COMRAM] unsigned char 
  2678 ;; Return value:  Size  Location     Type
  2679 ;;                  2   16[COMRAM] int 
  2680 ;; Registers used:
  2681 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2687 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2688 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2690 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2691 ;;Total ram usage:        7 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; Hardware stack levels required when called:    5
  2694 ;; This function calls:
  2695 ;;		_fputc
  2696 ;; This function is called by:
  2697 ;;		_pad
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           	psect	text13
  2702  00239A                     __ptext13:
  2703                           	opt callstack 0
  2704  00239A                     _fputs:
  2705                           	opt callstack 19
  2706  00239A  0E00               	movlw	0
  2707  00239C  6E17               	movwf	(fputs@i+1)^0,c
  2708  00239E  0E00               	movlw	0
  2709  0023A0  6E16               	movwf	fputs@i^0,c
  2710  0023A2  EFDE  F011         	goto	l2787
  2711  0023A6                     l2783:
  2712  0023A6  C015  F008         	movff	fputs@c,fputc@c
  2713  0023AA  6A09               	clrf	(fputc@c+1)^0,c
  2714  0023AC  C013  F00A         	movff	fputs@fp,fputc@fp
  2715  0023B0  C014  F00B         	movff	fputs@fp+1,fputc@fp+1
  2716  0023B4  ECFD  F00F         	call	_fputc	;wreg free
  2717  0023B8  4A16               	infsnz	fputs@i^0,f,c
  2718  0023BA  2A17               	incf	(fputs@i+1)^0,f,c
  2719  0023BC                     l2787:
  2720  0023BC  5016               	movf	fputs@i^0,w,c
  2721  0023BE  2411               	addwf	fputs@s^0,w,c
  2722  0023C0  6ED9               	movwf	fsr2l,c
  2723  0023C2  5017               	movf	(fputs@i+1)^0,w,c
  2724  0023C4  2012               	addwfc	(fputs@s+1)^0,w,c
  2725  0023C6  6EDA               	movwf	fsr2h,c
  2726  0023C8  50DF               	movf	indf2,w,c
  2727  0023CA  6E15               	movwf	fputs@c^0,c
  2728  0023CC  5015               	movf	fputs@c^0,w,c
  2729  0023CE  A4D8               	btfss	status,2,c
  2730  0023D0  EFEC  F011         	goto	u1951
  2731  0023D4  EFEE  F011         	goto	u1950
  2732  0023D8                     u1951:
  2733  0023D8  EFD3  F011         	goto	l2783
  2734  0023DC                     u1950:
  2735  0023DC  0012               	return		;funcret
  2736  0023DE                     __end_of_fputs:
  2737                           	opt callstack 0
  2738                           
  2739 ;; *************** function _fputc *****************
  2740 ;; Defined at:
  2741 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputc.c"
  2742 ;; Parameters:    Size  Location     Type
  2743 ;;  c               2    7[COMRAM] int 
  2744 ;;  fp              2    9[COMRAM] PTR struct _IO_FILE
  2745 ;;		 -> NULL(0), 
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;		None
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  2    7[COMRAM] int 
  2750 ;; Registers used:
  2751 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2757 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2760 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;Total ram usage:        9 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; Hardware stack levels required when called:    4
  2764 ;; This function calls:
  2765 ;;		_putch
  2766 ;; This function is called by:
  2767 ;;		_pad
  2768 ;;		_vfpfcnvrt
  2769 ;;		_fputs
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           	psect	text14
  2774  001FFA                     __ptext14:
  2775                           	opt callstack 0
  2776  001FFA                     _fputc:
  2777                           	opt callstack 22
  2778  001FFA  500A               	movf	fputc@fp^0,w,c
  2779  001FFC  100B               	iorwf	(fputc@fp+1)^0,w,c
  2780  001FFE  B4D8               	btfsc	status,2,c
  2781  002000  EF04  F010         	goto	u1911
  2782  002004  EF06  F010         	goto	u1910
  2783  002008                     u1911:
  2784  002008  EF0F  F010         	goto	l2771
  2785  00200C                     u1910:
  2786  00200C  500A               	movf	fputc@fp^0,w,c
  2787  00200E  100B               	iorwf	(fputc@fp+1)^0,w,c
  2788  002010  A4D8               	btfss	status,2,c
  2789  002012  EF0D  F010         	goto	u1921
  2790  002016  EF0F  F010         	goto	u1920
  2791  00201A                     u1921:
  2792  00201A  EF14  F010         	goto	l2773
  2793  00201E                     u1920:
  2794  00201E                     l2771:
  2795  00201E  5008               	movf	fputc@c^0,w,c
  2796  002020  ECD8  F012         	call	_putch
  2797  002024  EF47  F010         	goto	l1083
  2798  002028                     l2773:
  2799  002028  EE20 F004          	lfsr	2,4
  2800  00202C  500A               	movf	fputc@fp^0,w,c
  2801  00202E  26D9               	addwf	fsr2l,f,c
  2802  002030  500B               	movf	(fputc@fp+1)^0,w,c
  2803  002032  22DA               	addwfc	fsr2h,f,c
  2804  002034  50DE               	movf	postinc2,w,c
  2805  002036  10DE               	iorwf	postinc2,w,c
  2806  002038  B4D8               	btfsc	status,2,c
  2807  00203A  EF21  F010         	goto	u1931
  2808  00203E  EF23  F010         	goto	u1930
  2809  002042                     u1931:
  2810  002042  EF3E  F010         	goto	l2777
  2811  002046                     u1930:
  2812  002046  EE20 F004          	lfsr	2,4
  2813  00204A  500A               	movf	fputc@fp^0,w,c
  2814  00204C  26D9               	addwf	fsr2l,f,c
  2815  00204E  500B               	movf	(fputc@fp+1)^0,w,c
  2816  002050  22DA               	addwfc	fsr2h,f,c
  2817  002052  EE10 F002          	lfsr	1,2
  2818  002056  500A               	movf	fputc@fp^0,w,c
  2819  002058  26E1               	addwf	fsr1l,f,c
  2820  00205A  500B               	movf	(fputc@fp+1)^0,w,c
  2821  00205C  22E2               	addwfc	fsr1h,f,c
  2822  00205E  50DE               	movf	postinc2,w,c
  2823  002060  5CE6               	subwf	postinc1,w,c
  2824  002062  50E6               	movf	postinc1,w,c
  2825  002064  0A80               	xorlw	128
  2826  002066  6E10               	movwf	(??_fputc+4)^0,c
  2827  002068  50DE               	movf	postinc2,w,c
  2828  00206A  0A80               	xorlw	128
  2829  00206C  5810               	subwfb	(??_fputc+4)^0,w,c
  2830  00206E  B0D8               	btfsc	status,0,c
  2831  002070  EF3C  F010         	goto	u1941
  2832  002074  EF3E  F010         	goto	u1940
  2833  002078                     u1941:
  2834  002078  EF47  F010         	goto	l1083
  2835  00207C                     u1940:
  2836  00207C                     l2777:
  2837  00207C  EE20 F002          	lfsr	2,2
  2838  002080  500A               	movf	fputc@fp^0,w,c
  2839  002082  26D9               	addwf	fsr2l,f,c
  2840  002084  500B               	movf	(fputc@fp+1)^0,w,c
  2841  002086  22DA               	addwfc	fsr2h,f,c
  2842  002088  2ADE               	incf	postinc2,f,c
  2843  00208A  0E00               	movlw	0
  2844  00208C  22DD               	addwfc	postdec2,f,c
  2845  00208E                     l1083:
  2846  00208E  0012               	return		;funcret
  2847  002090                     __end_of_fputc:
  2848                           	opt callstack 0
  2849                           
  2850 ;; *************** function _putch *****************
  2851 ;; Defined at:
  2852 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\putch.c"
  2853 ;; Parameters:    Size  Location     Type
  2854 ;;  c               1    wreg     unsigned char 
  2855 ;; Auto vars:     Size  Location     Type
  2856 ;;  c               1    0[COMRAM] unsigned char 
  2857 ;; Return value:  Size  Location     Type
  2858 ;;                  1    wreg      void 
  2859 ;; Registers used:
  2860 ;;		wreg
  2861 ;; Tracked objects:
  2862 ;;		On entry : 0/0
  2863 ;;		On exit  : 0/0
  2864 ;;		Unchanged: 0/0
  2865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2870 ;;Total ram usage:        0 bytes
  2871 ;; Hardware stack levels used:    1
  2872 ;; Hardware stack levels required when called:    3
  2873 ;; This function calls:
  2874 ;;		Nothing
  2875 ;; This function is called by:
  2876 ;;		_fputc
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           	psect	text15
  2881  0025B0                     __ptext15:
  2882                           	opt callstack 0
  2883  0025B0                     _putch:
  2884                           	opt callstack 22
  2885  0025B0  0012               	return		;funcret
  2886  0025B2                     __end_of_putch:
  2887                           	opt callstack 0
  2888                           
  2889 ;; *************** function _abs *****************
  2890 ;; Defined at:
  2891 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\abs.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;  a               2   25[COMRAM] int 
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;		None
  2896 ;; Return value:  Size  Location     Type
  2897 ;;                  2   25[COMRAM] int 
  2898 ;; Registers used:
  2899 ;;		wreg, status,2, status,0
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2905 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;Total ram usage:        4 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:    3
  2912 ;; This function calls:
  2913 ;;		Nothing
  2914 ;; This function is called by:
  2915 ;;		_dtoa
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           	psect	text16
  2920  0023DE                     __ptext16:
  2921                           	opt callstack 0
  2922  0023DE                     _abs:
  2923                           	opt callstack 22
  2924  0023DE  BE1B               	btfsc	(abs@a+1)^0,7,c
  2925  0023E0  EFFC  F011         	goto	u2010
  2926  0023E4  501B               	movf	(abs@a+1)^0,w,c
  2927  0023E6  E106               	bnz	u2011
  2928  0023E8  041A               	decf	abs@a^0,w,c
  2929  0023EA  B0D8               	btfsc	status,0,c
  2930  0023EC  EFFA  F011         	goto	u2011
  2931  0023F0  EFFC  F011         	goto	u2010
  2932  0023F4                     u2011:
  2933  0023F4  EF0A  F012         	goto	l1023
  2934  0023F8                     u2010:
  2935  0023F8  C01A  F01C         	movff	abs@a,??_abs
  2936  0023FC  C01B  F01D         	movff	abs@a+1,??_abs+1
  2937  002400  1E1C               	comf	??_abs^0,f,c
  2938  002402  1E1D               	comf	(??_abs+1)^0,f,c
  2939  002404  4A1C               	infsnz	??_abs^0,f,c
  2940  002406  2A1D               	incf	(??_abs+1)^0,f,c
  2941  002408  C01C  F01A         	movff	??_abs,?_abs
  2942  00240C  C01D  F01B         	movff	??_abs+1,?_abs+1
  2943  002410  EF0E  F012         	goto	l1026
  2944  002414                     l1023:
  2945  002414  C01A  F01A         	movff	abs@a,?_abs
  2946  002418  C01B  F01B         	movff	abs@a+1,?_abs+1
  2947  00241C                     l1026:
  2948  00241C  0012               	return		;funcret
  2949  00241E                     __end_of_abs:
  2950                           	opt callstack 0
  2951                           
  2952 ;; *************** function ___aomod *****************
  2953 ;; Defined at:
  2954 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aomod.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;  dividend        8    7[COMRAM] long long 
  2957 ;;  divisor         8   15[COMRAM] long long 
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;  sign            1   24[COMRAM] unsigned char 
  2960 ;;  counter         1   23[COMRAM] unsigned char 
  2961 ;; Return value:  Size  Location     Type
  2962 ;;                  8    7[COMRAM] long long 
  2963 ;; Registers used:
  2964 ;;		wreg, status,2, status,0
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2970 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2973 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2974 ;;Total ram usage:       18 bytes
  2975 ;; Hardware stack levels used:    1
  2976 ;; Hardware stack levels required when called:    3
  2977 ;; This function calls:
  2978 ;;		Nothing
  2979 ;; This function is called by:
  2980 ;;		_dtoa
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           	psect	text17
  2985  0019D0                     __ptext17:
  2986                           	opt callstack 0
  2987  0019D0                     ___aomod:
  2988                           	opt callstack 22
  2989  0019D0  0E00               	movlw	0
  2990  0019D2  6E19               	movwf	___aomod@sign^0,c
  2991  0019D4  BE0F               	btfsc	(___aomod@dividend+7)^0,7,c
  2992  0019D6  EFF1  F00C         	goto	u2110
  2993  0019DA  EFEF  F00C         	goto	u2111
  2994  0019DE                     u2111:
  2995  0019DE  EF03  F00D         	goto	l2887
  2996  0019E2                     u2110:
  2997  0019E2  1E0F               	comf	(___aomod@dividend+7)^0,f,c
  2998  0019E4  1E0E               	comf	(___aomod@dividend+6)^0,f,c
  2999  0019E6  1E0D               	comf	(___aomod@dividend+5)^0,f,c
  3000  0019E8  1E0C               	comf	(___aomod@dividend+4)^0,f,c
  3001  0019EA  1E0B               	comf	(___aomod@dividend+3)^0,f,c
  3002  0019EC  1E0A               	comf	(___aomod@dividend+2)^0,f,c
  3003  0019EE  1E09               	comf	(___aomod@dividend+1)^0,f,c
  3004  0019F0  6C08               	negf	___aomod@dividend^0,c
  3005  0019F2  0E00               	movlw	0
  3006  0019F4  2209               	addwfc	(___aomod@dividend+1)^0,f,c
  3007  0019F6  220A               	addwfc	(___aomod@dividend+2)^0,f,c
  3008  0019F8  220B               	addwfc	(___aomod@dividend+3)^0,f,c
  3009  0019FA  220C               	addwfc	(___aomod@dividend+4)^0,f,c
  3010  0019FC  220D               	addwfc	(___aomod@dividend+5)^0,f,c
  3011  0019FE  220E               	addwfc	(___aomod@dividend+6)^0,f,c
  3012  001A00  220F               	addwfc	(___aomod@dividend+7)^0,f,c
  3013  001A02  0E01               	movlw	1
  3014  001A04  6E19               	movwf	___aomod@sign^0,c
  3015  001A06                     l2887:
  3016  001A06  BE17               	btfsc	(___aomod@divisor+7)^0,7,c
  3017  001A08  EF0A  F00D         	goto	u2120
  3018  001A0C  EF08  F00D         	goto	u2121
  3019  001A10                     u2121:
  3020  001A10  EF1A  F00D         	goto	l2891
  3021  001A14                     u2120:
  3022  001A14  1E17               	comf	(___aomod@divisor+7)^0,f,c
  3023  001A16  1E16               	comf	(___aomod@divisor+6)^0,f,c
  3024  001A18  1E15               	comf	(___aomod@divisor+5)^0,f,c
  3025  001A1A  1E14               	comf	(___aomod@divisor+4)^0,f,c
  3026  001A1C  1E13               	comf	(___aomod@divisor+3)^0,f,c
  3027  001A1E  1E12               	comf	(___aomod@divisor+2)^0,f,c
  3028  001A20  1E11               	comf	(___aomod@divisor+1)^0,f,c
  3029  001A22  6C10               	negf	___aomod@divisor^0,c
  3030  001A24  0E00               	movlw	0
  3031  001A26  2211               	addwfc	(___aomod@divisor+1)^0,f,c
  3032  001A28  2212               	addwfc	(___aomod@divisor+2)^0,f,c
  3033  001A2A  2213               	addwfc	(___aomod@divisor+3)^0,f,c
  3034  001A2C  2214               	addwfc	(___aomod@divisor+4)^0,f,c
  3035  001A2E  2215               	addwfc	(___aomod@divisor+5)^0,f,c
  3036  001A30  2216               	addwfc	(___aomod@divisor+6)^0,f,c
  3037  001A32  2217               	addwfc	(___aomod@divisor+7)^0,f,c
  3038  001A34                     l2891:
  3039  001A34  5010               	movf	___aomod@divisor^0,w,c
  3040  001A36  1011               	iorwf	(___aomod@divisor+1)^0,w,c
  3041  001A38  1012               	iorwf	(___aomod@divisor+2)^0,w,c
  3042  001A3A  1013               	iorwf	(___aomod@divisor+3)^0,w,c
  3043  001A3C  1014               	iorwf	(___aomod@divisor+4)^0,w,c
  3044  001A3E  1015               	iorwf	(___aomod@divisor+5)^0,w,c
  3045  001A40  1016               	iorwf	(___aomod@divisor+6)^0,w,c
  3046  001A42  1017               	iorwf	(___aomod@divisor+7)^0,w,c
  3047  001A44  B4D8               	btfsc	status,2,c
  3048  001A46  EF27  F00D         	goto	u2131
  3049  001A4A  EF29  F00D         	goto	u2130
  3050  001A4E                     u2131:
  3051  001A4E  EF71  F00D         	goto	l2907
  3052  001A52                     u2130:
  3053  001A52  0E01               	movlw	1
  3054  001A54  6E18               	movwf	___aomod@counter^0,c
  3055  001A56  EF37  F00D         	goto	l2897
  3056  001A5A                     l2895:
  3057  001A5A  90D8               	bcf	status,0,c
  3058  001A5C  3610               	rlcf	___aomod@divisor^0,f,c
  3059  001A5E  3611               	rlcf	(___aomod@divisor+1)^0,f,c
  3060  001A60  3612               	rlcf	(___aomod@divisor+2)^0,f,c
  3061  001A62  3613               	rlcf	(___aomod@divisor+3)^0,f,c
  3062  001A64  3614               	rlcf	(___aomod@divisor+4)^0,f,c
  3063  001A66  3615               	rlcf	(___aomod@divisor+5)^0,f,c
  3064  001A68  3616               	rlcf	(___aomod@divisor+6)^0,f,c
  3065  001A6A  3617               	rlcf	(___aomod@divisor+7)^0,f,c
  3066  001A6C  2A18               	incf	___aomod@counter^0,f,c
  3067  001A6E                     l2897:
  3068  001A6E  AE17               	btfss	(___aomod@divisor+7)^0,7,c
  3069  001A70  EF3C  F00D         	goto	u2141
  3070  001A74  EF3E  F00D         	goto	u2140
  3071  001A78                     u2141:
  3072  001A78  EF2D  F00D         	goto	l2895
  3073  001A7C                     u2140:
  3074  001A7C                     l2899:
  3075  001A7C  5010               	movf	___aomod@divisor^0,w,c
  3076  001A7E  5C08               	subwf	___aomod@dividend^0,w,c
  3077  001A80  5011               	movf	(___aomod@divisor+1)^0,w,c
  3078  001A82  5809               	subwfb	(___aomod@dividend+1)^0,w,c
  3079  001A84  5012               	movf	(___aomod@divisor+2)^0,w,c
  3080  001A86  580A               	subwfb	(___aomod@dividend+2)^0,w,c
  3081  001A88  5013               	movf	(___aomod@divisor+3)^0,w,c
  3082  001A8A  580B               	subwfb	(___aomod@dividend+3)^0,w,c
  3083  001A8C  5014               	movf	(___aomod@divisor+4)^0,w,c
  3084  001A8E  580C               	subwfb	(___aomod@dividend+4)^0,w,c
  3085  001A90  5015               	movf	(___aomod@divisor+5)^0,w,c
  3086  001A92  580D               	subwfb	(___aomod@dividend+5)^0,w,c
  3087  001A94  5016               	movf	(___aomod@divisor+6)^0,w,c
  3088  001A96  580E               	subwfb	(___aomod@dividend+6)^0,w,c
  3089  001A98  5017               	movf	(___aomod@divisor+7)^0,w,c
  3090  001A9A  580F               	subwfb	(___aomod@dividend+7)^0,w,c
  3091  001A9C  A0D8               	btfss	status,0,c
  3092  001A9E  EF53  F00D         	goto	u2151
  3093  001AA2  EF55  F00D         	goto	u2150
  3094  001AA6                     u2151:
  3095  001AA6  EF65  F00D         	goto	l2903
  3096  001AAA                     u2150:
  3097  001AAA  5010               	movf	___aomod@divisor^0,w,c
  3098  001AAC  5E08               	subwf	___aomod@dividend^0,f,c
  3099  001AAE  5011               	movf	(___aomod@divisor+1)^0,w,c
  3100  001AB0  5A09               	subwfb	(___aomod@dividend+1)^0,f,c
  3101  001AB2  5012               	movf	(___aomod@divisor+2)^0,w,c
  3102  001AB4  5A0A               	subwfb	(___aomod@dividend+2)^0,f,c
  3103  001AB6  5013               	movf	(___aomod@divisor+3)^0,w,c
  3104  001AB8  5A0B               	subwfb	(___aomod@dividend+3)^0,f,c
  3105  001ABA  5014               	movf	(___aomod@divisor+4)^0,w,c
  3106  001ABC  5A0C               	subwfb	(___aomod@dividend+4)^0,f,c
  3107  001ABE  5015               	movf	(___aomod@divisor+5)^0,w,c
  3108  001AC0  5A0D               	subwfb	(___aomod@dividend+5)^0,f,c
  3109  001AC2  5016               	movf	(___aomod@divisor+6)^0,w,c
  3110  001AC4  5A0E               	subwfb	(___aomod@dividend+6)^0,f,c
  3111  001AC6  5017               	movf	(___aomod@divisor+7)^0,w,c
  3112  001AC8  5A0F               	subwfb	(___aomod@dividend+7)^0,f,c
  3113  001ACA                     l2903:
  3114  001ACA  90D8               	bcf	status,0,c
  3115  001ACC  3217               	rrcf	(___aomod@divisor+7)^0,f,c
  3116  001ACE  3216               	rrcf	(___aomod@divisor+6)^0,f,c
  3117  001AD0  3215               	rrcf	(___aomod@divisor+5)^0,f,c
  3118  001AD2  3214               	rrcf	(___aomod@divisor+4)^0,f,c
  3119  001AD4  3213               	rrcf	(___aomod@divisor+3)^0,f,c
  3120  001AD6  3212               	rrcf	(___aomod@divisor+2)^0,f,c
  3121  001AD8  3211               	rrcf	(___aomod@divisor+1)^0,f,c
  3122  001ADA  3210               	rrcf	___aomod@divisor^0,f,c
  3123  001ADC  2E18               	decfsz	___aomod@counter^0,f,c
  3124  001ADE  EF3E  F00D         	goto	l2899
  3125  001AE2                     l2907:
  3126  001AE2  5019               	movf	___aomod@sign^0,w,c
  3127  001AE4  B4D8               	btfsc	status,2,c
  3128  001AE6  EF77  F00D         	goto	u2161
  3129  001AEA  EF79  F00D         	goto	u2160
  3130  001AEE                     u2161:
  3131  001AEE  EF89  F00D         	goto	l2911
  3132  001AF2                     u2160:
  3133  001AF2  1E0F               	comf	(___aomod@dividend+7)^0,f,c
  3134  001AF4  1E0E               	comf	(___aomod@dividend+6)^0,f,c
  3135  001AF6  1E0D               	comf	(___aomod@dividend+5)^0,f,c
  3136  001AF8  1E0C               	comf	(___aomod@dividend+4)^0,f,c
  3137  001AFA  1E0B               	comf	(___aomod@dividend+3)^0,f,c
  3138  001AFC  1E0A               	comf	(___aomod@dividend+2)^0,f,c
  3139  001AFE  1E09               	comf	(___aomod@dividend+1)^0,f,c
  3140  001B00  6C08               	negf	___aomod@dividend^0,c
  3141  001B02  0E00               	movlw	0
  3142  001B04  2209               	addwfc	(___aomod@dividend+1)^0,f,c
  3143  001B06  220A               	addwfc	(___aomod@dividend+2)^0,f,c
  3144  001B08  220B               	addwfc	(___aomod@dividend+3)^0,f,c
  3145  001B0A  220C               	addwfc	(___aomod@dividend+4)^0,f,c
  3146  001B0C  220D               	addwfc	(___aomod@dividend+5)^0,f,c
  3147  001B0E  220E               	addwfc	(___aomod@dividend+6)^0,f,c
  3148  001B10  220F               	addwfc	(___aomod@dividend+7)^0,f,c
  3149  001B12                     l2911:
  3150  001B12  C008  F008         	movff	___aomod@dividend,?___aomod
  3151  001B16  C009  F009         	movff	___aomod@dividend+1,?___aomod+1
  3152  001B1A  C00A  F00A         	movff	___aomod@dividend+2,?___aomod+2
  3153  001B1E  C00B  F00B         	movff	___aomod@dividend+3,?___aomod+3
  3154  001B22  C00C  F00C         	movff	___aomod@dividend+4,?___aomod+4
  3155  001B26  C00D  F00D         	movff	___aomod@dividend+5,?___aomod+5
  3156  001B2A  C00E  F00E         	movff	___aomod@dividend+6,?___aomod+6
  3157  001B2E  C00F  F00F         	movff	___aomod@dividend+7,?___aomod+7
  3158  001B32  0012               	return		;funcret
  3159  001B34                     __end_of___aomod:
  3160                           	opt callstack 0
  3161                           
  3162 ;; *************** function ___aodiv *****************
  3163 ;; Defined at:
  3164 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aodiv.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;  dividend        8    7[COMRAM] long long 
  3167 ;;  divisor         8   15[COMRAM] long long 
  3168 ;; Auto vars:     Size  Location     Type
  3169 ;;  quotient        8   25[COMRAM] long long 
  3170 ;;  sign            1   24[COMRAM] unsigned char 
  3171 ;;  counter         1   23[COMRAM] unsigned char 
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  8    7[COMRAM] long long 
  3174 ;; Registers used:
  3175 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3181 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3182 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3184 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3185 ;;Total ram usage:       26 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; Hardware stack levels required when called:    3
  3188 ;; This function calls:
  3189 ;;		Nothing
  3190 ;; This function is called by:
  3191 ;;		_dtoa
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           	psect	text18
  3196  001848                     __ptext18:
  3197                           	opt callstack 0
  3198  001848                     ___aodiv:
  3199                           	opt callstack 22
  3200  001848  0E00               	movlw	0
  3201  00184A  6E19               	movwf	___aodiv@sign^0,c
  3202  00184C  BE17               	btfsc	(___aodiv@divisor+7)^0,7,c
  3203  00184E  EF2D  F00C         	goto	u2040
  3204  001852  EF2B  F00C         	goto	u2041
  3205  001856                     u2041:
  3206  001856  EF3F  F00C         	goto	l2843
  3207  00185A                     u2040:
  3208  00185A  1E17               	comf	(___aodiv@divisor+7)^0,f,c
  3209  00185C  1E16               	comf	(___aodiv@divisor+6)^0,f,c
  3210  00185E  1E15               	comf	(___aodiv@divisor+5)^0,f,c
  3211  001860  1E14               	comf	(___aodiv@divisor+4)^0,f,c
  3212  001862  1E13               	comf	(___aodiv@divisor+3)^0,f,c
  3213  001864  1E12               	comf	(___aodiv@divisor+2)^0,f,c
  3214  001866  1E11               	comf	(___aodiv@divisor+1)^0,f,c
  3215  001868  6C10               	negf	___aodiv@divisor^0,c
  3216  00186A  0E00               	movlw	0
  3217  00186C  2211               	addwfc	(___aodiv@divisor+1)^0,f,c
  3218  00186E  2212               	addwfc	(___aodiv@divisor+2)^0,f,c
  3219  001870  2213               	addwfc	(___aodiv@divisor+3)^0,f,c
  3220  001872  2214               	addwfc	(___aodiv@divisor+4)^0,f,c
  3221  001874  2215               	addwfc	(___aodiv@divisor+5)^0,f,c
  3222  001876  2216               	addwfc	(___aodiv@divisor+6)^0,f,c
  3223  001878  2217               	addwfc	(___aodiv@divisor+7)^0,f,c
  3224  00187A  0E01               	movlw	1
  3225  00187C  6E19               	movwf	___aodiv@sign^0,c
  3226  00187E                     l2843:
  3227  00187E  BE0F               	btfsc	(___aodiv@dividend+7)^0,7,c
  3228  001880  EF46  F00C         	goto	u2050
  3229  001884  EF44  F00C         	goto	u2051
  3230  001888                     u2051:
  3231  001888  EF58  F00C         	goto	l2849
  3232  00188C                     u2050:
  3233  00188C  1E0F               	comf	(___aodiv@dividend+7)^0,f,c
  3234  00188E  1E0E               	comf	(___aodiv@dividend+6)^0,f,c
  3235  001890  1E0D               	comf	(___aodiv@dividend+5)^0,f,c
  3236  001892  1E0C               	comf	(___aodiv@dividend+4)^0,f,c
  3237  001894  1E0B               	comf	(___aodiv@dividend+3)^0,f,c
  3238  001896  1E0A               	comf	(___aodiv@dividend+2)^0,f,c
  3239  001898  1E09               	comf	(___aodiv@dividend+1)^0,f,c
  3240  00189A  6C08               	negf	___aodiv@dividend^0,c
  3241  00189C  0E00               	movlw	0
  3242  00189E  2209               	addwfc	(___aodiv@dividend+1)^0,f,c
  3243  0018A0  220A               	addwfc	(___aodiv@dividend+2)^0,f,c
  3244  0018A2  220B               	addwfc	(___aodiv@dividend+3)^0,f,c
  3245  0018A4  220C               	addwfc	(___aodiv@dividend+4)^0,f,c
  3246  0018A6  220D               	addwfc	(___aodiv@dividend+5)^0,f,c
  3247  0018A8  220E               	addwfc	(___aodiv@dividend+6)^0,f,c
  3248  0018AA  220F               	addwfc	(___aodiv@dividend+7)^0,f,c
  3249  0018AC  0E01               	movlw	1
  3250  0018AE  1A19               	xorwf	___aodiv@sign^0,f,c
  3251  0018B0                     l2849:
  3252  0018B0  EE20  F01A         	lfsr	2,___aodiv@quotient
  3253  0018B4  0E07               	movlw	7
  3254  0018B6                     u2061:
  3255  0018B6  6ADE               	clrf	postinc2,c
  3256  0018B8  06E8               	decf	wreg,f,c
  3257  0018BA  E2FD               	bc	u2061
  3258  0018BC  5010               	movf	___aodiv@divisor^0,w,c
  3259  0018BE  1011               	iorwf	(___aodiv@divisor+1)^0,w,c
  3260  0018C0  1012               	iorwf	(___aodiv@divisor+2)^0,w,c
  3261  0018C2  1013               	iorwf	(___aodiv@divisor+3)^0,w,c
  3262  0018C4  1014               	iorwf	(___aodiv@divisor+4)^0,w,c
  3263  0018C6  1015               	iorwf	(___aodiv@divisor+5)^0,w,c
  3264  0018C8  1016               	iorwf	(___aodiv@divisor+6)^0,w,c
  3265  0018CA  1017               	iorwf	(___aodiv@divisor+7)^0,w,c
  3266  0018CC  B4D8               	btfsc	status,2,c
  3267  0018CE  EF6B  F00C         	goto	u2071
  3268  0018D2  EF6D  F00C         	goto	u2070
  3269  0018D6                     u2071:
  3270  0018D6  EFBF  F00C         	goto	l2871
  3271  0018DA                     u2070:
  3272  0018DA  0E01               	movlw	1
  3273  0018DC  6E18               	movwf	___aodiv@counter^0,c
  3274  0018DE  EF7B  F00C         	goto	l2857
  3275  0018E2                     l2855:
  3276  0018E2  90D8               	bcf	status,0,c
  3277  0018E4  3610               	rlcf	___aodiv@divisor^0,f,c
  3278  0018E6  3611               	rlcf	(___aodiv@divisor+1)^0,f,c
  3279  0018E8  3612               	rlcf	(___aodiv@divisor+2)^0,f,c
  3280  0018EA  3613               	rlcf	(___aodiv@divisor+3)^0,f,c
  3281  0018EC  3614               	rlcf	(___aodiv@divisor+4)^0,f,c
  3282  0018EE  3615               	rlcf	(___aodiv@divisor+5)^0,f,c
  3283  0018F0  3616               	rlcf	(___aodiv@divisor+6)^0,f,c
  3284  0018F2  3617               	rlcf	(___aodiv@divisor+7)^0,f,c
  3285  0018F4  2A18               	incf	___aodiv@counter^0,f,c
  3286  0018F6                     l2857:
  3287  0018F6  AE17               	btfss	(___aodiv@divisor+7)^0,7,c
  3288  0018F8  EF80  F00C         	goto	u2081
  3289  0018FC  EF82  F00C         	goto	u2080
  3290  001900                     u2081:
  3291  001900  EF71  F00C         	goto	l2855
  3292  001904                     u2080:
  3293  001904                     l2859:
  3294  001904  90D8               	bcf	status,0,c
  3295  001906  361A               	rlcf	___aodiv@quotient^0,f,c
  3296  001908  361B               	rlcf	(___aodiv@quotient+1)^0,f,c
  3297  00190A  361C               	rlcf	(___aodiv@quotient+2)^0,f,c
  3298  00190C  361D               	rlcf	(___aodiv@quotient+3)^0,f,c
  3299  00190E  361E               	rlcf	(___aodiv@quotient+4)^0,f,c
  3300  001910  361F               	rlcf	(___aodiv@quotient+5)^0,f,c
  3301  001912  3620               	rlcf	(___aodiv@quotient+6)^0,f,c
  3302  001914  3621               	rlcf	(___aodiv@quotient+7)^0,f,c
  3303  001916  5010               	movf	___aodiv@divisor^0,w,c
  3304  001918  5C08               	subwf	___aodiv@dividend^0,w,c
  3305  00191A  5011               	movf	(___aodiv@divisor+1)^0,w,c
  3306  00191C  5809               	subwfb	(___aodiv@dividend+1)^0,w,c
  3307  00191E  5012               	movf	(___aodiv@divisor+2)^0,w,c
  3308  001920  580A               	subwfb	(___aodiv@dividend+2)^0,w,c
  3309  001922  5013               	movf	(___aodiv@divisor+3)^0,w,c
  3310  001924  580B               	subwfb	(___aodiv@dividend+3)^0,w,c
  3311  001926  5014               	movf	(___aodiv@divisor+4)^0,w,c
  3312  001928  580C               	subwfb	(___aodiv@dividend+4)^0,w,c
  3313  00192A  5015               	movf	(___aodiv@divisor+5)^0,w,c
  3314  00192C  580D               	subwfb	(___aodiv@dividend+5)^0,w,c
  3315  00192E  5016               	movf	(___aodiv@divisor+6)^0,w,c
  3316  001930  580E               	subwfb	(___aodiv@dividend+6)^0,w,c
  3317  001932  5017               	movf	(___aodiv@divisor+7)^0,w,c
  3318  001934  580F               	subwfb	(___aodiv@dividend+7)^0,w,c
  3319  001936  A0D8               	btfss	status,0,c
  3320  001938  EFA0  F00C         	goto	u2091
  3321  00193C  EFA2  F00C         	goto	u2090
  3322  001940                     u2091:
  3323  001940  EFB3  F00C         	goto	l2867
  3324  001944                     u2090:
  3325  001944  5010               	movf	___aodiv@divisor^0,w,c
  3326  001946  5E08               	subwf	___aodiv@dividend^0,f,c
  3327  001948  5011               	movf	(___aodiv@divisor+1)^0,w,c
  3328  00194A  5A09               	subwfb	(___aodiv@dividend+1)^0,f,c
  3329  00194C  5012               	movf	(___aodiv@divisor+2)^0,w,c
  3330  00194E  5A0A               	subwfb	(___aodiv@dividend+2)^0,f,c
  3331  001950  5013               	movf	(___aodiv@divisor+3)^0,w,c
  3332  001952  5A0B               	subwfb	(___aodiv@dividend+3)^0,f,c
  3333  001954  5014               	movf	(___aodiv@divisor+4)^0,w,c
  3334  001956  5A0C               	subwfb	(___aodiv@dividend+4)^0,f,c
  3335  001958  5015               	movf	(___aodiv@divisor+5)^0,w,c
  3336  00195A  5A0D               	subwfb	(___aodiv@dividend+5)^0,f,c
  3337  00195C  5016               	movf	(___aodiv@divisor+6)^0,w,c
  3338  00195E  5A0E               	subwfb	(___aodiv@dividend+6)^0,f,c
  3339  001960  5017               	movf	(___aodiv@divisor+7)^0,w,c
  3340  001962  5A0F               	subwfb	(___aodiv@dividend+7)^0,f,c
  3341  001964  801A               	bsf	___aodiv@quotient^0,0,c
  3342  001966                     l2867:
  3343  001966  90D8               	bcf	status,0,c
  3344  001968  3217               	rrcf	(___aodiv@divisor+7)^0,f,c
  3345  00196A  3216               	rrcf	(___aodiv@divisor+6)^0,f,c
  3346  00196C  3215               	rrcf	(___aodiv@divisor+5)^0,f,c
  3347  00196E  3214               	rrcf	(___aodiv@divisor+4)^0,f,c
  3348  001970  3213               	rrcf	(___aodiv@divisor+3)^0,f,c
  3349  001972  3212               	rrcf	(___aodiv@divisor+2)^0,f,c
  3350  001974  3211               	rrcf	(___aodiv@divisor+1)^0,f,c
  3351  001976  3210               	rrcf	___aodiv@divisor^0,f,c
  3352  001978  2E18               	decfsz	___aodiv@counter^0,f,c
  3353  00197A  EF82  F00C         	goto	l2859
  3354  00197E                     l2871:
  3355  00197E  5019               	movf	___aodiv@sign^0,w,c
  3356  001980  B4D8               	btfsc	status,2,c
  3357  001982  EFC5  F00C         	goto	u2101
  3358  001986  EFC7  F00C         	goto	u2100
  3359  00198A                     u2101:
  3360  00198A  EFD7  F00C         	goto	l2875
  3361  00198E                     u2100:
  3362  00198E  1E21               	comf	(___aodiv@quotient+7)^0,f,c
  3363  001990  1E20               	comf	(___aodiv@quotient+6)^0,f,c
  3364  001992  1E1F               	comf	(___aodiv@quotient+5)^0,f,c
  3365  001994  1E1E               	comf	(___aodiv@quotient+4)^0,f,c
  3366  001996  1E1D               	comf	(___aodiv@quotient+3)^0,f,c
  3367  001998  1E1C               	comf	(___aodiv@quotient+2)^0,f,c
  3368  00199A  1E1B               	comf	(___aodiv@quotient+1)^0,f,c
  3369  00199C  6C1A               	negf	___aodiv@quotient^0,c
  3370  00199E  0E00               	movlw	0
  3371  0019A0  221B               	addwfc	(___aodiv@quotient+1)^0,f,c
  3372  0019A2  221C               	addwfc	(___aodiv@quotient+2)^0,f,c
  3373  0019A4  221D               	addwfc	(___aodiv@quotient+3)^0,f,c
  3374  0019A6  221E               	addwfc	(___aodiv@quotient+4)^0,f,c
  3375  0019A8  221F               	addwfc	(___aodiv@quotient+5)^0,f,c
  3376  0019AA  2220               	addwfc	(___aodiv@quotient+6)^0,f,c
  3377  0019AC  2221               	addwfc	(___aodiv@quotient+7)^0,f,c
  3378  0019AE                     l2875:
  3379  0019AE  C01A  F008         	movff	___aodiv@quotient,?___aodiv
  3380  0019B2  C01B  F009         	movff	___aodiv@quotient+1,?___aodiv+1
  3381  0019B6  C01C  F00A         	movff	___aodiv@quotient+2,?___aodiv+2
  3382  0019BA  C01D  F00B         	movff	___aodiv@quotient+3,?___aodiv+3
  3383  0019BE  C01E  F00C         	movff	___aodiv@quotient+4,?___aodiv+4
  3384  0019C2  C01F  F00D         	movff	___aodiv@quotient+5,?___aodiv+5
  3385  0019C6  C020  F00E         	movff	___aodiv@quotient+6,?___aodiv+6
  3386  0019CA  C021  F00F         	movff	___aodiv@quotient+7,?___aodiv+7
  3387  0019CE  0012               	return		;funcret
  3388  0019D0                     __end_of___aodiv:
  3389                           	opt callstack 0
  3390                           
  3391 ;; *************** function _atoi *****************
  3392 ;; Defined at:
  3393 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\atoi.c"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;  s               2   14[COMRAM] PTR const unsigned char 
  3396 ;;		 -> STR_6(18), STR_4(7), STR_3(6), STR_2(6), 
  3397 ;; Auto vars:     Size  Location     Type
  3398 ;;  n               2   27[COMRAM] int 
  3399 ;;  neg             2   20[COMRAM] int 
  3400 ;; Return value:  Size  Location     Type
  3401 ;;                  2   14[COMRAM] int 
  3402 ;; Registers used:
  3403 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3404 ;; Tracked objects:
  3405 ;;		On entry : 0/0
  3406 ;;		On exit  : 0/0
  3407 ;;		Unchanged: 0/0
  3408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3409 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3410 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3411 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3412 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;Total ram usage:       15 bytes
  3414 ;; Hardware stack levels used:    1
  3415 ;; Hardware stack levels required when called:    4
  3416 ;; This function calls:
  3417 ;;		___wmul
  3418 ;;		_isdigit
  3419 ;;		_isspace
  3420 ;; This function is called by:
  3421 ;;		_vfpfcnvrt
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           
  3425                           	psect	text19
  3426  0016A4                     __ptext19:
  3427                           	opt callstack 0
  3428  0016A4                     _atoi:
  3429                           	opt callstack 22
  3430  0016A4  0E00               	movlw	0
  3431  0016A6  6E1D               	movwf	(atoi@n+1)^0,c
  3432  0016A8  0E00               	movlw	0
  3433  0016AA  6E1C               	movwf	atoi@n^0,c
  3434  0016AC  0E00               	movlw	0
  3435  0016AE  6E16               	movwf	(atoi@neg+1)^0,c
  3436  0016B0  0E00               	movlw	0
  3437  0016B2  6E15               	movwf	atoi@neg^0,c
  3438  0016B4  EF5E  F00B         	goto	l2993
  3439  0016B8                     l2991:
  3440  0016B8  4A0F               	infsnz	atoi@s^0,f,c
  3441  0016BA  2A10               	incf	(atoi@s+1)^0,f,c
  3442  0016BC                     l2993:
  3443  0016BC  0E01               	movlw	1
  3444  0016BE  6E1B               	movwf	_atoi$1194^0,c
  3445  0016C0  C00F  FFF6         	movff	atoi@s,tblptrl
  3446  0016C4  C010  FFF7         	movff	atoi@s+1,tblptrh
  3447  0016C8                     	if	0	;tblptru may be non-zero
  3448  0016C8                     	endif
  3449  0016C8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3450  0016C8  0E00               	movlw	low (__mediumconst shr (0+16))
  3451  0016CA  6EF8               	movwf	tblptru,c
  3452  0016CC                     	endif
  3453  0016CC  0008               	tblrd		*
  3454  0016CE  50F5               	movf	tablat,w,c
  3455  0016D0  0A20               	xorlw	32
  3456  0016D2  B4D8               	btfsc	status,2,c
  3457  0016D4  EF6E  F00B         	goto	u2341
  3458  0016D8  EF70  F00B         	goto	u2340
  3459  0016DC                     u2341:
  3460  0016DC  EF8F  F00B         	goto	l3001
  3461  0016E0                     u2340:
  3462  0016E0  0EF7               	movlw	247
  3463  0016E2  6E11               	movwf	??_atoi^0,c
  3464  0016E4  0EFF               	movlw	255
  3465  0016E6  6E12               	movwf	(??_atoi+1)^0,c
  3466  0016E8  C00F  FFF6         	movff	atoi@s,tblptrl
  3467  0016EC  C010  FFF7         	movff	atoi@s+1,tblptrh
  3468  0016F0                     	if	0	;tblptru may be non-zero
  3469  0016F0                     	endif
  3470  0016F0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3471  0016F0  0E00               	movlw	low (__mediumconst shr (0+16))
  3472  0016F2  6EF8               	movwf	tblptru,c
  3473  0016F4                     	endif
  3474  0016F4  0008               	tblrd		*
  3475  0016F6  50F5               	movf	tablat,w,c
  3476  0016F8  6E13               	movwf	(??_atoi+2)^0,c
  3477  0016FA  6A14               	clrf	(??_atoi+3)^0,c
  3478  0016FC  5011               	movf	??_atoi^0,w,c
  3479  0016FE  2613               	addwf	(??_atoi+2)^0,f,c
  3480  001700  5012               	movf	(??_atoi+1)^0,w,c
  3481  001702  2214               	addwfc	(??_atoi+3)^0,f,c
  3482  001704  5014               	movf	(??_atoi+3)^0,w,c
  3483  001706  E109               	bnz	u2350
  3484  001708  0E05               	movlw	5
  3485  00170A  5C13               	subwf	(??_atoi+2)^0,w,c
  3486  00170C  A0D8               	btfss	status,0,c
  3487  00170E  EF8B  F00B         	goto	u2351
  3488  001712  EF8D  F00B         	goto	u2350
  3489  001716                     u2351:
  3490  001716  EF8F  F00B         	goto	l3001
  3491  00171A                     u2350:
  3492  00171A  0E00               	movlw	0
  3493  00171C  6E1B               	movwf	_atoi$1194^0,c
  3494  00171E                     l3001:
  3495  00171E  C01B  F017         	movff	_atoi$1194,_atoi$1193
  3496  001722  6A18               	clrf	(_atoi$1193+1)^0,c
  3497  001724  5017               	movf	_atoi$1193^0,w,c
  3498  001726  1018               	iorwf	(_atoi$1193+1)^0,w,c
  3499  001728  A4D8               	btfss	status,2,c
  3500  00172A  EF99  F00B         	goto	u2361
  3501  00172E  EF9B  F00B         	goto	u2360
  3502  001732                     u2361:
  3503  001732  EF5C  F00B         	goto	l2991
  3504  001736                     u2360:
  3505  001736  EFA5  F00B         	goto	l3011
  3506  00173A                     l3007:
  3507  00173A  0E00               	movlw	0
  3508  00173C  6E16               	movwf	(atoi@neg+1)^0,c
  3509  00173E  0E01               	movlw	1
  3510  001740  6E15               	movwf	atoi@neg^0,c
  3511  001742                     l3009:
  3512  001742  4A0F               	infsnz	atoi@s^0,f,c
  3513  001744  2A10               	incf	(atoi@s+1)^0,f,c
  3514  001746  EFDE  F00B         	goto	l3017
  3515  00174A                     l3011:
  3516  00174A  C00F  FFF6         	movff	atoi@s,tblptrl
  3517  00174E  C010  FFF7         	movff	atoi@s+1,tblptrh
  3518  001752                     	if	0	;tblptru may be non-zero
  3519  001752                     	endif
  3520  001752                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3521  001752  0E00               	movlw	low (__mediumconst shr (0+16))
  3522  001754  6EF8               	movwf	tblptru,c
  3523  001756                     	endif
  3524  001756  0008               	tblrd		*
  3525  001758  50F5               	movf	tablat,w,c
  3526  00175A  6E11               	movwf	??_atoi^0,c
  3527  00175C  6A12               	clrf	(??_atoi+1)^0,c
  3528                           
  3529                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3530                           ; Switch size 1, requested type "simple"
  3531                           ; Number of cases is 1, Range of values is 0 to 0
  3532                           ; switch strategies available:
  3533                           ; Name         Instructions Cycles
  3534                           ; simple_byte            4     3 (average)
  3535                           ;	Chosen strategy is simple_byte
  3536  00175E  5012               	movf	(??_atoi+1)^0,w,c
  3537  001760  0A00               	xorlw	0	; case 0
  3538  001762  B4D8               	btfsc	status,2,c
  3539  001764  EFB6  F00B         	goto	l3325
  3540  001768  EFDE  F00B         	goto	l3017
  3541  00176C                     l3325:
  3542                           
  3543                           ; Switch size 1, requested type "simple"
  3544                           ; Number of cases is 2, Range of values is 43 to 45
  3545                           ; switch strategies available:
  3546                           ; Name         Instructions Cycles
  3547                           ; simple_byte            7     4 (average)
  3548                           ;	Chosen strategy is simple_byte
  3549  00176C  5011               	movf	??_atoi^0,w,c
  3550  00176E  0A2B               	xorlw	43	; case 43
  3551  001770  B4D8               	btfsc	status,2,c
  3552  001772  EFA1  F00B         	goto	l3009
  3553  001776  0A06               	xorlw	6	; case 45
  3554  001778  B4D8               	btfsc	status,2,c
  3555  00177A  EF9D  F00B         	goto	l3007
  3556  00177E  EFDE  F00B         	goto	l3017
  3557  001782                     l3013:
  3558  001782  C01C  F008         	movff	atoi@n,___wmul@multiplier
  3559  001786  C01D  F009         	movff	atoi@n+1,___wmul@multiplier+1
  3560  00178A  0E00               	movlw	0
  3561  00178C  6E0B               	movwf	(___wmul@multiplicand+1)^0,c
  3562  00178E  0E0A               	movlw	10
  3563  001790  6E0A               	movwf	___wmul@multiplicand^0,c
  3564  001792  ECAA  F012         	call	___wmul	;wreg free
  3565  001796  C00F  FFF6         	movff	atoi@s,tblptrl
  3566  00179A  C010  FFF7         	movff	atoi@s+1,tblptrh
  3567  00179E                     	if	0	;tblptru may be non-zero
  3568  00179E                     	endif
  3569  00179E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3570  00179E  0E00               	movlw	low (__mediumconst shr (0+16))
  3571  0017A0  6EF8               	movwf	tblptru,c
  3572  0017A2                     	endif
  3573  0017A2  0008               	tblrd		*
  3574  0017A4  50F5               	movf	tablat,w,c
  3575  0017A6  5E08               	subwf	?___wmul^0,f,c
  3576  0017A8  0E00               	movlw	0
  3577  0017AA  5A09               	subwfb	(?___wmul+1)^0,f,c
  3578  0017AC  0E30               	movlw	48
  3579  0017AE  2408               	addwf	?___wmul^0,w,c
  3580  0017B0  6E1C               	movwf	atoi@n^0,c
  3581  0017B2  0E00               	movlw	0
  3582  0017B4  2009               	addwfc	(?___wmul+1)^0,w,c
  3583  0017B6  6E1D               	movwf	(atoi@n+1)^0,c
  3584  0017B8  EFA1  F00B         	goto	l3009
  3585  0017BC                     l3017:
  3586  0017BC  0ED0               	movlw	208
  3587  0017BE  6E11               	movwf	??_atoi^0,c
  3588  0017C0  0EFF               	movlw	255
  3589  0017C2  6E12               	movwf	(??_atoi+1)^0,c
  3590  0017C4  C00F  FFF6         	movff	atoi@s,tblptrl
  3591  0017C8  C010  FFF7         	movff	atoi@s+1,tblptrh
  3592  0017CC                     	if	0	;tblptru may be non-zero
  3593  0017CC                     	endif
  3594  0017CC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3595  0017CC  0E00               	movlw	low (__mediumconst shr (0+16))
  3596  0017CE  6EF8               	movwf	tblptru,c
  3597  0017D0                     	endif
  3598  0017D0  0008               	tblrd		*
  3599  0017D2  50F5               	movf	tablat,w,c
  3600  0017D4  6E13               	movwf	(??_atoi+2)^0,c
  3601  0017D6  6A14               	clrf	(??_atoi+3)^0,c
  3602  0017D8  5011               	movf	??_atoi^0,w,c
  3603  0017DA  2613               	addwf	(??_atoi+2)^0,f,c
  3604  0017DC  5012               	movf	(??_atoi+1)^0,w,c
  3605  0017DE  2214               	addwfc	(??_atoi+3)^0,f,c
  3606  0017E0  5014               	movf	(??_atoi+3)^0,w,c
  3607  0017E2  E10A               	bnz	u2370
  3608  0017E4  0E0A               	movlw	10
  3609  0017E6  5C13               	subwf	(??_atoi+2)^0,w,c
  3610  0017E8  A0D8               	btfss	status,0,c
  3611  0017EA  EFF9  F00B         	goto	u2371
  3612  0017EE  EFFC  F00B         	goto	u2370
  3613  0017F2                     u2371:
  3614  0017F2  0E01               	movlw	1
  3615  0017F4  EFFD  F00B         	goto	u2380
  3616  0017F8                     u2370:
  3617  0017F8  0E00               	movlw	0
  3618  0017FA                     u2380:
  3619  0017FA  6E19               	movwf	_atoi$1195^0,c
  3620  0017FC  6A1A               	clrf	(_atoi$1195+1)^0,c
  3621  0017FE  5019               	movf	_atoi$1195^0,w,c
  3622  001800  101A               	iorwf	(_atoi$1195+1)^0,w,c
  3623  001802  A4D8               	btfss	status,2,c
  3624  001804  EF06  F00C         	goto	u2391
  3625  001808  EF08  F00C         	goto	u2390
  3626  00180C                     u2391:
  3627  00180C  EFC1  F00B         	goto	l3013
  3628  001810                     u2390:
  3629  001810  5015               	movf	atoi@neg^0,w,c
  3630  001812  1016               	iorwf	(atoi@neg+1)^0,w,c
  3631  001814  A4D8               	btfss	status,2,c
  3632  001816  EF0F  F00C         	goto	u2401
  3633  00181A  EF11  F00C         	goto	u2400
  3634  00181E                     u2401:
  3635  00181E  EF1F  F00C         	goto	l1054
  3636  001822                     u2400:
  3637  001822  C01C  F011         	movff	atoi@n,??_atoi
  3638  001826  C01D  F012         	movff	atoi@n+1,??_atoi+1
  3639  00182A  1E11               	comf	??_atoi^0,f,c
  3640  00182C  1E12               	comf	(??_atoi+1)^0,f,c
  3641  00182E  4A11               	infsnz	??_atoi^0,f,c
  3642  001830  2A12               	incf	(??_atoi+1)^0,f,c
  3643  001832  C011  F00F         	movff	??_atoi,?_atoi
  3644  001836  C012  F010         	movff	??_atoi+1,?_atoi+1
  3645  00183A  EF23  F00C         	goto	l1057
  3646  00183E                     l1054:
  3647  00183E  C01C  F00F         	movff	atoi@n,?_atoi
  3648  001842  C01D  F010         	movff	atoi@n+1,?_atoi+1
  3649  001846                     l1057:
  3650  001846  0012               	return		;funcret
  3651  001848                     __end_of_atoi:
  3652                           	opt callstack 0
  3653                           
  3654 ;; *************** function _isspace *****************
  3655 ;; Defined at:
  3656 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isspace.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;  c               2    7[COMRAM] int 
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;		None
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  2    7[COMRAM] int 
  3663 ;; Registers used:
  3664 ;;		wreg, status,2, status,0
  3665 ;; Tracked objects:
  3666 ;;		On entry : 0/0
  3667 ;;		On exit  : 0/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3670 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3672 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3673 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3674 ;;Total ram usage:        7 bytes
  3675 ;; Hardware stack levels used:    1
  3676 ;; Hardware stack levels required when called:    3
  3677 ;; This function calls:
  3678 ;;		Nothing
  3679 ;; This function is called by:
  3680 ;;		_atoi
  3681 ;; This function uses a non-reentrant model
  3682 ;;
  3683                           
  3684                           	psect	text20
  3685  002348                     __ptext20:
  3686                           	opt callstack 0
  3687  002348                     _isspace:
  3688                           	opt callstack 22
  3689  002348  0E01               	movlw	1
  3690  00234A  6E0E               	movwf	_isspace$1211^0,c
  3691  00234C  0E20               	movlw	32
  3692  00234E  1808               	xorwf	isspace@c^0,w,c
  3693  002350  1009               	iorwf	(isspace@c+1)^0,w,c
  3694  002352  B4D8               	btfsc	status,2,c
  3695  002354  EFAE  F011         	goto	u2171
  3696  002358  EFB0  F011         	goto	u2170
  3697  00235C                     u2171:
  3698  00235C  EFC9  F011         	goto	l2923
  3699  002360                     u2170:
  3700  002360  0EF7               	movlw	247
  3701  002362  6E0A               	movwf	??_isspace^0,c
  3702  002364  0EFF               	movlw	255
  3703  002366  6E0B               	movwf	(??_isspace+1)^0,c
  3704  002368  C008  F00C         	movff	isspace@c,??_isspace+2
  3705  00236C  C009  F00D         	movff	isspace@c+1,??_isspace+3
  3706  002370  500A               	movf	??_isspace^0,w,c
  3707  002372  260C               	addwf	(??_isspace+2)^0,f,c
  3708  002374  500B               	movf	(??_isspace+1)^0,w,c
  3709  002376  220D               	addwfc	(??_isspace+3)^0,f,c
  3710  002378  500D               	movf	(??_isspace+3)^0,w,c
  3711  00237A  E109               	bnz	u2180
  3712  00237C  0E05               	movlw	5
  3713  00237E  5C0C               	subwf	(??_isspace+2)^0,w,c
  3714  002380  A0D8               	btfss	status,0,c
  3715  002382  EFC5  F011         	goto	u2181
  3716  002386  EFC7  F011         	goto	u2180
  3717  00238A                     u2181:
  3718  00238A  EFC9  F011         	goto	l2923
  3719  00238E                     u2180:
  3720  00238E  0E00               	movlw	0
  3721  002390  6E0E               	movwf	_isspace$1211^0,c
  3722  002392                     l2923:
  3723  002392  C00E  F008         	movff	_isspace$1211,?_isspace
  3724  002396  6A09               	clrf	(?_isspace+1)^0,c
  3725  002398  0012               	return		;funcret
  3726  00239A                     __end_of_isspace:
  3727                           	opt callstack 0
  3728                           
  3729 ;; *************** function _isdigit *****************
  3730 ;; Defined at:
  3731 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isdigit.c"
  3732 ;; Parameters:    Size  Location     Type
  3733 ;;  c               2    7[COMRAM] int 
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;		None
  3736 ;; Return value:  Size  Location     Type
  3737 ;;                  2    7[COMRAM] int 
  3738 ;; Registers used:
  3739 ;;		wreg, status,2, status,0
  3740 ;; Tracked objects:
  3741 ;;		On entry : 0/0
  3742 ;;		On exit  : 0/0
  3743 ;;		Unchanged: 0/0
  3744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3745 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;Total ram usage:        6 bytes
  3750 ;; Hardware stack levels used:    1
  3751 ;; Hardware stack levels required when called:    3
  3752 ;; This function calls:
  3753 ;;		Nothing
  3754 ;; This function is called by:
  3755 ;;		_vfpfcnvrt
  3756 ;;		_atoi
  3757 ;; This function uses a non-reentrant model
  3758 ;;
  3759                           
  3760                           	psect	text21
  3761  002496                     __ptext21:
  3762                           	opt callstack 0
  3763  002496                     _isdigit:
  3764                           	opt callstack 23
  3765  002496  0ED0               	movlw	208
  3766  002498  6E0A               	movwf	??_isdigit^0,c
  3767  00249A  0EFF               	movlw	255
  3768  00249C  6E0B               	movwf	(??_isdigit+1)^0,c
  3769  00249E  C008  F00C         	movff	isdigit@c,??_isdigit+2
  3770  0024A2  C009  F00D         	movff	isdigit@c+1,??_isdigit+3
  3771  0024A6  500A               	movf	??_isdigit^0,w,c
  3772  0024A8  260C               	addwf	(??_isdigit+2)^0,f,c
  3773  0024AA  500B               	movf	(??_isdigit+1)^0,w,c
  3774  0024AC  220D               	addwfc	(??_isdigit+3)^0,f,c
  3775  0024AE  500D               	movf	(??_isdigit+3)^0,w,c
  3776  0024B0  E10A               	bnz	u2020
  3777  0024B2  0E0A               	movlw	10
  3778  0024B4  5C0C               	subwf	(??_isdigit+2)^0,w,c
  3779  0024B6  A0D8               	btfss	status,0,c
  3780  0024B8  EF60  F012         	goto	u2021
  3781  0024BC  EF63  F012         	goto	u2020
  3782  0024C0                     u2021:
  3783  0024C0  0E01               	movlw	1
  3784  0024C2  EF64  F012         	goto	u2030
  3785  0024C6                     u2020:
  3786  0024C6  0E00               	movlw	0
  3787  0024C8                     u2030:
  3788  0024C8  6E08               	movwf	?_isdigit^0,c
  3789  0024CA  6A09               	clrf	(?_isdigit+1)^0,c
  3790  0024CC  0012               	return		;funcret
  3791  0024CE                     __end_of_isdigit:
  3792                           	opt callstack 0
  3793                           
  3794 ;; *************** function ___wmul *****************
  3795 ;; Defined at:
  3796 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  3797 ;; Parameters:    Size  Location     Type
  3798 ;;  multiplier      2    7[COMRAM] unsigned int 
  3799 ;;  multiplicand    2    9[COMRAM] unsigned int 
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;  product         2   11[COMRAM] unsigned int 
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  2    7[COMRAM] unsigned int 
  3804 ;; Registers used:
  3805 ;;		wreg, status,2, status,0, prodl, prodh
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3811 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3815 ;;Total ram usage:        6 bytes
  3816 ;; Hardware stack levels used:    1
  3817 ;; Hardware stack levels required when called:    3
  3818 ;; This function calls:
  3819 ;;		Nothing
  3820 ;; This function is called by:
  3821 ;;		_atoi
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           	psect	text22
  3826  002554                     __ptext22:
  3827                           	opt callstack 0
  3828  002554                     ___wmul:
  3829                           	opt callstack 22
  3830  002554  5008               	movf	___wmul@multiplier^0,w,c
  3831  002556  020A               	mulwf	___wmul@multiplicand^0,c
  3832  002558  CFF3 F00C          	movff	prodl,___wmul@product
  3833  00255C  CFF4 F00D          	movff	prodh,___wmul@product+1
  3834  002560  5008               	movf	___wmul@multiplier^0,w,c
  3835  002562  020B               	mulwf	(___wmul@multiplicand+1)^0,c
  3836  002564  50F3               	movf	243,w,c
  3837  002566  260D               	addwf	(___wmul@product+1)^0,f,c
  3838  002568  5009               	movf	(___wmul@multiplier+1)^0,w,c
  3839  00256A  020A               	mulwf	___wmul@multiplicand^0,c
  3840  00256C  50F3               	movf	243,w,c
  3841  00256E  260D               	addwf	(___wmul@product+1)^0,f,c
  3842  002570  C00C  F008         	movff	___wmul@product,?___wmul
  3843  002574  C00D  F009         	movff	___wmul@product+1,?___wmul+1
  3844  002578  0012               	return		;funcret
  3845  00257A                     __end_of___wmul:
  3846                           	opt callstack 0
  3847                           
  3848 ;; *************** function ___awmod *****************
  3849 ;; Defined at:
  3850 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;  dividend        2    7[COMRAM] int 
  3853 ;;  divisor         2    9[COMRAM] int 
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;  sign            1   12[COMRAM] unsigned char 
  3856 ;;  counter         1   11[COMRAM] unsigned char 
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  2    7[COMRAM] int 
  3859 ;; Registers used:
  3860 ;;		wreg, status,2, status,0
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3866 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3869 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3870 ;;Total ram usage:        6 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    3
  3873 ;; This function calls:
  3874 ;;		Nothing
  3875 ;; This function is called by:
  3876 ;;		_display_clock
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           	psect	text23
  3881  001F4A                     __ptext23:
  3882                           	opt callstack 0
  3883  001F4A                     ___awmod:
  3884                           	opt callstack 25
  3885  001F4A  0E00               	movlw	0
  3886  001F4C  6E0D               	movwf	___awmod@sign^0,c
  3887  001F4E  BE09               	btfsc	(___awmod@dividend+1)^0,7,c
  3888  001F50  EFAE  F00F         	goto	u1680
  3889  001F54  EFAC  F00F         	goto	u1681
  3890  001F58                     u1681:
  3891  001F58  EFB4  F00F         	goto	l2439
  3892  001F5C                     u1680:
  3893  001F5C  6C08               	negf	___awmod@dividend^0,c
  3894  001F5E  1E09               	comf	(___awmod@dividend+1)^0,f,c
  3895  001F60  B0D8               	btfsc	status,0,c
  3896  001F62  2A09               	incf	(___awmod@dividend+1)^0,f,c
  3897  001F64  0E01               	movlw	1
  3898  001F66  6E0D               	movwf	___awmod@sign^0,c
  3899  001F68                     l2439:
  3900  001F68  BE0B               	btfsc	(___awmod@divisor+1)^0,7,c
  3901  001F6A  EFBB  F00F         	goto	u1690
  3902  001F6E  EFB9  F00F         	goto	u1691
  3903  001F72                     u1691:
  3904  001F72  EFBF  F00F         	goto	l2443
  3905  001F76                     u1690:
  3906  001F76  6C0A               	negf	___awmod@divisor^0,c
  3907  001F78  1E0B               	comf	(___awmod@divisor+1)^0,f,c
  3908  001F7A  B0D8               	btfsc	status,0,c
  3909  001F7C  2A0B               	incf	(___awmod@divisor+1)^0,f,c
  3910  001F7E                     l2443:
  3911  001F7E  500A               	movf	___awmod@divisor^0,w,c
  3912  001F80  100B               	iorwf	(___awmod@divisor+1)^0,w,c
  3913  001F82  B4D8               	btfsc	status,2,c
  3914  001F84  EFC6  F00F         	goto	u1701
  3915  001F88  EFC8  F00F         	goto	u1700
  3916  001F8C                     u1701:
  3917  001F8C  EFEC  F00F         	goto	l2459
  3918  001F90                     u1700:
  3919  001F90  0E01               	movlw	1
  3920  001F92  6E0C               	movwf	___awmod@counter^0,c
  3921  001F94  EFD0  F00F         	goto	l2449
  3922  001F98                     l2447:
  3923  001F98  90D8               	bcf	status,0,c
  3924  001F9A  360A               	rlcf	___awmod@divisor^0,f,c
  3925  001F9C  360B               	rlcf	(___awmod@divisor+1)^0,f,c
  3926  001F9E  2A0C               	incf	___awmod@counter^0,f,c
  3927  001FA0                     l2449:
  3928  001FA0  AE0B               	btfss	(___awmod@divisor+1)^0,7,c
  3929  001FA2  EFD5  F00F         	goto	u1711
  3930  001FA6  EFD7  F00F         	goto	u1710
  3931  001FAA                     u1711:
  3932  001FAA  EFCC  F00F         	goto	l2447
  3933  001FAE                     u1710:
  3934  001FAE                     l2451:
  3935  001FAE  500A               	movf	___awmod@divisor^0,w,c
  3936  001FB0  5C08               	subwf	___awmod@dividend^0,w,c
  3937  001FB2  500B               	movf	(___awmod@divisor+1)^0,w,c
  3938  001FB4  5809               	subwfb	(___awmod@dividend+1)^0,w,c
  3939  001FB6  A0D8               	btfss	status,0,c
  3940  001FB8  EFE0  F00F         	goto	u1721
  3941  001FBC  EFE2  F00F         	goto	u1720
  3942  001FC0                     u1721:
  3943  001FC0  EFE6  F00F         	goto	l2455
  3944  001FC4                     u1720:
  3945  001FC4  500A               	movf	___awmod@divisor^0,w,c
  3946  001FC6  5E08               	subwf	___awmod@dividend^0,f,c
  3947  001FC8  500B               	movf	(___awmod@divisor+1)^0,w,c
  3948  001FCA  5A09               	subwfb	(___awmod@dividend+1)^0,f,c
  3949  001FCC                     l2455:
  3950  001FCC  90D8               	bcf	status,0,c
  3951  001FCE  320B               	rrcf	(___awmod@divisor+1)^0,f,c
  3952  001FD0  320A               	rrcf	___awmod@divisor^0,f,c
  3953  001FD2  2E0C               	decfsz	___awmod@counter^0,f,c
  3954  001FD4  EFD7  F00F         	goto	l2451
  3955  001FD8                     l2459:
  3956  001FD8  500D               	movf	___awmod@sign^0,w,c
  3957  001FDA  B4D8               	btfsc	status,2,c
  3958  001FDC  EFF2  F00F         	goto	u1731
  3959  001FE0  EFF4  F00F         	goto	u1730
  3960  001FE4                     u1731:
  3961  001FE4  EFF8  F00F         	goto	l2463
  3962  001FE8                     u1730:
  3963  001FE8  6C08               	negf	___awmod@dividend^0,c
  3964  001FEA  1E09               	comf	(___awmod@dividend+1)^0,f,c
  3965  001FEC  B0D8               	btfsc	status,0,c
  3966  001FEE  2A09               	incf	(___awmod@dividend+1)^0,f,c
  3967  001FF0                     l2463:
  3968  001FF0  C008  F008         	movff	___awmod@dividend,?___awmod
  3969  001FF4  C009  F009         	movff	___awmod@dividend+1,?___awmod+1
  3970  001FF8  0012               	return		;funcret
  3971  001FFA                     __end_of___awmod:
  3972                           	opt callstack 0
  3973                           
  3974 ;; *************** function ___awdiv *****************
  3975 ;; Defined at:
  3976 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;  dividend        2    7[COMRAM] int 
  3979 ;;  divisor         2    9[COMRAM] int 
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;  quotient        2   13[COMRAM] int 
  3982 ;;  sign            1   12[COMRAM] unsigned char 
  3983 ;;  counter         1   11[COMRAM] unsigned char 
  3984 ;; Return value:  Size  Location     Type
  3985 ;;                  2    7[COMRAM] int 
  3986 ;; Registers used:
  3987 ;;		wreg, status,2, status,0
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3993 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3996 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3997 ;;Total ram usage:        8 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:    3
  4000 ;; This function calls:
  4001 ;;		Nothing
  4002 ;; This function is called by:
  4003 ;;		_display_clock
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           	psect	text24
  4008  001D12                     __ptext24:
  4009                           	opt callstack 0
  4010  001D12                     ___awdiv:
  4011                           	opt callstack 25
  4012  001D12  0E00               	movlw	0
  4013  001D14  6E0D               	movwf	___awdiv@sign^0,c
  4014  001D16  BE0B               	btfsc	(___awdiv@divisor+1)^0,7,c
  4015  001D18  EF92  F00E         	goto	u1620
  4016  001D1C  EF90  F00E         	goto	u1621
  4017  001D20                     u1621:
  4018  001D20  EF98  F00E         	goto	l2395
  4019  001D24                     u1620:
  4020  001D24  6C0A               	negf	___awdiv@divisor^0,c
  4021  001D26  1E0B               	comf	(___awdiv@divisor+1)^0,f,c
  4022  001D28  B0D8               	btfsc	status,0,c
  4023  001D2A  2A0B               	incf	(___awdiv@divisor+1)^0,f,c
  4024  001D2C  0E01               	movlw	1
  4025  001D2E  6E0D               	movwf	___awdiv@sign^0,c
  4026  001D30                     l2395:
  4027  001D30  BE09               	btfsc	(___awdiv@dividend+1)^0,7,c
  4028  001D32  EF9F  F00E         	goto	u1630
  4029  001D36  EF9D  F00E         	goto	u1631
  4030  001D3A                     u1631:
  4031  001D3A  EFA5  F00E         	goto	l2401
  4032  001D3E                     u1630:
  4033  001D3E  6C08               	negf	___awdiv@dividend^0,c
  4034  001D40  1E09               	comf	(___awdiv@dividend+1)^0,f,c
  4035  001D42  B0D8               	btfsc	status,0,c
  4036  001D44  2A09               	incf	(___awdiv@dividend+1)^0,f,c
  4037  001D46  0E01               	movlw	1
  4038  001D48  1A0D               	xorwf	___awdiv@sign^0,f,c
  4039  001D4A                     l2401:
  4040  001D4A  0E00               	movlw	0
  4041  001D4C  6E0F               	movwf	(___awdiv@quotient+1)^0,c
  4042  001D4E  0E00               	movlw	0
  4043  001D50  6E0E               	movwf	___awdiv@quotient^0,c
  4044  001D52  500A               	movf	___awdiv@divisor^0,w,c
  4045  001D54  100B               	iorwf	(___awdiv@divisor+1)^0,w,c
  4046  001D56  B4D8               	btfsc	status,2,c
  4047  001D58  EFB0  F00E         	goto	u1641
  4048  001D5C  EFB2  F00E         	goto	u1640
  4049  001D60                     u1641:
  4050  001D60  EFDA  F00E         	goto	l2423
  4051  001D64                     u1640:
  4052  001D64  0E01               	movlw	1
  4053  001D66  6E0C               	movwf	___awdiv@counter^0,c
  4054  001D68  EFBA  F00E         	goto	l2409
  4055  001D6C                     l2407:
  4056  001D6C  90D8               	bcf	status,0,c
  4057  001D6E  360A               	rlcf	___awdiv@divisor^0,f,c
  4058  001D70  360B               	rlcf	(___awdiv@divisor+1)^0,f,c
  4059  001D72  2A0C               	incf	___awdiv@counter^0,f,c
  4060  001D74                     l2409:
  4061  001D74  AE0B               	btfss	(___awdiv@divisor+1)^0,7,c
  4062  001D76  EFBF  F00E         	goto	u1651
  4063  001D7A  EFC1  F00E         	goto	u1650
  4064  001D7E                     u1651:
  4065  001D7E  EFB6  F00E         	goto	l2407
  4066  001D82                     u1650:
  4067  001D82                     l2411:
  4068  001D82  90D8               	bcf	status,0,c
  4069  001D84  360E               	rlcf	___awdiv@quotient^0,f,c
  4070  001D86  360F               	rlcf	(___awdiv@quotient+1)^0,f,c
  4071  001D88  500A               	movf	___awdiv@divisor^0,w,c
  4072  001D8A  5C08               	subwf	___awdiv@dividend^0,w,c
  4073  001D8C  500B               	movf	(___awdiv@divisor+1)^0,w,c
  4074  001D8E  5809               	subwfb	(___awdiv@dividend+1)^0,w,c
  4075  001D90  A0D8               	btfss	status,0,c
  4076  001D92  EFCD  F00E         	goto	u1661
  4077  001D96  EFCF  F00E         	goto	u1660
  4078  001D9A                     u1661:
  4079  001D9A  EFD4  F00E         	goto	l2419
  4080  001D9E                     u1660:
  4081  001D9E  500A               	movf	___awdiv@divisor^0,w,c
  4082  001DA0  5E08               	subwf	___awdiv@dividend^0,f,c
  4083  001DA2  500B               	movf	(___awdiv@divisor+1)^0,w,c
  4084  001DA4  5A09               	subwfb	(___awdiv@dividend+1)^0,f,c
  4085  001DA6  800E               	bsf	___awdiv@quotient^0,0,c
  4086  001DA8                     l2419:
  4087  001DA8  90D8               	bcf	status,0,c
  4088  001DAA  320B               	rrcf	(___awdiv@divisor+1)^0,f,c
  4089  001DAC  320A               	rrcf	___awdiv@divisor^0,f,c
  4090  001DAE  2E0C               	decfsz	___awdiv@counter^0,f,c
  4091  001DB0  EFC1  F00E         	goto	l2411
  4092  001DB4                     l2423:
  4093  001DB4  500D               	movf	___awdiv@sign^0,w,c
  4094  001DB6  B4D8               	btfsc	status,2,c
  4095  001DB8  EFE0  F00E         	goto	u1671
  4096  001DBC  EFE2  F00E         	goto	u1670
  4097  001DC0                     u1671:
  4098  001DC0  EFE6  F00E         	goto	l2427
  4099  001DC4                     u1670:
  4100  001DC4  6C0E               	negf	___awdiv@quotient^0,c
  4101  001DC6  1E0F               	comf	(___awdiv@quotient+1)^0,f,c
  4102  001DC8  B0D8               	btfsc	status,0,c
  4103  001DCA  2A0F               	incf	(___awdiv@quotient+1)^0,f,c
  4104  001DCC                     l2427:
  4105  001DCC  C00E  F008         	movff	___awdiv@quotient,?___awdiv
  4106  001DD0  C00F  F009         	movff	___awdiv@quotient+1,?___awdiv+1
  4107  001DD4  0012               	return		;funcret
  4108  001DD6                     __end_of___awdiv:
  4109                           	opt callstack 0
  4110                           
  4111 ;; *************** function _LCDPutStr *****************
  4112 ;; Defined at:
  4113 ;;		line 198 in file "BBSPI_LCD.c"
  4114 ;; Parameters:    Size  Location     Type
  4115 ;;  ptr             2   14[COMRAM] PTR const unsigned char 
  4116 ;;		 -> STR_5(16), STR_1(9), 
  4117 ;; Auto vars:     Size  Location     Type
  4118 ;;		None
  4119 ;; Return value:  Size  Location     Type
  4120 ;;                  1    wreg      void 
  4121 ;; Registers used:
  4122 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4123 ;; Tracked objects:
  4124 ;;		On entry : 0/0
  4125 ;;		On exit  : 0/0
  4126 ;;		Unchanged: 0/0
  4127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4128 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4131 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4132 ;;Total ram usage:        2 bytes
  4133 ;; Hardware stack levels used:    1
  4134 ;; Hardware stack levels required when called:    6
  4135 ;; This function calls:
  4136 ;;		_LCDPutChar
  4137 ;; This function is called by:
  4138 ;;		_display_clock
  4139 ;;		_clock
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           	psect	text25
  4144  00241E                     __ptext25:
  4145                           	opt callstack 0
  4146  00241E                     _LCDPutStr:
  4147                           	opt callstack 22
  4148  00241E                     
  4149                           ;BBSPI_LCD.c: 198: void LCDPutStr (const char *ptr);BBSPI_LCD.c: 199: {;BBSPI_LCD.c: 200
      +                          :     while(*ptr) LCDPutChar(*(ptr++));
  4150  00241E  EF1D  F012         	goto	l2379
  4151  002422                     l2375:
  4152  002422  C00F  FFF6         	movff	LCDPutStr@ptr,tblptrl
  4153  002426  C010  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  4154  00242A                     	if	0	;tblptru may be non-zero
  4155  00242A                     	endif
  4156  00242A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4157  00242A  0E00               	movlw	low (__mediumconst shr (0+16))
  4158  00242C  6EF8               	movwf	tblptru,c
  4159  00242E                     	endif
  4160  00242E  0008               	tblrd		*
  4161  002430  50F5               	movf	tablat,w,c
  4162  002432  ECB3  F010         	call	_LCDPutChar
  4163  002436  4A0F               	infsnz	LCDPutStr@ptr^0,f,c
  4164  002438  2A10               	incf	(LCDPutStr@ptr+1)^0,f,c
  4165  00243A                     l2379:
  4166  00243A  C00F  FFF6         	movff	LCDPutStr@ptr,tblptrl
  4167  00243E  C010  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  4168  002442                     	if	0	;tblptru may be non-zero
  4169  002442                     	endif
  4170  002442                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4171  002442  0E00               	movlw	low (__mediumconst shr (0+16))
  4172  002444  6EF8               	movwf	tblptru,c
  4173  002446                     	endif
  4174  002446  0008               	tblrd		*
  4175  002448  50F5               	movf	tablat,w,c
  4176  00244A  0900               	iorlw	0
  4177  00244C  A4D8               	btfss	status,2,c
  4178  00244E  EF2B  F012         	goto	u1611
  4179  002452  EF2D  F012         	goto	u1610
  4180  002456                     u1611:
  4181  002456  EF11  F012         	goto	l2375
  4182  00245A                     u1610:
  4183  00245A  0012               	return		;funcret
  4184  00245C                     __end_of_LCDPutStr:
  4185                           	opt callstack 0
  4186                           
  4187 ;; *************** function _LCDPutChar *****************
  4188 ;; Defined at:
  4189 ;;		line 160 in file "BBSPI_LCD.c"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;  ch              1    wreg     unsigned char 
  4192 ;; Auto vars:     Size  Location     Type
  4193 ;;  ch              1   13[COMRAM] unsigned char 
  4194 ;; Return value:  Size  Location     Type
  4195 ;;                  1    wreg      void 
  4196 ;; Registers used:
  4197 ;;		wreg, status,2, status,0, cstack
  4198 ;; Tracked objects:
  4199 ;;		On entry : 0/0
  4200 ;;		On exit  : 0/0
  4201 ;;		Unchanged: 0/0
  4202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4204 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4205 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4206 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4207 ;;Total ram usage:        2 bytes
  4208 ;; Hardware stack levels used:    1
  4209 ;; Hardware stack levels required when called:    5
  4210 ;; This function calls:
  4211 ;;		_WritePort_BBSPI
  4212 ;; This function is called by:
  4213 ;;		_LCDPutStr
  4214 ;;		_display_clock
  4215 ;; This function uses a non-reentrant model
  4216 ;;
  4217                           
  4218                           	psect	text26
  4219  002166                     __ptext26:
  4220                           	opt callstack 0
  4221  002166                     _LCDPutChar:
  4222                           	opt callstack 22
  4223                           
  4224                           ;incstack = 0
  4225                           ;LCDPutChar@ch stored from wreg
  4226  002166  6E0E               	movwf	LCDPutChar@ch^0,c
  4227  002168                     
  4228                           ;BBSPI_LCD.c: 160: void LCDPutChar (unsigned char ch);BBSPI_LCD.c: 161: {;BBSPI_LCD.c: 1
      +                          62:     _delay((unsigned long)((5)*(10000000/4000.0)));
  4229  002168  0E11               	movlw	17
  4230  00216A  6E0D               	movwf	??_LCDPutChar^0,c
  4231  00216C  0E3A               	movlw	58
  4232  00216E                     u2597:
  4233  00216E  2EE8               	decfsz	wreg,f,c
  4234  002170  D7FE               	bra	u2597
  4235  002172  2E0D               	decfsz	??_LCDPutChar^0,f,c
  4236  002174  D7FC               	bra	u2597
  4237  002176  D000               	nop2	
  4238  002178                     
  4239                           ;BBSPI_LCD.c: 163:     WritePort_BBSPI (0x12, 0x80);
  4240  002178  0E80               	movlw	128
  4241  00217A  6E0B               	movwf	WritePort_BBSPI@a^0,c
  4242  00217C  0E12               	movlw	18
  4243  00217E  ECBD  F012         	call	_WritePort_BBSPI
  4244  002182                     
  4245                           ;BBSPI_LCD.c: 164:     _delay((unsigned long)((1)*(10000000/4000.0)));
  4246  002182  0E04               	movlw	4
  4247  002184  6E0D               	movwf	??_LCDPutChar^0,c
  4248  002186  0E3E               	movlw	62
  4249  002188                     u2607:
  4250  002188  2EE8               	decfsz	wreg,f,c
  4251  00218A  D7FE               	bra	u2607
  4252  00218C  2E0D               	decfsz	??_LCDPutChar^0,f,c
  4253  00218E  D7FC               	bra	u2607
  4254  002190                     
  4255                           ;BBSPI_LCD.c: 165:     WritePort_BBSPI (0x13, ch);
  4256  002190  C00E  F00B         	movff	LCDPutChar@ch,WritePort_BBSPI@a
  4257  002194  0E13               	movlw	19
  4258  002196  ECBD  F012         	call	_WritePort_BBSPI
  4259  00219A                     
  4260                           ;BBSPI_LCD.c: 166:     _delay((unsigned long)((1)*(10000000/4000.0)));
  4261  00219A  0E04               	movlw	4
  4262  00219C  6E0D               	movwf	??_LCDPutChar^0,c
  4263  00219E  0E3E               	movlw	62
  4264  0021A0                     u2617:
  4265  0021A0  2EE8               	decfsz	wreg,f,c
  4266  0021A2  D7FE               	bra	u2617
  4267  0021A4  2E0D               	decfsz	??_LCDPutChar^0,f,c
  4268  0021A6  D7FC               	bra	u2617
  4269  0021A8                     
  4270                           ;BBSPI_LCD.c: 167:     WritePort_BBSPI (0x12, 0xC0);
  4271  0021A8  0EC0               	movlw	192
  4272  0021AA  6E0B               	movwf	WritePort_BBSPI@a^0,c
  4273  0021AC  0E12               	movlw	18
  4274  0021AE  ECBD  F012         	call	_WritePort_BBSPI
  4275  0021B2                     
  4276                           ;BBSPI_LCD.c: 168:     _delay((unsigned long)((1)*(10000000/4000.0)));
  4277  0021B2  0E04               	movlw	4
  4278  0021B4  6E0D               	movwf	??_LCDPutChar^0,c
  4279  0021B6  0E3E               	movlw	62
  4280  0021B8                     u2627:
  4281  0021B8  2EE8               	decfsz	wreg,f,c
  4282  0021BA  D7FE               	bra	u2627
  4283  0021BC  2E0D               	decfsz	??_LCDPutChar^0,f,c
  4284  0021BE  D7FC               	bra	u2627
  4285  0021C0                     
  4286                           ;BBSPI_LCD.c: 169:     WritePort_BBSPI (0x12, 0x00);
  4287  0021C0  0E00               	movlw	0
  4288  0021C2  6E0B               	movwf	WritePort_BBSPI@a^0,c
  4289  0021C4  0E12               	movlw	18
  4290  0021C6  ECBD  F012         	call	_WritePort_BBSPI
  4291  0021CA  0012               	return		;funcret
  4292  0021CC                     __end_of_LCDPutChar:
  4293                           	opt callstack 0
  4294                           
  4295 ;; *************** function _LCDPutInst *****************
  4296 ;; Defined at:
  4297 ;;		line 179 in file "BBSPI_LCD.c"
  4298 ;; Parameters:    Size  Location     Type
  4299 ;;  ch              1    wreg     unsigned char 
  4300 ;; Auto vars:     Size  Location     Type
  4301 ;;  ch              1   13[COMRAM] unsigned char 
  4302 ;; Return value:  Size  Location     Type
  4303 ;;                  1    wreg      void 
  4304 ;; Registers used:
  4305 ;;		wreg, status,2, status,0, cstack
  4306 ;; Tracked objects:
  4307 ;;		On entry : 0/0
  4308 ;;		On exit  : 0/0
  4309 ;;		Unchanged: 0/0
  4310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;Total ram usage:        2 bytes
  4316 ;; Hardware stack levels used:    1
  4317 ;; Hardware stack levels required when called:    5
  4318 ;; This function calls:
  4319 ;;		_WritePort_BBSPI
  4320 ;; This function is called by:
  4321 ;;		_display_clock
  4322 ;;		_clock
  4323 ;;		_LCDInit
  4324 ;; This function uses a non-reentrant model
  4325 ;;
  4326                           
  4327                           	psect	text27
  4328  0021CC                     __ptext27:
  4329                           	opt callstack 0
  4330  0021CC                     _LCDPutInst:
  4331                           	opt callstack 23
  4332                           
  4333                           ;incstack = 0
  4334                           ;LCDPutInst@ch stored from wreg
  4335  0021CC  6E0E               	movwf	LCDPutInst@ch^0,c
  4336  0021CE                     
  4337                           ;BBSPI_LCD.c: 179: void LCDPutInst (unsigned char ch);BBSPI_LCD.c: 180: {;BBSPI_LCD.c: 1
      +                          81:     _delay((unsigned long)((5)*(10000000/4000.0)));
  4338  0021CE  0E11               	movlw	17
  4339  0021D0  6E0D               	movwf	??_LCDPutInst^0,c
  4340  0021D2  0E3A               	movlw	58
  4341  0021D4                     u2637:
  4342  0021D4  2EE8               	decfsz	wreg,f,c
  4343  0021D6  D7FE               	bra	u2637
  4344  0021D8  2E0D               	decfsz	??_LCDPutInst^0,f,c
  4345  0021DA  D7FC               	bra	u2637
  4346  0021DC  D000               	nop2	
  4347  0021DE                     
  4348                           ;BBSPI_LCD.c: 182:     WritePort_BBSPI (0x12, 0x00);
  4349  0021DE  0E00               	movlw	0
  4350  0021E0  6E0B               	movwf	WritePort_BBSPI@a^0,c
  4351  0021E2  0E12               	movlw	18
  4352  0021E4  ECBD  F012         	call	_WritePort_BBSPI
  4353  0021E8                     
  4354                           ;BBSPI_LCD.c: 183:     _delay((unsigned long)((1)*(10000000/4000.0)));
  4355  0021E8  0E04               	movlw	4
  4356  0021EA  6E0D               	movwf	??_LCDPutInst^0,c
  4357  0021EC  0E3E               	movlw	62
  4358  0021EE                     u2647:
  4359  0021EE  2EE8               	decfsz	wreg,f,c
  4360  0021F0  D7FE               	bra	u2647
  4361  0021F2  2E0D               	decfsz	??_LCDPutInst^0,f,c
  4362  0021F4  D7FC               	bra	u2647
  4363  0021F6                     
  4364                           ;BBSPI_LCD.c: 184:     WritePort_BBSPI (0x13, ch);
  4365  0021F6  C00E  F00B         	movff	LCDPutInst@ch,WritePort_BBSPI@a
  4366  0021FA  0E13               	movlw	19
  4367  0021FC  ECBD  F012         	call	_WritePort_BBSPI
  4368  002200                     
  4369                           ;BBSPI_LCD.c: 185:     _delay((unsigned long)((1)*(10000000/4000.0)));
  4370  002200  0E04               	movlw	4
  4371  002202  6E0D               	movwf	??_LCDPutInst^0,c
  4372  002204  0E3E               	movlw	62
  4373  002206                     u2657:
  4374  002206  2EE8               	decfsz	wreg,f,c
  4375  002208  D7FE               	bra	u2657
  4376  00220A  2E0D               	decfsz	??_LCDPutInst^0,f,c
  4377  00220C  D7FC               	bra	u2657
  4378  00220E                     
  4379                           ;BBSPI_LCD.c: 186:     WritePort_BBSPI (0x12,0x40);
  4380  00220E  0E40               	movlw	64
  4381  002210  6E0B               	movwf	WritePort_BBSPI@a^0,c
  4382  002212  0E12               	movlw	18
  4383  002214  ECBD  F012         	call	_WritePort_BBSPI
  4384  002218                     
  4385                           ;BBSPI_LCD.c: 187:     _delay((unsigned long)((1)*(10000000/4000.0)));
  4386  002218  0E04               	movlw	4
  4387  00221A  6E0D               	movwf	??_LCDPutInst^0,c
  4388  00221C  0E3E               	movlw	62
  4389  00221E                     u2667:
  4390  00221E  2EE8               	decfsz	wreg,f,c
  4391  002220  D7FE               	bra	u2667
  4392  002222  2E0D               	decfsz	??_LCDPutInst^0,f,c
  4393  002224  D7FC               	bra	u2667
  4394  002226                     
  4395                           ;BBSPI_LCD.c: 188:     WritePort_BBSPI (0x12, 0x00);
  4396  002226  0E00               	movlw	0
  4397  002228  6E0B               	movwf	WritePort_BBSPI@a^0,c
  4398  00222A  0E12               	movlw	18
  4399  00222C  ECBD  F012         	call	_WritePort_BBSPI
  4400  002230  0012               	return		;funcret
  4401  002232                     __end_of_LCDPutInst:
  4402                           	opt callstack 0
  4403                           
  4404 ;; *************** function _WritePort_BBSPI *****************
  4405 ;; Defined at:
  4406 ;;		line 144 in file "BBSPI_LCD.c"
  4407 ;; Parameters:    Size  Location     Type
  4408 ;;  port_add        1    wreg     unsigned char 
  4409 ;;  a               1   10[COMRAM] unsigned char 
  4410 ;; Auto vars:     Size  Location     Type
  4411 ;;  port_add        1   11[COMRAM] unsigned char 
  4412 ;; Return value:  Size  Location     Type
  4413 ;;                  1    wreg      void 
  4414 ;; Registers used:
  4415 ;;		wreg, status,2, status,0, cstack
  4416 ;; Tracked objects:
  4417 ;;		On entry : 0/0
  4418 ;;		On exit  : 0/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4421 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4424 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4425 ;;Total ram usage:        2 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; Hardware stack levels required when called:    4
  4428 ;; This function calls:
  4429 ;;		_SendByteBBSPI
  4430 ;; This function is called by:
  4431 ;;		_LCDPutChar
  4432 ;;		_LCDPutInst
  4433 ;;		_LCDInit
  4434 ;; This function uses a non-reentrant model
  4435 ;;
  4436                           
  4437                           	psect	text28
  4438  00257A                     __ptext28:
  4439                           	opt callstack 0
  4440  00257A                     _WritePort_BBSPI:
  4441                           	opt callstack 22
  4442                           
  4443                           ;incstack = 0
  4444                           ;WritePort_BBSPI@port_add stored from wreg
  4445  00257A  6E0C               	movwf	WritePort_BBSPI@port_add^0,c
  4446  00257C                     
  4447                           ;BBSPI_LCD.c: 144: void WritePort_BBSPI (unsigned char port_add, unsigned char a);BBSPI_
      +                          LCD.c: 145: {;BBSPI_LCD.c: 146:     LATAbits.LATA2 = 0;
  4448  00257C  9489               	bcf	137,2,c	;volatile
  4449  00257E                     
  4450                           ;BBSPI_LCD.c: 147:     SendByteBBSPI(0x40);
  4451  00257E  0E40               	movlw	64
  4452  002580  EC48  F010         	call	_SendByteBBSPI
  4453                           
  4454                           ;BBSPI_LCD.c: 148:     SendByteBBSPI(port_add);
  4455  002584  500C               	movf	WritePort_BBSPI@port_add^0,w,c
  4456  002586  EC48  F010         	call	_SendByteBBSPI
  4457                           
  4458                           ;BBSPI_LCD.c: 149:     SendByteBBSPI(a);
  4459  00258A  500B               	movf	WritePort_BBSPI@a^0,w,c
  4460  00258C  EC48  F010         	call	_SendByteBBSPI
  4461  002590                     
  4462                           ;BBSPI_LCD.c: 150:     LATAbits.LATA2 = 1;
  4463  002590  8489               	bsf	137,2,c	;volatile
  4464  002592  0012               	return		;funcret
  4465  002594                     __end_of_WritePort_BBSPI:
  4466                           	opt callstack 0
  4467                           
  4468 ;; *************** function _SendByteBBSPI *****************
  4469 ;; Defined at:
  4470 ;;		line 91 in file "BBSPI_LCD.c"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;  output          1    wreg     unsigned char 
  4473 ;; Auto vars:     Size  Location     Type
  4474 ;;  output          1    7[COMRAM] unsigned char 
  4475 ;;  input           1    9[COMRAM] unsigned char 
  4476 ;;  bitcount        1    8[COMRAM] unsigned char 
  4477 ;; Return value:  Size  Location     Type
  4478 ;;                  1    wreg      void 
  4479 ;; Registers used:
  4480 ;;		wreg, status,2, status,0
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/0
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4487 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4489 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4490 ;;Total ram usage:        3 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:    3
  4493 ;; This function calls:
  4494 ;;		Nothing
  4495 ;; This function is called by:
  4496 ;;		_WritePort_BBSPI
  4497 ;;		_Port_BBSPIInit
  4498 ;; This function uses a non-reentrant model
  4499 ;;
  4500                           
  4501                           	psect	text29
  4502  002090                     __ptext29:
  4503                           	opt callstack 0
  4504  002090                     _SendByteBBSPI:
  4505                           	opt callstack 22
  4506                           
  4507                           ;incstack = 0
  4508                           ;SendByteBBSPI@output stored from wreg
  4509  002090  6E08               	movwf	SendByteBBSPI@output^0,c
  4510  002092                     
  4511                           ;BBSPI_LCD.c: 91: void SendByteBBSPI (unsigned char output);BBSPI_LCD.c: 92: {;BBSPI_LCD
      +                          .c: 93:     unsigned char bitcount;;BBSPI_LCD.c: 94:     unsigned char input = output;
  4512  002092  C008  F00A         	movff	SendByteBBSPI@output,SendByteBBSPI@input
  4513  002096                     
  4514                           ;BBSPI_LCD.c: 96:     for(bitcount=0;bitcount<8;bitcount++)
  4515  002096  0E00               	movlw	0
  4516  002098  6E09               	movwf	SendByteBBSPI@bitcount^0,c
  4517  00209A                     l173:
  4518                           
  4519                           ;BBSPI_LCD.c: 97:     {;BBSPI_LCD.c: 99:         if(output & 0x80)
  4520  00209A  AE08               	btfss	SendByteBBSPI@output^0,7,c
  4521  00209C  EF52  F010         	goto	u1241
  4522  0020A0  EF54  F010         	goto	u1240
  4523  0020A4                     u1241:
  4524  0020A4  EF57  F010         	goto	l175
  4525  0020A8                     u1240:
  4526  0020A8                     
  4527                           ;BBSPI_LCD.c: 100:             LATCbits.LATC5 = 1;
  4528  0020A8  8A8B               	bsf	139,5,c	;volatile
  4529  0020AA  EF58  F010         	goto	l176
  4530  0020AE                     l175:
  4531                           
  4532                           ;BBSPI_LCD.c: 102:             LATCbits.LATC5 = 0;
  4533  0020AE  9A8B               	bcf	139,5,c	;volatile
  4534  0020B0                     l176:
  4535                           
  4536                           ;BBSPI_LCD.c: 104:         if (LATCbits.LATC4)
  4537  0020B0  A88B               	btfss	139,4,c	;volatile
  4538  0020B2  EF5D  F010         	goto	u1251
  4539  0020B6  EF5F  F010         	goto	u1250
  4540  0020BA                     u1251:
  4541  0020BA  EF63  F010         	goto	l2087
  4542  0020BE                     u1250:
  4543  0020BE                     
  4544                           ;BBSPI_LCD.c: 105:             input = (input << 1) | 0x1;
  4545  0020BE  80D8               	bsf	status,0,c
  4546  0020C0  360A               	rlcf	SendByteBBSPI@input^0,f,c
  4547  0020C2  EF66  F010         	goto	l2089
  4548  0020C6                     l2087:
  4549                           
  4550                           ;BBSPI_LCD.c: 107:             input = input << 1;
  4551  0020C6  500A               	movf	SendByteBBSPI@input^0,w,c
  4552  0020C8  240A               	addwf	SendByteBBSPI@input^0,w,c
  4553  0020CA  6E0A               	movwf	SendByteBBSPI@input^0,c
  4554  0020CC                     l2089:
  4555                           
  4556                           ;BBSPI_LCD.c: 108:         LATCbits.LATC3 = 1;
  4557  0020CC  868B               	bsf	139,3,c	;volatile
  4558  0020CE                     
  4559                           ;BBSPI_LCD.c: 109:         __nop();__nop();__nop();__nop();__nop();__nop();
  4560  0020CE  F000               	nop	
  4561  0020D0  F000               	nop	
  4562  0020D2  F000               	nop	
  4563  0020D4  F000               	nop	
  4564  0020D6  F000               	nop	
  4565  0020D8  F000               	nop	
  4566  0020DA                     
  4567                           ;BBSPI_LCD.c: 110:         __nop();__nop();__nop();__nop();__nop();__nop();
  4568  0020DA  F000               	nop	
  4569  0020DC  F000               	nop	
  4570  0020DE  F000               	nop	
  4571  0020E0  F000               	nop	
  4572  0020E2  F000               	nop	
  4573  0020E4  F000               	nop	
  4574  0020E6                     
  4575                           ;BBSPI_LCD.c: 111:         LATCbits.LATC3 = 0;
  4576  0020E6  968B               	bcf	139,3,c	;volatile
  4577                           
  4578                           ;BBSPI_LCD.c: 112:         output <<= 1;
  4579  0020E8  90D8               	bcf	status,0,c
  4580  0020EA  3608               	rlcf	SendByteBBSPI@output^0,f,c
  4581  0020EC                     
  4582                           ;BBSPI_LCD.c: 113:     }
  4583  0020EC  2A09               	incf	SendByteBBSPI@bitcount^0,f,c
  4584  0020EE  0E07               	movlw	7
  4585  0020F0  6409               	cpfsgt	SendByteBBSPI@bitcount^0,c
  4586  0020F2  EF7D  F010         	goto	u1261
  4587  0020F6  EF7F  F010         	goto	u1260
  4588  0020FA                     u1261:
  4589  0020FA  EF4D  F010         	goto	l173
  4590  0020FE                     u1260:
  4591  0020FE  0012               	return		;funcret
  4592  002100                     __end_of_SendByteBBSPI:
  4593                           	opt callstack 0
  4594                           
  4595 ;; *************** function _myISR *****************
  4596 ;; Defined at:
  4597 ;;		line 88 in file "main.c"
  4598 ;; Parameters:    Size  Location     Type
  4599 ;;		None
  4600 ;; Auto vars:     Size  Location     Type
  4601 ;;		None
  4602 ;; Return value:  Size  Location     Type
  4603 ;;                  1    wreg      void 
  4604 ;; Registers used:
  4605 ;;		wreg, status,2, status,0, cstack
  4606 ;; Tracked objects:
  4607 ;;		On entry : 0/0
  4608 ;;		On exit  : 0/0
  4609 ;;		Unchanged: 0/0
  4610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4615 ;;Total ram usage:        0 bytes
  4616 ;; Hardware stack levels used:    1
  4617 ;; Hardware stack levels required when called:    2
  4618 ;; This function calls:
  4619 ;;		_readButtonRA5
  4620 ;; This function is called by:
  4621 ;;		Interrupt level 2
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           	psect	intcode
  4626  000008                     __pintcode:
  4627                           	opt callstack 0
  4628  000008                     _myISR:
  4629                           	opt callstack 18
  4630                           
  4631                           ;incstack = 0
  4632  000008  8257               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  4633  00000A  ED78  F011         	call	int_func,f	;refresh shadow registers
  4634                           
  4635                           	psect	intcode_body
  4636  0022F0                     __pintcode_body:
  4637                           	opt callstack 18
  4638  0022F0                     int_func:
  4639                           	opt callstack 18
  4640  0022F0  0006               	pop		; remove dummy address from shadow register refresh
  4641  0022F2                     
  4642                           ;main.c: 89:     if(INTCONbits.TMR0IE && INTCONbits.TMR0IF) {
  4643  0022F2  AAF2               	btfss	242,5,c	;volatile
  4644  0022F4  EF7E  F011         	goto	i2u188_41
  4645  0022F8  EF80  F011         	goto	i2u188_40
  4646  0022FC                     i2u188_41:
  4647  0022FC  EFA2  F011         	goto	i2l99
  4648  002300                     i2u188_40:
  4649  002300  A4F2               	btfss	242,2,c	;volatile
  4650  002302  EF85  F011         	goto	i2u189_41
  4651  002306  EF87  F011         	goto	i2u189_40
  4652  00230A                     i2u189_41:
  4653  00230A  EFA2  F011         	goto	i2l99
  4654  00230E                     i2u189_40:
  4655  00230E                     
  4656                           ;main.c: 90:         INTCONbits.TMR0IF = 0;
  4657  00230E  94F2               	bcf	242,2,c	;volatile
  4658  002310                     
  4659                           ;main.c: 91:         TMR0L = 177;
  4660  002310  0EB1               	movlw	177
  4661  002312  6ED6               	movwf	214,c	;volatile
  4662                           
  4663                           ;main.c: 92:         timerflag_10ms = 1;
  4664  002314  0E01               	movlw	1
  4665  002316  6E54               	movwf	_timerflag_10ms^0,c
  4666  002318                     
  4667                           ;main.c: 93:         count++;
  4668  002318  0100               	movlb	0	; () banked
  4669  00231A  4B6A               	infsnz	_count& (0+255),f,b
  4670  00231C  2B6B               	incf	(_count+1)& (0+255),f,b
  4671  00231E                     
  4672                           ; BSR set to: 0
  4673                           ;main.c: 94:         if(count >= 100) {
  4674  00231E  516B               	movf	(_count+1)& (0+255),w,b
  4675  002320  E109               	bnz	i2u190_40
  4676  002322  0E64               	movlw	100
  4677  002324  5D6A               	subwf	_count& (0+255),w,b
  4678  002326  A0D8               	btfss	status,0,c
  4679  002328  EF98  F011         	goto	i2u190_41
  4680  00232C  EF9A  F011         	goto	i2u190_40
  4681  002330                     i2u190_41:
  4682  002330  EFA0  F011         	goto	i2l2589
  4683  002334                     i2u190_40:
  4684  002334                     
  4685                           ; BSR set to: 0
  4686                           ;main.c: 95:             timerflag_1s = 1;
  4687  002334  0E01               	movlw	1
  4688  002336  6F6F               	movwf	_timerflag_1s& (0+255),b
  4689                           
  4690                           ;main.c: 96:             count = 0;
  4691  002338  0E00               	movlw	0
  4692  00233A  6F6B               	movwf	(_count+1)& (0+255),b
  4693  00233C  0E00               	movlw	0
  4694  00233E  6F6A               	movwf	_count& (0+255),b
  4695  002340                     i2l2589:
  4696                           
  4697                           ; BSR set to: 0
  4698                           ;main.c: 98:         readButtonRA5();
  4699  002340  EC16  F00E         	call	_readButtonRA5	;wreg free
  4700  002344                     i2l99:
  4701  002344  9257               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4702  002346  0011               	retfie		f
  4703  002348                     __end_of_myISR:
  4704                           	opt callstack 0
  4705                           
  4706 ;; *************** function _readButtonRA5 *****************
  4707 ;; Defined at:
  4708 ;;		line 60 in file "main.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;		None
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;		None
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  1    wreg      void 
  4715 ;; Registers used:
  4716 ;;		wreg, status,2, status,0, cstack
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4724 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4725 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4726 ;;Total ram usage:        2 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:    1
  4729 ;; This function calls:
  4730 ;;		___lwmod
  4731 ;; This function is called by:
  4732 ;;		_myISR
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           	psect	text31
  4737  001C2C                     __ptext31:
  4738                           	opt callstack 0
  4739  001C2C                     _readButtonRA5:
  4740                           	opt callstack 18
  4741  001C2C                     
  4742                           ;main.c: 61:     firstReadRA5 = secondReadRA5;
  4743  001C2C  C055  F056         	movff	_secondReadRA5,_firstReadRA5
  4744  001C30                     
  4745                           ;main.c: 62:     secondReadRA5 = PORTAbits.RA5;
  4746  001C30  0E00               	movlw	0
  4747  001C32  BA80               	btfsc	128,5,c	;volatile
  4748  001C34  0E01               	movlw	1
  4749  001C36  6E55               	movwf	_secondReadRA5^0,c
  4750  001C38                     
  4751                           ;main.c: 63:     if(secondReadRA5 == firstReadRA5) {
  4752  001C38  5056               	movf	_firstReadRA5^0,w,c
  4753  001C3A  1855               	xorwf	_secondReadRA5^0,w,c
  4754  001C3C  A4D8               	btfss	status,2,c
  4755  001C3E  EF23  F00E         	goto	i2u177_41
  4756  001C42  EF25  F00E         	goto	i2u177_40
  4757  001C46                     i2u177_41:
  4758  001C46  EF88  F00E         	goto	i2l92
  4759  001C4A                     i2u177_40:
  4760  001C4A  EF73  F00E         	goto	i2l2535
  4761  001C4E                     i2l2515:
  4762                           
  4763                           ;main.c: 66:                 if(secondReadRA5 == 0) {
  4764  001C4E  5055               	movf	_secondReadRA5^0,w,c
  4765  001C50  A4D8               	btfss	status,2,c
  4766  001C52  EF2D  F00E         	goto	i2u178_41
  4767  001C56  EF2F  F00E         	goto	i2u178_40
  4768  001C5A                     i2u178_41:
  4769  001C5A  EF88  F00E         	goto	i2l92
  4770  001C5E                     i2u178_40:
  4771  001C5E                     
  4772                           ;main.c: 67:                     checkRA5 = 1;
  4773  001C5E  0E00               	movlw	0
  4774  001C60  0100               	movlb	0	; () banked
  4775  001C62  6F65               	movwf	(_checkRA5+1)& (0+255),b
  4776  001C64  0E01               	movlw	1
  4777  001C66  6F64               	movwf	_checkRA5& (0+255),b
  4778                           
  4779                           ;main.c: 68:                     state_buttonRA5 = PRESSED;
  4780  001C68  0E01               	movlw	1
  4781  001C6A  6E53               	movwf	_state_buttonRA5^0,c
  4782  001C6C                     
  4783                           ; BSR set to: 0
  4784                           ;main.c: 69:                     countRA5++;
  4785  001C6C  4B68               	infsnz	_countRA5& (0+255),f,b
  4786  001C6E  2B69               	incf	(_countRA5+1)& (0+255),f,b
  4787  001C70  EF88  F00E         	goto	i2l92
  4788  001C74                     i2l2521:
  4789                           
  4790                           ;main.c: 73:                 if(secondReadRA5 != 0) {
  4791  001C74  5055               	movf	_secondReadRA5^0,w,c
  4792  001C76  B4D8               	btfsc	status,2,c
  4793  001C78  EF40  F00E         	goto	i2u179_41
  4794  001C7C  EF42  F00E         	goto	i2u179_40
  4795  001C80                     i2u179_41:
  4796  001C80  EF4B  F00E         	goto	i2l2525
  4797  001C84                     i2u179_40:
  4798  001C84                     
  4799                           ;main.c: 74:                     countRA5 = 0;
  4800  001C84  0E00               	movlw	0
  4801  001C86  0100               	movlb	0	; () banked
  4802  001C88  6F69               	movwf	(_countRA5+1)& (0+255),b
  4803  001C8A  0E00               	movlw	0
  4804  001C8C  6F68               	movwf	_countRA5& (0+255),b
  4805                           
  4806                           ;main.c: 75:                     state_buttonRA5 = INIT;
  4807  001C8E  0E00               	movlw	0
  4808  001C90  6E53               	movwf	_state_buttonRA5^0,c
  4809                           
  4810                           ;main.c: 76:                 }
  4811  001C92  EF88  F00E         	goto	i2l92
  4812  001C96                     i2l2525:
  4813                           
  4814                           ;main.c: 78:                     countRA5++;
  4815  001C96  0100               	movlb	0	; () banked
  4816  001C98  4B68               	infsnz	_countRA5& (0+255),f,b
  4817  001C9A  2B69               	incf	(_countRA5+1)& (0+255),f,b
  4818  001C9C                     
  4819                           ; BSR set to: 0
  4820                           ;main.c: 79:                     if(countRA5 > 99 && countRA5 % 20 == 0) {
  4821  001C9C  5169               	movf	(_countRA5+1)& (0+255),w,b
  4822  001C9E  E109               	bnz	i2u180_40
  4823  001CA0  0E64               	movlw	100
  4824  001CA2  5D68               	subwf	_countRA5& (0+255),w,b
  4825  001CA4  A0D8               	btfss	status,0,c
  4826  001CA6  EF57  F00E         	goto	i2u180_41
  4827  001CAA  EF59  F00E         	goto	i2u180_40
  4828  001CAE                     i2u180_41:
  4829  001CAE  EF88  F00E         	goto	i2l87
  4830  001CB2                     i2u180_40:
  4831  001CB2                     
  4832                           ; BSR set to: 0
  4833  001CB2  C068  F001         	movff	_countRA5,___lwmod@dividend
  4834  001CB6  C069  F002         	movff	_countRA5+1,___lwmod@dividend+1
  4835  001CBA  0E00               	movlw	0
  4836  001CBC  6E04               	movwf	(___lwmod@divisor+1)^0,c
  4837  001CBE  0E14               	movlw	20
  4838  001CC0  6E03               	movwf	___lwmod@divisor^0,c
  4839  001CC2  EC19  F011         	call	___lwmod	;wreg free
  4840  001CC6  5001               	movf	?___lwmod^0,w,c
  4841  001CC8  1002               	iorwf	(?___lwmod+1)^0,w,c
  4842  001CCA  A4D8               	btfss	status,2,c
  4843  001CCC  EF6A  F00E         	goto	i2u181_41
  4844  001CD0  EF6C  F00E         	goto	i2u181_40
  4845  001CD4                     i2u181_41:
  4846  001CD4  EF88  F00E         	goto	i2l87
  4847  001CD8                     i2u181_40:
  4848  001CD8                     
  4849                           ;main.c: 80:                         checkRA5 = 1;
  4850  001CD8  0E00               	movlw	0
  4851  001CDA  0100               	movlb	0	; () banked
  4852  001CDC  6F65               	movwf	(_checkRA5+1)& (0+255),b
  4853  001CDE  0E01               	movlw	1
  4854  001CE0  6F64               	movwf	_checkRA5& (0+255),b
  4855  001CE2  EF88  F00E         	goto	i2l92
  4856  001CE6                     i2l2535:
  4857  001CE6  5053               	movf	_state_buttonRA5^0,w,c
  4858  001CE8  6E06               	movwf	??_readButtonRA5^0,c
  4859  001CEA  6A07               	clrf	(??_readButtonRA5+1)^0,c
  4860                           
  4861                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4862                           ; Switch size 1, requested type "simple"
  4863                           ; Number of cases is 1, Range of values is 0 to 0
  4864                           ; switch strategies available:
  4865                           ; Name         Instructions Cycles
  4866                           ; simple_byte            4     3 (average)
  4867                           ;	Chosen strategy is simple_byte
  4868  001CEC  5007               	movf	(??_readButtonRA5+1)^0,w,c
  4869  001CEE  0A00               	xorlw	0	; case 0
  4870  001CF0  B4D8               	btfsc	status,2,c
  4871  001CF2  EF7D  F00E         	goto	i2l3327
  4872  001CF6  EF88  F00E         	goto	i2l92
  4873  001CFA                     i2l3327:
  4874                           
  4875                           ; Switch size 1, requested type "simple"
  4876                           ; Number of cases is 2, Range of values is 0 to 1
  4877                           ; switch strategies available:
  4878                           ; Name         Instructions Cycles
  4879                           ; simple_byte            7     4 (average)
  4880                           ;	Chosen strategy is simple_byte
  4881  001CFA  5006               	movf	??_readButtonRA5^0,w,c
  4882  001CFC  0A00               	xorlw	0	; case 0
  4883  001CFE  B4D8               	btfsc	status,2,c
  4884  001D00  EF27  F00E         	goto	i2l2515
  4885  001D04  0A01               	xorlw	1	; case 1
  4886  001D06  B4D8               	btfsc	status,2,c
  4887  001D08  EF3A  F00E         	goto	i2l2521
  4888  001D0C  EF88  F00E         	goto	i2l92
  4889  001D10                     i2l87:
  4890  001D10                     i2l92:
  4891  001D10  0012               	return		;funcret
  4892  001D12                     __end_of_readButtonRA5:
  4893                           	opt callstack 0
  4894                           
  4895 ;; *************** function ___lwmod *****************
  4896 ;; Defined at:
  4897 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lwmod.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;  dividend        2    0[COMRAM] unsigned int 
  4900 ;;  divisor         2    2[COMRAM] unsigned int 
  4901 ;; Auto vars:     Size  Location     Type
  4902 ;;  counter         1    4[COMRAM] unsigned char 
  4903 ;; Return value:  Size  Location     Type
  4904 ;;                  2    0[COMRAM] unsigned int 
  4905 ;; Registers used:
  4906 ;;		wreg, status,2, status,0
  4907 ;; Tracked objects:
  4908 ;;		On entry : 0/0
  4909 ;;		On exit  : 0/0
  4910 ;;		Unchanged: 0/0
  4911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4912 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4913 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4915 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4916 ;;Total ram usage:        5 bytes
  4917 ;; Hardware stack levels used:    1
  4918 ;; This function calls:
  4919 ;;		Nothing
  4920 ;; This function is called by:
  4921 ;;		_readButtonRA5
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           	psect	text32
  4926  002232                     __ptext32:
  4927                           	opt callstack 0
  4928  002232                     ___lwmod:
  4929                           	opt callstack 18
  4930  002232  5003               	movf	___lwmod@divisor^0,w,c
  4931  002234  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  4932  002236  B4D8               	btfsc	status,2,c
  4933  002238  EF20  F011         	goto	i2u174_41
  4934  00223C  EF22  F011         	goto	i2u174_40
  4935  002240                     i2u174_41:
  4936  002240  EF46  F011         	goto	i2l849
  4937  002244                     i2u174_40:
  4938  002244  0E01               	movlw	1
  4939  002246  6E05               	movwf	___lwmod@counter^0,c
  4940  002248  EF2A  F011         	goto	i2l2483
  4941  00224C                     i2l2481:
  4942  00224C  90D8               	bcf	status,0,c
  4943  00224E  3603               	rlcf	___lwmod@divisor^0,f,c
  4944  002250  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  4945  002252  2A05               	incf	___lwmod@counter^0,f,c
  4946  002254                     i2l2483:
  4947  002254  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  4948  002256  EF2F  F011         	goto	i2u175_41
  4949  00225A  EF31  F011         	goto	i2u175_40
  4950  00225E                     i2u175_41:
  4951  00225E  EF26  F011         	goto	i2l2481
  4952  002262                     i2u175_40:
  4953  002262                     i2l2485:
  4954  002262  5003               	movf	___lwmod@divisor^0,w,c
  4955  002264  5C01               	subwf	___lwmod@dividend^0,w,c
  4956  002266  5004               	movf	(___lwmod@divisor+1)^0,w,c
  4957  002268  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  4958  00226A  A0D8               	btfss	status,0,c
  4959  00226C  EF3A  F011         	goto	i2u176_41
  4960  002270  EF3C  F011         	goto	i2u176_40
  4961  002274                     i2u176_41:
  4962  002274  EF40  F011         	goto	i2l2489
  4963  002278                     i2u176_40:
  4964  002278  5003               	movf	___lwmod@divisor^0,w,c
  4965  00227A  5E01               	subwf	___lwmod@dividend^0,f,c
  4966  00227C  5004               	movf	(___lwmod@divisor+1)^0,w,c
  4967  00227E  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  4968  002280                     i2l2489:
  4969  002280  90D8               	bcf	status,0,c
  4970  002282  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  4971  002284  3203               	rrcf	___lwmod@divisor^0,f,c
  4972  002286  2E05               	decfsz	___lwmod@counter^0,f,c
  4973  002288  EF31  F011         	goto	i2l2485
  4974  00228C                     i2l849:
  4975  00228C  C001  F001         	movff	___lwmod@dividend,?___lwmod
  4976  002290  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  4977  002294  0012               	return		;funcret
  4978  002296                     __end_of___lwmod:
  4979                           	opt callstack 0
  4980                           
  4981                           	psect	rparam
  4982  0000                     
  4983                           	psect	temp
  4984  000057                     btemp:
  4985                           	opt callstack 0
  4986  000057                     	ds	1
  4987  0000                     int$flags	set	btemp
  4988  0000                     wtemp8	set	btemp+1
  4989  0000                     ttemp5	set	btemp+1
  4990  0000                     ttemp6	set	btemp+4
  4991  0000                     ttemp7	set	btemp+8
  4992                           tosu	equ	0xFFF
  4993                           tosh	equ	0xFFE
  4994                           tosl	equ	0xFFD
  4995                           stkptr	equ	0xFFC
  4996                           pclatu	equ	0xFFB
  4997                           pclath	equ	0xFFA
  4998                           pcl	equ	0xFF9
  4999                           tblptru	equ	0xFF8
  5000                           tblptrh	equ	0xFF7
  5001                           tblptrl	equ	0xFF6
  5002                           tablat	equ	0xFF5
  5003                           prodh	equ	0xFF4
  5004                           prodl	equ	0xFF3
  5005                           indf0	equ	0xFEF
  5006                           postinc0	equ	0xFEE
  5007                           postdec0	equ	0xFED
  5008                           preinc0	equ	0xFEC
  5009                           plusw0	equ	0xFEB
  5010                           fsr0h	equ	0xFEA
  5011                           fsr0l	equ	0xFE9
  5012                           wreg	equ	0xFE8
  5013                           indf1	equ	0xFE7
  5014                           postinc1	equ	0xFE6
  5015                           postdec1	equ	0xFE5
  5016                           preinc1	equ	0xFE4
  5017                           plusw1	equ	0xFE3
  5018                           fsr1h	equ	0xFE2
  5019                           fsr1l	equ	0xFE1
  5020                           bsr	equ	0xFE0
  5021                           indf2	equ	0xFDF
  5022                           postinc2	equ	0xFDE
  5023                           postdec2	equ	0xFDD
  5024                           preinc2	equ	0xFDC
  5025                           plusw2	equ	0xFDB
  5026                           fsr2h	equ	0xFDA
  5027                           fsr2l	equ	0xFD9
  5028                           status	equ	0xFD8


Data Sizes:
    Strings     56
    Constant    0
    Data        2
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     78      86
    BANK0           160     32      84
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_6(CODE[18]), STR_4(CODE[7]), STR_3(CODE[6]), STR_2(CODE[6]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S1215_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_6(CODE[18]), STR_4(CODE[7]), STR_3(CODE[6]), STR_2(CODE[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_6(CODE[18]), STR_4(CODE[7]), STR_3(CODE[6]), STR_2(CODE[6]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 18
		 -> STR_6(CODE[18]), STR_4(CODE[7]), STR_3(CODE[6]), STR_2(CODE[6]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    LCDPutStr@ptr	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_5(CODE[16]), STR_1(CODE[9]), 


Critical Paths under _main in COMRAM

    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _LCDPutStr->_LCDPutChar
    _LCDPutChar->_WritePort_BBSPI
    _LCDPutInst->_WritePort_BBSPI
    _WritePort_BBSPI->_SendByteBBSPI

Critical Paths under _myISR in COMRAM

    _myISR->_readButtonRA5
    _readButtonRA5->___lwmod

Critical Paths under _main in BANK0

    _clock->_printf
    _display_clock->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _myISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _myISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _myISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _myISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _myISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _myISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _myISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _myISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _myISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _myISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _myISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _myISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _myISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _myISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   27400
                                             30 BANK0      2     2      0
                              _clock
                     _interrupt_init
                           _osc_init
                           _pin_init
                        _timer0_init
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pin_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _osc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interrupt_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clock                                                0     0      0   27400
                         _LCDPutInst
                          _LCDPutStr
                      _display_clock
                             _printf
 ---------------------------------------------------------------------------------
 (2) _display_clock                                        0     0      0   14898
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                               8     4      4   10529
                                             22 BANK0      8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6   10082
                                             76 COMRAM     2     2      0
                                             16 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           46    40      6    9552
                                             70 COMRAM     6     0      6
                                              0 BANK0     16    16      0
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                36    26     10    5497
                                             34 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    3231
                                             23 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               4     2      2     220
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1444
                                             16 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4     944
                                              7 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                             25 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     613
                                              7 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     625
                                              7 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (5) _atoi                                                15    13      2    1615
                                             14 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (6) _isspace                                              7     5      2     259
                                              7 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              6     4      2     281
                                              7 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     512
                                              7 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     752
                                              7 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     756
                                              7 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _LCDPutStr                                            2     0      2    1085
                                             14 COMRAM     2     0      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (4) _LCDPutChar                                           2     2      0     888
                                             12 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (3) _LCDPutInst                                           2     2      0     888
                                             12 COMRAM     2     2      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (5) _WritePort_BBSPI                                      2     1      1     866
                                             10 COMRAM     2     1      1
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (6) _SendByteBBSPI                                        3     3      0     138
                                              7 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _myISR                                               0     0      0     311
                      _readButtonRA5
 ---------------------------------------------------------------------------------
 (12) _readButtonRA5                                       2     2      0     311
                                              5 COMRAM     2     2      0
                            ___lwmod
 ---------------------------------------------------------------------------------
 (13) ___lwmod                                             5     1      4     311
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clock
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
     _display_clock
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
       _LCDPutInst
         _WritePort_BBSPI
           _SendByteBBSPI
       _LCDPutStr
         _LCDPutChar
           _WritePort_BBSPI
             _SendByteBBSPI
       ___awdiv
       ___awmod
       _printf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _fputc
               _putch
             _isdigit
     _printf
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
               _fputs
                 _fputc
                   _putch
               _strlen
           _fputc
             _putch
           _isdigit
   _interrupt_init
   _osc_init
   _pin_init
   _timer0_init

 _myISR (ROOT)
   _readButtonRA5
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     20      54       5       52.5%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4E      56       1       91.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AA      32        0.0%
DATA                 0      0      AA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Sep 14 15:26:07 2019

             ?_LCDPutChar 0001                        l71 25AC                        l80 25A6  
                      l74 259C                        l77 252A              ___awdiv@sign 000D  
             ?_LCDPutInst 0001       ___wmul@multiplicand 000A     SendByteBBSPI@bitcount 0009  
  __end_of_interrupt_init 25AE                       l105 22B8                       l323 1134  
                     l236 1C2A                       l173 209A                       l309 16A2  
                     l175 20AE                       l191 2230                       l247 1F48  
                     l239 1F36                       l176 20B0                       l344 215C  
                     l185 2592                       l281 1E5C                       l345 2164  
                     l338 13C4                       l179 20FE                       l283 1E96  
                     l291 146C                       l188 21CA                       l348 2578  
                     l197 245A                       l462 19CE                       l278 1E1A  
                     l289 1464                       l475 1B32                       l592 1FF8  
                     l579 1DD4                       _abs 23DE                       _pad 1DD6  
                     _min 0071                       _sec 0070              ___awmod@sign 000D  
                     wreg 000FE8              __CFG_LVP$OFF 000000              __CFG_WDT$OFF 000000  
                    l1101 25B0                      l1023 2414                      l1026 241C  
                    l1107 2502                      ?_abs 001A                      l1060 24CC  
                    l2101 20D8                      l1054 183E                      l2111 20E2  
                    l2103 20DA                      l2113 20E4                      l2105 20DC  
                    l1057 1846                      l3001 171E                      l2115 20E6  
                    l2107 20DE                      l3011 174A                      l1083 208E  
                    l1091 23DC                      l1068 2398                      l2117 20EC  
                    l2109 20E0                      l3021 17FE                      l3013 1782  
                    l3005 1724                      l3101 1342                      l2119 20EE  
                    l3023 1810                      l3007 173A                      l3111 137E  
                    l3103 1350                      l3031 103A                      l2225 257C  
                    l2401 1D4A                      l3025 1822                      l3017 17BC  
                    l3009 1742                      l3105 1364                      l3041 1092  
                    l3033 1062                      l1098 2552                      l2091 20CE  
                    l2083 20A8                      l2075 2092                      l2227 257E  
                    l2411 1D82                      l2403 1D52                      l3043 1094  
                    l3035 1070                      l3115 138A                      l3131 2100  
                    l3203 22B8                      l2093 20D0                      l2085 20BE  
                    l2077 2096                      l2229 2590                      l2341 219A  
                    l2333 2168                      l2421 1DAE                      l2413 1D88  
                    l2405 1D64                      l3117 13B2                      l3109 1370  
                    l3061 10BE                      l3053 10B2                      l3045 10A6  
                    l3037 1082                      l3133 2108                      l3141 2536  
                    l2501 251E                      l2095 20D2                      l2087 20C6  
                    l2343 21A8                      l2335 2178                      l2415 1D9E  
                    l2407 1D6C                      l2423 1DB4                      l2431 1F4A  
                    l3071 1144                      l3039 1086                      l3135 2116  
                    l3151 1C02                      l2503 2528                      l2097 20D4  
                    l2089 20CC                      l2361 21E8                      l2345 21B2  
                    l2337 2182                      l2425 1DC4                      l2417 1DA6  
                    l2409 1D74                      l2441 1F76                      l2433 1F4E  
                    l3081 11DE                      l3073 116C                      l3065 10CA  
                    l3057 10B8                      l3049 10AC                      l3137 213C  
                    l3153 1C16                      l3145 1B34                      l3161 1EBC  
                    l2505 259E                      l3321 22CE                      l2099 20D6  
                    l2371 2226                      l2363 21F6                      l2347 21C0  
                    l2339 2190                      l2427 1DCC                      l2419 1DA8  
                    l2451 1FAE                      l2443 1F7E                      l2435 1F5C  
                    l3091 1272                      l3083 11EC                      l3075 11A2  
                    l3323 10F4                      l3067 1122                      l3139 252C  
                    l3147 1BE2                      l3171 1EE4                      l3163 1ECC  
                    l3155 1E98                      l2365 2200                      l2357 21CE  
                    l2373 241E                      l2461 1FE8                      l2453 1FC4  
                    l2445 1F90                      l2437 1F64                      l3325 176C  
                    l3093 129A                      l3077 11B0                      l3069 1142  
                    l3149 1BEE                      l3181 1F0E                      l3173 1EF4  
                    l3165 1ECE                      l3157 1E9E                      l2367 220E  
                    l2359 21DE                      l2375 2422                      l2391 1D24  
                    l2463 1FF0                      l2455 1FCC                      l2447 1F98  
                    l2439 1F68                      l3095 12E2                      l3087 1238  
                    l3079 11BE                      l3183 1F12                      l3175 1EF8  
                    l3167 1EDE                      l3159 1EAA                      l3191 229E  
                    l2369 2218                      l2377 2436                      l2393 1D2C  
                    l2457 1FD2                      l2449 1FA0                      l2801 1DE4  
                    l3089 124A                      l3177 1EFA                      l3169 1EE2  
                    l3185 1F18                      l3193 22A2                      l2379 243A  
                    l2395 1D30                      l2387 1D12                      l2459 1FD8  
                    l2811 1E3A                      l2803 1DF8                      l3099 131A  
                    l3187 1F2A                      l3179 1F0A                      l3195 22A6  
                    l2397 1D3E                      l2389 1D16                      l2901 1AAA  
                    l2821 23DE                      l2813 1E3E                      l2805 1E06  
                    l2493 25A8                      l3197 22B0                      l3189 2296  
                    l2399 1D46                      l2831 2570                      l2911 1B12  
                    l2903 1ACA                      l2823 23F8                      l2815 1E6A  
                    l2807 1E12                      l2495 2594                      l2825 2496  
                    l2921 238E                      l2841 187A                      l2905 1ADC  
                    l2817 1E7E                      l2809 1E26                      l2497 2504  
                    l2923 2392                      l2915 2348                      l2851 18BC  
                    l2843 187E                      l2835 1848                      l2907 1AE2  
                    l2771 201E                      l2931 140E                      l2499 2510  
                    l2829 2554                      l2917 234C                      l2861 1916  
                    l2853 18DA                      l2845 188C                      l2837 184C  
                    l2909 1AF2                      l2773 2028                      l2781 239A  
                    l2941 1474                      l2933 142E                      ?_pad 0018  
                    l2919 2360                      l2863 1944                      l2855 18E2  
                    l2871 197E                      l2847 18AC                      l2839 185A  
                    l2775 2046                      l2767 1FFA                      l2783 23A6  
                    l2791 24DA                      l2951 14AC                      l2943 1486  
                    l2935 143C                      l2927 13C6                      l2873 198E  
                    l2865 1964                      l2857 18F6                      l2849 18B0  
                    l2881 19D4                      l2777 207C                      l2769 200C  
                    l2785 23B8                      l2793 24DE                      l2953 14B2  
                    l2961 15A4                      l2945 1494                      l2937 143E  
                    l2929 13E6                      l2875 19AE                      l2867 1966  
                    l2859 1904                      l2891 1A34                      l2883 19E2  
                    l2787 23BC                      l2795 24F6                      l2963 15BE  
                    l2971 161E                      l2955 1534                      l2947 149A  
                    l2939 1458                      l2869 1978                      l2893 1A52  
                    l2885 1A02                      l2789 24CE                      l2981 1662  
                    l2973 1630                      l2965 15DC                      l2957 153A  
                    l2949 14A2                      l2991 16B8                      l2895 1A5A  
                    l2887 1A06                      l2879 19D0                      l2799 1DD6  
                    l2983 166A                      l2975 163E                      l2967 15F6  
                    l2959 1540                      l2993 16BC                      l2897 1A6E  
                    l2889 1A14                      l2977 1644                      l2985 167A  
                    l2969 1610                      l2995 16C0                      l2899 1A7C  
                    l2979 1656                      l2997 16E0                      l2989 16A4  
                    l2999 171A            ?_display_clock 0001                      STR_1 1023  
                    STR_2 1033                      STR_3 1033                      STR_4 102C  
                    STR_5 1013                      STR_6 1001                      u2000 1E6A  
                    u2001 1E66                      u2010 23F8                      u2011 23F4  
                    u2020 24C6                      u2100 198E                      u2021 24C0  
                    u2101 198A                      u2030 24C8                      u2110 19E2  
                    u2111 19DE                      u1240 20A8                      u2040 185A  
                    u2120 1A14                      u2200 13F8                      u1241 20A4  
                    u2041 1856                      u2121 1A10                      u1250 20BE  
                    u2050 188C                      u2130 1A52                      u2210 140E  
                    u1251 20BA                      u2051 1888                      u2131 1A4E  
                    u2211 140A                      u1260 20FE                      u2140 1A7C  
                    u2300 161E                      u2220 143C                      u1261 20FA  
                    u2061 18B6                      u2141 1A78                      u2301 161A  
                    u2221 1438                      _LATA 000F89                      u2070 18DA  
                    u2150 1AAA                      u2310 1630                      u2230 1458  
                    _LATB 000F8A                      u2071 18D6                      u2151 1AA6  
                    u2311 162C                      u2231 1454                      _LATC 000F8B  
                    u2400 1822                      u2080 1904                      u2160 1AF2  
                    u2320 163E                      u2240 1486                      _LATD 000F8C  
                    u2401 181E                      u2081 1900                      u2161 1AEE  
                    u2321 163A                      u2241 1482                      _LATE 000F8D  
                    u1610 245A                      u2170 2360                      u2090 1944  
                    u2330 1656                      u2250 1494                      u2410 1062  
                    u1611 2456                      u2171 235C                      u2091 1940  
                    u2331 1652                      u2251 1490                      u2411 105E  
                    u1620 1D24                      u1700 1F90                      u2180 238E  
                    u2340 16E0                      u2260 15BE                      u2500 129A  
                    u2420 1134                      u1621 1D20                      u1701 1F8C  
                    u2181 238A                      u2341 16DC                      u2261 15BA  
                    u2501 1296                      u2421 1130                      u1630 1D3E  
                    u1710 1FAE                      u2350 171A                      u2270 15DC  
                    u2190 13F6                      u2510 1342                      u2430 1142  
                    u1631 1D3A                      u1711 1FAA                      u2351 1716  
                    u2271 15D8                      u2191 13F0                      u2511 133E  
                    u2431 113E                      u1640 1D64                      u1720 1FC4  
                    u2360 1736                      u2280 15F6                      u2440 116C  
                    u2520 215C                      u1641 1D60                      u1721 1FC0  
                    u2361 1732                      u2281 15F2                      u2441 1168  
                    u2521 2158                      u1650 1D82                      u1730 1FE8  
                    u2370 17F8                      u2290 1610                      u2450 11B0  
                    u2530 1ECC                      u1651 1D7E                      u1731 1FE4  
                    u2371 17F2                      u2291 160C                      u2451 11AC  
                    u2531 1EC8                      u1660 1D9E                      u2380 17FA  
                    u2460 1232                      u2540 1EDE                      u1661 1D9A  
                    u2461 122C                      u2541 1EDA                      u1670 1DC4  
                    u2390 1810                      u1910 200C                      u2470 1234  
                    u2550 1EF4                      u2607 2188                      u1671 1DC0  
                    u2391 180C                      u1911 2008                      u2551 1EF0  
                    u1680 1F5C                      u1920 201E                      u2480 124A  
                    u2560 1F0A                      u2617 21A0                      u1681 1F58  
                    u1921 201A                      u2481 1246                      u2561 1F06  
                    u1690 1F76                      u1930 2046                      u2490 1272  
                    u2570 1F2A                      u2627 21B8                      u1691 1F72  
                    u1931 2042                      u2491 126E                      u2571 1F26  
                    u1940 207C                      u2580 1F48                      u2637 21D4  
                    u1941 2078                      u2581 1F44                      u1950 23DC  
                    u2647 21EE                      u1951 23D8                      u1960 24F6  
                    u2657 2206                      u1961 24F2                      u1970 1DE4  
                    u2667 221E                      u1971 1DE0                      u1980 1E06  
                    u2597 216E                      u1981 1E02                      u1990 1E5C  
                    u1991 1E58                      i2l92 1D10                      i2l87 1D10  
                    i2l99 2344                      abs@a 001A                      _dbuf 0074  
                    _atoi 16A4                      _main 2296                      _dtoa 13C6  
                    _hour 0072                      _prec 004F                      _nout 0060  
                    pad@i 001F                      pad@p 001C                      fsr1h 000FE2  
                    fsr2h 000FDA                      indf2 000FDF                      fsr1l 000FE1  
                    pad@w 0021                      fsr2l 000FD9                      btemp 0057  
        ?_WritePort_BBSPI 000B                      prodh 000FF4                      prodl 000FF3  
                    start 000E        __size_of_LCDPutStr 003E             __CFG_IESO$OFF 000000  
           __CFG_MCLRE$ON 000000              ___param_bank 000000                     ??_abs 001C  
                   ??_pad 001E           __end_of___aodiv 19D0                     ?_atoi 000F  
                   ?_main 0001                     ?_dtoa 0023           __end_of___aomod 1B34  
         __end_of___awdiv 1DD6           __end_of___awmod 1FFA           ?_interrupt_init 0001  
                   _T0CON 000FD5           ___awdiv@divisor 000A           __end_of___lwmod 2296  
                   i2l856 2294                     i2l849 228C           ___awdiv@counter 000C  
            vfpfcnvrt@fmt 0049                     _TMR0L 000FD6                     _TRISA 000F92  
                   _TRISB 000F93                     _TRISC 000F94                     _TRISD 000F95  
                   _TRISE 000F96             __CFG_PWRT$OFF 000000            __CFG_FCMEN$OFF 000000  
                   _clock 1E98                     _flags 0051                     _myISR 0008  
                   _count 006A                     _fputc 1FFA                     _fputs 239A  
         __end_of_isdigit 24CE                     atoi@n 001C                     pad@fp 0018  
                   atoi@s 000F                     _width 0062                     _state 0073  
                   _putch 25B0                     dtoa@d 0025                     dtoa@i 0045  
                   dtoa@n 003D                     dtoa@p 0037                     dtoa@s 003B  
                   dtoa@w 0039           __end_of_isspace 239A            __CFG_BOREN$OFF 000000  
                   tablat 000FF5       __size_of_LCDPutChar 0066       __size_of_LCDPutInst 0066  
                   ttemp5 0058                     ttemp6 005B                     ttemp7 005F  
                   status 000FD8                     wtemp8 0058           __initialization 245C  
            __end_of_atoi 1848              __end_of_main 22F0              __end_of_dtoa 16A4  
                  ??_atoi 0011                    ??_main 00B2                    ??_dtoa 002D  
           __activetblptr 000003    __size_of_readButtonRA5 00E6              LCDPutChar@ch 000E  
       __end_of_LCDPutStr 245C           ??_display_clock 004F                    ?_clock 0001  
                  ?_myISR 0001                    ?_fputc 0008                    ?_fputs 0011  
        ___awdiv@dividend 0008              LCDPutInst@ch 000E                    ?_putch 0001  
                  i2l2511 1C38                    i2l2521 1C74                    i2l2531 1CD8  
                  i2l2523 1C84                    i2l2515 1C4E                    i2l2507 1C2C  
                  i2l2525 1C96                    i2l2517 1C5E                    i2l2509 1C30  
                  i2l3327 1CFA                    i2l2527 1C9C                    i2l2519 1C6C  
                  i2l2535 1CE6                    i2l2481 224C                    i2l2529 1CB2  
                  i2l2491 2286                    i2l2483 2254                    i2l2485 2262  
                  i2l2477 2232                    i2l2581 2310                    i2l2487 2278  
                  i2l2479 2244                    i2l2583 2318                    i2l2575 22F2  
                  i2l2489 2280                    i2l2585 231E                    i2l2577 2300  
                  i2l2587 2334                    i2l2579 230E                    i2l2589 2340  
                  _OSCCON 000FD3             vfpfcnvrt@done 00A0              LCDPutStr@ptr 000F  
          __CFG_XINST$OFF 000000              vfprintf@cfmt 004D                 ??___aodiv 0018  
               ??___aomod 0018                    ___wmul 2554                 ??___awdiv 000C  
               ??___awmod 000C              ?_timer0_init 0001                 ??___lwmod 0005  
                  clear_0 247A          ___awdiv@quotient 000E           ___awmod@divisor 000A  
         ___awmod@counter 000C                    _printf 252C                    pad@buf 001A  
                  dtoa@fp 0023                    _strlen 24CE          __end_of_pin_init 252C  
        __end_of_osc_init 25A8           _state_buttonRB0 006C           _state_buttonRA5 0053  
                  fputc@c 0008                    fputs@c 0015                    fputs@i 0016  
            __pdataCOMRAM 0055                    fputs@s 0011                 ??_isdigit 000A  
            __mediumconst 0000                 ??_isspace 000A                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                    putch@c 0001  
        __end_of_vfprintf 2166                __accesstop 0060   __end_of__initialization 248C  
           _readButtonRA5 1C2C             ___rparam_used 000001    __size_of_SendByteBBSPI 0070  
    _buttonRA5_1s_pressed 006D            __pcstackCOMRAM 0001             __end_of_clock 1F4A  
           __end_of_myISR 2348             __end_of_fputc 2090              ??_LCDPutChar 000D  
           __end_of_fputs 23DE              ??_LCDPutInst 000D             __end_of_putch 25B2  
         __CFG_OSC$INTIO7 000000                   ??_clock 004F                   ??_myISR 0008  
                 ??_fputc 000C                   ??_fputs 0015                   ??_putch 0008  
              __pbssBANK0 0060            ?_readButtonRA5 0001        __end_of_LCDPutChar 21CC  
      __end_of_LCDPutInst 2232                   ?___wmul 0008          ??_interrupt_init 0008  
                 ?_printf 00AA                   ?_strlen 0008             _SendByteBBSPI 2090  
      __size_of_vfpfcnvrt 038C                   _OSCTUNE 000F9B                _countRA5_1 0066  
        WritePort_BBSPI@a 000B                 ?_pin_init 0001                   __Hparam 0000  
               ?_osc_init 0001                   __Lparam 0000                   ___aodiv 1848  
                 ___aomod 19D0                   ___awdiv 1D12                   ___awmod 1F4A  
         __size_of___wmul 0026                   ___lwmod 2232                 ?_vfprintf 00A4  
__size_of_WritePort_BBSPI 001A              __psmallconst 1000                   __pcinit 245C  
                 __ramtop 1000      __size_of_timer0_init 000A                   __ptext0 2296  
                 __ptext1 2594                   __ptext2 2504                   __ptext3 259E  
                 __ptext4 25A8                   __ptext5 1E98                   __ptext6 1B34  
                 __ptext7 252C                   __ptext8 2100                   __ptext9 103A  
         __size_of_printf 0028           __size_of_strlen 0036            ?_SendByteBBSPI 0001  
            __size_of_abs 0040              __size_of_pad 00C2                   _isdigit 2496  
        ___awmod@dividend 0008                   _isspace 2348                   atoi@neg 0015  
               _LCDPutStr 241E            __pintcode_body 22F0      end_of_initialization 248C  
         ??_readButtonRA5 0006                   fputc@fp 000A                   int_func 22F0  
                 fputs@fp 0013                ??_pin_init 0008                ??_osc_init 0008  
       __end_of_vfpfcnvrt 13C6                   postdec2 000FDD                   postinc0 000FEE  
                 postinc1 000FE6                   postinc2 000FDE                ??_vfprintf 004D  
                 strlen@a 000A                   strlen@s 0008                 _PORTAbits 000F80  
               _TRISAbits 000F92                 _TRISCbits 000F94                 _TRISFbits 000F97  
              ?_LCDPutStr 000F     __end_of_display_clock 1C2C       SendByteBBSPI@output 0008  
             vfpfcnvrt@ap 004B               vfpfcnvrt@fp 0047               vfpfcnvrt@ll 0098  
          __end_of___wmul 257A             __pidataCOMRAM 25AE              _firstReadRA5 0056  
         ??_SendByteBBSPI 0008             _secondReadRA5 0055            __end_of_printf 2554  
          __end_of_strlen 2504         ??_WritePort_BBSPI 000C       start_initialization 245C  
             __end_of_abs 241E               __end_of_pad 1E98               vfprintf@fmt 00A6  
                ??___wmul 000C                  ??_printf 004F                  ??_strlen 000A  
             __pbssCOMRAM 004F             __pcstackBANK0 0094          ___aodiv@dividend 0008  
             ??_LCDPutStr 0011                 _atoi$1193 0017                 _atoi$1194 001B  
               _atoi$1195 0019                 __pintcode 0008         __size_of_pin_init 0028  
                ?___aodiv 0008                  ?___aomod 0008                  ?___awdiv 0008  
        ___aodiv@quotient 001A         __size_of_osc_init 000A                  ?___awmod 0008  
                ?___lwmod 0001         __size_of_vfprintf 0066               __smallconst 1000  
                ?_isdigit 0008                  ?_isspace 0008                 _buttonRA5 006E  
          __size_of_clock 00B2            __size_of_myISR 2340            __size_of_fputc 0096  
          __size_of_fputs 0044            __size_of_putch 0002            ___wmul@product 000C  
                _LATAbits 000F89                  _LATCbits 000F8B                  _LATFbits 000F8E  
                i2u180_40 1CB2                  i2u180_41 1CAE                  i2u181_40 1CD8  
                i2u181_41 1CD4                  i2u174_40 2244                  i2u190_40 2334  
                i2u174_41 2240                  i2u190_41 2330                  i2u175_40 2262  
                i2u175_41 225E                  i2u176_40 2278                  i2u176_41 2274  
                i2u177_40 1C4A                  i2u177_41 1C46                  i2u178_40 1C5E  
                i2u178_41 1C5A                  i2u179_40 1C84                  i2u179_41 1C80  
                i2u188_40 2300                  i2u188_41 22FC                  i2u189_40 230E  
                i2u189_41 230A             ??_timer0_init 0008                 _vfpfcnvrt 103A  
       ___wmul@multiplier 0008        SendByteBBSPI@input 000A   __size_of_interrupt_init 0006  
            _isspace$1211 000E            _timerflag_10ms 0054               _INTCON2bits 000FF1  
   __end_of_readButtonRA5 1D12                  __Hrparam 0000                vfprintf@ap 00A8  
                __Lrparam 0000                vfprintf@fp 00A4           _WritePort_BBSPI 257A  
        __size_of___aodiv 0188          __size_of___aomod 0164          __size_of___awdiv 00C4  
        __size_of___awmod 00B0                ?_vfpfcnvrt 0047          __size_of___lwmod 0064  
         ___aodiv@divisor 0010           ___aodiv@counter 0018       __end_of_timer0_init 259E  
                _checkRA5 0064          __size_of_isdigit 0038                  _dtoa$721 0035  
        __size_of_isspace 0052                  __ptext10 13C6                  __ptext11 1DD6  
                __ptext20 2348                  __ptext12 24CE                  __ptext21 2496  
                __ptext13 239A                  __ptext22 2554                  __ptext14 1FFA  
                __ptext31 1C2C                  __ptext23 1F4A                  __ptext15 25B0  
                __ptext32 2232                  __ptext24 1D12                  __ptext16 23DE  
                __ptext25 241E                  __ptext17 19D0                  __ptext26 2166  
                __ptext18 1848                  __ptext27 21CC                  __ptext19 16A4  
                __ptext28 257A                  __ptext29 2090                  _countRA5 0068  
           __size_of_atoi 01A4             __size_of_main 005A             __size_of_dtoa 02DE  
                _pin_init 2504                  _osc_init 259E                  int$flags 0057  
                _vfprintf 2100                _LCDPutChar 2166                 printf@fmt 00AA  
              _LCDPutInst 21CC    __size_of_display_clock 00F8          ___aomod@dividend 0008  
   __end_of_SendByteBBSPI 2100                _INTCONbits 000FF2                  isdigit@c 0008  
                intlevel2 0000          ___lwmod@dividend 0001                  isspace@c 0008  
 __end_of_WritePort_BBSPI 2594                  printf@ap 00B0               _timer0_init 2594  
            _timerflag_1s 006F           ___aomod@divisor 0010               ??_vfpfcnvrt 0094  
         ___aomod@counter 0018             _vfpfcnvrt$736 00A2   WritePort_BBSPI@port_add 000C  
         ___lwmod@divisor 0003            _interrupt_init 25A8           ___lwmod@counter 0005  
            ___aodiv@sign 0019             _display_clock 1B34              ___aomod@sign 0019  
