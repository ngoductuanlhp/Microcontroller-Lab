

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Sep 16 09:14:22 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    32  0000                     
    33                           ; Version 2.10
    34                           ; Generated 31/07/2019 GMT
    35                           ; 
    36                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F8722 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     
    68                           	psect	idataCOMRAM
    69  0017C6                     __pidataCOMRAM:
    70                           	opt callstack 0
    71                           
    72                           ;initializer for _secondReadRB0
    73  0017C6  01                 	db	1
    74                           
    75                           ;initializer for _firstReadRB0
    76  0017C7  01                 	db	1
    77                           
    78                           ;initializer for _secondReadRA5
    79  0017C8  01                 	db	1
    80                           
    81                           ;initializer for _firstReadRA5
    82  0017C9  01                 	db	1
    83  0000                     _OSCTUNE	set	3995
    84  0000                     _OSCCON	set	4051
    85  0000                     _T0CON	set	4053
    86  0000                     _PORTBbits	set	3969
    87  0000                     _PORTAbits	set	3968
    88  0000                     _ADCON1	set	4033
    89  0000                     _TRISBbits	set	3987
    90  0000                     _TRISAbits	set	3986
    91  0000                     _LATD	set	3980
    92  0000                     _TRISD	set	3989
    93  0000                     _TMR0L	set	4054
    94  0000                     _INTCONbits	set	4082
    95                           
    96                           	psect	smallconst
    97  001000                     __psmallconst:
    98                           	opt callstack 0
    99  001000  00                 	db	0
   100  001001                     STR_2:
   101  001001  44                 	db	68	;'D'
   102  001002  65                 	db	101	;'e'
   103  001003  63                 	db	99	;'c'
   104  001004  72                 	db	114	;'r'
   105  001005  65                 	db	101	;'e'
   106  001006  61                 	db	97	;'a'
   107  001007  73                 	db	115	;'s'
   108  001008  65                 	db	101	;'e'
   109  001009  0A                 	db	10
   110  00100A  00                 	db	0
   111  00100B                     STR_1:
   112  00100B  49                 	db	73	;'I'
   113  00100C  6E                 	db	110	;'n'
   114  00100D  63                 	db	99	;'c'
   115  00100E  72                 	db	114	;'r'
   116  00100F  65                 	db	101	;'e'
   117  001010  61                 	db	97	;'a'
   118  001011  73                 	db	115	;'s'
   119  001012  65                 	db	101	;'e'
   120  001013  0A                 	db	10
   121  001014  00                 	db	0
   122  0000                     
   123                           ; #config settings
   124  001015  00                 	db	0	; dummy byte at the end
   125  0000                     
   126                           	psect	cinit
   127  0016EA                     __pcinit:
   128                           	opt callstack 0
   129  0016EA                     start_initialization:
   130                           	opt callstack 0
   131  0016EA                     __initialization:
   132                           	opt callstack 0
   133                           
   134                           ; Initialize objects allocated to COMRAM (4 bytes)
   135                           ; load TBLPTR registers with __pidataCOMRAM
   136  0016EA  0EC6               	movlw	low __pidataCOMRAM
   137  0016EC  6EF6               	movwf	tblptrl,c
   138  0016EE  0E17               	movlw	high __pidataCOMRAM
   139  0016F0  6EF7               	movwf	tblptrh,c
   140  0016F2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   141  0016F4  6EF8               	movwf	tblptru,c
   142  0016F6  EE00  F03D         	lfsr	0,__pdataCOMRAM
   143  0016FA  EE10 F004          	lfsr	1,4
   144  0016FE                     copy_data0:
   145  0016FE  0009               	tblrd		*+
   146  001700  CFF5 FFEE          	movff	tablat,postinc0
   147  001704  50E5               	movf	postdec1,w,c
   148  001706  50E1               	movf	fsr1l,w,c
   149  001708  E1FA               	bnz	copy_data0
   150                           
   151                           ; Clear objects allocated to BANK0 (32 bytes)
   152  00170A  EE00  F060         	lfsr	0,__pbssBANK0
   153  00170E  0E20               	movlw	32
   154  001710                     clear_0:
   155  001710  6AEE               	clrf	postinc0,c
   156  001712  06E8               	decf	wreg,f,c
   157  001714  E1FD               	bnz	clear_0
   158                           
   159                           ; Clear objects allocated to COMRAM (20 bytes)
   160  001716  EE00  F029         	lfsr	0,__pbssCOMRAM
   161  00171A  0E14               	movlw	20
   162  00171C                     clear_1:
   163  00171C  6AEE               	clrf	postinc0,c
   164  00171E  06E8               	decf	wreg,f,c
   165  001720  E1FD               	bnz	clear_1
   166  001722                     end_of_initialization:
   167                           	opt callstack 0
   168  001722                     __end_of__initialization:
   169                           	opt callstack 0
   170  001722  9041               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   171  001724  9241               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   172  001726  0100               	movlb	0
   173  001728  EFBF  F00B         	goto	_main	;jump to C main() function
   174                           
   175                           	psect	bssCOMRAM
   176  000029                     __pbssCOMRAM:
   177                           	opt callstack 0
   178  000029                     _nout:
   179                           	opt callstack 0
   180  000029                     	ds	2
   181  00002B                     _width:
   182                           	opt callstack 0
   183  00002B                     	ds	2
   184  00002D                     _prec:
   185                           	opt callstack 0
   186  00002D                     	ds	2
   187  00002F                     _flags:
   188                           	opt callstack 0
   189  00002F                     	ds	2
   190  000031                     _countRB0:
   191                           	opt callstack 0
   192  000031                     	ds	2
   193  000033                     _countRA5:
   194                           	opt callstack 0
   195  000033                     	ds	2
   196  000035                     _decrease2:
   197                           	opt callstack 0
   198  000035                     	ds	1
   199  000036                     _decrease1:
   200                           	opt callstack 0
   201  000036                     	ds	1
   202  000037                     _increase2:
   203                           	opt callstack 0
   204  000037                     	ds	1
   205  000038                     _increase1:
   206                           	opt callstack 0
   207  000038                     	ds	1
   208  000039                     _buttonRB0:
   209                           	opt callstack 0
   210  000039                     	ds	1
   211  00003A                     _buttonRA5:
   212                           	opt callstack 0
   213  00003A                     	ds	1
   214  00003B                     _ledValue:
   215                           	opt callstack 0
   216  00003B                     	ds	1
   217  00003C                     _state:
   218                           	opt callstack 0
   219  00003C                     	ds	1
   220                           
   221                           	psect	dataCOMRAM
   222  00003D                     __pdataCOMRAM:
   223                           	opt callstack 0
   224  00003D                     _secondReadRB0:
   225                           	opt callstack 0
   226  00003D                     	ds	1
   227  00003E                     _firstReadRB0:
   228                           	opt callstack 0
   229  00003E                     	ds	1
   230  00003F                     _secondReadRA5:
   231                           	opt callstack 0
   232  00003F                     	ds	1
   233  000040                     _firstReadRA5:
   234                           	opt callstack 0
   235  000040                     	ds	1
   236                           
   237                           	psect	bssBANK0
   238  000060                     __pbssBANK0:
   239                           	opt callstack 0
   240  000060                     	ds	32
   241                           
   242                           	psect	cstackCOMRAM
   243  000001                     __pcstackCOMRAM:
   244                           	opt callstack 0
   245  000001                     ?_readButtonRA5:
   246                           	opt callstack 0
   247  000001                     ?_readButtonRB0:
   248                           	opt callstack 0
   249  000001                     ?___lwmod:
   250                           	opt callstack 0
   251  000001                     ___lwmod@dividend:
   252                           	opt callstack 0
   253                           
   254                           ; 2 bytes @ 0x0
   255  000001                     	ds	2
   256  000003                     ___lwmod@divisor:
   257                           	opt callstack 0
   258                           
   259                           ; 2 bytes @ 0x2
   260  000003                     	ds	2
   261  000005                     ___lwmod@counter:
   262                           	opt callstack 0
   263                           
   264                           ; 1 bytes @ 0x4
   265  000005                     	ds	1
   266  000006                     handleButton@checkRA5:
   267                           	opt callstack 0
   268                           
   269                           ; 2 bytes @ 0x5
   270  000006                     	ds	2
   271  000008                     handleButton@checkRB0:
   272                           	opt callstack 0
   273                           
   274                           ; 2 bytes @ 0x7
   275  000008                     	ds	2
   276  00000A                     fputc@c:
   277                           	opt callstack 0
   278                           
   279                           ; 2 bytes @ 0x9
   280  00000A                     	ds	2
   281  00000C                     fputc@fp:
   282                           	opt callstack 0
   283                           
   284                           ; 2 bytes @ 0xB
   285  00000C                     	ds	2
   286  00000E                     ??_fputc:
   287                           
   288                           ; 1 bytes @ 0xD
   289  00000E                     	ds	5
   290  000013                     ?_vfpfcnvrt:
   291                           	opt callstack 0
   292  000013                     vfpfcnvrt@fp:
   293                           	opt callstack 0
   294                           
   295                           ; 2 bytes @ 0x12
   296  000013                     	ds	2
   297  000015                     vfpfcnvrt@fmt:
   298                           	opt callstack 0
   299                           
   300                           ; 2 bytes @ 0x14
   301  000015                     	ds	2
   302  000017                     vfpfcnvrt@ap:
   303                           	opt callstack 0
   304                           
   305                           ; 2 bytes @ 0x16
   306  000017                     	ds	2
   307  000019                     ?_vfprintf:
   308                           	opt callstack 0
   309  000019                     vfprintf@fp:
   310                           	opt callstack 0
   311                           
   312                           ; 2 bytes @ 0x18
   313  000019                     	ds	2
   314  00001B                     vfprintf@fmt:
   315                           	opt callstack 0
   316                           
   317                           ; 2 bytes @ 0x1A
   318  00001B                     	ds	2
   319  00001D                     vfprintf@ap:
   320                           	opt callstack 0
   321                           
   322                           ; 2 bytes @ 0x1C
   323  00001D                     	ds	2
   324  00001F                     vfprintf@cfmt:
   325                           	opt callstack 0
   326                           
   327                           ; 2 bytes @ 0x1E
   328  00001F                     	ds	2
   329  000021                     ?_printf:
   330                           	opt callstack 0
   331  000021                     printf@fmt:
   332                           	opt callstack 0
   333                           
   334                           ; 2 bytes @ 0x20
   335  000021                     	ds	2
   336  000023                     
   337                           ; 1 bytes @ 0x22
   338  000023                     	ds	2
   339  000025                     printf@ap:
   340                           	opt callstack 0
   341                           
   342                           ; 2 bytes @ 0x24
   343  000025                     	ds	2
   344  000027                     ??_FSM:
   345                           
   346                           ; 1 bytes @ 0x26
   347  000027                     	ds	2
   348  000029                     
   349                           ; 1 bytes @ 0x28
   350 ;;
   351 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   352 ;;
   353 ;; *************** function _main *****************
   354 ;; Defined at:
   355 ;;		line 14 in file "main.c"
   356 ;; Parameters:    Size  Location     Type
   357 ;;		None
   358 ;; Auto vars:     Size  Location     Type
   359 ;;		None
   360 ;; Return value:  Size  Location     Type
   361 ;;                  1    wreg      void 
   362 ;; Registers used:
   363 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   364 ;; Tracked objects:
   365 ;;		On entry : 0/0
   366 ;;		On exit  : 0/0
   367 ;;		Unchanged: 0/0
   368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   373 ;;Total ram usage:        0 bytes
   374 ;; Hardware stack levels required when called:    9
   375 ;; This function calls:
   376 ;;		_FSM
   377 ;;		_interrupt_init
   378 ;;		_osc_init
   379 ;;		_pin_init
   380 ;;		_timer0_init
   381 ;; This function is called by:
   382 ;;		Startup code after reset
   383 ;; This function uses a non-reentrant model
   384 ;;
   385                           
   386                           	psect	text0
   387  00177E                     __ptext0:
   388                           	opt callstack 0
   389  00177E                     _main:
   390                           	opt callstack 22
   391  00177E                     
   392                           ;main.c: 15:     pin_init();
   393  00177E  ECCD  F00B         	call	_pin_init	;wreg free
   394                           
   395                           ;main.c: 16:     timer0_init();
   396  001782  ECD6  F00B         	call	_timer0_init	;wreg free
   397  001786                     
   398                           ;main.c: 17:     interrupt_init();
   399  001786  ECE0  F00B         	call	_interrupt_init	;wreg free
   400  00178A                     
   401                           ;main.c: 18:     osc_init();
   402  00178A  ECDB  F00B         	call	_osc_init	;wreg free
   403  00178E                     l1670:
   404                           
   405                           ;main.c: 21:         FSM();
   406  00178E  EC0B  F008         	call	_FSM	;wreg free
   407  001792  EFC7  F00B         	goto	l1670
   408  001796  EF07  F000         	goto	start
   409  00179A                     __end_of_main:
   410                           	opt callstack 0
   411                           
   412 ;; *************** function _timer0_init *****************
   413 ;; Defined at:
   414 ;;		line 4 in file "timer_manager.c"
   415 ;; Parameters:    Size  Location     Type
   416 ;;		None
   417 ;; Auto vars:     Size  Location     Type
   418 ;;		None
   419 ;; Return value:  Size  Location     Type
   420 ;;                  1    wreg      void 
   421 ;; Registers used:
   422 ;;		wreg, status,2
   423 ;; Tracked objects:
   424 ;;		On entry : 0/0
   425 ;;		On exit  : 0/0
   426 ;;		Unchanged: 0/0
   427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   432 ;;Total ram usage:        0 bytes
   433 ;; Hardware stack levels used:    1
   434 ;; Hardware stack levels required when called:    3
   435 ;; This function calls:
   436 ;;		Nothing
   437 ;; This function is called by:
   438 ;;		_main
   439 ;; This function uses a non-reentrant model
   440 ;;
   441                           
   442                           	psect	text1
   443  0017AC                     __ptext1:
   444                           	opt callstack 0
   445  0017AC                     _timer0_init:
   446                           	opt callstack 27
   447  0017AC                     
   448                           ;timer_manager.c: 5:     T0CON = 0b11000111;
   449  0017AC  0EC7               	movlw	199
   450  0017AE  6ED5               	movwf	213,c	;volatile
   451                           
   452                           ;timer_manager.c: 6:     TMR0L = 177;
   453  0017B0  0EB1               	movlw	177
   454  0017B2  6ED6               	movwf	214,c	;volatile
   455  0017B4  0012               	return		;funcret
   456  0017B6                     __end_of_timer0_init:
   457                           	opt callstack 0
   458                           
   459 ;; *************** function _pin_init *****************
   460 ;; Defined at:
   461 ;;		line 4 in file "pin_manager.c"
   462 ;; Parameters:    Size  Location     Type
   463 ;;		None
   464 ;; Auto vars:     Size  Location     Type
   465 ;;		None
   466 ;; Return value:  Size  Location     Type
   467 ;;                  1    wreg      void 
   468 ;; Registers used:
   469 ;;		wreg, status,2
   470 ;; Tracked objects:
   471 ;;		On entry : 0/0
   472 ;;		On exit  : 0/0
   473 ;;		Unchanged: 0/0
   474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   479 ;;Total ram usage:        0 bytes
   480 ;; Hardware stack levels used:    1
   481 ;; Hardware stack levels required when called:    3
   482 ;; This function calls:
   483 ;;		Nothing
   484 ;; This function is called by:
   485 ;;		_main
   486 ;; This function uses a non-reentrant model
   487 ;;
   488                           
   489                           	psect	text2
   490  00179A                     __ptext2:
   491                           	opt callstack 0
   492  00179A                     _pin_init:
   493                           	opt callstack 27
   494  00179A                     
   495                           ;pin_manager.c: 5:     TRISD = 0x00;
   496  00179A  0E00               	movlw	0
   497  00179C  6E95               	movwf	149,c	;volatile
   498                           
   499                           ;pin_manager.c: 6:     LATD = 0x00;
   500  00179E  0E00               	movlw	0
   501  0017A0  6E8C               	movwf	140,c	;volatile
   502  0017A2                     
   503                           ;pin_manager.c: 8:     TRISAbits.TRISA5 = 1;
   504  0017A2  8A92               	bsf	146,5,c	;volatile
   505  0017A4                     
   506                           ;pin_manager.c: 9:     TRISBbits.TRISB0 = 1;
   507  0017A4  8093               	bsf	147,0,c	;volatile
   508                           
   509                           ;pin_manager.c: 10:     ADCON1 = 0b00001111;
   510  0017A6  0E0F               	movlw	15
   511  0017A8  6EC1               	movwf	193,c	;volatile
   512  0017AA  0012               	return		;funcret
   513  0017AC                     __end_of_pin_init:
   514                           	opt callstack 0
   515                           
   516 ;; *************** function _osc_init *****************
   517 ;; Defined at:
   518 ;;		line 4 in file "osc_manager.c"
   519 ;; Parameters:    Size  Location     Type
   520 ;;		None
   521 ;; Auto vars:     Size  Location     Type
   522 ;;		None
   523 ;; Return value:  Size  Location     Type
   524 ;;                  1    wreg      void 
   525 ;; Registers used:
   526 ;;		wreg, status,2
   527 ;; Tracked objects:
   528 ;;		On entry : 0/0
   529 ;;		On exit  : 0/0
   530 ;;		Unchanged: 0/0
   531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   536 ;;Total ram usage:        0 bytes
   537 ;; Hardware stack levels used:    1
   538 ;; Hardware stack levels required when called:    3
   539 ;; This function calls:
   540 ;;		Nothing
   541 ;; This function is called by:
   542 ;;		_main
   543 ;; This function uses a non-reentrant model
   544 ;;
   545                           
   546                           	psect	text3
   547  0017B6                     __ptext3:
   548                           	opt callstack 0
   549  0017B6                     _osc_init:
   550                           	opt callstack 27
   551  0017B6                     
   552                           ;osc_manager.c: 5:     OSCCON = 0b01110111;
   553  0017B6  0E77               	movlw	119
   554  0017B8  6ED3               	movwf	211,c	;volatile
   555                           
   556                           ;osc_manager.c: 6:     OSCTUNE = 0b00001111;
   557  0017BA  0E0F               	movlw	15
   558  0017BC  6E9B               	movwf	155,c	;volatile
   559  0017BE  0012               	return		;funcret
   560  0017C0                     __end_of_osc_init:
   561                           	opt callstack 0
   562                           
   563 ;; *************** function _interrupt_init *****************
   564 ;; Defined at:
   565 ;;		line 4 in file "interrupt_manager.c"
   566 ;; Parameters:    Size  Location     Type
   567 ;;		None
   568 ;; Auto vars:     Size  Location     Type
   569 ;;		None
   570 ;; Return value:  Size  Location     Type
   571 ;;                  1    wreg      void 
   572 ;; Registers used:
   573 ;;		None
   574 ;; Tracked objects:
   575 ;;		On entry : 0/0
   576 ;;		On exit  : 0/0
   577 ;;		Unchanged: 0/0
   578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   583 ;;Total ram usage:        0 bytes
   584 ;; Hardware stack levels used:    1
   585 ;; Hardware stack levels required when called:    3
   586 ;; This function calls:
   587 ;;		Nothing
   588 ;; This function is called by:
   589 ;;		_main
   590 ;; This function uses a non-reentrant model
   591 ;;
   592                           
   593                           	psect	text4
   594  0017C0                     __ptext4:
   595                           	opt callstack 0
   596  0017C0                     _interrupt_init:
   597                           	opt callstack 27
   598  0017C0                     
   599                           ;interrupt_manager.c: 5:     INTCONbits.TMR0IE = 1;
   600  0017C0  8AF2               	bsf	242,5,c	;volatile
   601                           
   602                           ;interrupt_manager.c: 6:     INTCONbits.GIE = 1;
   603  0017C2  8EF2               	bsf	242,7,c	;volatile
   604  0017C4  0012               	return		;funcret
   605  0017C6                     __end_of_interrupt_init:
   606                           	opt callstack 0
   607                           
   608 ;; *************** function _FSM *****************
   609 ;; Defined at:
   610 ;;		line 4 in file "myFSM.c"
   611 ;; Parameters:    Size  Location     Type
   612 ;;		None
   613 ;; Auto vars:     Size  Location     Type
   614 ;;		None
   615 ;; Return value:  Size  Location     Type
   616 ;;                  1    wreg      void 
   617 ;; Registers used:
   618 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   619 ;; Tracked objects:
   620 ;;		On entry : 0/0
   621 ;;		On exit  : 0/0
   622 ;;		Unchanged: 0/0
   623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   626 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   627 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   628 ;;Total ram usage:        2 bytes
   629 ;; Hardware stack levels used:    1
   630 ;; Hardware stack levels required when called:    8
   631 ;; This function calls:
   632 ;;		_printf
   633 ;; This function is called by:
   634 ;;		_main
   635 ;; This function uses a non-reentrant model
   636 ;;
   637                           
   638                           	psect	text5
   639  001016                     __ptext5:
   640                           	opt callstack 0
   641  001016                     _FSM:
   642                           	opt callstack 22
   643  001016                     
   644                           ;myFSM.c: 5:     LATD = ledValue;
   645  001016  C03B  FF8C         	movff	_ledValue,3980	;volatile
   646                           
   647                           ;myFSM.c: 6:     switch(state) {
   648  00101A  EF33  F009         	goto	l1622
   649  00101E                     l1508:
   650                           
   651                           ;myFSM.c: 8:                 if(countRA5 > 0) {
   652  00101E  5033               	movf	_countRA5^0,w,c
   653  001020  1034               	iorwf	(_countRA5+1)^0,w,c
   654  001022  B4D8               	btfsc	status,2,c
   655  001024  EF16  F008         	goto	u611
   656  001028  EF18  F008         	goto	u610
   657  00102C                     u611:
   658  00102C  EF23  F008         	goto	l1516
   659  001030                     u610:
   660  001030                     
   661                           ;myFSM.c: 9:                     ledValue++;
   662  001030  2A3B               	incf	_ledValue^0,f,c
   663  001032                     
   664                           ;myFSM.c: 10:                     printf("Increase\n");
   665  001032  0E0B               	movlw	low STR_1
   666  001034  6E21               	movwf	printf@fmt^0,c
   667  001036  0E10               	movlw	high STR_1
   668  001038  6E22               	movwf	(printf@fmt+1)^0,c
   669  00103A  ECAC  F00B         	call	_printf	;wreg free
   670  00103E                     l1514:
   671                           
   672                           ;myFSM.c: 11:                     state = INCREASE0;
   673  00103E  0E01               	movlw	1
   674  001040  6E3C               	movwf	_state^0,c	;volatile
   675                           
   676                           ;myFSM.c: 12:                 }
   677  001042  EF5C  F009         	goto	l304
   678  001046                     l1516:
   679  001046  5031               	movf	_countRB0^0,w,c
   680  001048  1032               	iorwf	(_countRB0+1)^0,w,c
   681  00104A  B4D8               	btfsc	status,2,c
   682  00104C  EF2A  F008         	goto	u621
   683  001050  EF2C  F008         	goto	u620
   684  001054                     u621:
   685  001054  EF5C  F009         	goto	l304
   686  001058                     u620:
   687  001058                     
   688                           ;myFSM.c: 14:                     ledValue--;
   689  001058  063B               	decf	_ledValue^0,f,c
   690  00105A                     
   691                           ;myFSM.c: 15:                     printf("Decrease\n");
   692  00105A  0E01               	movlw	low STR_2
   693  00105C  6E21               	movwf	printf@fmt^0,c
   694  00105E  0E10               	movlw	high STR_2
   695  001060  6E22               	movwf	(printf@fmt+1)^0,c
   696  001062  ECAC  F00B         	call	_printf	;wreg free
   697  001066                     l1522:
   698                           
   699                           ;myFSM.c: 16:                     state = DECREASE0;
   700  001066  0E04               	movlw	4
   701  001068  6E3C               	movwf	_state^0,c	;volatile
   702  00106A  EF5C  F009         	goto	l304
   703  00106E                     l1524:
   704                           
   705                           ;myFSM.c: 20:                 if(countRA5 > 100)
   706  00106E  5034               	movf	(_countRA5+1)^0,w,c
   707  001070  E109               	bnz	u630
   708  001072  0E65               	movlw	101
   709  001074  5C33               	subwf	_countRA5^0,w,c
   710  001076  A0D8               	btfss	status,0,c
   711  001078  EF40  F008         	goto	u631
   712  00107C  EF42  F008         	goto	u630
   713  001080                     u631:
   714  001080  EF46  F008         	goto	l1528
   715  001084                     u630:
   716  001084                     
   717                           ;myFSM.c: 21:                     state = INCREASE1;
   718  001084  0E02               	movlw	2
   719  001086  6E3C               	movwf	_state^0,c	;volatile
   720  001088  EF5C  F009         	goto	l304
   721  00108C                     l1528:
   722  00108C  5033               	movf	_countRA5^0,w,c
   723  00108E  1034               	iorwf	(_countRA5+1)^0,w,c
   724  001090  A4D8               	btfss	status,2,c
   725  001092  EF4D  F008         	goto	u641
   726  001096  EF4F  F008         	goto	u640
   727  00109A                     u641:
   728  00109A  EF5C  F009         	goto	l304
   729  00109E                     u640:
   730  00109E                     
   731                           ;myFSM.c: 23:                     if(countRB0 > 0)
   732  00109E  5031               	movf	_countRB0^0,w,c
   733  0010A0  1032               	iorwf	(_countRB0+1)^0,w,c
   734  0010A2  B4D8               	btfsc	status,2,c
   735  0010A4  EF56  F008         	goto	u651
   736  0010A8  EF58  F008         	goto	u650
   737  0010AC                     u651:
   738  0010AC  EF5A  F008         	goto	l1534
   739  0010B0                     u650:
   740  0010B0  EF33  F008         	goto	l1522
   741  0010B4                     l1534:
   742                           
   743                           ;myFSM.c: 26:                         state = INIT;
   744  0010B4  0E00               	movlw	0
   745  0010B6  6E3C               	movwf	_state^0,c	;volatile
   746  0010B8  EF5C  F009         	goto	l304
   747  0010BC                     l1536:
   748                           
   749                           ;myFSM.c: 29:                 if(increase1) {
   750  0010BC  5038               	movf	_increase1^0,w,c
   751  0010BE  B4D8               	btfsc	status,2,c
   752  0010C0  EF64  F008         	goto	u661
   753  0010C4  EF66  F008         	goto	u660
   754  0010C8                     u661:
   755  0010C8  EF6F  F008         	goto	l1544
   756  0010CC                     u660:
   757  0010CC                     
   758                           ;myFSM.c: 30:                     ledValue++;
   759  0010CC  2A3B               	incf	_ledValue^0,f,c
   760  0010CE                     
   761                           ;myFSM.c: 31:                     printf("Increase\n");
   762  0010CE  0E0B               	movlw	low STR_1
   763  0010D0  6E21               	movwf	printf@fmt^0,c
   764  0010D2  0E10               	movlw	high STR_1
   765  0010D4  6E22               	movwf	(printf@fmt+1)^0,c
   766  0010D6  ECAC  F00B         	call	_printf	;wreg free
   767  0010DA                     
   768                           ;myFSM.c: 32:                     increase1 = 0;
   769  0010DA  0E00               	movlw	0
   770  0010DC  6E38               	movwf	_increase1^0,c
   771  0010DE                     l1544:
   772                           
   773                           ;myFSM.c: 34:                 if(countRA5 > 300)
   774  0010DE  0E2D               	movlw	45
   775  0010E0  5C33               	subwf	_countRA5^0,w,c
   776  0010E2  0E01               	movlw	1
   777  0010E4  5834               	subwfb	(_countRA5+1)^0,w,c
   778  0010E6  A0D8               	btfss	status,0,c
   779  0010E8  EF78  F008         	goto	u671
   780  0010EC  EF7A  F008         	goto	u670
   781  0010F0                     u671:
   782  0010F0  EF7E  F008         	goto	l1548
   783  0010F4                     u670:
   784  0010F4                     
   785                           ;myFSM.c: 35:                     state = INCREASE2;
   786  0010F4  0E03               	movlw	3
   787  0010F6  6E3C               	movwf	_state^0,c	;volatile
   788  0010F8  EF5C  F009         	goto	l304
   789  0010FC                     l1548:
   790  0010FC  5033               	movf	_countRA5^0,w,c
   791  0010FE  1034               	iorwf	(_countRA5+1)^0,w,c
   792  001100  A4D8               	btfss	status,2,c
   793  001102  EF85  F008         	goto	u681
   794  001106  EF87  F008         	goto	u680
   795  00110A                     u681:
   796  00110A  EF5C  F009         	goto	l304
   797  00110E                     u680:
   798  00110E                     
   799                           ;myFSM.c: 37:                     if(countRB0 > 0)
   800  00110E  5031               	movf	_countRB0^0,w,c
   801  001110  1032               	iorwf	(_countRB0+1)^0,w,c
   802  001112  B4D8               	btfsc	status,2,c
   803  001114  EF8E  F008         	goto	u691
   804  001118  EF90  F008         	goto	u690
   805  00111C                     u691:
   806  00111C  EF5A  F008         	goto	l1534
   807  001120                     u690:
   808  001120  EF33  F008         	goto	l1522
   809  001124                     l1556:
   810                           
   811                           ;myFSM.c: 43:                 if(increase2) {
   812  001124  5037               	movf	_increase2^0,w,c
   813  001126  B4D8               	btfsc	status,2,c
   814  001128  EF98  F008         	goto	u701
   815  00112C  EF9A  F008         	goto	u700
   816  001130                     u701:
   817  001130  EFA3  F008         	goto	l1564
   818  001134                     u700:
   819  001134                     
   820                           ;myFSM.c: 44:                     ledValue++;
   821  001134  2A3B               	incf	_ledValue^0,f,c
   822  001136                     
   823                           ;myFSM.c: 45:                     printf("Increase\n");
   824  001136  0E0B               	movlw	low STR_1
   825  001138  6E21               	movwf	printf@fmt^0,c
   826  00113A  0E10               	movlw	high STR_1
   827  00113C  6E22               	movwf	(printf@fmt+1)^0,c
   828  00113E  ECAC  F00B         	call	_printf	;wreg free
   829  001142                     
   830                           ;myFSM.c: 46:                     increase2 = 0;
   831  001142  0E00               	movlw	0
   832  001144  6E37               	movwf	_increase2^0,c
   833  001146                     l1564:
   834                           
   835                           ;myFSM.c: 48:                 if(countRA5 == 0)
   836  001146  5033               	movf	_countRA5^0,w,c
   837  001148  1034               	iorwf	(_countRA5+1)^0,w,c
   838  00114A  A4D8               	btfss	status,2,c
   839  00114C  EFAA  F008         	goto	u711
   840  001150  EFAC  F008         	goto	u710
   841  001154                     u711:
   842  001154  EF5C  F009         	goto	l304
   843  001158                     u710:
   844  001158                     
   845                           ;myFSM.c: 49:                     if(countRB0 > 0)
   846  001158  5031               	movf	_countRB0^0,w,c
   847  00115A  1032               	iorwf	(_countRB0+1)^0,w,c
   848  00115C  B4D8               	btfsc	status,2,c
   849  00115E  EFB3  F008         	goto	u721
   850  001162  EFB5  F008         	goto	u720
   851  001166                     u721:
   852  001166  EF5A  F008         	goto	l1534
   853  00116A                     u720:
   854  00116A  EF33  F008         	goto	l1522
   855  00116E                     l1572:
   856                           
   857                           ;myFSM.c: 55:                 if(countRB0 > 100)
   858  00116E  5032               	movf	(_countRB0+1)^0,w,c
   859  001170  E109               	bnz	u730
   860  001172  0E65               	movlw	101
   861  001174  5C31               	subwf	_countRB0^0,w,c
   862  001176  A0D8               	btfss	status,0,c
   863  001178  EFC0  F008         	goto	u731
   864  00117C  EFC2  F008         	goto	u730
   865  001180                     u731:
   866  001180  EFC6  F008         	goto	l1576
   867  001184                     u730:
   868  001184                     
   869                           ;myFSM.c: 56:                     state = DECREASE1;
   870  001184  0E05               	movlw	5
   871  001186  6E3C               	movwf	_state^0,c	;volatile
   872  001188  EF5C  F009         	goto	l304
   873  00118C                     l1576:
   874  00118C  5031               	movf	_countRB0^0,w,c
   875  00118E  1032               	iorwf	(_countRB0+1)^0,w,c
   876  001190  A4D8               	btfss	status,2,c
   877  001192  EFCD  F008         	goto	u741
   878  001196  EFCF  F008         	goto	u740
   879  00119A                     u741:
   880  00119A  EF5C  F009         	goto	l304
   881  00119E                     u740:
   882  00119E                     
   883                           ;myFSM.c: 58:                     if(countRA5 > 0)
   884  00119E  5033               	movf	_countRA5^0,w,c
   885  0011A0  1034               	iorwf	(_countRA5+1)^0,w,c
   886  0011A2  B4D8               	btfsc	status,2,c
   887  0011A4  EFD6  F008         	goto	u751
   888  0011A8  EFD8  F008         	goto	u750
   889  0011AC                     u751:
   890  0011AC  EF5A  F008         	goto	l1534
   891  0011B0                     u750:
   892  0011B0  EF1F  F008         	goto	l1514
   893  0011B4                     l1584:
   894                           
   895                           ;myFSM.c: 64:                 if(decrease1) {
   896  0011B4  5036               	movf	_decrease1^0,w,c
   897  0011B6  B4D8               	btfsc	status,2,c
   898  0011B8  EFE0  F008         	goto	u761
   899  0011BC  EFE2  F008         	goto	u760
   900  0011C0                     u761:
   901  0011C0  EFEB  F008         	goto	l1592
   902  0011C4                     u760:
   903  0011C4                     
   904                           ;myFSM.c: 65:                     ledValue--;
   905  0011C4  063B               	decf	_ledValue^0,f,c
   906  0011C6                     
   907                           ;myFSM.c: 66:                     printf("Decrease\n");
   908  0011C6  0E01               	movlw	low STR_2
   909  0011C8  6E21               	movwf	printf@fmt^0,c
   910  0011CA  0E10               	movlw	high STR_2
   911  0011CC  6E22               	movwf	(printf@fmt+1)^0,c
   912  0011CE  ECAC  F00B         	call	_printf	;wreg free
   913  0011D2                     
   914                           ;myFSM.c: 67:                     decrease1 = 0;
   915  0011D2  0E00               	movlw	0
   916  0011D4  6E36               	movwf	_decrease1^0,c
   917  0011D6                     l1592:
   918                           
   919                           ;myFSM.c: 69:                 if(countRB0 > 300)
   920  0011D6  0E2D               	movlw	45
   921  0011D8  5C31               	subwf	_countRB0^0,w,c
   922  0011DA  0E01               	movlw	1
   923  0011DC  5832               	subwfb	(_countRB0+1)^0,w,c
   924  0011DE  A0D8               	btfss	status,0,c
   925  0011E0  EFF4  F008         	goto	u771
   926  0011E4  EFF6  F008         	goto	u770
   927  0011E8                     u771:
   928  0011E8  EFFA  F008         	goto	l1596
   929  0011EC                     u770:
   930  0011EC                     
   931                           ;myFSM.c: 70:                     state = DECREASE2;
   932  0011EC  0E06               	movlw	6
   933  0011EE  6E3C               	movwf	_state^0,c	;volatile
   934  0011F0  EF5C  F009         	goto	l304
   935  0011F4                     l1596:
   936  0011F4  5031               	movf	_countRB0^0,w,c
   937  0011F6  1032               	iorwf	(_countRB0+1)^0,w,c
   938  0011F8  A4D8               	btfss	status,2,c
   939  0011FA  EF01  F009         	goto	u781
   940  0011FE  EF03  F009         	goto	u780
   941  001202                     u781:
   942  001202  EF5C  F009         	goto	l304
   943  001206                     u780:
   944  001206                     
   945                           ;myFSM.c: 72:                     if(countRA5 > 0)
   946  001206  5033               	movf	_countRA5^0,w,c
   947  001208  1034               	iorwf	(_countRA5+1)^0,w,c
   948  00120A  B4D8               	btfsc	status,2,c
   949  00120C  EF0A  F009         	goto	u791
   950  001210  EF0C  F009         	goto	u790
   951  001214                     u791:
   952  001214  EF5A  F008         	goto	l1534
   953  001218                     u790:
   954  001218  EF1F  F008         	goto	l1514
   955  00121C                     l1604:
   956                           
   957                           ;myFSM.c: 78:                 if(decrease2) {
   958  00121C  5035               	movf	_decrease2^0,w,c
   959  00121E  B4D8               	btfsc	status,2,c
   960  001220  EF14  F009         	goto	u801
   961  001224  EF16  F009         	goto	u800
   962  001228                     u801:
   963  001228  EF1F  F009         	goto	l1612
   964  00122C                     u800:
   965  00122C                     
   966                           ;myFSM.c: 79:                     ledValue--;
   967  00122C  063B               	decf	_ledValue^0,f,c
   968  00122E                     
   969                           ;myFSM.c: 80:                     printf("Decrease\n");
   970  00122E  0E01               	movlw	low STR_2
   971  001230  6E21               	movwf	printf@fmt^0,c
   972  001232  0E10               	movlw	high STR_2
   973  001234  6E22               	movwf	(printf@fmt+1)^0,c
   974  001236  ECAC  F00B         	call	_printf	;wreg free
   975  00123A                     
   976                           ;myFSM.c: 81:                     decrease2 = 0;
   977  00123A  0E00               	movlw	0
   978  00123C  6E35               	movwf	_decrease2^0,c
   979  00123E                     l1612:
   980                           
   981                           ;myFSM.c: 83:                 if(countRB0 == 0)
   982  00123E  5031               	movf	_countRB0^0,w,c
   983  001240  1032               	iorwf	(_countRB0+1)^0,w,c
   984  001242  A4D8               	btfss	status,2,c
   985  001244  EF26  F009         	goto	u811
   986  001248  EF28  F009         	goto	u810
   987  00124C                     u811:
   988  00124C  EF5C  F009         	goto	l304
   989  001250                     u810:
   990  001250                     
   991                           ;myFSM.c: 84:                     if(countRA5 > 0)
   992  001250  5033               	movf	_countRA5^0,w,c
   993  001252  1034               	iorwf	(_countRA5+1)^0,w,c
   994  001254  B4D8               	btfsc	status,2,c
   995  001256  EF2F  F009         	goto	u821
   996  00125A  EF31  F009         	goto	u820
   997  00125E                     u821:
   998  00125E  EF5A  F008         	goto	l1534
   999  001262                     u820:
  1000  001262  EF1F  F008         	goto	l1514
  1001  001266                     l1622:
  1002  001266  503C               	movf	_state^0,w,c	;volatile
  1003  001268  6E27               	movwf	??_FSM^0,c
  1004  00126A  6A28               	clrf	(??_FSM+1)^0,c
  1005                           
  1006                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1007                           ; Switch size 1, requested type "simple"
  1008                           ; Number of cases is 1, Range of values is 0 to 0
  1009                           ; switch strategies available:
  1010                           ; Name         Instructions Cycles
  1011                           ; simple_byte            4     3 (average)
  1012                           ;	Chosen strategy is simple_byte
  1013  00126C  5028               	movf	(??_FSM+1)^0,w,c
  1014  00126E  0A00               	xorlw	0	; case 0
  1015  001270  B4D8               	btfsc	status,2,c
  1016  001272  EF3D  F009         	goto	l1686
  1017  001276  EF5C  F009         	goto	l304
  1018  00127A                     l1686:
  1019                           
  1020                           ; Switch size 1, requested type "simple"
  1021                           ; Number of cases is 7, Range of values is 0 to 6
  1022                           ; switch strategies available:
  1023                           ; Name         Instructions Cycles
  1024                           ; simple_byte           22    12 (average)
  1025                           ;	Chosen strategy is simple_byte
  1026  00127A  5027               	movf	??_FSM^0,w,c
  1027  00127C  0A00               	xorlw	0	; case 0
  1028  00127E  B4D8               	btfsc	status,2,c
  1029  001280  EF0F  F008         	goto	l1508
  1030  001284  0A01               	xorlw	1	; case 1
  1031  001286  B4D8               	btfsc	status,2,c
  1032  001288  EF37  F008         	goto	l1524
  1033  00128C  0A03               	xorlw	3	; case 2
  1034  00128E  B4D8               	btfsc	status,2,c
  1035  001290  EF5E  F008         	goto	l1536
  1036  001294  0A01               	xorlw	1	; case 3
  1037  001296  B4D8               	btfsc	status,2,c
  1038  001298  EF92  F008         	goto	l1556
  1039  00129C  0A07               	xorlw	7	; case 4
  1040  00129E  B4D8               	btfsc	status,2,c
  1041  0012A0  EFB7  F008         	goto	l1572
  1042  0012A4  0A01               	xorlw	1	; case 5
  1043  0012A6  B4D8               	btfsc	status,2,c
  1044  0012A8  EFDA  F008         	goto	l1584
  1045  0012AC  0A03               	xorlw	3	; case 6
  1046  0012AE  B4D8               	btfsc	status,2,c
  1047  0012B0  EF0E  F009         	goto	l1604
  1048  0012B4  EF5C  F009         	goto	l304
  1049  0012B8                     l304:
  1050  0012B8  0012               	return		;funcret
  1051  0012BA                     __end_of_FSM:
  1052                           	opt callstack 0
  1053                           
  1054 ;; *************** function _printf *****************
  1055 ;; Defined at:
  1056 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\printf.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;  fmt             2   32[COMRAM] PTR const unsigned char 
  1059 ;;		 -> STR_6(10), STR_5(10), STR_4(10), STR_3(10), 
  1060 ;;		 -> STR_2(10), STR_1(10), 
  1061 ;; Auto vars:     Size  Location     Type
  1062 ;;  ap              2   36[COMRAM] PTR void [1]
  1063 ;;		 -> ?_printf(2), 
  1064 ;;  ret             2    0        int 
  1065 ;; Return value:  Size  Location     Type
  1066 ;;                  2   32[COMRAM] int 
  1067 ;; Registers used:
  1068 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1074 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1075 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1077 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1078 ;;Total ram usage:        6 bytes
  1079 ;; Hardware stack levels used:    1
  1080 ;; Hardware stack levels required when called:    7
  1081 ;; This function calls:
  1082 ;;		_vfprintf
  1083 ;; This function is called by:
  1084 ;;		_FSM
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           	psect	text6
  1089  001758                     __ptext6:
  1090                           	opt callstack 0
  1091  001758                     _printf:
  1092                           	opt callstack 22
  1093  001758  0E23               	movlw	low (?_printf+2)
  1094  00175A  6E25               	movwf	printf@ap^0,c
  1095  00175C  0E00               	movlw	high (?_printf+2)
  1096  00175E  6E26               	movwf	(printf@ap+1)^0,c
  1097  001760  0E00               	movlw	0
  1098  001762  6E19               	movwf	vfprintf@fp^0,c
  1099  001764  0E00               	movlw	0
  1100  001766  6E1A               	movwf	(vfprintf@fp+1)^0,c
  1101  001768  C021  F01B         	movff	printf@fmt,vfprintf@fmt
  1102  00176C  C022  F01C         	movff	printf@fmt+1,vfprintf@fmt+1
  1103  001770  0E25               	movlw	low printf@ap
  1104  001772  6E1D               	movwf	vfprintf@ap^0,c
  1105  001774  0E00               	movlw	high printf@ap
  1106  001776  6E1E               	movwf	(vfprintf@ap+1)^0,c
  1107  001778  ECF4  F00A         	call	_vfprintf	;wreg free
  1108  00177C  0012               	return		;funcret
  1109  00177E                     __end_of_printf:
  1110                           	opt callstack 0
  1111                           
  1112 ;; *************** function _vfprintf *****************
  1113 ;; Defined at:
  1114 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;  fp              2   24[COMRAM] PTR struct _IO_FILE
  1117 ;;		 -> NULL(0), 
  1118 ;;  fmt             2   26[COMRAM] PTR const unsigned char 
  1119 ;;		 -> STR_6(10), STR_5(10), STR_4(10), STR_3(10), 
  1120 ;;		 -> STR_2(10), STR_1(10), 
  1121 ;;  ap              2   28[COMRAM] PTR PTR void 
  1122 ;;		 -> printf@ap(2), 
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;  cfmt            2   30[COMRAM] PTR unsigned char 
  1125 ;;		 -> STR_6(10), STR_5(10), STR_4(10), STR_3(10), 
  1126 ;;		 -> STR_2(10), STR_1(10), 
  1127 ;; Return value:  Size  Location     Type
  1128 ;;                  2   24[COMRAM] int 
  1129 ;; Registers used:
  1130 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1131 ;; Tracked objects:
  1132 ;;		On entry : 0/0
  1133 ;;		On exit  : 0/0
  1134 ;;		Unchanged: 0/0
  1135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1136 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1137 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1139 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1140 ;;Total ram usage:        8 bytes
  1141 ;; Hardware stack levels used:    1
  1142 ;; Hardware stack levels required when called:    6
  1143 ;; This function calls:
  1144 ;;		_vfpfcnvrt
  1145 ;; This function is called by:
  1146 ;;		_printf
  1147 ;; This function uses a non-reentrant model
  1148 ;;
  1149                           
  1150                           	psect	text7
  1151  0015E8                     __ptext7:
  1152                           	opt callstack 0
  1153  0015E8                     _vfprintf:
  1154                           	opt callstack 22
  1155  0015E8                     
  1156                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.10\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1157  0015E8  C01B  F01F         	movff	vfprintf@fmt,vfprintf@cfmt
  1158  0015EC  C01C  F020         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1159  0015F0                     
  1160                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1161  0015F0  0E00               	movlw	0
  1162  0015F2  6E2A               	movwf	(_nout+1)^0,c
  1163  0015F4  0E00               	movlw	0
  1164  0015F6  6E29               	movwf	_nout^0,c
  1165                           
  1166                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1167  0015F8  EF10  F00B         	goto	l1446
  1168  0015FC                     l1444:
  1169                           
  1170                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1171  0015FC  C019  F013         	movff	vfprintf@fp,vfpfcnvrt@fp
  1172  001600  C01A  F014         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1173  001604  0E1F               	movlw	low vfprintf@cfmt
  1174  001606  6E15               	movwf	vfpfcnvrt@fmt^0,c
  1175  001608  0E00               	movlw	high vfprintf@cfmt
  1176  00160A  6E16               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1177  00160C  C01D  F017         	movff	vfprintf@ap,vfpfcnvrt@ap
  1178  001610  C01E  F018         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1179  001614  ECFC  F009         	call	_vfpfcnvrt	;wreg free
  1180  001618  5013               	movf	?_vfpfcnvrt^0,w,c
  1181  00161A  2629               	addwf	_nout^0,f,c
  1182  00161C  5014               	movf	(?_vfpfcnvrt+1)^0,w,c
  1183  00161E  222A               	addwfc	(_nout+1)^0,f,c
  1184  001620                     l1446:
  1185                           
  1186                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1187  001620  C01F  FFF6         	movff	vfprintf@cfmt,tblptrl
  1188  001624  C020  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1189  001628                     	if	0	;tblptru may be non-zero
  1190  001628                     	endif
  1191  001628                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1192  001628  0E00               	movlw	low (__mediumconst shr (0+16))
  1193  00162A  6EF8               	movwf	tblptru,c
  1194  00162C                     	endif
  1195  00162C  0008               	tblrd		*
  1196  00162E  50F5               	movf	tablat,w,c
  1197  001630  0900               	iorlw	0
  1198  001632  A4D8               	btfss	status,2,c
  1199  001634  EF1E  F00B         	goto	u531
  1200  001638  EF20  F00B         	goto	u530
  1201  00163C                     u531:
  1202  00163C  EFFE  F00A         	goto	l1444
  1203  001640                     u530:
  1204  001640                     
  1205                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1206  001640  C029  F019         	movff	_nout,?_vfprintf
  1207  001644  C02A  F01A         	movff	_nout+1,?_vfprintf+1
  1208  001648  0012               	return		;funcret
  1209  00164A                     __end_of_vfprintf:
  1210                           	opt callstack 0
  1211                           
  1212 ;; *************** function _vfpfcnvrt *****************
  1213 ;; Defined at:
  1214 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1215 ;; Parameters:    Size  Location     Type
  1216 ;;  fp              2   18[COMRAM] PTR struct _IO_FILE
  1217 ;;		 -> NULL(0), 
  1218 ;;  fmt             2   20[COMRAM] PTR PTR unsigned char 
  1219 ;;		 -> vfprintf@cfmt(2), 
  1220 ;;  ap              2   22[COMRAM] PTR PTR void 
  1221 ;;		 -> printf@ap(2), 
  1222 ;; Auto vars:     Size  Location     Type
  1223 ;;  llu             8    0        unsigned long long 
  1224 ;;  ll              8    0        long long 
  1225 ;;  f               4    0        long long 
  1226 ;;  vp              3    0        PTR void 
  1227 ;;  ct              3    0        unsigned char [3]
  1228 ;;  cp              3    0        PTR unsigned char 
  1229 ;;  i               2    0        int 
  1230 ;;  done            2    0        int 
  1231 ;;  c               1    0        unsigned char 
  1232 ;; Return value:  Size  Location     Type
  1233 ;;                  2   18[COMRAM] int 
  1234 ;; Registers used:
  1235 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1236 ;; Tracked objects:
  1237 ;;		On entry : 0/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1241 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1244 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1245 ;;Total ram usage:        6 bytes
  1246 ;; Hardware stack levels used:    1
  1247 ;; Hardware stack levels required when called:    5
  1248 ;; This function calls:
  1249 ;;		_fputc
  1250 ;; This function is called by:
  1251 ;;		_vfprintf
  1252 ;; This function uses a non-reentrant model
  1253 ;;
  1254                           
  1255                           	psect	text8
  1256  0013F8                     __ptext8:
  1257                           	opt callstack 0
  1258  0013F8                     _vfpfcnvrt:
  1259                           	opt callstack 22
  1260  0013F8                     
  1261                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1262  0013F8  C015  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1263  0013FC  C016  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1264  001400  CFDE FFF6          	movff	postinc2,tblptrl
  1265  001404  CFDD FFF7          	movff	postdec2,tblptrh
  1266  001408                     	if	0	;tblptru may be non-zero
  1267  001408                     	endif
  1268  001408                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1269  001408  0E00               	movlw	low (__mediumconst shr (0+16))
  1270  00140A  6EF8               	movwf	tblptru,c
  1271  00140C                     	endif
  1272  00140C  0008               	tblrd		*
  1273  00140E  50F5               	movf	tablat,w,c
  1274  001410  0A25               	xorlw	37
  1275  001412  A4D8               	btfss	status,2,c
  1276  001414  EF0E  F00A         	goto	u511
  1277  001418  EF10  F00A         	goto	u510
  1278  00141C                     u511:
  1279  00141C  EF59  F00A         	goto	l1432
  1280  001420                     u510:
  1281  001420                     
  1282                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1283  001420  C015  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1284  001424  C016  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1285  001428  2ADE               	incf	postinc2,f,c
  1286  00142A  0E00               	movlw	0
  1287  00142C  22DD               	addwfc	postdec2,f,c
  1288  00142E                     
  1289                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1290  00142E  0E00               	movlw	0
  1291  001430  6E2C               	movwf	(_width+1)^0,c
  1292  001432  0E00               	movlw	0
  1293  001434  6E2B               	movwf	_width^0,c
  1294  001436  C02B  F02F         	movff	_width,_flags
  1295  00143A  C02C  F030         	movff	_width+1,_flags+1
  1296  00143E                     
  1297                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1298  00143E  682D               	setf	_prec^0,c
  1299  001440  682E               	setf	(_prec+1)^0,c
  1300  001442                     
  1301                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1302  001442  C015  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1303  001446  C016  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1304  00144A  CFDE FFF6          	movff	postinc2,tblptrl
  1305  00144E  CFDD FFF7          	movff	postdec2,tblptrh
  1306  001452                     	if	0	;tblptru may be non-zero
  1307  001452                     	endif
  1308  001452                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1309  001452  0E00               	movlw	low (__mediumconst shr (0+16))
  1310  001454  6EF8               	movwf	tblptru,c
  1311  001456                     	endif
  1312  001456  0008               	tblrd		*
  1313  001458  50F5               	movf	tablat,w,c
  1314  00145A  0A25               	xorlw	37
  1315  00145C  A4D8               	btfss	status,2,c
  1316  00145E  EF33  F00A         	goto	u521
  1317  001462  EF35  F00A         	goto	u520
  1318  001466                     u521:
  1319  001466  EF4C  F00A         	goto	l1426
  1320  00146A                     u520:
  1321  00146A                     
  1322                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1323  00146A  C015  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1324  00146E  C016  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1325  001472  2ADE               	incf	postinc2,f,c
  1326  001474  0E00               	movlw	0
  1327  001476  22DD               	addwfc	postdec2,f,c
  1328  001478                     
  1329                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1330  001478  0E00               	movlw	0
  1331  00147A  6E0B               	movwf	(fputc@c+1)^0,c
  1332  00147C  0E25               	movlw	37
  1333  00147E  6E0A               	movwf	fputc@c^0,c
  1334  001480  C013  F00C         	movff	vfpfcnvrt@fp,fputc@fp
  1335  001484  C014  F00D         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1336  001488  EC77  F00A         	call	_fputc	;wreg free
  1337  00148C                     l1422:
  1338                           
  1339                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1340  00148C  0E00               	movlw	0
  1341  00148E  6E14               	movwf	(?_vfpfcnvrt+1)^0,c
  1342  001490  0E01               	movlw	1
  1343  001492  6E13               	movwf	?_vfpfcnvrt^0,c
  1344  001494  EF76  F00A         	goto	l372
  1345  001498                     l1426:
  1346                           
  1347                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1348  001498  C015  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1349  00149C  C016  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1350  0014A0  2ADE               	incf	postinc2,f,c
  1351  0014A2  0E00               	movlw	0
  1352  0014A4  22DD               	addwfc	postdec2,f,c
  1353  0014A6                     
  1354                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1355  0014A6  0E00               	movlw	0
  1356  0014A8  6E14               	movwf	(?_vfpfcnvrt+1)^0,c
  1357  0014AA  0E00               	movlw	0
  1358  0014AC  6E13               	movwf	?_vfpfcnvrt^0,c
  1359  0014AE  EF76  F00A         	goto	l372
  1360  0014B2                     l1432:
  1361                           
  1362                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1363  0014B2  C015  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1364  0014B6  C016  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1365  0014BA  CFDE FFF6          	movff	postinc2,tblptrl
  1366  0014BE  CFDD FFF7          	movff	postdec2,tblptrh
  1367  0014C2                     	if	0	;tblptru may be non-zero
  1368  0014C2                     	endif
  1369  0014C2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  1370  0014C2  0E00               	movlw	low (__mediumconst shr (0+16))
  1371  0014C4  6EF8               	movwf	tblptru,c
  1372  0014C6                     	endif
  1373  0014C6  0008               	tblrd		*
  1374  0014C8  50F5               	movf	tablat,w,c
  1375  0014CA  6E0A               	movwf	fputc@c^0,c
  1376  0014CC  6A0B               	clrf	(fputc@c+1)^0,c
  1377  0014CE  C013  F00C         	movff	vfpfcnvrt@fp,fputc@fp
  1378  0014D2  C014  F00D         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1379  0014D6  EC77  F00A         	call	_fputc	;wreg free
  1380  0014DA                     
  1381                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1382  0014DA  C015  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1383  0014DE  C016  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1384  0014E2  2ADE               	incf	postinc2,f,c
  1385  0014E4  0E00               	movlw	0
  1386  0014E6  22DD               	addwfc	postdec2,f,c
  1387  0014E8  EF46  F00A         	goto	l1422
  1388  0014EC                     l372:
  1389  0014EC  0012               	return		;funcret
  1390  0014EE                     __end_of_vfpfcnvrt:
  1391                           	opt callstack 0
  1392                           
  1393 ;; *************** function _fputc *****************
  1394 ;; Defined at:
  1395 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputc.c"
  1396 ;; Parameters:    Size  Location     Type
  1397 ;;  c               2    9[COMRAM] int 
  1398 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1399 ;;		 -> NULL(0), 
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;		None
  1402 ;; Return value:  Size  Location     Type
  1403 ;;                  2    9[COMRAM] int 
  1404 ;; Registers used:
  1405 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1406 ;; Tracked objects:
  1407 ;;		On entry : 0/0
  1408 ;;		On exit  : 0/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1411 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1413 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1414 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1415 ;;Total ram usage:        9 bytes
  1416 ;; Hardware stack levels used:    1
  1417 ;; Hardware stack levels required when called:    4
  1418 ;; This function calls:
  1419 ;;		_putch
  1420 ;; This function is called by:
  1421 ;;		_vfpfcnvrt
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424                           
  1425                           	psect	text9
  1426  0014EE                     __ptext9:
  1427                           	opt callstack 0
  1428  0014EE                     _fputc:
  1429                           	opt callstack 22
  1430  0014EE  500C               	movf	fputc@fp^0,w,c
  1431  0014F0  100D               	iorwf	(fputc@fp+1)^0,w,c
  1432  0014F2  B4D8               	btfsc	status,2,c
  1433  0014F4  EF7E  F00A         	goto	u471
  1434  0014F8  EF80  F00A         	goto	u470
  1435  0014FC                     u471:
  1436  0014FC  EF89  F00A         	goto	l1398
  1437  001500                     u470:
  1438  001500  500C               	movf	fputc@fp^0,w,c
  1439  001502  100D               	iorwf	(fputc@fp+1)^0,w,c
  1440  001504  A4D8               	btfss	status,2,c
  1441  001506  EF87  F00A         	goto	u481
  1442  00150A  EF89  F00A         	goto	u480
  1443  00150E                     u481:
  1444  00150E  EF8E  F00A         	goto	l1400
  1445  001512                     u480:
  1446  001512                     l1398:
  1447  001512  500A               	movf	fputc@c^0,w,c
  1448  001514  ECE5  F00B         	call	_putch
  1449  001518  EFC1  F00A         	goto	l1064
  1450  00151C                     l1400:
  1451  00151C  EE20 F004          	lfsr	2,4
  1452  001520  500C               	movf	fputc@fp^0,w,c
  1453  001522  26D9               	addwf	fsr2l,f,c
  1454  001524  500D               	movf	(fputc@fp+1)^0,w,c
  1455  001526  22DA               	addwfc	fsr2h,f,c
  1456  001528  50DE               	movf	postinc2,w,c
  1457  00152A  10DE               	iorwf	postinc2,w,c
  1458  00152C  B4D8               	btfsc	status,2,c
  1459  00152E  EF9B  F00A         	goto	u491
  1460  001532  EF9D  F00A         	goto	u490
  1461  001536                     u491:
  1462  001536  EFB8  F00A         	goto	l1404
  1463  00153A                     u490:
  1464  00153A  EE20 F004          	lfsr	2,4
  1465  00153E  500C               	movf	fputc@fp^0,w,c
  1466  001540  26D9               	addwf	fsr2l,f,c
  1467  001542  500D               	movf	(fputc@fp+1)^0,w,c
  1468  001544  22DA               	addwfc	fsr2h,f,c
  1469  001546  EE10 F002          	lfsr	1,2
  1470  00154A  500C               	movf	fputc@fp^0,w,c
  1471  00154C  26E1               	addwf	fsr1l,f,c
  1472  00154E  500D               	movf	(fputc@fp+1)^0,w,c
  1473  001550  22E2               	addwfc	fsr1h,f,c
  1474  001552  50DE               	movf	postinc2,w,c
  1475  001554  5CE6               	subwf	postinc1,w,c
  1476  001556  50E6               	movf	postinc1,w,c
  1477  001558  0A80               	xorlw	128
  1478  00155A  6E12               	movwf	(??_fputc+4)^0,c
  1479  00155C  50DE               	movf	postinc2,w,c
  1480  00155E  0A80               	xorlw	128
  1481  001560  5812               	subwfb	(??_fputc+4)^0,w,c
  1482  001562  B0D8               	btfsc	status,0,c
  1483  001564  EFB6  F00A         	goto	u501
  1484  001568  EFB8  F00A         	goto	u500
  1485  00156C                     u501:
  1486  00156C  EFC1  F00A         	goto	l1064
  1487  001570                     u500:
  1488  001570                     l1404:
  1489  001570  EE20 F002          	lfsr	2,2
  1490  001574  500C               	movf	fputc@fp^0,w,c
  1491  001576  26D9               	addwf	fsr2l,f,c
  1492  001578  500D               	movf	(fputc@fp+1)^0,w,c
  1493  00157A  22DA               	addwfc	fsr2h,f,c
  1494  00157C  2ADE               	incf	postinc2,f,c
  1495  00157E  0E00               	movlw	0
  1496  001580  22DD               	addwfc	postdec2,f,c
  1497  001582                     l1064:
  1498  001582  0012               	return		;funcret
  1499  001584                     __end_of_fputc:
  1500                           	opt callstack 0
  1501                           
  1502 ;; *************** function _putch *****************
  1503 ;; Defined at:
  1504 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\putch.c"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;  c               1    wreg     unsigned char 
  1507 ;; Auto vars:     Size  Location     Type
  1508 ;;  c               1    0[COMRAM] unsigned char 
  1509 ;; Return value:  Size  Location     Type
  1510 ;;                  1    wreg      void 
  1511 ;; Registers used:
  1512 ;;		wreg
  1513 ;; Tracked objects:
  1514 ;;		On entry : 0/0
  1515 ;;		On exit  : 0/0
  1516 ;;		Unchanged: 0/0
  1517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1522 ;;Total ram usage:        0 bytes
  1523 ;; Hardware stack levels used:    1
  1524 ;; Hardware stack levels required when called:    3
  1525 ;; This function calls:
  1526 ;;		Nothing
  1527 ;; This function is called by:
  1528 ;;		_fputc
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           	psect	text10
  1533  0017CA                     __ptext10:
  1534                           	opt callstack 0
  1535  0017CA                     _putch:
  1536                           	opt callstack 22
  1537  0017CA  0012               	return		;funcret
  1538  0017CC                     __end_of_putch:
  1539                           	opt callstack 0
  1540                           
  1541 ;; *************** function _myISR *****************
  1542 ;; Defined at:
  1543 ;;		line 9 in file "interrupt_manager.c"
  1544 ;; Parameters:    Size  Location     Type
  1545 ;;		None
  1546 ;; Auto vars:     Size  Location     Type
  1547 ;;		None
  1548 ;; Return value:  Size  Location     Type
  1549 ;;                  1    wreg      void 
  1550 ;; Registers used:
  1551 ;;		wreg, status,2, status,0, cstack
  1552 ;; Tracked objects:
  1553 ;;		On entry : 0/0
  1554 ;;		On exit  : 0/0
  1555 ;;		Unchanged: 0/0
  1556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1561 ;;Total ram usage:        0 bytes
  1562 ;; Hardware stack levels used:    1
  1563 ;; Hardware stack levels required when called:    2
  1564 ;; This function calls:
  1565 ;;		_handleButton
  1566 ;; This function is called by:
  1567 ;;		Interrupt level 2
  1568 ;; This function uses a non-reentrant model
  1569 ;;
  1570                           
  1571                           	psect	intcode
  1572  000008                     __pintcode:
  1573                           	opt callstack 0
  1574  000008                     _myISR:
  1575                           	opt callstack 22
  1576                           
  1577                           ;incstack = 0
  1578  000008  8241               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1579  00000A  ED96  F00B         	call	int_func,f	;refresh shadow registers
  1580                           
  1581                           	psect	intcode_body
  1582  00172C                     __pintcode_body:
  1583                           	opt callstack 22
  1584  00172C                     int_func:
  1585                           	opt callstack 22
  1586  00172C  0006               	pop		; remove dummy address from shadow register refresh
  1587  00172E                     
  1588                           ;interrupt_manager.c: 10:     if(INTCONbits.TMR0IE && INTCONbits.TMR0IF) {
  1589  00172E  AAF2               	btfss	242,5,c	;volatile
  1590  001730  EF9C  F00B         	goto	i2u91_41
  1591  001734  EF9E  F00B         	goto	i2u91_40
  1592  001738                     i2u91_41:
  1593  001738  EFAA  F00B         	goto	i2l89
  1594  00173C                     i2u91_40:
  1595  00173C  A4F2               	btfss	242,2,c	;volatile
  1596  00173E  EFA3  F00B         	goto	i2u92_41
  1597  001742  EFA5  F00B         	goto	i2u92_40
  1598  001746                     i2u92_41:
  1599  001746  EFAA  F00B         	goto	i2l89
  1600  00174A                     i2u92_40:
  1601  00174A                     
  1602                           ;interrupt_manager.c: 11:         INTCONbits.TMR0IF = 0;
  1603  00174A  94F2               	bcf	242,2,c	;volatile
  1604  00174C                     
  1605                           ;interrupt_manager.c: 12:         TMR0L = 177;
  1606  00174C  0EB1               	movlw	177
  1607  00174E  6ED6               	movwf	214,c	;volatile
  1608  001750                     
  1609                           ;interrupt_manager.c: 13:         handleButton();
  1610  001750  EC5D  F009         	call	_handleButton	;wreg free
  1611  001754                     i2l89:
  1612  001754  9241               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1613  001756  0011               	retfie		f
  1614  001758                     __end_of_myISR:
  1615                           	opt callstack 0
  1616                           
  1617 ;; *************** function _handleButton *****************
  1618 ;; Defined at:
  1619 ;;		line 22 in file "buttons.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;		None
  1622 ;; Auto vars:     Size  Location     Type
  1623 ;;  checkRB0        2    7[COMRAM] int 
  1624 ;;  checkRA5        2    5[COMRAM] int 
  1625 ;; Return value:  Size  Location     Type
  1626 ;;                  1    wreg      void 
  1627 ;; Registers used:
  1628 ;;		wreg, status,2, status,0, cstack
  1629 ;; Tracked objects:
  1630 ;;		On entry : 0/0
  1631 ;;		On exit  : 0/0
  1632 ;;		Unchanged: 0/0
  1633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1635 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1637 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1638 ;;Total ram usage:        4 bytes
  1639 ;; Hardware stack levels used:    1
  1640 ;; Hardware stack levels required when called:    1
  1641 ;; This function calls:
  1642 ;;		___lwmod
  1643 ;;		_readButtonRA5
  1644 ;;		_readButtonRB0
  1645 ;; This function is called by:
  1646 ;;		_myISR
  1647 ;; This function uses a non-reentrant model
  1648 ;;
  1649                           
  1650                           	psect	text12
  1651  0012BA                     __ptext12:
  1652                           	opt callstack 0
  1653  0012BA                     _handleButton:
  1654                           	opt callstack 22
  1655  0012BA                     
  1656                           ;buttons.c: 23:     int checkRA5 = readButtonRA5();
  1657  0012BA  EC4D  F00B         	call	_readButtonRA5	;wreg free
  1658  0012BE  C001  F006         	movff	?_readButtonRA5,handleButton@checkRA5
  1659  0012C2  C002  F007         	movff	?_readButtonRA5+1,handleButton@checkRA5+1
  1660                           
  1661                           ;buttons.c: 24:     int checkRB0 = readButtonRB0();
  1662  0012C6  EC25  F00B         	call	_readButtonRB0	;wreg free
  1663  0012CA  C001  F008         	movff	?_readButtonRB0,handleButton@checkRB0
  1664  0012CE  C002  F009         	movff	?_readButtonRB0+1,handleButton@checkRB0+1
  1665  0012D2                     
  1666                           ;buttons.c: 25:     if(checkRA5 == 2) {
  1667  0012D2  0E02               	movlw	2
  1668  0012D4  1806               	xorwf	handleButton@checkRA5^0,w,c
  1669  0012D6  1007               	iorwf	(handleButton@checkRA5+1)^0,w,c
  1670  0012D8  A4D8               	btfss	status,2,c
  1671  0012DA  EF71  F009         	goto	i2u83_41
  1672  0012DE  EF73  F009         	goto	i2u83_40
  1673  0012E2                     i2u83_41:
  1674  0012E2  EFA5  F009         	goto	i2l1644
  1675  0012E6                     i2u83_40:
  1676  0012E6                     
  1677                           ;buttons.c: 26:         countRB0 = 0;
  1678  0012E6  0E00               	movlw	0
  1679  0012E8  6E32               	movwf	(_countRB0+1)^0,c
  1680  0012EA  0E00               	movlw	0
  1681  0012EC  6E31               	movwf	_countRB0^0,c
  1682  0012EE                     
  1683                           ;buttons.c: 27:         countRA5++;
  1684  0012EE  4A33               	infsnz	_countRA5^0,f,c
  1685  0012F0  2A34               	incf	(_countRA5+1)^0,f,c
  1686  0012F2                     
  1687                           ;buttons.c: 28:         if(countRA5 % 10 == 0)
  1688  0012F2  C033  F001         	movff	_countRA5,___lwmod@dividend
  1689  0012F6  C034  F002         	movff	_countRA5+1,___lwmod@dividend+1
  1690  0012FA  0E00               	movlw	0
  1691  0012FC  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1692  0012FE  0E0A               	movlw	10
  1693  001300  6E03               	movwf	___lwmod@divisor^0,c
  1694  001302  ECC2  F00A         	call	___lwmod	;wreg free
  1695  001306  5001               	movf	?___lwmod^0,w,c
  1696  001308  1002               	iorwf	(?___lwmod+1)^0,w,c
  1697  00130A  A4D8               	btfss	status,2,c
  1698  00130C  EF8A  F009         	goto	i2u84_41
  1699  001310  EF8C  F009         	goto	i2u84_40
  1700  001314                     i2u84_41:
  1701  001314  EF8E  F009         	goto	i2l1640
  1702  001318                     i2u84_40:
  1703  001318                     
  1704                           ;buttons.c: 29:             increase2 = 1;
  1705  001318  0E01               	movlw	1
  1706  00131A  6E37               	movwf	_increase2^0,c
  1707  00131C                     i2l1640:
  1708                           
  1709                           ;buttons.c: 30:         if(countRA5 % 50 == 0)
  1710  00131C  C033  F001         	movff	_countRA5,___lwmod@dividend
  1711  001320  C034  F002         	movff	_countRA5+1,___lwmod@dividend+1
  1712  001324  0E00               	movlw	0
  1713  001326  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1714  001328  0E32               	movlw	50
  1715  00132A  6E03               	movwf	___lwmod@divisor^0,c
  1716  00132C  ECC2  F00A         	call	___lwmod	;wreg free
  1717  001330  5001               	movf	?___lwmod^0,w,c
  1718  001332  1002               	iorwf	(?___lwmod+1)^0,w,c
  1719  001334  A4D8               	btfss	status,2,c
  1720  001336  EF9F  F009         	goto	i2u85_41
  1721  00133A  EFA1  F009         	goto	i2u85_40
  1722  00133E                     i2u85_41:
  1723  00133E  EFFB  F009         	goto	i2l192
  1724  001342                     i2u85_40:
  1725  001342                     
  1726                           ;buttons.c: 31:             increase1 = 1;
  1727  001342  0E01               	movlw	1
  1728  001344  6E38               	movwf	_increase1^0,c
  1729  001346  EFFB  F009         	goto	i2l192
  1730  00134A                     i2l1644:
  1731  00134A  0E02               	movlw	2
  1732  00134C  1808               	xorwf	handleButton@checkRB0^0,w,c
  1733  00134E  1009               	iorwf	(handleButton@checkRB0+1)^0,w,c
  1734  001350  A4D8               	btfss	status,2,c
  1735  001352  EFAD  F009         	goto	i2u86_41
  1736  001356  EFAF  F009         	goto	i2u86_40
  1737  00135A                     i2u86_41:
  1738  00135A  EFE1  F009         	goto	i2l1658
  1739  00135E                     i2u86_40:
  1740  00135E                     
  1741                           ;buttons.c: 34:         countRA5 = 0;
  1742  00135E  0E00               	movlw	0
  1743  001360  6E34               	movwf	(_countRA5+1)^0,c
  1744  001362  0E00               	movlw	0
  1745  001364  6E33               	movwf	_countRA5^0,c
  1746  001366                     
  1747                           ;buttons.c: 35:         countRB0++;
  1748  001366  4A31               	infsnz	_countRB0^0,f,c
  1749  001368  2A32               	incf	(_countRB0+1)^0,f,c
  1750  00136A                     
  1751                           ;buttons.c: 36:         if(countRB0 % 10 == 0)
  1752  00136A  C031  F001         	movff	_countRB0,___lwmod@dividend
  1753  00136E  C032  F002         	movff	_countRB0+1,___lwmod@dividend+1
  1754  001372  0E00               	movlw	0
  1755  001374  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1756  001376  0E0A               	movlw	10
  1757  001378  6E03               	movwf	___lwmod@divisor^0,c
  1758  00137A  ECC2  F00A         	call	___lwmod	;wreg free
  1759  00137E  5001               	movf	?___lwmod^0,w,c
  1760  001380  1002               	iorwf	(?___lwmod+1)^0,w,c
  1761  001382  A4D8               	btfss	status,2,c
  1762  001384  EFC6  F009         	goto	i2u87_41
  1763  001388  EFC8  F009         	goto	i2u87_40
  1764  00138C                     i2u87_41:
  1765  00138C  EFCA  F009         	goto	i2l1654
  1766  001390                     i2u87_40:
  1767  001390                     
  1768                           ;buttons.c: 37:             decrease2 = 1;
  1769  001390  0E01               	movlw	1
  1770  001392  6E35               	movwf	_decrease2^0,c
  1771  001394                     i2l1654:
  1772                           
  1773                           ;buttons.c: 38:         if(countRB0 % 50 == 0)
  1774  001394  C031  F001         	movff	_countRB0,___lwmod@dividend
  1775  001398  C032  F002         	movff	_countRB0+1,___lwmod@dividend+1
  1776  00139C  0E00               	movlw	0
  1777  00139E  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1778  0013A0  0E32               	movlw	50
  1779  0013A2  6E03               	movwf	___lwmod@divisor^0,c
  1780  0013A4  ECC2  F00A         	call	___lwmod	;wreg free
  1781  0013A8  5001               	movf	?___lwmod^0,w,c
  1782  0013AA  1002               	iorwf	(?___lwmod+1)^0,w,c
  1783  0013AC  A4D8               	btfss	status,2,c
  1784  0013AE  EFDB  F009         	goto	i2u88_41
  1785  0013B2  EFDD  F009         	goto	i2u88_40
  1786  0013B6                     i2u88_41:
  1787  0013B6  EFFB  F009         	goto	i2l192
  1788  0013BA                     i2u88_40:
  1789  0013BA                     
  1790                           ;buttons.c: 39:             decrease1 = 1;
  1791  0013BA  0E01               	movlw	1
  1792  0013BC  6E36               	movwf	_decrease1^0,c
  1793  0013BE  EFFB  F009         	goto	i2l192
  1794  0013C2                     i2l1658:
  1795  0013C2  0408               	decf	handleButton@checkRB0^0,w,c
  1796  0013C4  1009               	iorwf	(handleButton@checkRB0+1)^0,w,c
  1797  0013C6  B4D8               	btfsc	status,2,c
  1798  0013C8  EFE8  F009         	goto	i2u89_41
  1799  0013CC  EFEA  F009         	goto	i2u89_40
  1800  0013D0                     i2u89_41:
  1801  0013D0  EFF3  F009         	goto	i2l1662
  1802  0013D4                     i2u89_40:
  1803  0013D4  0406               	decf	handleButton@checkRA5^0,w,c
  1804  0013D6  1007               	iorwf	(handleButton@checkRA5+1)^0,w,c
  1805  0013D8  A4D8               	btfss	status,2,c
  1806  0013DA  EFF1  F009         	goto	i2u90_41
  1807  0013DE  EFF3  F009         	goto	i2u90_40
  1808  0013E2                     i2u90_41:
  1809  0013E2  EFFB  F009         	goto	i2l192
  1810  0013E6                     i2u90_40:
  1811  0013E6                     i2l1662:
  1812                           
  1813                           ;buttons.c: 42:         countRA5 = 0;
  1814  0013E6  0E00               	movlw	0
  1815  0013E8  6E34               	movwf	(_countRA5+1)^0,c
  1816  0013EA  0E00               	movlw	0
  1817  0013EC  6E33               	movwf	_countRA5^0,c
  1818                           
  1819                           ;buttons.c: 43:         countRB0 = 0;
  1820  0013EE  0E00               	movlw	0
  1821  0013F0  6E32               	movwf	(_countRB0+1)^0,c
  1822  0013F2  0E00               	movlw	0
  1823  0013F4  6E31               	movwf	_countRB0^0,c
  1824  0013F6                     i2l192:
  1825  0013F6  0012               	return		;funcret
  1826  0013F8                     __end_of_handleButton:
  1827                           	opt callstack 0
  1828                           
  1829 ;; *************** function _readButtonRB0 *****************
  1830 ;; Defined at:
  1831 ;;		line 13 in file "buttons.c"
  1832 ;; Parameters:    Size  Location     Type
  1833 ;;		None
  1834 ;; Auto vars:     Size  Location     Type
  1835 ;;		None
  1836 ;; Return value:  Size  Location     Type
  1837 ;;                  2    0[COMRAM] int 
  1838 ;; Registers used:
  1839 ;;		wreg, status,2, status,0
  1840 ;; Tracked objects:
  1841 ;;		On entry : 0/0
  1842 ;;		On exit  : 0/0
  1843 ;;		Unchanged: 0/0
  1844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1845 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1848 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1849 ;;Total ram usage:        2 bytes
  1850 ;; Hardware stack levels used:    1
  1851 ;; This function calls:
  1852 ;;		Nothing
  1853 ;; This function is called by:
  1854 ;;		_handleButton
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text13
  1859  00164A                     __ptext13:
  1860                           	opt callstack 0
  1861  00164A                     _readButtonRB0:
  1862                           	opt callstack 22
  1863  00164A                     
  1864                           ;buttons.c: 14:     firstReadRB0 = secondReadRB0;
  1865  00164A  C03D  F03E         	movff	_secondReadRB0,_firstReadRB0
  1866  00164E                     
  1867                           ;buttons.c: 15:     secondReadRB0 = PORTBbits.RB0;
  1868  00164E  0E00               	movlw	0
  1869  001650  B081               	btfsc	129,0,c	;volatile
  1870  001652  0E01               	movlw	1
  1871  001654  6E3D               	movwf	_secondReadRB0^0,c
  1872  001656                     
  1873                           ;buttons.c: 16:     if(secondReadRB0 == firstReadRB0) {
  1874  001656  503E               	movf	_firstReadRB0^0,w,c
  1875  001658  183D               	xorwf	_secondReadRB0^0,w,c
  1876  00165A  A4D8               	btfss	status,2,c
  1877  00165C  EF32  F00B         	goto	i2u56_41
  1878  001660  EF34  F00B         	goto	i2u56_40
  1879  001664                     i2u56_41:
  1880  001664  EF48  F00B         	goto	i2l1480
  1881  001668                     i2u56_40:
  1882  001668                     
  1883                           ;buttons.c: 17:         return (secondReadRB0 == 0) ? 2 : 1;
  1884  001668  503D               	movf	_secondReadRB0^0,w,c
  1885  00166A  B4D8               	btfsc	status,2,c
  1886  00166C  EF3A  F00B         	goto	i2u57_41
  1887  001670  EF3C  F00B         	goto	i2u57_40
  1888  001674                     i2u57_41:
  1889  001674  EF42  F00B         	goto	i2l1476
  1890  001678                     i2u57_40:
  1891  001678  0E00               	movlw	0
  1892  00167A  6E02               	movwf	(?_readButtonRB0+1)^0,c
  1893  00167C  0E01               	movlw	1
  1894  00167E  6E01               	movwf	?_readButtonRB0^0,c
  1895  001680  EF4C  F00B         	goto	i2l178
  1896  001684                     i2l1476:
  1897  001684  0E00               	movlw	0
  1898  001686  6E02               	movwf	(?_readButtonRB0+1)^0,c
  1899  001688  0E02               	movlw	2
  1900  00168A  6E01               	movwf	?_readButtonRB0^0,c
  1901  00168C  EF4C  F00B         	goto	i2l178
  1902  001690                     i2l1480:
  1903                           
  1904                           ;buttons.c: 19:     return 0;
  1905  001690  0E00               	movlw	0
  1906  001692  6E02               	movwf	(?_readButtonRB0+1)^0,c
  1907  001694  0E00               	movlw	0
  1908  001696  6E01               	movwf	?_readButtonRB0^0,c
  1909  001698                     i2l178:
  1910  001698  0012               	return		;funcret
  1911  00169A                     __end_of_readButtonRB0:
  1912                           	opt callstack 0
  1913                           
  1914 ;; *************** function _readButtonRA5 *****************
  1915 ;; Defined at:
  1916 ;;		line 4 in file "buttons.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;		None
  1919 ;; Auto vars:     Size  Location     Type
  1920 ;;		None
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  2    0[COMRAM] int 
  1923 ;; Registers used:
  1924 ;;		wreg, status,2, status,0
  1925 ;; Tracked objects:
  1926 ;;		On entry : 0/0
  1927 ;;		On exit  : 0/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1930 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1933 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1934 ;;Total ram usage:        2 bytes
  1935 ;; Hardware stack levels used:    1
  1936 ;; This function calls:
  1937 ;;		Nothing
  1938 ;; This function is called by:
  1939 ;;		_handleButton
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           	psect	text14
  1944  00169A                     __ptext14:
  1945                           	opt callstack 0
  1946  00169A                     _readButtonRA5:
  1947                           	opt callstack 22
  1948  00169A                     
  1949                           ;buttons.c: 5:     firstReadRA5 = secondReadRA5;
  1950  00169A  C03F  F040         	movff	_secondReadRA5,_firstReadRA5
  1951  00169E                     
  1952                           ;buttons.c: 6:     secondReadRA5 = PORTAbits.RA5;
  1953  00169E  0E00               	movlw	0
  1954  0016A0  BA80               	btfsc	128,5,c	;volatile
  1955  0016A2  0E01               	movlw	1
  1956  0016A4  6E3F               	movwf	_secondReadRA5^0,c
  1957  0016A6                     
  1958                           ;buttons.c: 7:     if(secondReadRA5 == firstReadRA5) {
  1959  0016A6  5040               	movf	_firstReadRA5^0,w,c
  1960  0016A8  183F               	xorwf	_secondReadRA5^0,w,c
  1961  0016AA  A4D8               	btfss	status,2,c
  1962  0016AC  EF5A  F00B         	goto	i2u54_41
  1963  0016B0  EF5C  F00B         	goto	i2u54_40
  1964  0016B4                     i2u54_41:
  1965  0016B4  EF70  F00B         	goto	i2l1462
  1966  0016B8                     i2u54_40:
  1967  0016B8                     
  1968                           ;buttons.c: 8:         return (secondReadRA5 == 0) ? 2 : 1;
  1969  0016B8  503F               	movf	_secondReadRA5^0,w,c
  1970  0016BA  B4D8               	btfsc	status,2,c
  1971  0016BC  EF62  F00B         	goto	i2u55_41
  1972  0016C0  EF64  F00B         	goto	i2u55_40
  1973  0016C4                     i2u55_41:
  1974  0016C4  EF6A  F00B         	goto	i2l1458
  1975  0016C8                     i2u55_40:
  1976  0016C8  0E00               	movlw	0
  1977  0016CA  6E02               	movwf	(?_readButtonRA5+1)^0,c
  1978  0016CC  0E01               	movlw	1
  1979  0016CE  6E01               	movwf	?_readButtonRA5^0,c
  1980  0016D0  EF74  F00B         	goto	i2l170
  1981  0016D4                     i2l1458:
  1982  0016D4  0E00               	movlw	0
  1983  0016D6  6E02               	movwf	(?_readButtonRA5+1)^0,c
  1984  0016D8  0E02               	movlw	2
  1985  0016DA  6E01               	movwf	?_readButtonRA5^0,c
  1986  0016DC  EF74  F00B         	goto	i2l170
  1987  0016E0                     i2l1462:
  1988                           
  1989                           ;buttons.c: 10:     return 0;
  1990  0016E0  0E00               	movlw	0
  1991  0016E2  6E02               	movwf	(?_readButtonRA5+1)^0,c
  1992  0016E4  0E00               	movlw	0
  1993  0016E6  6E01               	movwf	?_readButtonRA5^0,c
  1994  0016E8                     i2l170:
  1995  0016E8  0012               	return		;funcret
  1996  0016EA                     __end_of_readButtonRA5:
  1997                           	opt callstack 0
  1998                           
  1999 ;; *************** function ___lwmod *****************
  2000 ;; Defined at:
  2001 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lwmod.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;  dividend        2    0[COMRAM] unsigned int 
  2004 ;;  divisor         2    2[COMRAM] unsigned int 
  2005 ;; Auto vars:     Size  Location     Type
  2006 ;;  counter         1    4[COMRAM] unsigned char 
  2007 ;; Return value:  Size  Location     Type
  2008 ;;                  2    0[COMRAM] unsigned int 
  2009 ;; Registers used:
  2010 ;;		wreg, status,2, status,0
  2011 ;; Tracked objects:
  2012 ;;		On entry : 0/0
  2013 ;;		On exit  : 0/0
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2016 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2017 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2019 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2020 ;;Total ram usage:        5 bytes
  2021 ;; Hardware stack levels used:    1
  2022 ;; This function calls:
  2023 ;;		Nothing
  2024 ;; This function is called by:
  2025 ;;		_handleButton
  2026 ;; This function uses a non-reentrant model
  2027 ;;
  2028                           
  2029                           	psect	text15
  2030  001584                     __ptext15:
  2031                           	opt callstack 0
  2032  001584                     ___lwmod:
  2033                           	opt callstack 22
  2034  001584  5003               	movf	___lwmod@divisor^0,w,c
  2035  001586  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  2036  001588  B4D8               	btfsc	status,2,c
  2037  00158A  EFC9  F00A         	goto	i2u58_41
  2038  00158E  EFCB  F00A         	goto	i2u58_40
  2039  001592                     i2u58_41:
  2040  001592  EFEF  F00A         	goto	i2l882
  2041  001596                     i2u58_40:
  2042  001596  0E01               	movlw	1
  2043  001598  6E05               	movwf	___lwmod@counter^0,c
  2044  00159A  EFD3  F00A         	goto	i2l1496
  2045  00159E                     i2l1494:
  2046  00159E  90D8               	bcf	status,0,c
  2047  0015A0  3603               	rlcf	___lwmod@divisor^0,f,c
  2048  0015A2  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  2049  0015A4  2A05               	incf	___lwmod@counter^0,f,c
  2050  0015A6                     i2l1496:
  2051  0015A6  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  2052  0015A8  EFD8  F00A         	goto	i2u59_41
  2053  0015AC  EFDA  F00A         	goto	i2u59_40
  2054  0015B0                     i2u59_41:
  2055  0015B0  EFCF  F00A         	goto	i2l1494
  2056  0015B4                     i2u59_40:
  2057  0015B4                     i2l1498:
  2058  0015B4  5003               	movf	___lwmod@divisor^0,w,c
  2059  0015B6  5C01               	subwf	___lwmod@dividend^0,w,c
  2060  0015B8  5004               	movf	(___lwmod@divisor+1)^0,w,c
  2061  0015BA  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  2062  0015BC  A0D8               	btfss	status,0,c
  2063  0015BE  EFE3  F00A         	goto	i2u60_41
  2064  0015C2  EFE5  F00A         	goto	i2u60_40
  2065  0015C6                     i2u60_41:
  2066  0015C6  EFE9  F00A         	goto	i2l1502
  2067  0015CA                     i2u60_40:
  2068  0015CA  5003               	movf	___lwmod@divisor^0,w,c
  2069  0015CC  5E01               	subwf	___lwmod@dividend^0,f,c
  2070  0015CE  5004               	movf	(___lwmod@divisor+1)^0,w,c
  2071  0015D0  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  2072  0015D2                     i2l1502:
  2073  0015D2  90D8               	bcf	status,0,c
  2074  0015D4  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  2075  0015D6  3203               	rrcf	___lwmod@divisor^0,f,c
  2076  0015D8  2E05               	decfsz	___lwmod@counter^0,f,c
  2077  0015DA  EFDA  F00A         	goto	i2l1498
  2078  0015DE                     i2l882:
  2079  0015DE  C001  F001         	movff	___lwmod@dividend,?___lwmod
  2080  0015E2  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  2081  0015E6  0012               	return		;funcret
  2082  0015E8                     __end_of___lwmod:
  2083                           	opt callstack 0
  2084                           
  2085                           	psect	rparam
  2086  0000                     
  2087                           	psect	temp
  2088  000041                     btemp:
  2089                           	opt callstack 0
  2090  000041                     	ds	1
  2091  0000                     int$flags	set	btemp
  2092  0000                     wtemp8	set	btemp+1
  2093  0000                     ttemp5	set	btemp+1
  2094  0000                     ttemp6	set	btemp+4
  2095  0000                     ttemp7	set	btemp+8
  2096                           tosu	equ	0xFFF
  2097                           tosh	equ	0xFFE
  2098                           tosl	equ	0xFFD
  2099                           stkptr	equ	0xFFC
  2100                           pclatu	equ	0xFFB
  2101                           pclath	equ	0xFFA
  2102                           pcl	equ	0xFF9
  2103                           tblptru	equ	0xFF8
  2104                           tblptrh	equ	0xFF7
  2105                           tblptrl	equ	0xFF6
  2106                           tablat	equ	0xFF5
  2107                           prodh	equ	0xFF4
  2108                           prodl	equ	0xFF3
  2109                           indf0	equ	0xFEF
  2110                           postinc0	equ	0xFEE
  2111                           postdec0	equ	0xFED
  2112                           preinc0	equ	0xFEC
  2113                           plusw0	equ	0xFEB
  2114                           fsr0h	equ	0xFEA
  2115                           fsr0l	equ	0xFE9
  2116                           wreg	equ	0xFE8
  2117                           indf1	equ	0xFE7
  2118                           postinc1	equ	0xFE6
  2119                           postdec1	equ	0xFE5
  2120                           preinc1	equ	0xFE4
  2121                           plusw1	equ	0xFE3
  2122                           fsr1h	equ	0xFE2
  2123                           fsr1l	equ	0xFE1
  2124                           bsr	equ	0xFE0
  2125                           indf2	equ	0xFDF
  2126                           postinc2	equ	0xFDE
  2127                           postdec2	equ	0xFDD
  2128                           preinc2	equ	0xFDC
  2129                           plusw2	equ	0xFDB
  2130                           fsr2h	equ	0xFDA
  2131                           fsr2l	equ	0xFD9
  2132                           status	equ	0xFD8


Data Sizes:
    Strings     20
    Constant    0
    Data        4
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      64
    BANK0           160      0      32
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[10]), 
		 -> STR_2(CODE[10]), STR_1(CODE[10]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    S1041_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[10]), 
		 -> STR_2(CODE[10]), STR_1(CODE[10]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 10
		 -> STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[10]), STR_3(CODE[10]), 
		 -> STR_2(CODE[10]), STR_1(CODE[10]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_FSM
    _FSM->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc

Critical Paths under _myISR in COMRAM

    _myISR->_handleButton
    _handleButton->___lwmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _myISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _myISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _myISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _myISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _myISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _myISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _myISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _myISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _myISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _myISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _myISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _myISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _myISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _myISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2000
                                _FSM
                     _interrupt_init
                           _osc_init
                           _pin_init
                        _timer0_init
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pin_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _osc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interrupt_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FSM                                                  2     2      0    2000
                                             38 COMRAM     2     2      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                               6     4      2    2000
                                             32 COMRAM     6     4      2
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6    1492
                                             24 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           40    34      6    1142
                                             18 COMRAM     6     0      6
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4     716
                                              9 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _myISR                                                0     0      0     857
                       _handleButton
 ---------------------------------------------------------------------------------
 (8) _handleButton                                         4     4      0     857
                                              5 COMRAM     4     4      0
                            ___lwmod
                      _readButtonRA5
                      _readButtonRB0
 ---------------------------------------------------------------------------------
 (9) _readButtonRB0                                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) _readButtonRA5                                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) ___lwmod                                              5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FSM
     _printf
       _vfprintf
         _vfpfcnvrt
           _fputc
             _putch
   _interrupt_init
   _osc_init
   _pin_init
   _timer0_init

 _myISR (ROOT)
   _handleButton
     ___lwmod
     _readButtonRA5
     _readButtonRB0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      20       5       20.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      40       1       68.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      60      32        0.0%
DATA                 0      0      60       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Sep 16 09:14:22 2019

                     l83 17C4   __end_of_interrupt_init 17C6                      l130 17AA  
                    l304 12B8                      l227 17B4                      l339 17BE  
                    l372 14EC                      l377 1640                      l378 1648  
                    _FSM 1016                      u500 1570                      u501 156C  
                    u510 1420                      u511 141C                      u520 146A  
                    u521 1466                      u530 1640                      u610 1030  
                    u531 163C                      u611 102C                      u700 1134  
                    u620 1058                      u701 1130                      u621 1054  
                    u470 1500                      u710 1158                      u630 1084  
                    u471 14FC                      u711 1154                      u631 1080  
                    u480 1512                      u800 122C                      u720 116A  
                    u640 109E                      u481 150E                      u801 1228  
                    u721 1166                      u641 109A                      u490 153A  
                    u810 1250                      u730 1184                      u650 10B0  
                    u491 1536                      u811 124C                      u731 1180  
                    u651 10AC                      u820 1262                      u740 119E  
                    u660 10CC                      u821 125E                      u741 119A  
                    u661 10C8                      u750 11B0                      u670 10F4  
                    u751 11AC                      u671 10F0                      u760 11C4  
                    u680 110E                      u761 11C0                      u681 110A  
                    u770 11EC                      u690 1120                      u771 11E8  
                    u691 111C                      u780 1206                      u781 1202  
                    u790 1218                      u791 1214                      wreg 000FE8  
           __CFG_LVP$OFF 000000                     ?_FSM 0001             __CFG_WDT$OFF 000000  
                   l1210 17C0                     l1202 179A                     l1212 17B6  
                   l1204 17A2                     l1206 17A4                     l1064 1582  
                   l1400 151C                     l1208 17AC                     l1082 17CA  
                   l1402 153A                     l1410 1420                     l1404 1570  
                   l1420 1478                     l1412 142E                     l1422 148C  
                   l1414 143E                     l1510 1030                     l1079 177C  
                   l1416 1442                     l1432 14B2                     l1408 13F8  
                   l1440 15E8                     l1520 105A                     l1512 1032  
                   l1434 14DA                     l1418 146A                     l1426 1498  
                   l1442 15F0                     l1610 123A                     l1530 109E  
                   l1522 1066                     l1514 103E                     l1506 1016  
                   l1428 14A6                     l1444 15FC                     l1612 123E  
                   l1604 121C                     l1540 10CE                     l1524 106E  
                   l1516 1046                     l1508 101E                     l1446 1620  
                   l1614 1250                     l1606 122C                     l1550 110E  
                   l1542 10DA                     l1534 10B4                     l1526 1084  
                   l1518 1058                     l1622 1266                     l1608 122E  
                   l1560 1136                     l1544 10DE                     l1536 10BC  
                   l1528 108C                     l1394 14EE                     l1562 1142  
                   l1546 10F4                     l1538 10CC                     l1396 1500  
                   l1484 1758                     l1572 116E                     l1564 1146  
                   l1556 1124                     l1548 10FC                     l1398 1512  
                   l1486 1760                     l1590 11D2                     l1574 1184  
                   l1566 1158                     l1558 1134                     l1670 178E  
                   l1592 11D6                     l1584 11B4                     l1576 118C  
                   l1664 177E                     l1594 11EC                     l1586 11C4  
                   l1578 119E                     l1666 1786                     l1596 11F4  
                   l1588 11C6                     l1668 178A                     l1686 127A  
                   l1598 1206                     STR_1 100B                     STR_2 1001  
                   STR_3 100B                     STR_4 100B                     STR_5 1001  
                   STR_6 1001                     _LATD 000F8C                     i2l89 1754  
                   _dbuf 0060                     _main 177E                     _prec 002D  
                   _nout 0029                     fsr1h 000FE2                     fsr2h 000FDA  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 0041  
                   start 000E            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ??_FSM 0027                    ?_main 0001  
        ?_interrupt_init 0001                    _T0CON 000FD5          __end_of___lwmod 15E8  
                  i2l170 16E8                    i2l192 13F6                    i2l178 1698  
                  i2l882 15DE                    i2l889 15E6             vfpfcnvrt@fmt 0015  
                  _TMR0L 000FD6                    _TRISD 000F95            __CFG_PWRT$OFF 000000  
         __CFG_FCMEN$OFF 000000                    _flags 002F                    _myISR 0008  
                  _fputc 14EE                    _width 002B                    _state 003C  
                  _putch 17CA           __CFG_BOREN$OFF 000000                    tablat 000FF5  
                  ttemp5 0042                    ttemp6 0045                    ttemp7 0049  
                  status 000FD8                    wtemp8 0042          __initialization 16EA  
           __end_of_main 179A     __end_of_handleButton 13F8                   ??_main 0029  
          __activetblptr 000003   __size_of_readButtonRB0 0050   __size_of_readButtonRA5 0050  
                 _ADCON1 000FC1                   ?_myISR 0001                   ?_fputc 000A  
                 ?_putch 0001                   i2l1500 15CA                   i2l1502 15D2  
                 i2l1504 15D8                   i2l1450 169E                   i2l1452 16A6  
                 i2l1454 16B8                   i2l1462 16E0                   i2l1470 1656  
                 i2l1630 12D2                   i2l1456 16C8                   i2l1448 169A  
                 i2l1472 1668                   i2l1480 1690                   i2l1640 131C  
                 i2l1632 12E6                   i2l1490 1584                   i2l1458 16D4  
                 i2l1474 1678                   i2l1466 164A                   i2l1650 136A  
                 i2l1642 1342                   i2l1634 12EE                   i2l1492 1596  
                 i2l1476 1684                   i2l1468 164E                   i2l1660 13D4  
                 i2l1652 1390                   i2l1636 12F2                   i2l1644 134A  
                 i2l1628 12BA                   i2l1494 159E                   i2l1662 13E6  
                 i2l1654 1394                   i2l1646 135E                   i2l1638 1318  
                 i2l1496 15A6                   i2l1656 13BA                   i2l1648 1366  
                 i2l1680 1750                   i2l1672 172E                   i2l1498 15B4  
                 i2l1658 13C2                   i2l1674 173C                   i2l1676 174A  
                 i2l1678 174C                   _OSCCON 000FD3           __CFG_XINST$OFF 000000  
           vfprintf@cfmt 001F             ?_timer0_init 0001                ??___lwmod 0005  
                 clear_0 1710                   clear_1 171C                   _printf 1758  
       __end_of_pin_init 17AC         __end_of_osc_init 17C0                   fputc@c 000A  
           __pdataCOMRAM 003D             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   putch@c 0001  
       __end_of_vfprintf 164A               __accesstop 0060  __end_of__initialization 1722  
          _readButtonRB0 164A            _readButtonRA5 169A            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_myISR 1758            __end_of_fputc 1584  
          __end_of_putch 17CC          __CFG_OSC$INTIO7 000000                  ??_myISR 000A  
                ??_fputc 000E                  ??_putch 000A               __pbssBANK0 0060  
         ?_readButtonRB0 0001           ?_readButtonRA5 0001    __size_of_handleButton 013E  
       ??_interrupt_init 000A                  ?_printf 0021       __size_of_vfpfcnvrt 00F6  
                i2u60_40 15CA                  i2u60_41 15C6                  i2u54_40 16B8  
                i2u54_41 16B4                  _OSCTUNE 000F9B                  i2u55_40 16C8  
                i2u55_41 16C4                  i2u56_40 1668                  i2u56_41 1664  
                i2u57_40 1678                  i2u57_41 1674                  i2u58_40 1596  
                i2u90_40 13E6                  i2u58_41 1592                  i2u90_41 13E2  
                i2u59_40 15B4                  i2u83_40 12E6                  i2u91_40 173C  
                i2u59_41 15B0                  i2u83_41 12E2                  i2u91_41 1738  
                i2u84_40 1318                  i2u92_40 174A                  i2u84_41 1314  
                i2u92_41 1746                  i2u85_40 1342                  i2u85_41 133E  
                i2u86_40 135E                  i2u86_41 135A                  i2u87_40 1390  
                i2u87_41 138C                  i2u88_40 13BA                  i2u88_41 13B6  
                i2u89_40 13D4                  i2u89_41 13D0             _handleButton 12BA  
              ?_pin_init 0001                  __Hparam 0000                ?_osc_init 0001  
                __Lparam 0000                  ___lwmod 1584                ?_vfprintf 0019  
           __psmallconst 1000                  __pcinit 16EA                  __ramtop 1000  
   __size_of_timer0_init 000A                  __ptext0 177E                  __ptext1 17AC  
                __ptext2 179A                  __ptext3 17B6                  __ptext4 17C0  
                __ptext5 1016                  __ptext6 1758                  __ptext7 15E8  
                __ptext8 13F8                  __ptext9 14EE          __size_of_printf 0026  
           __size_of_FSM 02A4           __pintcode_body 172C     end_of_initialization 1722  
        ??_readButtonRB0 0003          ??_readButtonRA5 0003                  fputc@fp 000C  
                int_func 172C               ??_pin_init 000A               ??_osc_init 000A  
      __end_of_vfpfcnvrt 14EE                  postdec1 000FE5                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
             ??_vfprintf 001F     handleButton@checkRB0 0008     handleButton@checkRA5 0006  
              _PORTAbits 000F80                _PORTBbits 000F81                _TRISAbits 000F92  
              _TRISBbits 000F93              vfpfcnvrt@ap 0017              vfpfcnvrt@fp 0013  
          __pidataCOMRAM 17C6             _firstReadRB0 003E             _firstReadRA5 0040  
          _secondReadRB0 003D            _secondReadRA5 003F           __end_of_printf 177E  
    start_initialization 16EA              __end_of_FSM 12BA              vfprintf@fmt 001B  
               ??_printf 0023              __pbssCOMRAM 0029                _decrease1 0036  
              _decrease2 0035                __pintcode 0008        __size_of_pin_init 0012  
      __size_of_osc_init 000A                 ?___lwmod 0001        __size_of_vfprintf 0062  
            __smallconst 1000                _increase1 0038                _increase2 0037  
              _buttonRB0 0039                _buttonRA5 003A           __size_of_myISR 1750  
         __size_of_fputc 0096           __size_of_putch 0002            ??_timer0_init 000A  
              _vfpfcnvrt 13F8  __size_of_interrupt_init 0006                copy_data0 16FE  
  __end_of_readButtonRB0 169A    __end_of_readButtonRA5 16EA                 __Hrparam 0000  
             vfprintf@ap 001D                 __Lrparam 0000               vfprintf@fp 0019  
             ?_vfpfcnvrt 0013         __size_of___lwmod 0064      __end_of_timer0_init 17B6  
               __ptext10 17CA                 __ptext12 12BA                 __ptext13 164A  
               __ptext14 169A                 __ptext15 1584                 _ledValue 003B  
               _countRB0 0031                 _countRA5 0033            __size_of_main 001C  
               _pin_init 179A                 _osc_init 17B6                 int$flags 0041  
               _vfprintf 15E8                printf@fmt 0021               _INTCONbits 000FF2  
               intlevel2 0000            ?_handleButton 0001         ___lwmod@dividend 0001  
               printf@ap 0025              _timer0_init 17AC              ??_vfpfcnvrt 0019  
        ___lwmod@divisor 0003           _interrupt_init 17C0          ___lwmod@counter 0005  
         ??_handleButton 0006  
